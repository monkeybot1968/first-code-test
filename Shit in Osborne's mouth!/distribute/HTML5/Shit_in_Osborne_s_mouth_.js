
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = 'C:\Users\pc\AppData\Local\Temp\glbasic\Shit_in_Osborne_s_mouth_.data';
    var REMOTE_PACKAGE_NAME = (Module['filePackagePrefixURL'] || '') + 'Shit_in_Osborne_s_mouth_.data';
    var REMOTE_PACKAGE_SIZE = 469799;
    var PACKAGE_UUID = 'aa158027-f271-4579-9fc5-b015b3439a0e';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'Media', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 3893, 0, 0).open('GET', '/Media/eye.png');
    new DataRequest(3893, 370658, 0, 0).open('GET', '/Media/face.png');
    new DataRequest(370658, 395476, 0, 0).open('GET', '/Media/font 32x32 .png');
    new DataRequest(395476, 417730, 0, 0).open('GET', '/Media/small mouth.png');
    new DataRequest(417730, 469799, 0, 0).open('GET', '/Media/turd.png');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/Media/eye.png"].onload();
          DataRequest.prototype.requests["/Media/face.png"].onload();
          DataRequest.prototype.requests["/Media/font 32x32 .png"].onload();
          DataRequest.prototype.requests["/Media/small mouth.png"].onload();
          DataRequest.prototype.requests["/Media/turd.png"].onload();
          Module['removeRunDependency']('datafile_C:\Users\pc\AppData\Local\Temp\glbasic\Shit_in_Osborne_s_mouth_.data');

    };
    Module['addRunDependency']('datafile_C:\Users\pc\AppData\Local\Temp\glbasic\Shit_in_Osborne_s_mouth_.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 67376;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 67416;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(71603);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a206() } }, { func: function() { __GLOBAL__I_a373() } }, { func: function() { __GLOBAL__I_a639() } }, { func: function() { __GLOBAL__I_a751() } }, { func: function() { __GLOBAL__I_a855() } });


/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,111,110,116,32,51,50,120,51,50,32,46,112,110,103,0,0,0,0,0,0,0,0,0,115,101,108,102,46,112,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,105,114,61,0,0,0,0,120,61,0,0,0,0,0,0,109,105,110,47,109,97,120,32,32,0,0,0,0,0,0,0,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,97,105,110,76,111,111,112,0,0,0,0,0,0,0,0,1,0,0,0,136,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,2,0,0,1,0,0,0,0,0,0,0,78,49,49,95,95,71,76,66,65,83,73,67,95,95,53,116,83,104,105,116,69,0,0,0,56,7,1,0,184,2,0,0,0,0,0,0,8,3,0,0,2,0,0,0,0,0,0,0,78,49,49,95,95,71,76,66,65,83,73,67,95,95,57,116,80,111,108,121,67,104,97,114,69,0,0,0,0,0,0,0,56,7,1,0,232,2,0,0,91,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,98,111,117,110,100,115,58,32,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,97,99,99,101,115,115,58,32,0,0,0,0,0,0,0,0,0,0,0,0,112,3,0,0,3,0,0,0,0,0,0,0,78,49,49,95,95,71,76,66,65,83,73,67,95,95,52,116,86,101,99,69,0,0,0,0,56,7,1,0,88,3,0,0,0,0,0,0,160,3,0,0,4,0,0,0,0,0,0,0,78,49,49,95,95,71,76,66,65,83,73,67,95,95,53,116,71,97,109,101,69,0,0,0,56,7,1,0,136,3,0,0,0,0,0,0,208,3,0,0,5,0,0,0,0,0,0,0,78,49,49,95,95,71,76,66,65,83,73,67,95,95,52,116,71,117,110,69,0,0,0,0,56,7,1,0,184,3,0,0,77,101,100,105,97,0,0,0,102,111,110,116,32,51,50,120,51,50,32,46,112,110,103,0,102,97,99,101,46,112,110,103,0,0,0,0,0,0,0,0,115,109,97,108,108,32,109,111,117,116,104,46,112,110,103,0,101,121,101,46,112,110,103,0,116,117,114,100,46,112,110,103,0,0,0,0,0,0,0,0,77,97,105,110,76,111,111,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,99,111,114,101,32,0,0,103,117,110,32,0,0,0,0,32,0,0,0,0,0,0,0,108,105,118,101,32,115,104,105,116,115,32,0,0,0,0,0,71,117,110,32,0,0,0,0,70,114,97,109,101,32,84,105,109,101,32,0,0,0,0,0,65,118,103,32,32,0,0,0,109,111,117,116,104,32,116,97,114,103,101,116,115,32,0,0,83,104,105,116,95,105,110,95,79,115,98,111,114,110,101,95,115,95,109,111,117,116,104,95,0,0,0,0,0,0,0,0,99,21,116,38,114,36,108,30,116,38,101,23,115,37,116,38,64,85,104,26,111,33,116,38,109,31,97,19,105,27,108,30,46,67,99,21,111,33,109,31,0,0,0,0,0,0,0,0,192,4,0,0,0,0,0,0,54,54,10,55,55,12,48,53,3,99,50,51,99,57,58,51,98,51,102,99,4,56,49,7,50,56,8,52,57,11,57,51,10,56,54,12,54,54,10,50,99,51,98,50,50,97,56,55,101,102,6,52,101,55,50,54,6,51,98,51,57,51,10,52,51,5,48,97,47,100,97,99,0,0,0,0,0,0,0,0,248,4,0,0,0,0,0,0,91,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,98,111,117,110,100,115,58,32,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,97,99,99,101,115,115,58,32,0,0,0,0,0,0,0,0,0,0,0,0,184,5,0,0,6,0,0,0,0,0,0,0,78,49,49,95,95,71,76,66,65,83,73,67,95,95,56,116,77,105,115,115,105,108,101,69,0,0,0,0,0,0,0,0,56,7,1,0,152,5,0,0,0,0,0,0,232,5,0,0,7,0,0,0,0,0,0,0,78,49,49,95,95,71,76,66,65,83,73,67,95,95,52,116,69,121,101,69,0,0,0,0,56,7,1,0,208,5,0,0,0,0,0,0,24,6,0,0,8,0,0,0,0,0,0,0,78,49,49,95,95,71,76,66,65,83,73,67,95,95,55,116,84,97,114,103,101,116,69,0,56,7,1,0,0,6,0,0,0,0,0,0,72,6,0,0,9,0,0,0,0,0,0,0,78,49,49,95,95,71,76,66,65,83,73,67,95,95,53,116,67,117,110,116,69,0,0,0,56,7,1,0,48,6,0,0,32,102,97,105,108,101,100,0,32,115,117,99,99,101,101,100,101,100,0,0,0,0,0,0,91,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,98,111,117,110,100,115,58,32,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,97,99,99,101,115,115,58,32,0,0,0,0,0,0,0,0,37,45,35,46,42,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,69,67,76,65,82,69,32,109,111,100,117,108,101,32,110,111,116,32,102,111,117,110,100,58,32,0,0,0,0,0,0,68,69,67,76,65,82,69,32,101,110,116,114,121,32,110,111,116,32,102,111,117,110,100,58,32,0,0,0,0,0,0,0,67,97,110,39,116,32,102,105,110,100,32,34,37,115,34,32,105,110,32,37,115,10,0,0,100,80,126,80,46,51,43,214,223,0,0,0,0,0,0,0,83,67,79,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,69,84,67,85,82,82,69,78,84,68,73,82,58,0,0,71,76,66,95,79,78,95,81,85,73,84,0,0,0,0,0,71,76,66,95,87,73,78,51,50,95,77,83,71,0,0,0,67,65,76,76,66,89,78,65,77,69,32,34,0,0,0,0,34,32,42,42,42,32,102,97,105,108,101,100,32,42,42,42,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,109,115,99,45,108,111,111,112,58,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,37,37,100,100,0,0,0,37,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,76,66,95,79,78,95,76,79,79,80,0,0,0,0,0,0,0,128,191,0,0,0,0,0,0,128,191,0,0,0,0,0,0,128,191,0,0,0,0,0,0,128,191,0,0,0,0,109,101,109,58,47,47,0,0,114,101,113,117,101,115,116,58,32,102,111,112,101,110,95,99,97,115,101,40,34,37,115,34,44,32,34,37,115,34,41,32,111,112,101,110,115,32,34,37,115,34,58,32,37,115,10,0,102,97,105,108,101,100,0,0,119,114,116,45,114,101,113,117,101,115,116,58,32,102,111,112,101,110,40,34,37,115,34,44,32,34,37,115,34,41,32,102,97,105,108,101,100,10,10,0,114,101,113,117,101,115,116,58,32,102,111,112,101,110,40,34,37,115,34,44,32,34,37,115,34,41,32,102,97,105,108,101,100,10,0,0,0,0,0,0,114,98,0,0,0,0,0,0,46,47,0,0,0,0,0,0,119,98,0,0,0,0,0,0,99,97,110,39,116,32,119,114,105,116,101,32,116,111,32,102,105,108,101,58,32,37,115,10,0,0,0,0,0,0,0,0,37,100,0,0,0,0,0,0,115,98,120,95,95,0,0,0,109,101,109,58,47,47,37,56,120,46,37,56,108,120,0,0,47,116,109,112,47,0,0,0,68,101,108,97,121,32,108,111,97,100,32,68,76,76,115,0,115,107,105,112,112,105,110,103,32,108,111,111,112,32,102,114,97,109,101,32,45,32,116,111,111,32,115,108,111,119,0,0,255,255,255,255,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([71,76,66,95,79,78,95,81,85,73,84,0,0,0,0,0,67,97,110,39,116,32,105,110,105,116,32,83,68,76,46,10,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,101,120,101,112,97,116,104,61,99,117,114,100,105,114,61,32,37,115,10,0,0,0,0,0,83,99,104,111,111,108,32,76,105,99,101,110,115,101,0,0,119,119,119,46,71,76,66,97,115,105,99,46,99,111,109,0,77,101,100,105,97,47,115,109,97,108,102,111,110,116,46,112,110,103,0,0,0,0,0,0,77,101,100,105,97,47,115,109,97,108,102,111,110,116,46,98,109,112,0,0,0,0,0,0,115,109,97,108,102,111,110,116,46,112,110,103,0,0,0,0,115,109,97,108,102,111,110,116,46,98,109,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,191,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,100,10,0,0,0,0,0,71,76,66,32,69,114,114,111,114,58,32,37,120,10,0,0,47,112,114,111,99,47,37,100,47,101,120,101,0,0,0,0,46,47,0,0,0,0,0,0,83,104,117,116,32,100,111,119,110,32,71,76,66,0,0,0,103,108,98,32,105,115,32,115,104,117,116,32,100,111,119,110,0,0,0,0,0,0,0,0,116,105,109,101,114,0,0,0,114,98,111,119,0,0,0,0,114,98,111,119,32,105,110,105,116,0,0,0,0,0,0,0,67,112,116,110,0,0,0,0,78,101,116,119,111,114,107,0,73,110,112,117,116,0,0,0,87,105,110,100,111,119,32,109,111,100,101,0,0,0,0,0,67,114,101,97,116,101,32,68,88,105,110,0,0,0,0,0,115,100,108,95,103,114,97,98,0,0,0,0,0,0,0,0,101,120,105,116,0,0,0,0,69,120,105,116,32,119,105,116,104,32,42,40,105,110,116,42,41,48,61,48,32,45,32,115,111,114,114,121,0,0,0,0,45,69,110,100,32,79,110,32,76,105,110,101,0,0,0,0,112,97,117,115,101,32,108,111,111,112,32,105,110,32,115,104,111,119,115,99,114,101,101,110,47,104,105,98,101,114,110,97,116,101,0,0,0,0,0,0,112,97,117,115,101,32,108,111,111,112,32,101,110,100,101,100,0,0,0,0,0,0,0,0,101,110,100,32,115,105,110,99,101,32,87,105,110,77,83,71,40,41,61,61,48,0,0,0,103,101,116,101,120,101,0,0,99,100,0,0,0,0,0,0,115,104,111,101,98,111,120,105,110,103,46,46,46,0,0,0,105,110,105,116,32,103,101,116,116,105,109,101,114,0,0,0,99,108,101,97,114,32,115,99,114,101,101,110,0,0,0,0,102,108,105,112,0,0,0,0,109,107,50,68,0,0,0,0,102,105,110,100,105,110,103,32,102,111,110,116,46,46,46,0,73,110,105,116,32,70,105,110,97,108,105,122,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,101,110,32,115,111,117,110,100,58,32,37,100,32,72,122,32,37,100,32,99,104,97,110,44,32,98,117,102,102,101,114,115,32,37,100,44,32,102,111,114,109,97,116,32,37,100,10,0,0,0,0,0,0,0,67,97,110,39,116,32,105,110,105,116,32,97,117,100,105,111,0,0,0,0,0,0,0,0,0,0,0,0,24,23,0,0,10,0,0,0,0,0,0,0,49,48,77,101,115,104,79,98,106,101,99,116,0,0,0,0,56,7,1,0,8,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,41,0,0,11,0,0,0,12], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+5064);
/* memory initializer */ allocate([37,115,103,108,98,116,120,115,37,120,46,98,105,110,0,0,83,68,76,95,71,101,116,86,105,100,101,111,73,110,102,111,32,61,32,37,100,120,37,100,32,64,32,37,100,32,98,112,112,46,32,83,99,114,101,101,110,32,37,100,120,37,100,10,0,0,0,0,0,0,0,0,82,101,113,117,101,115,116,32,83,68,76,95,79,80,69,78,71,76,32,61,32,37,100,10,0,0,0,0,0,0,0,0,115,101,116,32,117,112,32,83,68,76,32,102,111,114,32,79,112,101,110,71,76,32,109,111,100,101,32,82,71,66,65,61,37,100,44,37,100,44,37,100,44,37,100,59,32,68,101,112,116,104,61,50,52,44,32,83,116,101,110,99,105,108,61,56,44,32,68,111,117,98,108,101,66,117,102,102,101,114,61,49,10,0,0,0,0,0,0,0,109,117,108,116,105,115,97,109,112,108,101,115,32,120,37,100,10,0,0,0,0,0,0,0,83,101,116,116,105,110,103,32,118,105,100,101,111,32,109,111,100,101,58,32,37,100,120,37,100,120,37,100,32,118,105,100,102,108,97,103,115,61,48,120,37,120,10,0,0,0,0,0,83,101,116,86,105,100,101,111,77,111,100,101,32,102,97,105,108,101,100,58,32,37,115,10,0,0,0,0,0,0,0,0,67,111,117,108,100,110,39,116,32,115,101,116,32,71,76,32,109,111,100,101,58,32,37,115,10,0,0,0,0,0,0,0,83,68,76,95,83,101,116,86,105,100,101,111,77,111,100,101,32,115,101,101,109,115,32,116,111,32,98,101,32,37,100,10,0,0,0,0,0,0,0,0,83,99,114,101,101,110,32,66,80,80,58,32,37,100,10,0,86,101,110,100,111,114,32,32,32,32,32,58,32,37,115,10,0,0,0,0,0,0,0,0,82,101,110,100,101,114,101,114,32,32,32,58,32,37,115,10,0,0,0,0,0,0,0,0,86,101,114,115,105,111,110,32,32,32,32,58,32,37,115,10,0,0,0,0,0,0,0,0,69,120,116,101,110,115,105,111,110,115,32,58,32,37,115,10,0,0,0,0,0,0,0,0,87,71,76,95,69,88,84,95,115,119,97,112,95,99,111,110,116,114,111,108,0,0,0,0,119,103,108,83,119,97,112,73,110,116,101,114,118,97,108,69,88,84,0,0,0,0,0,0,71,76,95,65,82,66,95,109,117,108,116,105,116,101,120,116,117,114,101,0,0,0,0,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,65,82,66,0,0,0,0,0,0,103,108,77,117,108,116,105,84,101,120,67,111,111,114,100,50,102,65,82,66,0,0,0,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,65,82,66,0,0,0,0,0,0,0,0,103,108,71,101,110,66,117,102,102,101,114,115,65,82,66,0,103,108,66,105,110,100,66,117,102,102,101,114,65,82,66,0,103,108,66,117,102,102,101,114,68,97,116,97,65,82,66,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,65,82,66,0,0,0,0,0,0,103,108,77,97,112,66,117,102,102,101,114,65,82,66,0,0,103,108,85,110,109,97,112,66,117,102,102,101,114,65,82,66,0,0,0,0,0,0,0,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,65,82,66,0,0,0,0,0,0,0,71,76,95,65,82,66,95,102,114,97,103,109,101,110,116,95,112,114,111,103,114,97,109,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,65,82,66,0,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,65,82,66,0,0,0,0,0,0,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,79,98,106,101,99,116,65,82,66,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,65,82,66,0,0,0,0,0,0,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,65,82,66,0,0,0,0,0,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,65,82,66,0,0,0,0,0,0,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,65,82,66,0,0,0,0,0,0,0,103,108,71,101,116,73,110,102,111,76,111,103,65,82,66,0,103,108,76,105,110,107,80,114,111,103,114,97,109,65,82,66,0,0,0,0,0,0,0,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,65,82,66,0,0,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,65,82,66,0,103,108,85,110,105,102,111,114,109,49,102,65,82,66,0,0,103,108,85,110,105,102,111,114,109,49,105,65,82,66,0,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,65,82,66,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,65,82,66,0,0,0,0,0,95,116,101,120,116,117,114,101,95,102,111,114,109,97,116,95,66,71,82,65,56,56,56,56,0,0,0,0,0,0,0,0,71,76,95,69,88,84,95,98,103,114,97,0,0,0,0,0,66,71,82,65,32,101,120,116,32,78,79,84,32,115,117,112,112,111,114,116,101,100,10,37,115,10,0,0,0,0,0,0,84,101,120,116,117,114,101,32,115,105,122,101,32,108,105,109,105,116,58,32,37,100,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,16,2,8,64,41,0,0,64,125,245,21,196,25,230,8,64,33,34,20,224,20,209,14,128,16,0,0,128,8,33,8,64,16,66,4,128,84,87,9,128,16,71,8,0,0,64,4,0,0,7,0,0,0,0,8,0,33,34,4,78,41,229,0,196,16,66,0,14,57,225,0,14,57,228,0,74,57,132,0,78,56,228,0,78,56,229,0,14,33,66,0,78,57,229,0,78,57,228,0,128,0,2,0,128,0,34,0,136,8,130,0,192,1,7,0,130,32,34,0,14,49,64,0,38,181,224,0,78,57,165,0,78,25,229,0,78,9,229,0,70,41,229,0,78,56,225,0,78,56,33,0,78,40,229,0,74,57,165,0,142,16,226,0,12,33,229,0,74,25,165,0,66,8,225,0,191,214,90,1,78,41,165,0,78,41,229,0,78,57,33,0,167,148,242,0,78,25,165,0,78,56,228,0,142,16,66,0,74,41,229,0,74,41,69,0,181,214,250,1,74,17,165,0,74,57,66,0,14,17,225,0,70,8,97,0,65,16,4,1,134,16,98,0,68,1,0,0,0,0,224,0,130,0,0,0,0,48,229,0,66,56,229,0,0,56,225,0,8,57,229,0,0,56,39,8,136,56,66,0,0,56,135,8,66,24,165,0,4,16,66,0,4,16,66,4,66,40,163,0,132,16,66,0,0,188,90,1,0,24,165,0,0,56,229,0,0,24,229,4,0,48,229,16,0,56,37,0,192,9,228,0,132,56,194,0,0,40,197,0,0,40,69,0,0,212,234,0,0,40,162,0,0,40,135,28,192,33,225,0,136,24,130,0,132,16,66,0,130,48,34,0,0,168,2,0,63,198,24,63,74,80,69,71,58,32,67,104,97,110,110,101,108,115,58,32,37,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,33,10,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,72,209,56,68,196,51,63,182,47,59,169,44,54,155,40,49,141,36,44,128,32,39,114,28,34,100,24,30,87,20,24,73,16,20,59,12,15,46,8,10,32,4,6,18,0,1,5,63,77,223,61,74,213,56,69,198,52,64,184,48,59,169,44,53,154,39,48,139,35,43,124,31,38,109,27,33,95,22,27,80,18,22,65,14,17,50,9,12,35,5,7,20,2,3,7,63,77,215,68,80,201,97,106,199,95,103,189,96,103,178,88,95,164,85,91,153,82,87,143,79,83,133,76,80,123,73,76,112,73,75,105,70,72,95,65,67,83,44,45,56,13,13,17,60,73,209,60,72,201,201,202,219,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,253,253,253,89,89,96,1,1,6,57,70,202,57,70,202,102,110,196,253,253,253,253,253,253,254,254,254,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,194,194,197,6,7,20,1,1,6,55,68,195,55,68,195,55,68,193,190,193,223,188,194,214,21,66,196,14,63,206,12,61,204,12,61,204,12,61,204,17,66,210,67,96,182,242,242,242,56,58,72,5,7,20,1,1,6,53,65,187,53,65,187,53,65,187,84,92,184,247,247,248,77,107,197,0,57,224,0,57,224,0,57,224,0,57,224,1,55,212,182,190,212,148,148,156,10,12,36,5,7,20,1,1,6,51,63,180,51,63,180,51,63,180,50,62,179,160,164,207,224,227,234,171,182,214,162,173,202,162,173,206,165,176,208,185,192,216,234,235,235,33,36,61,9,12,35,5,7,20,1,1,6,49,60,172,49,60,172,49,60,172,49,60,172,59,69,170,225,226,235,165,204,196,59,207,176,55,211,178,73,204,176,240,241,241,134,136,151,14,17,50,9,12,35,5,7,20,1,1,6,47,57,165,47,57,165,47,57,165,47,57,165,46,56,164,106,111,164,236,239,238,25,222,181,0,253,200,116,211,191,227,227,230,32,36,74,14,17,50,9,12,35,5,7,20,1,1,6,45,55,158,45,55,158,45,55,158,45,55,158,45,55,158,43,52,148,184,185,198,184,223,214,121,206,188,242,242,242,110,112,139,18,22,65,14,17,50,9,12,35,5,7,20,1,1,6,42,52,150,42,52,150,42,52,150,42,52,150,42,52,150,42,51,149,76,82,145,249,249,250,254,254,254,201,202,212,24,29,80,18,22,65,14,17,50,9,12,35,5,7,20,1,1,6,40,50,143,40,50,143,40,50,143,40,50,143,40,50,143,40,50,143,39,48,138,161,163,188,244,244,244,68,73,116,22,27,80,18,22,65,14,17,50,9,12,35,5,7,20,1,1,6,38,47,135,38,47,135,38,47,135,38,47,135,38,47,135,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,14,17,50,9,12,35,5,7,20,1,1,6,36,44,128,36,44,128,36,44,128,36,44,128,36,44,128,255,255,255,36,44,128,36,44,124,36,42,110,27,33,95,22,27,80,255,255,255,14,17,50,9,12,35,5,7,20,1,1,6,34,41,121,34,41,121,34,41,121,34,41,121,34,41,121,255,255,255,40,50,143,34,41,120,31,38,109,27,33,95,40,50,143,255,255,255,14,17,50,9,12,35,5,7,20,1,1,6,32,39,113,32,39,113,32,39,113,32,39,113,32,39,113,40,50,143,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,40,50,143,14,17,50,9,12,35,5,7,20,1,1,6,30,37,106,30,37,106,30,37,106,30,37,106,30,37,106,30,37,106,30,37,106,30,37,106,29,36,105,27,33,95,22,27,80,18,22,65,14,17,50,9,12,35,5,7,20,1,1,6,28,34,98,28,34,98,28,34,98,28,34,98,28,34,98,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,14,17,50,9,12,35,5,7,20,1,1,6,25,31,91,25,31,91,25,31,91,25,31,91,25,31,91,255,255,255,25,31,91,25,31,91,255,255,255,25,30,90,22,27,80,255,255,255,14,17,50,9,12,35,5,7,20,1,1,6,23,29,84,23,29,84,23,29,84,23,29,84,23,29,84,255,255,255,23,29,84,23,29,84,23,29,84,23,29,83,22,27,79,255,255,255,14,17,50,9,12,35,5,7,20,1,1,6,21,26,76,21,26,76,21,26,76,21,26,76,21,26,76,21,26,76,21,26,76,21,26,76,21,26,76,21,26,76,21,25,75,18,22,65,14,17,50,9,12,35,5,7,20,1,1,6,19,24,69,19,24,69,19,24,69,19,24,69,19,24,69,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,14,17,50,9,12,35,5,7,20,1,1,6,17,21,61,17,21,61,17,21,61,17,21,61,17,21,61,255,255,255,17,21,61,17,21,61,17,21,61,17,21,61,17,21,61,16,20,60,14,17,50,9,12,35,5,7,20,1,1,6,15,18,54,15,18,54,15,18,54,15,18,54,15,18,54,255,255,255,255,255,255,255,255,255,255,255,255,15,18,54,15,18,54,15,18,54,13,16,49,9,12,35,5,7,20,1,1,6,13,16,46,13,16,46,13,16,46,13,16,46,13,16,46,255,255,255,13,16,46,13,16,46,13,16,46,13,16,46,13,16,46,13,16,46,12,15,45,9,12,35,5,7,20,1,1,6,10,13,39,10,13,39,10,13,39,10,13,39,10,13,39,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,10,13,39,9,11,34,5,7,20,1,1,6,8,11,32,8,11,32,8,11,32,8,11,32,8,11,32,8,11,32,8,11,32,8,11,32,8,11,32,8,11,32,8,11,32,8,11,32,8,11,32,8,10,31,5,7,20,1,1,6,6,8,24,6,8,24,6,8,24,6,8,24,6,8,24,96,96,96,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,96,96,6,8,24,6,8,24,5,6,20,1,1,6,4,5,17,4,5,17,4,5,17,4,5,17,4,5,17,255,255,255,96,96,96,4,5,17,4,5,17,4,5,17,96,96,96,255,255,255,4,5,17,4,5,17,3,4,16,1,1,6,2,3,9,2,3,9,2,3,9,2,3,9,2,3,9,255,255,255,96,96,96,2,3,9,2,3,9,2,3,9,96,96,96,255,255,255,2,3,9,2,3,9,2,3,9,0,1,5,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,96,96,96,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,96,96,96,0,0,2,0,0,2,0,0,2,0,0,1,0,0,0,0,0,0,0,0,49,52,79,112,101,110,71,76,82,97,105,110,98,111,119,115,0,0,0,0,0,0,0,0,56,7,1,0,128,41,0,0,0,0,128,191,0,0,0,0,0,0,128,191,0,0,0,0,0,0,128,191,0,0,0,0,0,0,128,191,0,0,0,0,101,120,116,58,32,37,45,51,53,115,32,32,32,91,70,65,73,76,69,68,93,0,0,0,47,116,109,112,47,0,0,0,83,68,76,95,81,85,73,84,32,101,118,101,110,116,0,0,83,68,76,95,105,110,105,116,32,118,105,100,101,111,0,0,83,68,76,32,49,46,50,32,109,111,100,101,0,0,0,0,82,101,113,117,101,115,116,32,100,111,117,98,108,101,32,98,117,102,102,101,114,0,0,0,115,101,116,32,117,112,32,83,68,76,32,102,111,114,32,79,112,101,110,71,76,32,109,111,100,101,0,0,0,0,0,0,32,45,87,101,98,71,76,32,109,111,100,101,58,32,51,50,32,98,105,116,115,44,32,83,68,76,95,79,80,69,78,71,76,61,33,48,120,48,52,48,48,48,48,48,48,33,0,0,73,78,73,84,58,32,85,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,66,80,80,32,45,62,32,116,114,121,105,110,103,32,49,54,46,0,0,0,0,0,0,0,0,73,78,73,84,58,32,85,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,118,105,100,101,111,32,115,117,114,102,97,99,101,32,116,104,97,116,32,115,117,112,112,111,114,116,115,32,114,101,113,117,101,115,116,101,100,32,100,101,116,97,105,108,115,59,32,116,114,121,105,110,103,32,83,68,76,95,65,78,89,70,79,82,77,65,84,46,0,0,0,0,0,84,101,115,116,105,110,103,32,103,108,67,111,109,109,97,110,100,115,0,0,0,0,0,0,79,112,101,110,71,76,32,105,115,32,114,101,97,100,121,32,102,111,114,32,117,115,101,0,115,107,105,112,112,105,110,103,32,115,105,122,101,32,116,101,115,116,115,0,0,0,0,0,103,101,116,32,97,99,99,117,114,97,116,101,32,116,105,109,101,114,32,45,32,49,115,116,32,99,97,108,108,0,0,0,102,108,105,112,32,45,32,49,115,116,32,99,97,108,108,0,105,110,105,116,32,102,98,111,0,0,0,0,0,0,0,0,50,68,32,86,80,0,0,0,79,71,82,66,32,105,110,105,116,32,91,79,75,93,0,0,66,71,82,65,32,101,120,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,73,78,73,84,58,32,85,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,118,105,100,101,111,32,115,117,114,102,97,99,101,32,116,104,97,116,32,115,117,112,112,111,114,116,115,32,70,83,65,65,59,32,116,114,121,105,110,103,32,119,105,116,104,111,117,116,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,44,0,0,13,0,0,0,14,0,0,0,0,0,0,0,88,44,0,0,15,0,0,0,0,0,0,0,49,49,77,101,115,104,79,98,106,101,99,116,88,0,0,0,96,7,1,0,72,44,0,0,24,23,0,0,0,0,0,0,49,48,82,97,105,110,98,111,119,115,51,68,0,0,0,0,56,7,1,0,104,44,0,0,166,11,49,209,172,181,223,152,219,114,253,47,183,223,26,208,237,175,225,184,150,126,38,106,69,144,124,186,153,127,44,241,71,153,161,36,247,108,145,179,226,242,1,8,22,252,142,133,216,32,105,99,105,78,87,113,163,254,88,164,126,61,147,244,143,116,149,13,88,182,142,114,88,205,139,113,238,74,21,130,29,164,84,123,181,89,90,194,57,213,48,156,19,96,242,42,35,176,209,197,240,133,96,40,24,121,65,202,239,56,219,184,176,220,121,142,14,24,58,96,139,14,158,108,62,138,30,176,193,119,21,215,39,75,49,189,218,47,175,120,96,92,96,85,243,37,85,230,148,171,85,170,98,152,72,87,64,20,232,99,106,57,202,85,182,16,171,42,52,92,204,180,206,232,65,17,175,134,84,161,147,233,114,124,17,20,238,179,42,188,111,99,93,197,169,43,246,49,24,116,22,62,92,206,30,147,135,155,51,186,214,175,92,207,36,108,129,83,50,122,119,134,149,40,152,72,143,59,175,185,75,107,27,232,191,196,147,33,40,102,204,9,216,97,145,169,33,251,96,172,124,72,50,128,236,93,93,93,132,239,177,117,133,233,2,35,38,220,136,27,101,235,129,62,137,35,197,172,150,211,243,111,109,15,57,66,244,131,130,68,11,46,4,32,132,164,74,240,200,105,94,155,31,158,66,104,198,33,154,108,233,246,97,156,12,103,240,136,211,171,210,160,81,106,104,47,84,216,40,167,15,150,163,51,81,171,108,11,239,110,228,59,122,19,80,240,59,186,152,42,251,126,29,101,241,161,118,1,175,57,62,89,202,102,136,14,67,130,25,134,238,140,180,159,111,69,195,165,132,125,190,94,139,59,216,117,111,224,115,32,193,133,159,68,26,64,166,106,193,86,98,170,211,78,6,119,63,54,114,223,254,27,61,2,155,66,36,215,208,55,72,18,10,208,211,234,15,219,155,192,241,73,201,114,83,7,123,27,153,128,216,121,212,37,247,222,232,246,26,80,254,227,59,76,121,182,189,224,108,151,186,6,192,4,182,79,169,193,196,96,159,64,194,158,92,94,99,36,106,25,175,111,251,104,181,83,108,62,235,178,57,19,111,236,82,59,31,81,252,109,44,149,48,155,68,69,129,204,9,189,94,175,4,208,227,190,253,74,51,222,7,40,15,102,179,75,46,25,87,168,203,192,15,116,200,69,57,95,11,210,219,251,211,185,189,192,121,85,10,50,96,26,198,0,161,214,121,114,44,64,254,37,159,103,204,163,31,251,248,233,165,142,248,34,50,219,223,22,117,60,21,107,97,253,200,30,80,47,171,82,5,173,250,181,61,50,96,135,35,253,72,123,49,83,130,223,0,62,187,87,92,158,160,140,111,202,46,86,135,26,219,105,23,223,246,168,66,213,195,255,126,40,198,50,103,172,115,85,79,140,176,39,91,105,200,88,202,187,93,163,255,225,160,17,240,184,152,61,250,16,184,131,33,253,108,181,252,74,91,211,209,45,121,228,83,154,101,69,248,182,188,73,142,210,144,151,251,75,218,242,221,225,51,126,203,164,65,19,251,98,232,198,228,206,218,202,32,239,1,76,119,54,254,158,126,208,180,31,241,43,77,218,219,149,152,145,144,174,113,142,173,234,160,213,147,107,208,209,142,208,224,37,199,175,47,91,60,142,183,148,117,142,251,226,246,143,100,43,18,242,18,184,136,136,28,240,13,144,160,94,173,79,28,195,143,104,145,241,207,209,173,193,168,179,24,34,47,47,119,23,14,190,254,45,117,234,161,31,2,139,15,204,160,229,232,116,111,181,214,243,172,24,153,226,137,206,224,79,168,180,183,224,19,253,129,59,196,124,217,168,173,210,102,162,95,22,5,119,149,128,20,115,204,147,119,20,26,33,101,32,173,230,134,250,181,119,245,66,84,199,207,53,157,251,12,175,205,235,160,137,62,123,211,27,65,214,73,126,30,174,45,14,37,0,94,179,113,32,187,0,104,34,175,224,184,87,155,54,100,36,30,185,9,240,29,145,99,85,170,166,223,89,137,67,193,120,127,83,90,217,162,91,125,32,197,185,229,2,118,3,38,131,169,207,149,98,104,25,200,17,65,74,115,78,202,45,71,179,74,169,20,123,82,0,81,27,21,41,83,154,63,87,15,214,228,198,155,188,118,164,96,43,0,116,230,129,181,111,186,8,31,233,27,87,107,236,150,242,21,217,13,42,33,101,99,182,182,249,185,231,46,5,52,255,100,86,133,197,93,45,176,83,161,143,159,169,153,71,186,8,106,7,133,110,233,112,122,75,68,41,179,181,46,9,117,219,35,38,25,196,176,166,110,173,125,223,167,73,184,96,238,156,102,178,237,143,113,140,170,236,255,23,154,105,108,82,100,86,225,158,177,194,165,2,54,25,41,76,9,117,64,19,89,160,62,58,24,228,154,152,84,63,101,157,66,91,214,228,143,107,214,63,247,153,7,156,210,161,245,48,232,239,230,56,45,77,193,93,37,240,134,32,221,76,38,235,112,132,198,233,130,99,94,204,30,2,63,107,104,9,201,239,186,62,20,24,151,60,161,112,106,107,132,53,127,104,134,226,160,82,5,83,156,183,55,7,80,170,28,132,7,62,92,174,222,127,236,68,125,142,184,242,22,87,55,218,58,176,13,12,80,240,4,31,28,240,255,179,0,2,26,245,12,174,178,116,181,60,88,122,131,37,189,33,9,220,249,19,145,209,246,47,169,124,115,71,50,148,1,71,245,34,129,229,229,58,220,218,194,55,52,118,181,200,167,221,243,154,70,97,68,169,14,3,208,15,62,199,200,236,65,30,117,164,153,205,56,226,47,14,234,59,161,187,128,50,49,179,62,24,56,139,84,78,8,185,109,79,3,13,66,111,191,4,10,246,144,18,184,44,121,124,151,36,114,176,121,86,175,137,175,188,31,119,154,222,16,8,147,217,18,174,139,179,46,63,207,220,31,114,18,85,36,113,107,46,230,221,26,80,135,205,132,159,24,71,88,122,23,218,8,116,188,154,159,188,140,125,75,233,58,236,122,236,250,29,133,219,102,67,9,99,210,195,100,196,71,24,28,239,8,217,21,50,55,59,67,221,22,186,194,36,67,77,161,18,81,196,101,42,2,0,148,80,221,228,58,19,158,248,223,113,85,78,49,16,214,119,172,129,155,25,17,95,241,86,53,4,107,199,163,215,59,24,17,60,9,165,36,89,237,230,143,242,250,251,241,151,44,191,186,158,110,60,21,30,112,69,227,134,177,111,233,234,10,94,14,134,179,42,62,90,28,231,31,119,250,6,61,78,185,220,101,41,15,29,231,153,214,137,62,128,37,200,102,82,120,201,76,46,106,179,16,156,186,14,21,198,120,234,226,148,83,60,252,165,244,45,10,30,167,78,247,242,61,43,29,54,15,38,57,25,96,121,194,25,8,167,35,82,182,18,19,247,110,254,173,235,102,31,195,234,149,69,188,227,131,200,123,166,209,55,127,177,40,255,140,1,239,221,50,195,165,90,108,190,133,33,88,101,2,152,171,104,15,165,206,238,59,149,47,219,173,125,239,42,132,47,110,91,40,182,33,21,112,97,7,41,117,71,221,236,16,21,159,97,48,168,204,19,150,189,97,235,30,254,52,3,207,99,3,170,144,92,115,181,57,162,112,76,11,158,158,213,20,222,170,203,188,134,204,238,167,44,98,96,171,92,171,156,110,132,243,178,175,30,139,100,202,240,189,25,185,105,35,160,80,187,90,101,50,90,104,64,179,180,42,60,213,233,158,49,247,184,33,192,25,11,84,155,153,160,95,135,126,153,247,149,168,125,61,98,154,136,55,248,119,45,227,151,95,147,237,17,129,18,104,22,41,136,53,14,214,31,230,199,161,223,222,150,153,186,88,120,165,132,245,87,99,114,34,27,255,195,131,155,150,70,194,26,235,10,179,205,84,48,46,83,228,72,217,143,40,49,188,109,239,242,235,88,234,255,198,52,97,237,40,254,115,60,124,238,217,20,74,93,227,183,100,232,20,93,16,66,224,19,62,32,182,226,238,69,234,171,170,163,21,79,108,219,208,79,203,250,66,244,66,199,181,187,106,239,29,59,79,101,5,33,205,65,158,121,30,216,199,77,133,134,106,71,75,228,80,98,129,61,242,161,98,207,70,38,141,91,160,131,136,252,163,182,199,193,195,36,21,127,146,116,203,105,11,138,132,71,133,178,146,86,0,191,91,9,157,72,25,173,116,177,98,20,0,14,130,35,42,141,66,88,234,245,85,12,62,244,173,29,97,112,63,35,146,240,114,51,65,126,147,141,241,236,95,214,219,59,34,108,89,55,222,124,96,116,238,203,167,242,133,64,110,50,119,206,132,128,7,166,158,80,248,25,85,216,239,232,53,151,217,97,170,167,105,169,194,6,12,197,252,171,4,90,220,202,11,128,46,122,68,158,132,52,69,195,5,103,213,253,201,158,30,14,211,219,115,219,205,136,85,16,121,218,95,103,64,67,103,227,101,52,196,197,216,56,62,113,158,248,40,61,32,255,109,241,231,33,62,21,74,61,176,143,43,159,227,230,247,173,131,219,104,90,61,233,247,64,129,148,28,38,76,246,52,41,105,148,247,32,21,65,247,212,2,118,46,107,244,188,104,0,162,212,113,36,8,212,106,244,32,51,183,212,183,67,175,97,0,80,46,246,57,30,70,69,36,151,116,79,33,20,64,136,139,191,29,252,149,77,175,145,181,150,211,221,244,112,69,47,160,102,236,9,188,191,133,151,189,3,208,109,172,127,4,133,203,49,179,39,235,150,65,57,253,85,230,71,37,218,154,10,202,171,37,120,80,40,244,41,4,83,218,134,44,10,251,109,182,233,98,20,220,104,0,105,72,215,164,192,14,104,238,141,161,39,162,254,63,79,140,173,135,232,6,224,140,181,182,214,244,122,124,30,206,170,236,95,55,211,153,163,120,206,66,42,107,64,53,158,254,32,185,133,243,217,171,215,57,238,139,78,18,59,247,250,201,29,86,24,109,75,49,102,163,38,178,151,227,234,116,250,110,58,50,67,91,221,247,231,65,104,251,32,120,202,78,245,10,251,151,179,254,216,172,86,64,69,39,149,72,186,58,58,83,85,135,141,131,32,183,169,107,254,75,149,150,208,188,103,168,85,88,154,21,161,99,41,169,204,51,219,225,153,86,74,42,166,249,37,49,63,28,126,244,94,124,49,41,144,2,232,248,253,112,47,39,4,92,21,187,128,227,44,40,5,72,21,193,149,34,109,198,228,63,19,193,72,220,134,15,199,238,201,249,7,15,31,4,65,164,121,71,64,23,110,136,93,235,81,95,50,209,192,155,213,143,193,188,242,100,53,17,65,52,120,123,37,96,156,42,96,163,232,248,223,27,108,99,31,194,180,18,14,158,50,225,2,209,79,102,175,21,129,209,202,224,149,35,107,225,146,62,51,98,11,36,59,34,185,190,238,14,162,178,133,153,13,186,230,140,12,114,222,40,247,162,45,69,120,18,208,253,148,183,149,98,8,125,100,240,245,204,231,111,163,73,84,250,72,125,135,39,253,157,195,30,141,62,243,65,99,71,10,116,255,46,153,171,110,111,58,55,253,248,244,96,220,18,168,248,221,235,161,76,225,27,153,13,107,110,219,16,85,123,198,55,44,103,109,59,212,101,39,4,232,208,220,199,13,41,241,163,255,0,204,146,15,57,181,11,237,15,105,251,159,123,102,156,125,219,206,11,207,145,160,163,94,21,217,136,47,19,187,36,173,91,81,191,121,148,123,235,214,59,118,179,46,57,55,121,89,17,204,151,226,38,128,45,49,46,244,167,173,66,104,59,43,106,198,204,76,117,18,28,241,46,120,55,66,18,106,231,81,146,183,230,187,161,6,80,99,251,75,24,16,107,26,250,237,202,17,216,189,37,61,201,195,225,226,89,22,66,68,134,19,18,10,110,236,12,217,42,234,171,213,78,103,175,100,95,168,134,218,136,233,191,190,254,195,228,100,87,128,188,157,134,192,247,240,248,123,120,96,77,96,3,96,70,131,253,209,176,31,56,246,4,174,69,119,204,252,54,215,51,107,66,131,113,171,30,240,135,65,128,176,95,94,0,60,190,87,160,119,36,174,232,189,153,66,70,85,97,46,88,191,143,244,88,78,162,253,221,242,56,239,116,244,194,189,137,135,195,249,102,83,116,142,179,200,85,242,117,180,185,217,252,70,97,38,235,122,132,223,29,139,121,14,106,132,226,149,95,145,142,89,110,70,112,87,180,32,145,85,213,140,76,222,2,201,225,172,11,185,208,5,130,187,72,98,168,17,158,169,116,117,182,25,127,183,9,220,169,224,161,9,45,102,51,70,50,196,2,31,90,232,140,190,240,9,37,160,153,74,16,254,110,29,29,61,185,26,223,164,165,11,15,242,134,161,105,241,104,40,131,218,183,220,254,6,57,87,155,206,226,161,82,127,205,79,1,94,17,80,250,131,6,167,196,181,2,160,39,208,230,13,39,140,248,154,65,134,63,119,6,76,96,195,181,6,168,97,40,122,23,240,224,134,245,192,170,88,96,0,98,125,220,48,215,158,230,17,99,234,56,35,148,221,194,83,52,22,194,194,86,238,203,187,222,182,188,144,161,125,252,235,118,29,89,206,9,228,5,111,136,1,124,75,61,10,114,57,36,124,146,124,95,114,227,134,185,157,77,114,180,91,193,26,252,184,158,211,120,85,84,237,181,165,252,8,211,124,61,216,196,15,173,77,94,239,80,30,248,230,97,177,217,20,133,162,60,19,81,108,231,199,213,111,196,78,225,86,206,191,42,54,55,200,198,221,52,50,154,215,18,130,99,146,142,250,14,103,224,0,96,64,55,206,57,58,207,245,250,211,55,119,194,171,27,45,197,90,158,103,176,92,66,55,163,79,64,39,130,211,190,155,188,153,157,142,17,213,21,115,15,191,126,28,45,214,123,196,0,199,107,27,140,183,69,144,161,33,190,177,110,178,180,110,54,106,47,171,72,87,121,110,148,188,210,118,163,198,200,194,73,101,238,248,15,83,125,222,141,70,29,10,115,213,198,77,208,76,219,187,57,41,80,70,186,169,232,38,149,172,4,227,94,190,240,213,250,161,154,81,45,106,226,140,239,99,34,238,134,154,184,194,137,192,246,46,36,67,170,3,30,165,164,208,242,156,186,97,192,131,77,106,233,155,80,21,229,143,214,91,100,186,249,162,38,40,225,58,58,167,134,149,169,75,233,98,85,239,211,239,47,199,218,247,82,247,105,111,4,63,89,10,250,119,21,169,228,128,1,134,176,135,173,230,9,155,147,229,62,59,90,253,144,233,151,215,52,158,217,183,240,44,81,139,43,2,58,172,213,150,125,166,125,1,214,62,207,209,40,45,125,124,207,37,159,31,155,184,242,173,114,180,214,90,76,245,136,90,113,172,41,224,230,165,25,224,253,172,176,71,155,250,147,237,141,196,211,232,204,87,59,40,41,102,213,248,40,46,19,121,145,1,95,120,85,96,117,237,68,14,150,247,140,94,211,227,212,109,5,21,186,109,244,136,37,97,161,3,189,240,100,5,21,158,235,195,162,87,144,60,236,26,39,151,42,7,58,169,155,109,63,27,245,33,99,30,251,102,156,245,25,243,220,38,40,217,51,117,245,253,85,177,130,52,86,3,187,60,186,138,17,119,81,40,248,217,10,194,103,81,204,171,95,146,173,204,81,23,232,77,142,220,48,56,98,88,157,55,145,249,32,147,194,144,122,234,206,123,62,251,100,206,33,81,50,190,79,119,126,227,182,168,70,61,41,195,105,83,222,72,128,230,19,100,16,8,174,162,36,178,109,221,253,45,133,105,102,33,7,9,10,70,154,179,221,192,69,100,207,222,108,88,174,200,32,28,221,247,190,91,64,141,88,27,127,1,210,204,187,227,180,107,126,106,162,221,69,255,89,58,68,10,53,62,213,205,180,188,168,206,234,114,187,132,100,250,174,18,102,141,71,111,60,191,99,228,155,210,158,93,47,84,27,119,194,174,112,99,78,246,141,13,14,116,87,19,91,231,113,22,114,248,93,125,83,175,8,203,64,64,204,226,180,78,106,70,210,52,132,175,21,1,40,4,176,225,29,58,152,149,180,159,184,6,72,160,110,206,130,59,63,111,130,171,32,53,75,29,26,1,248,39,114,39,177,96,21,97,220,63,147,231,43,121,58,187,189,37,69,52,225,57,136,160,75,121,206,81,183,201,50,47,201,186,31,160,126,200,28,224,246,209,199,188,195,17,1,207,199,170,232,161,73,135,144,26,154,189,79,212,203,222,218,208,56,218,10,213,42,195,57,3,103,54,145,198,124,49,249,141,79,43,177,224,183,89,158,247,58,187,245,67,255,25,213,242,156,69,217,39,44,34,151,191,42,252,230,21,113,252,145,15,37,21,148,155,97,147,229,250,235,156,182,206,89,100,168,194,209,168,186,18,94,7,193,182,12,106,5,227,101,80,210,16,66,164,3,203,14,110,236,224,59,219,152,22,190,160,152,76,100,233,120,50,50,149,31,159,223,146,211,224,43,52,160,211,30,242,113,137,65,116,10,27,140,52,163,75,32,113,190,197,216,50,118,195,141,159,53,223,46,47,153,155,71,111,11,230,29,241,227,15,84,218,76,229,145,216,218,30,207,121,98,206,111,126,62,205,102,177,24,22,5,29,44,253,197,210,143,132,153,34,251,246,87,243,35,245,35,118,50,166,49,53,168,147,2,205,204,86,98,129,240,172,181,235,117,90,151,54,22,110,204,115,210,136,146,98,150,222,208,73,185,129,27,144,80,76,20,86,198,113,189,199,198,230,10,20,122,50,6,208,225,69,154,123,242,195,253,83,170,201,0,15,168,98,226,191,37,187,246,210,189,53,5,105,18,113,34,2,4,178,124,207,203,182,43,156,118,205,192,62,17,83,211,227,64,22,96,189,171,56,240,173,71,37,156,32,56,186,118,206,70,247,197,161,175,119,96,96,117,32,78,254,203,133,216,141,232,138,176,249,170,122,126,170,249,76,92,194,72,25,140,138,251,2,228,106,195,1,249,225,235,214,105,248,212,144,160,222,92,166,45,37,9,63,159,230,8,194,50,97,78,183,91,226,119,206,227,223,143,87,230,114,195,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,69,88,84,0,0,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,69,88,84,0,0,0,0,0,0,0,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,69,88,84,0,0,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,69,88,84,0,0,0,0,0,0,0,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,69,88,84,0,0,0,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,69,88,84,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,69,88,84,0,0,0,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,69,88,84,0,0,0,0,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,69,88,84,0,0,0,0,0,0,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,69,88,84,0,0,0,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,69,88,84,0,0,0,0,0,0,0,0,99,97,110,39,116,32,99,114,101,97,116,101,32,70,66,79,32,102,111,114,32,110,101,103,32,100,105,109,115,32,37,100,120,37,100,10,0,0,0,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,69,120,116,40,41,61,48,58,32,103,108,69,114,114,111,114,61,37,120,10,0,0,0,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,69,120,116,32,102,97,105,108,101,100,32,37,120,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,120,116,58,32,37,45,51,53,115,32,32,32,91,70,65,73,76,69,68,93,0,0,0,99,97,110,39,116,32,117,115,101,32,102,114,97,109,101,98,117,102,102,101,114,32,111,98,106,101,99,116,0,0,0,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,69,120,116,32,102,97,105,108,101,100,0,0,0,0,0,67,65,78,39,84,32,67,82,69,65,84,69,32,70,82,65,77,69,66,85,70,70,69,82,32,40,67,82,69,65,84,69,83,67,82,69,69,78,41,0,84,114,121,105,110,103,32,119,105,116,104,111,117,116,32,97,32,100,101,112,116,104,32,98,117,102,102,101,114,32,97,115,32,97,32,102,97,108,108,98,97,99,107,46,46,46,0,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,69,120,116,32,102,97,105,108,101,100,0,0,0,0,100,101,112,116,104,32,51,50,32,102,97,105,108,101,100,44,32,116,114,121,32,49,54,0,100,101,112,116,104,32,51,50,32,102,97,105,108,101,100,44,32,116,114,121,32,50,52,0,84,114,121,105,110,103,32,116,111,32,114,101,98,105,110,100,32,116,104,101,32,115,97,109,101,32,70,66,79,32,97,103,97,105,110,46,32,78,101,101,100,32,116,111,32,101,110,100,32,102,105,114,115,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+7264);
/* memory initializer */ allocate([114,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,46,52,46,51,0,0,0,70,105,108,101,32,37,115,32,104,97,115,32,98,105,116,32,100,101,112,116,104,32,37,100,46,10,0,0,0,0,0,0,70,105,108,101,32,37,115,32,104,97,115,32,117,110,115,117,112,112,111,114,116,101,100,32,99,111,108,111,114,32,116,121,112,101,46,10,0,0,0,0,84,121,112,101,115,32,71,82,65,89,44,32,82,71,66,32,97,110,100,32,82,71,66,95,65,76,80,72,65,32,97,114,101,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,79,110,108,121,32,98,105,116,32,100,101,112,116,104,32,111,102,32,56,32,105,115,32,115,117,112,112,111,114,116,101,100,46,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,0,0,0,255,255,255,255,253,255,255,255,249,255,255,255,241,255,255,255,225,255,255,255,193,255,255,255,129,255,255,255,1,255,255,255,1,254,255,255,1,252,255,255,1,248,255,255,1,240,255,255,1,224,255,255,1,192,255,255,1,128,255,255,66,111,103,117,115,32,109,101,115,115,97,103,101,32,99,111,100,101,32,37,100,0,0,0,83,111,114,114,121,44,32,116,104,101,114,101,32,97,114,101,32,108,101,103,97,108,32,114,101,115,116,114,105,99,116,105,111,110,115,32,111,110,32,97,114,105,116,104,109,101,116,105,99,32,99,111,100,105,110,103,0,0,0,0,0,0,0,0,65,76,73,71,78,95,84,89,80,69,32,105,115,32,119,114,111,110,103,44,32,112,108,101,97,115,101,32,102,105,120,0,77,65,88,95,65,76,76,79,67,95,67,72,85,78,75,32,105,115,32,119,114,111,110,103,44,32,112,108,101,97,115,101,32,102,105,120,0,0,0,0,66,111,103,117,115,32,98,117,102,102,101,114,32,99,111,110,116,114,111,108,32,109,111,100,101,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,109,112,111,110,101,110,116,32,73,68,32,37,100,32,105,110,32,83,79,83,0,0,68,67,84,32,99,111,101,102,102,105,99,105,101,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,73,68,67,84,32,111,117,116,112,117,116,32,98,108,111,99,107,32,115,105,122,101,32,37,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,66,111,103,117,115,32,72,117,102,102,109,97,110,32,116,97,98,108,101,32,100,101,102,105,110,105,116,105,111,110,0,0,66,111,103,117,115,32,105,110,112,117,116,32,99,111,108,111,114,115,112,97,99,101,0,0,66,111,103,117,115,32,74,80,69,71,32,99,111,108,111,114,115,112,97,99,101,0,0,0,66,111,103,117,115,32,109,97,114,107,101,114,32,108,101,110,103,116,104,0,0,0,0,0,87,114,111,110,103,32,74,80,69,71,32,108,105,98,114,97,114,121,32,118,101,114,115,105,111,110,58,32,108,105,98,114,97,114,121,32,105,115,32,37,100,44,32,99,97,108,108,101,114,32,101,120,112,101,99,116,115,32,37,100,0,0,0,0,83,97,109,112,108,105,110,103,32,102,97,99,116,111,114,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,105,110,116,101,114,108,101,97,118,101,100,32,115,99,97,110,0,73,110,118,97,108,105,100,32,109,101,109,111,114,121,32,112,111,111,108,32,99,111,100,101,32,37,100,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,74,80,69,71,32,100,97,116,97,32,112,114,101,99,105,115,105,111,110,32,37,100,0,0,0,0,0,0,73,110,118,97,108,105,100,32,112,114,111,103,114,101,115,115,105,118,101,32,112,97,114,97,109,101,116,101,114,115,32,83,115,61,37,100,32,83,101,61,37,100,32,65,104,61,37,100,32,65,108,61,37,100,0,0,73,110,118,97,108,105,100,32,112,114,111,103,114,101,115,115,105,118,101,32,112,97,114,97,109,101,116,101,114,115,32,97,116,32,115,99,97,110,32,115,99,114,105,112,116,32,101,110,116,114,121,32,37,100,0,0,66,111,103,117,115,32,115,97,109,112,108,105,110,103,32,102,97,99,116,111,114,115,0,0,73,110,118,97,108,105,100,32,115,99,97,110,32,115,99,114,105,112,116,32,97,116,32,101,110,116,114,121,32,37,100,0,73,109,112,114,111,112,101,114,32,99,97,108,108,32,116,111,32,74,80,69,71,32,108,105,98,114,97,114,121,32,105,110,32,115,116,97,116,101,32,37,100,0,0,0,0,0,0,0,74,80,69,71,32,112,97,114,97,109,101,116,101,114,32,115,116,114,117,99,116,32,109,105,115,109,97,116,99,104,58,32,108,105,98,114,97,114,121,32,116,104,105,110,107,115,32,115,105,122,101,32,105,115,32,37,117,44,32,99,97,108,108,101,114,32,101,120,112,101,99,116,115,32,37,117,0,0,0,0,66,111,103,117,115,32,118,105,114,116,117,97,108,32,97,114,114,97,121,32,97,99,99,101,115,115,0,0,0,0,0,0,66,117,102,102,101,114,32,112,97,115,115,101,100,32,116,111,32,74,80,69,71,32,108,105,98,114,97,114,121,32,105,115,32,116,111,111,32,115,109,97,108,108,0,0,0,0,0,0,83,117,115,112,101,110,115,105,111,110,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,0,0,0,0,0,67,67,73,82,54,48,49,32,115,97,109,112,108,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0,0,0,0,84,111,111,32,109,97,110,121,32,99,111,108,111,114,32,99,111,109,112,111,110,101,110,116,115,58,32,37,100,44,32,109,97,120,32,37,100,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,99,111,108,111,114,32,99,111,110,118,101,114,115,105,111,110,32,114,101,113,117,101,115,116,0,0,0,0,66,111,103,117,115,32,68,65,67,32,105,110,100,101,120,32,37,100,0,0,0,0,0,0,66,111,103,117,115,32,68,65,67,32,118,97,108,117,101,32,48,120,37,120,0,0,0,0,66,111,103,117,115,32,68,72,84,32,105,110,100,101,120,32,37,100,0,0,0,0,0,0,66,111,103,117,115,32,68,81,84,32,105,110,100,101,120,32,37,100,0,0,0,0,0,0,69,109,112,116,121,32,74,80,69,71,32,105,109,97,103,101,32,40,68,78,76,32,110,111,116,32,115,117,112,112,111,114,116,101,100,41,0,0,0,0,82,101,97,100,32,102,114,111,109,32,69,77,83,32,102,97,105,108,101,100,0,0,0,0,87,114,105,116,101,32,116,111,32,69,77,83,32,102,97,105,108,101,100,0,0,0,0,0,68,105,100,110,39,116,32,101,120,112,101,99,116,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,115,99,97,110,0,0,0,0,0,0,0,0,73,110,112,117,116,32,102,105,108,101,32,114,101,97,100,32,101,114,114,111,114,0,0,0,79,117,116,112,117,116,32,102,105,108,101,32,119,114,105,116,101,32,101,114,114,111,114,32,45,45,45,32,111,117,116,32,111,102,32,100,105,115,107,32,115,112,97,99,101,63,0,0,70,114,97,99,116,105,111,110,97,108,32,115,97,109,112,108,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0,72,117,102,102,109,97,110,32,99,111,100,101,32,115,105,122,101,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,72,117,102,102,109,97,110,32,99,111,100,101,32,116,97,98,108,101,32,101,110,116,114,121,0,0,0,0,0,0,0,0,77,97,120,105,109,117,109,32,115,117,112,112,111,114,116,101,100,32,105,109,97,103,101,32,100,105,109,101,110,115,105,111,110,32,105,115,32,37,117,32,112,105,120,101,108,115,0,0,69,109,112,116,121,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,0,0,0,80,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,67,97,110,110,111,116,32,116,114,97,110,115,99,111,100,101,32,100,117,101,32,116,111,32,109,117,108,116,105,112,108,101,32,117,115,101,32,111,102,32,113,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,32,37,100,0,0,0,83,99,97,110,32,115,99,114,105,112,116,32,100,111,101,115,32,110,111,116,32,116,114,97,110,115,109,105,116,32,97,108,108,32,100,97,116,97,0,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,113,117,97,110,116,105,122,97,116,105,111,110,32,109,111,100,101,32,99,104,97,110,103,101,0,0,78,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0,0,0,0,0,82,101,113,117,101,115,116,101,100,32,102,101,97,116,117,114,101,32,119,97,115,32,111,109,105,116,116,101,100,32,97,116,32,99,111,109,112,105,108,101,32,116,105,109,101,0,0,0,66,97,99,107,105,110,103,32,115,116,111,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,72,117,102,102,109,97,110,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,74,80,69,71,32,100,97,116,97,115,116,114,101,97,109,32,99,111,110,116,97,105,110,115,32,110,111,32,105,109,97,103,101,0,0,0,0,0,0,0,81,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,78,111,116,32,97,32,74,80,69,71,32,102,105,108,101,58,32,115,116,97,114,116,115,32,119,105,116,104,32,48,120,37,48,50,120,32,48,120,37,48,50,120,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,40,99,97,115,101,32,37,100,41,0,0,0,67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,111,108,111,114,32,99,111,109,112,111,110,101,110,116,115,0,0,0,67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,116,111,32,102,101,119,101,114,32,116,104,97,110,32,37,100,32,99,111,108,111,114,115,0,67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,116,111,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,111,108,111,114,115,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,116,119,111,32,83,79,70,32,109,97,114,107,101,114,115,0,0,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,109,105,115,115,105,110,103,32,83,79,83,32,109,97,114,107,101,114,0,85,110,115,117,112,112,111,114,116,101,100,32,74,80,69,71,32,112,114,111,99,101,115,115,58,32,83,79,70,32,116,121,112,101,32,48,120,37,48,50,120,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,116,119,111,32,83,79,73,32,109,97,114,107,101,114,115,0,0,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,83,79,83,32,98,101,102,111,114,101,32,83,79,70,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0,0,0,0,0,0,82,101,97,100,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,0,0,0,83,101,101,107,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,0,0,0,87,114,105,116,101,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,45,45,45,32,111,117,116,32,111,102,32,100,105,115,107,32,115,112,97,99,101,63,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,116,114,97,110,115,102,101,114,114,101,100,32,116,111,111,32,102,101,119,32,115,99,97,110,108,105,110,101,115,0,0,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,109,97,114,107,101,114,32,116,121,112,101,32,48,120,37,48,50,120,0,0,86,105,114,116,117,97,108,32,97,114,114,97,121,32,99,111,110,116,114,111,108,108,101,114,32,109,101,115,115,101,100,32,117,112,0,0,0,0,0,0,73,109,97,103,101,32,116,111,111,32,119,105,100,101,32,102,111,114,32,116,104,105,115,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,0,0,82,101,97,100,32,102,114,111,109,32,88,77,83,32,102,97,105,108,101,100,0,0,0,0,87,114,105,116,101,32,116,111,32,88,77,83,32,102,97,105,108,101,100,0,0,0,0,0,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,56,44,32,84,104,111,109,97,115,32,71,46,32,76,97,110,101,0,0,0,0,0,0,54,98,32,32,50,55,45,77,97,114,45,49,57,57,56,0,67,97,117,116,105,111,110,58,32,113,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,115,32,97,114,101,32,116,111,111,32,99,111,97,114,115,101,32,102,111,114,32,98,97,115,101,108,105,110,101,32,74,80,69,71,0,0,0,65,100,111,98,101,32,65,80,80,49,52,32,109,97,114,107,101,114,58,32,118,101,114,115,105,111,110,32,37,100,44,32,102,108,97,103,115,32,48,120,37,48,52,120,32,48,120,37,48,52,120,44,32,116,114,97,110,115,102,111,114,109,32,37,100,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,65,80,80,48,32,109,97,114,107,101,114,32,40,110,111,116,32,74,70,73,70,41,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,65,80,80,49,52,32,109,97,114,107,101,114,32,40,110,111,116,32,65,100,111,98,101,41,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,68,101,102,105,110,101,32,65,114,105,116,104,109,101,116,105,99,32,84,97,98,108,101,32,48,120,37,48,50,120,58,32,48,120,37,48,50,120,0,0,68,101,102,105,110,101,32,72,117,102,102,109,97,110,32,84,97,98,108,101,32,48,120,37,48,50,120,0,0,0,0,0,68,101,102,105,110,101,32,81,117,97,110,116,105,122,97,116,105,111,110,32,84,97,98,108,101,32,37,100,32,32,112,114,101,99,105,115,105,111,110,32,37,100,0,0,0,0,0,0,68,101,102,105,110,101,32,82,101,115,116,97,114,116,32,73,110,116,101,114,118,97,108,32,37,117,0,0,0,0,0,0,70,114,101,101,100,32,69,77,83,32,104,97,110,100,108,101,32,37,117,0,0,0,0,0,79,98,116,97,105,110,101,100,32,69,77,83,32,104,97,110,100,108,101,32,37,117,0,0,69,110,100,32,79,102,32,73,109,97,103,101,0,0,0,0,32,32,32,32,32,32,32,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,0,74,70,73,70,32,65,80,80,48,32,109,97,114,107,101,114,58,32,118,101,114,115,105,111,110,32,37,100,46,37,48,50,100,44,32,100,101,110,115,105,116,121,32,37,100,120,37,100,32,32,37,100,0,0,0,0,87,97,114,110,105,110,103,58,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,32,115,105,122,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,100,97,116,97,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,116,121,112,101,32,48,120,37,48,50,120,44,32,108,101,110,103,116,104,32,37,117,0,0,0,32,32,32,32,119,105,116,104,32,37,100,32,120,32,37,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0,0,0,0,0,0,0,0,77,105,115,99,101,108,108,97,110,101,111,117,115,32,109,97,114,107,101,114,32,48,120,37,48,50,120,44,32,108,101,110,103,116,104,32,37,117,0,0,85,110,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,32,48,120,37,48,50,120,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,0,81,117,97,110,116,105,122,105,110,103,32,116,111,32,37,100,32,61,32,37,100,42,37,100,42,37,100,32,99,111,108,111,114,115,0,0,0,0,0,0,81,117,97,110,116,105,122,105,110,103,32,116,111,32,37,100,32,99,111,108,111,114,115,0,83,101,108,101,99,116,101,100,32,37,100,32,99,111,108,111,114,115,32,102,111,114,32,113,117,97,110,116,105,122,97,116,105,111,110,0,0,0,0,0,65,116,32,109,97,114,107,101,114,32,48,120,37,48,50,120,44,32,114,101,99,111,118,101,114,121,32,97,99,116,105,111,110,32,37,100,0,0,0,0,82,83,84,37,100,0,0,0,83,109,111,111,116,104,105,110,103,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,110,111,110,115,116,97,110,100,97,114,100,32,115,97,109,112,108,105,110,103,32,114,97,116,105,111,115,0,0,0,0,0,0,0,0,83,116,97,114,116,32,79,102,32,70,114,97,109,101,32,48,120,37,48,50,120,58,32,119,105,100,116,104,61,37,117,44,32,104,101,105,103,104,116,61,37,117,44,32,99,111,109,112,111,110,101,110,116,115,61,37,100,0,0,0,0,0,0,0,32,32,32,32,67,111,109,112,111,110,101,110,116,32,37,100,58,32,37,100,104,120,37,100,118,32,113,61,37,100,0,0,83,116,97,114,116,32,111,102,32,73,109,97,103,101,0,0,83,116,97,114,116,32,79,102,32,83,99,97,110,58,32,37,100,32,99,111,109,112,111,110,101,110,116,115,0,0,0,0,32,32,32,32,67,111,109,112,111,110,101,110,116,32,37,100,58,32,100,99,61,37,100,32,97,99,61,37,100,0,0,0,32,32,83,115,61,37,100,44,32,83,101,61,37,100,44,32,65,104,61,37,100,44,32,65,108,61,37,100,0,0,0,0,67,108,111,115,101,100,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0,0,0,0,0,0,0,0,79,112,101,110,101,100,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0,0,0,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,74,80,69,71,45,99,111,109,112,114,101,115,115,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,112,97,108,101,116,116,101,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,82,71,66,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,99,111,109,112,111,110,101,110,116,32,73,68,115,32,37,100,32,37,100,32,37,100,44,32,97,115,115,117,109,105,110,103,32,89,67,98,67,114,0,0,0,0,0,70,114,101,101,100,32,88,77,83,32,104,97,110,100,108,101,32,37,117,0,0,0,0,0,79,98,116,97,105,110,101,100,32,88,77,83,32,104,97,110,100,108,101,32,37,117,0,0,85,110,107,110,111,119,110,32,65,100,111,98,101,32,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,32,99,111,100,101,32,37,100,0,0,0,73,110,99,111,110,115,105,115,116,101,110,116,32,112,114,111,103,114,101,115,115,105,111,110,32,115,101,113,117,101,110,99,101,32,102,111,114,32,99,111,109,112,111,110,101,110,116,32,37,100,32,99,111,101,102,102,105,99,105,101,110,116,32,37,100,0,0,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,37,117,32,101,120,116,114,97,110,101,111,117,115,32,98,121,116,101,115,32,98,101,102,111,114,101,32,109,97,114,107,101,114,32,48,120,37,48,50,120,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,112,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,100,97,116,97,32,115,101,103,109,101,110,116,0,0,0,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,98,97,100,32,72,117,102,102,109,97,110,32,99,111,100,101,0,0,0,0,0,87,97,114,110,105,110,103,58,32,117,110,107,110,111,119,110,32,74,70,73,70,32,114,101,118,105,115,105,111,110,32,110,117,109,98,101,114,32,37,100,46,37,48,50,100,0,0,0,80,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,74,80,69,71,32,102,105,108,101,0,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,102,111,117,110,100,32,109,97,114,107,101,114,32,48,120,37,48,50,120,32,105,110,115,116,101,97,100,32,111,102,32,82,83,84,37,100,0,73,110,118,97,108,105,100,32,83,79,83,32,112,97,114,97,109,101,116,101,114,115,32,102,111,114,32,115,101,113,117,101,110,116,105,97,108,32,74,80,69,71,0,0,0,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,116,114,97,110,115,102,101,114,114,101,100,32,116,111,111,32,109,97,110,121,32,115,99,97,110,108,105,110,101,115,0,0,0,0,0,0,72,161,0,0,96,161,0,0,160,161,0,0,192,161,0,0,232,161,0,0,8,162,0,0,40,162,0,0,72,162,0,0,112,162,0,0,144,162,0,0,168,162,0,0,192,162,0,0,216,162,0,0,24,163,0,0,72,163,0,0,104,163,0,0,144,163,0,0,200,163,0,0,0,164,0,0,24,164,0,0,56,164,0,0,104,164,0,0,184,164,0,0,216,164,0,0,8,165,0,0,40,165,0,0,80,165,0,0,120,165,0,0,160,165,0,0,184,165,0,0,208,165,0,0,232,165,0,0,0,166,0,0,40,166,0,0,64,166,0,0,88,166,0,0,128,166,0,0,152,166,0,0,200,166,0,0,240,166,0,0,24,167,0,0,64,167,0,0,112,167,0,0,136,167,0,0,168,167,0,0,232,167,0,0,16,168,0,0,56,168,0,0,80,168,0,0,128,168,0,0,160,168,0,0,200,168,0,0,240,168,0,0,32,169,0,0,80,169,0,0,112,169,0,0,160,169,0,0,200,169,0,0,240,169,0,0,32,170,0,0,80,170,0,0,128,170,0,0,176,170,0,0,224,170,0,0,8,171,0,0,40,171,0,0,72,171,0,0,128,171,0,0,176,171,0,0,208,171,0,0,248,171,0,0,32,172,0,0,56,172,0,0,80,172,0,0,120,172,0,0,136,172,0,0,200,172,0,0,16,173,0,0,64,173,0,0,112,173,0,0,152,173,0,0,184,173,0,0,232,173,0,0,8,174,0,0,32,174,0,0,56,174,0,0,72,174,0,0,112,174,0,0,168,174,0,0,232,174,0,0,24,175,0,0,64,175,0,0,104,175,0,0,136,175,0,0,176,175,0,0,216,175,0,0,240,175,0,0,24,176,0,0,64,176,0,0,72,176,0,0,136,176,0,0,200,176,0,0,232,176,0,0,248,176,0,0,24,177,0,0,56,177,0,0,88,177,0,0,120,177,0,0,152,177,0,0,224,177,0,0,32,178,0,0,88,178,0,0,144,178,0,0,168,178,0,0,192,178,0,0,232,178,0,0,48,179,0,0,112,179,0,0,168,179,0,0,208,179,0,0,0,180,0,0,32,180,0,0,88,180,0,0,136,180,0,0,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,74,80,69,71,77,69,77,0,37,108,100,37,99,0,0,0,64,6,0,0,128,62,0,0,0,0,0,0,136,19,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,192,48,240,12,204,60,252,3,195,51,243,15,207,63,255,128,64,176,112,140,76,188,124,131,67,179,115,143,79,191,127,32,224,16,208,44,236,28,220,35,227,19,211,47,239,31,223,160,96,144,80,172,108,156,92,163,99,147,83,175,111,159,95,8,200,56,248,4,196,52,244,11,203,59,251,7,199,55,247,136,72,184,120,132,68,180,116,139,75,187,123,135,71,183,119,40,232,24,216,36,228,20,212,43,235,27,219,39,231,23,215,168,104,152,88,164,100,148,84,171,107,155,91,167,103,151,87,2,194,50,242,14,206,62,254,1,193,49,241,13,205,61,253,130,66,178,114,142,78,190,126,129,65,177,113,141,77,189,125,34,226,18,210,46,238,30,222,33,225,17,209,45,237,29,221,162,98,146,82,174,110,158,94,161,97,145,81,173,109,157,93,10,202,58,250,6,198,54,246,9,201,57,249,5,197,53,245,138,74,186,122,134,70,182,118,137,73,185,121,133,69,181,117,42,234,26,218,38,230,22,214,41,233,25,217,37,229,21,213,170,106,154,90,166,102,150,86,169,105,153,89,165,101,149,85,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,5,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,40,0,0,0,48,0,0,0,41,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,13,0,0,0,6,0,0,0,7,0,0,0,14,0,0,0,21,0,0,0,28,0,0,0,35,0,0,0,42,0,0,0,49,0,0,0,56,0,0,0,57,0,0,0,50,0,0,0,43,0,0,0,36,0,0,0,29,0,0,0,22,0,0,0,15,0,0,0,23,0,0,0,30,0,0,0,37,0,0,0,44,0,0,0,51,0,0,0,58,0,0,0,59,0,0,0,52,0,0,0,45,0,0,0,38,0,0,0,31,0,0,0,39,0,0,0,46,0,0,0,53,0,0,0,60,0,0,0,61,0,0,0,54,0,0,0,47,0,0,0,55,0,0,0,62,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,80,111,116,101,110,116,105,97,108,32,111,118,101,114,102,108,111,119,32,105,110,32,112,110,103,95,122,97,108,108,111,99,40,41,0,0,0,0,0,0,49,46,52,46,51,0,0,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,115,101,116,32,110,101,103,97,116,105,118,101,32,99,104,114,111,109,97,116,105,99,105,116,121,32,118,97,108,117,101,0,0,0,0,0,73,110,118,97,108,105,100,32,99,72,82,77,32,119,104,105,116,101,32,112,111,105,110,116,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,72,82,77,32,114,101,100,32,112,111,105,110,116,0,0,73,110,118,97,108,105,100,32,99,72,82,77,32,103,114,101,101,110,32,112,111,105,110,116,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,72,82,77,32,98,108,117,101,32,112,111,105,110,116,0,73,103,110,111,114,105,110,103,32,97,116,116,101,109,112,116,32,116,111,32,115,101,116,32,99,72,82,77,32,82,71,66,32,116,114,105,97,110,103,108,101,32,119,105,116,104,32,122,101,114,111,32,97,114,101,97,0,0,0,0,0,0,0,0,73,109,97,103,101,32,119,105,100,116,104,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,0,0,0,0,73,109,97,103,101,32,104,101,105,103,104,116,32,105,115,32,122,101,114,111,32,105,110,32,73,72,68,82,0,0,0,0,73,109,97,103,101,32,119,105,100,116,104,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,0,73,109,97,103,101,32,104,101,105,103,104,116,32,101,120,99,101,101,100,115,32,117,115,101,114,32,108,105,109,105,116,32,105,110,32,73,72,68,82,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,119,105,100,116,104,32,105,110,32,73,72,68,82,0,0,0,0,0,73,110,118,97,108,105,100,32,105,109,97,103,101,32,104,101,105,103,104,116,32,105,110,32,73,72,68,82,0,0,0,0,87,105,100,116,104,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,108,105,98,112,110,103,32,116,111,32,112,114,111,99,101,115,115,32,112,105,120,101,108,115,0,73,110,118,97,108,105,100,32,98,105,116,32,100,101,112,116,104,32,105,110,32,73,72,68,82,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,32,105,110,32,73,72,68,82,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,116,121,112,101,47,98,105,116,32,100,101,112,116,104,32,99,111,109,98,105,110,97,116,105,111,110,32,105,110,32,73,72,68,82,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,0,0,0,77,78,71,32,102,101,97,116,117,114,101,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,80,78,71,32,100,97,116,97,115,116,114,101,97,109,0,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,73,110,118,97,108,105,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,32,105,110,32,73,72,68,82,0,0,0,73,110,118,97,108,105,100,32,73,72,68,82,32,100,97,116,97,0,0,0,0,0,0,0,108,105,98,112,110,103,32,119,97,114,110,105,110,103,58,32,37,115,0,0,0,0,0,0,108,105,98,112,110,103,32,101,114,114,111,114,58,32,37,115,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,79,117,116,32,111,102,32,77,101,109,111,114,121,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,119,97,115,32,99,111,109,112,105,108,101,100,32,119,105,116,104,32,112,110,103,46,104,32,102,114,111,109,32,108,105,98,112,110,103,45,37,46,50,48,115,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,32,105,115,32,32,114,117,110,110,105,110,103,32,119,105,116,104,32,112,110,103,46,99,32,102,114,111,109,32,108,105,98,112,110,103,45,37,46,50,48,115,0,0,0,73,110,99,111,109,112,97,116,105,98,108,101,32,108,105,98,112,110,103,32,118,101,114,115,105,111,110,32,105,110,32,97,112,112,108,105,99,97,116,105,111,110,32,97,110,100,32,108,105,98,114,97,114,121,0,0,49,46,50,46,49,0,0,0,122,108,105,98,32,109,101,109,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,122,108,105,98,32,118,101,114,115,105,111,110,32,101,114,114,111,114,0,0,0,0,0,0,85,110,107,110,111,119,110,32,122,108,105,98,32,101,114,114,111,114,0,0,0,0,0,0,78,111,116,32,97,32,80,78,71,32,102,105,108,101,0,0,80,78,71,32,102,105,108,101,32,99,111,114,114,117,112,116,101,100,32,98,121,32,65,83,67,73,73,32,99,111,110,118,101,114,115,105,111,110,0,0,73,72,68,82,0,0,0,0,73,68,65,84,0,0,0,0,73,69,78,68,0,0,0,0,80,76,84,69,0,0,0,0,98,75,71,68,0,0,0,0,99,72,82,77,0,0,0,0,103,65,77,65,0,0,0,0,104,73,83,84,0,0,0,0,105,67,67,80,0,0,0,0,105,84,88,116,0,0,0,0,111,70,70,115,0,0,0,0,112,67,65,76,0,0,0,0,112,72,89,115,0,0,0,0,115,66,73,84,0,0,0,0,115,67,65,76,0,0,0,0,115,80,76,84,0,0,0,0,115,82,71,66,0,0,0,0,116,69,88,116,0,0,0,0,116,73,77,69,0,0,0,0,116,82,78,83,0,0,0,0,122,84,88,116,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,73,68,65,84,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,73,68,65,84,0,0,0,0,0,0,0,0,73,103,110,111,114,105,110,103,32,101,120,116,114,97,32,112,110,103,95,114,101,97,100,95,117,112,100,97,116,101,95,105,110,102,111,40,41,32,99,97,108,108,59,32,114,111,119,32,98,117,102,102,101,114,32,110,111,116,32,114,101,97,108,108,111,99,97,116,101,100,0,0,73,68,65,84,0,0,0,0,255,0,0,0,15,0,0,0,255,0,0,0,51,0,0,0,255,0,0,0,85,0,0,0,255,0,0,0,0,0,0,0,128,0,0,0,8,0,0,0,136,0,0,0,34,0,0,0,170,0,0,0,85,0,0,0,255,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,97,116,116,101,109,112,116,32,116,111,32,114,101,97,100,32,114,111,119,32,100,97,116,97,0,0,0,0,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,105,109,97,103,101,32,100,97,116,97,0,0,0,69,120,116,114,97,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0,0,0,68,101,99,111,109,112,114,101,115,115,105,111,110,32,101,114,114,111,114,0,0,0,0,0,73,72,68,82,0,0,0,0,73,68,65,84,0,0,0,0,73,69,78,68,0,0,0,0,80,76,84,69,0,0,0,0,98,75,71,68,0,0,0,0,99,72,82,77,0,0,0,0,103,65,77,65,0,0,0,0,104,73,83,84,0,0,0,0,105,67,67,80,0,0,0,0,105,84,88,116,0,0,0,0,111,70,70,115,0,0,0,0,112,67,65,76,0,0,0,0,112,72,89,115,0,0,0,0,115,66,73,84,0,0,0,0,115,67,65,76,0,0,0,0,115,80,76,84,0,0,0,0,115,82,71,66,0,0,0,0,116,69,88,116,0,0,0,0,116,73,77,69,0,0,0,0,116,82,78,83,0,0,0,0,122,84,88,116,0,0,0,0,84,111,111,32,109,97,110,121,32,73,68,65,84,115,32,102,111,117,110,100,0,0,0,0,67,97,108,108,32,116,111,32,78,85,76,76,32,114,101,97,100,32,102,117,110,99,116,105,111,110,0,0,0,0,0,0,82,101,97,100,32,69,114,114,111,114,0,0,0,0,0,0,73,116,39,115,32,97,110,32,101,114,114,111,114,32,116,111,32,115,101,116,32,98,111,116,104,32,114,101,97,100,95,100,97,116,97,95,102,110,32,97,110,100,32,119,114,105,116,101,95,100,97,116,97,95,102,110,32,105,110,32,116,104,101,32,0,0,0,0,0,0,0,0,115,97,109,101,32,115,116,114,117,99,116,117,114,101,46,32,32,82,101,115,101,116,116,105,110,103,32,119,114,105,116,101,95,100,97,116,97,95,102,110,32,116,111,32,78,85,76,76,0,0,0,0,0,0,0,0,78,85,76,76,32,114,111,119,32,98,117,102,102,101,114,32,102,111,114,32,114,111,119,32,37,108,100,44,32,112,97,115,115,32,37,100,0,0,0,0,112,110,103,95,100,111,95,114,103,98,95,116,111,95,103,114,97,121,32,102,111,117,110,100,32,110,111,110,103,114,97,121,32,112,105,120,101,108,0,0,112,110,103,95,100,111,95,113,117,97,110,116,105,122,101,32,114,101,116,117,114,110,101,100,32,114,111,119,98,121,116,101,115,61,48,0,0,0,0,0,16,0,0,0,33,0,0,0,66,0,0,0,132,0,0,0,16,1,0,0,72,2,0,0,80,5,0,0,240,15,0,0,0,0,0,0,0,0,0,0,80,78,71,32,117,110,115,105,103,110,101,100,32,105,110,116,101,103,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,67,82,67,32,101,114,114,111,114,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,104,117,110,107,108,101,110,103,116,104,0,0,0,0,0,69,120,99,101,101,100,101,100,32,115,105,122,101,32,108,105,109,105,116,32,119,104,105,108,101,32,101,120,112,97,110,100,105,110,103,32,99,104,117,110,107,0,0,0,0,0,0,0,112,110,103,95,105,110,102,108,97,116,101,32,108,111,103,105,99,32,101,114,114,111,114,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,100,101,99,111,109,112,114,101,115,115,32,99,104,117,110,107,0,0,0,85,110,107,110,111,119,110,32,122,84,88,116,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,37,100,0,0,0,0,0,0,0,0,79,117,116,32,111,102,32,112,108,97,99,101,32,73,72,68,82,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,73,72,68,82,32,99,104,117,110,107,0,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,80,76,84,69,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,80,76,84,69,32,97,102,116,101,114,32,73,68,65,84,0,68,117,112,108,105,99,97,116,101,32,80,76,84,69,32,99,104,117,110,107,0,0,0,0,73,103,110,111,114,105,110,103,32,80,76,84,69,32,99,104,117,110,107,32,105,110,32,103,114,97,121,115,99,97,108,101,32,80,78,71,0,0,0,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,99,104,117,110,107,0,0,0,84,114,117,110,99,97,116,105,110,103,32,105,110,99,111,114,114,101,99,116,32,116,82,78,83,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,84,114,117,110,99,97,116,105,110,103,32,105,110,99,111,114,114,101,99,116,32,105,110,102,111,32,116,82,78,83,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,78,111,32,105,109,97,103,101,32,105,110,32,102,105,108,101,0,0,0,0,0,0,0,0,73,110,99,111,114,114,101,99,116,32,73,69,78,68,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,103,65,77,65,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,103,65,77,65,32,97,102,116,101,114,32,73,68,65,84,0,79,117,116,32,111,102,32,112,108,97,99,101,32,103,65,77,65,32,99,104,117,110,107,0,68,117,112,108,105,99,97,116,101,32,103,65,77,65,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,103,65,77,65,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,73,103,110,111,114,105,110,103,32,103,65,77,65,32,99,104,117,110,107,32,119,105,116,104,32,103,97,109,109,97,61,48,0,0,0,0,0,0,0,0,73,103,110,111,114,105,110,103,32,105,110,99,111,114,114,101,99,116,32,103,65,77,65,32,118,97,108,117,101,32,119,104,101,110,32,115,82,71,66,32,105,115,32,97,108,115,111,32,112,114,101,115,101,110,116,0,103,97,109,109,97,32,61,32,40,37,100,47,49,48,48,48,48,48,41,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,66,73,84,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,66,73,84,32,97,102,116,101,114,32,73,68,65,84,0,79,117,116,32,111,102,32,112,108,97,99,101,32,115,66,73,84,32,99,104,117,110,107,0,68,117,112,108,105,99,97,116,101,32,115,66,73,84,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,115,66,73,84,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,99,72,82,77,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,72,82,77,32,97,102,116,101,114,32,73,68,65,84,0,77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,99,72,82,77,0,0,0,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,99,72,82,77,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,99,72,82,77,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,73,103,110,111,114,105,110,103,32,105,110,99,111,114,114,101,99,116,32,99,72,82,77,32,118,97,108,117,101,32,119,104,101,110,32,115,82,71,66,32,105,115,32,97,108,115,111,32,112,114,101,115,101,110,116,0,119,120,61,37,102,44,32,119,121,61,37,102,44,32,114,120,61,37,102,44,32,114,121,61,37,102,10,0,0,0,0,0,103,120,61,37,102,44,32,103,121,61,37,102,44,32,98,120,61,37,102,44,32,98,121,61,37,102,10,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,82,71,66,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,82,71,66,32,97,102,116,101,114,32,73,68,65,84,0,79,117,116,32,111,102,32,112,108,97,99,101,32,115,82,71,66,32,99,104,117,110,107,0,68,117,112,108,105,99,97,116,101,32,115,82,71,66,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,115,82,71,66,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,85,110,107,110,111,119,110,32,115,82,71,66,32,105,110,116,101,110,116,0,0,0,0,0,105,110,99,111,114,114,101,99,116,32,103,97,109,109,97,61,40,37,100,47,49,48,48,48,48,48,41,10,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,105,67,67,80,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,105,67,67,80,32,97,102,116,101,114,32,73,68,65,84,0,79,117,116,32,111,102,32,112,108,97,99,101,32,105,67,67,80,32,99,104,117,110,107,0,68,117,112,108,105,99,97,116,101,32,105,67,67,80,32,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40944);
/* memory initializer */ allocate([104,117,110,107,0,0,0,0,77,97,108,102,111,114,109,101,100,32,105,67,67,80,32,99,104,117,110,107,0,0,0,0,73,103,110,111,114,105,110,103,32,110,111,110,122,101,114,111,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,105,110,32,105,67,67,80,32,99,104,117,110,107,0,80,114,111,102,105,108,101,32,115,105,122,101,32,102,105,101,108,100,32,109,105,115,115,105,110,103,32,102,114,111,109,32,105,67,67,80,32,99,104,117,110,107,0,0,0,0,0,0,73,103,110,111,114,105,110,103,32,116,114,117,110,99,97,116,101,100,32,105,67,67,80,32,112,114,111,102,105,108,101,0,100,101,99,108,97,114,101,100,32,112,114,111,102,105,108,101,32,115,105,122,101,32,61,32,37,108,117,0,0,0,0,0,97,99,116,117,97,108,32,112,114,111,102,105,108,101,32,108,101,110,103,116,104,32,61,32,37,108,117,0,0,0,0,0,78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,115,80,76,84,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,80,76,84,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,80,76,84,32,97,102,116,101,114,32,73,68,65,84,0,109,97,108,102,111,114,109,101,100,32,115,80,76,84,32,99,104,117,110,107,0,0,0,0,115,80,76,84,32,99,104,117,110,107,32,104,97,115,32,98,97,100,32,108,101,110,103,116,104,0,0,0,0,0,0,0,115,80,76,84,32,99,104,117,110,107,32,116,111,111,32,108,111,110,103,0,0,0,0,0,115,80,76,84,32,99,104,117,110,107,32,114,101,113,117,105,114,101,115,32,116,111,111,32,109,117,99,104,32,109,101,109,111,114,121,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,116,82,78,83,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0,68,117,112,108,105,99,97,116,101,32,116,82,78,83,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,116,82,78,83,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,116,82,78,83,0,0,0,0,0,0,0,0,90,101,114,111,32,108,101,110,103,116,104,32,116,82,78,83,32,99,104,117,110,107,0,0,116,82,78,83,32,99,104,117,110,107,32,110,111,116,32,97,108,108,111,119,101,100,32,119,105,116,104,32,97,108,112,104,97,32,99,104,97,110,110,101,108,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,98,75,71,68,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,98,75,71,68,32,97,102,116,101,114,32,73,68,65,84,0,77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,98,75,71,68,0,0,0,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,98,75,71,68,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,98,75,71,68,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,73,110,99,111,114,114,101,99,116,32,98,75,71,68,32,99,104,117,110,107,32,105,110,100,101,120,32,118,97,108,117,101,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,104,73,83,84,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,104,73,83,84,32,97,102,116,101,114,32,73,68,65,84,0,77,105,115,115,105,110,103,32,80,76,84,69,32,98,101,102,111,114,101,32,104,73,83,84,0,0,0,0,0,0,0,0,68,117,112,108,105,99,97,116,101,32,104,73,83,84,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,104,73,83,84,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,112,72,89,115,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,112,72,89,115,32,97,102,116,101,114,32,73,68,65,84,0,68,117,112,108,105,99,97,116,101,32,112,72,89,115,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,112,72,89,115,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,111,70,70,115,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,111,70,70,115,32,97,102,116,101,114,32,73,68,65,84,0,68,117,112,108,105,99,97,116,101,32,111,70,70,115,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,111,70,70,115,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,112,67,65,76,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,112,67,65,76,32,97,102,116,101,114,32,73,68,65,84,0,68,117,112,108,105,99,97,116,101,32,112,67,65,76,32,99,104,117,110,107,0,0,0,0,78,111,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,117,114,112,111,115,101,0,0,0,0,0,0,73,110,118,97,108,105,100,32,112,67,65,76,32,100,97,116,97,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,115,32,102,111,114,32,101,113,117,97,116,105,111,110,32,116,121,112,101,0,0,0,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,101,113,117,97,116,105,111,110,32,116,121,112,101,32,102,111,114,32,112,67,65,76,32,99,104,117,110,107,0,0,0,0,0,0,0,78,111,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,115,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,115,67,65,76,0,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,115,67,65,76,32,97,102,116,101,114,32,73,68,65,84,0,68,117,112,108,105,99,97,116,101,32,115,67,65,76,32,99,104,117,110,107,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,67,65,76,32,99,104,117,110,107,0,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,119,105,100,116,104,32,115,116,114,105,110,103,32,105,110,32,115,67,65,76,32,99,104,117,110,107,0,0,0,0,84,114,117,110,99,97,116,101,100,32,115,67,65,76,32,99,104,117,110,107,0,0,0,0,109,97,108,102,111,114,109,101,100,32,104,101,105,103,104,116,32,115,116,114,105,110,103,32,105,110,32,115,67,65,76,32,99,104,117,110,107,0,0,0,73,110,118,97,108,105,100,32,115,67,65,76,32,100,97,116,97,0,0,0,0,0,0,0,79,117,116,32,111,102,32,112,108,97,99,101,32,116,73,77,69,32,99,104,117,110,107,0,68,117,112,108,105,99,97,116,101,32,116,73,77,69,32,99,104,117,110,107,0,0,0,0,73,110,99,111,114,114,101,99,116,32,116,73,77,69,32,99,104,117,110,107,32,108,101,110,103,116,104,0,0,0,0,0,78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,116,69,88,116,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,116,69,88,116,0,0,0,0,0,0,0,0,78,111,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,116,101,120,116,32,99,104,117,110,107,0,0,0,0,0,0,0,78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,122,84,88,116,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,122,84,88,116,0,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,112,114,111,99,101,115,115,105,110,103,32,122,84,88,116,32,99,104,117,110,107,0,0,0,0,0,84,114,117,110,99,97,116,101,100,32,122,84,88,116,32,99,104,117,110,107,0,0,0,0,85,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,116,121,112,101,32,105,110,32,122,84,88,116,32,99,104,117,110,107,0,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,122,84,88,116,32,99,104,117,110,107,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,115,116,111,114,101,32,122,84,88,116,32,99,104,117,110,107,0,78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,105,84,88,116,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,73,72,68,82,32,98,101,102,111,114,101,32,105,84,88,116,0,0,0,0,0,0,0,0,78,111,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,84,88,116,32,99,104,117,110,107,0,84,114,117,110,99,97,116,101,100,32,105,84,88,116,32,99,104,117,110,107,0,0,0,0,77,97,108,102,111,114,109,101,100,32,105,84,88,116,32,99,104,117,110,107,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,84,88,116,32,99,104,117,110,107,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,115,116,111,114,101,32,105,84,88,116,32,99,104,117,110,107,0,78,111,32,115,112,97,99,101,32,105,110,32,99,104,117,110,107,32,99,97,99,104,101,32,102,111,114,32,117,110,107,110,111,119,110,32,99,104,117,110,107,0,0,0,0,0,0,0,73,68,65,84,0,0,0,0,117,110,107,110,111,119,110,32,99,114,105,116,105,99,97,108,32,99,104,117,110,107,0,0,101,114,114,111,114,32,105,110,32,117,115,101,114,32,99,104,117,110,107,0,0,0,0,0,105,110,118,97,108,105,100,32,99,104,117,110,107,32,116,121,112,101,0,0,0,0,0,0,73,103,110,111,114,105,110,103,32,98,97,100,32,97,100,97,112,116,105,118,101,32,102,105,108,116,101,114,32,116,121,112,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,73,68,65,84,0,0,0,0,78,111,116,32,101,110,111,117,103,104,32,105,109,97,103,101,32,100,97,116,97,0,0,0,69,120,116,114,97,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,0,0,0,68,101,99,111,109,112,114,101,115,115,105,111,110,32,69,114,114,111,114,0,0,0,0,0,69,120,116,114,97,32,99,111,109,112,114,101,115,115,105,111,110,32,100,97,116,97,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,82,111,119,32,104,97,115,32,116,111,111,32,109,97,110,121,32,98,121,116,101,115,32,116,111,32,97,108,108,111,99,97,116,101,32,105,110,32,109,101,109,111,114,121,0,0,0,0,66,117,102,102,101,114,32,101,114,114,111,114,32,105,110,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,115,116,114,101,97,109,32,105,110,32,37,115,32,99,104,117,110,107,0,0,0,0,0,0,0,68,97,116,97,32,101,114,114,111,114,32,105,110,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,115,116,114,101,97,109,32,105,110,32,37,115,32,99,104,117,110,107,0,73,110,99,111,109,112,108,101,116,101,32,99,111,109,112,114,101,115,115,101,100,32,100,97,116,97,115,116,114,101,97,109,32,105,110,32,37,115,32,99,104,117,110,107,0,0,0,0,76,105,109,105,116,105,110,103,32,103,97,109,109,97,32,116,111,32,50,49,52,55,52,46,56,51,0,0,0,0,0,0,83,101,116,116,105,110,103,32,103,97,109,109,97,61,48,0,83,101,116,116,105,110,103,32,110,101,103,97,116,105,118,101,32,103,97,109,109,97,32,116,111,32,122,101,114,111,0,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,115,105,122,101,44,32,104,73,83,84,32,97,108,108,111,99,97,116,105,111,110,32,115,107,105,112,112,101,100,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,104,73,83,84,32,99,104,117,110,107,32,100,97,116,97,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,117,114,112,111,115,101,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,117,110,105,116,115,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,115,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,102,111,114,32,112,67,65,76,32,112,97,114,97,109,101,116,101,114,0,0,73,110,118,97,108,105,100,32,112,97,108,101,116,116,101,32,108,101,110,103,116,104,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,67,67,80,32,99,104,117,110,107,0,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,116,111,32,112,114,111,99,101,115,115,32,105,67,67,80,32,112,114,111,102,105,108,101,0,0,0,0,0,116,82,78,83,32,99,104,117,110,107,32,104,97,115,32,111,117,116,45,111,102,45,114,97,110,103,101,32,115,97,109,112,108,101,115,32,102,111,114,32,98,105,116,95,100,101,112,116,104,0,0,0,0,0,0,0,78,111,32,109,101,109,111,114,121,32,102,111,114,32,115,80,76,84,32,112,97,108,101,116,116,101,115,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,115,80,76,84,32,99,104,117,110,107,0,0,0,0,0,0,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,119,104,105,108,101,32,112,114,111,99,101,115,115,105,110,103,32,117,110,107,110,111,119,110,32,99,104,117,110,107,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255,0,64,128,192,16,80,144,208,32,96,160,224,48,112,176,240,4,68,132,196,20,84,148,212,36,100,164,228,52,116,180,244,8,72,136,200,24,88,152,216,40,104,168,232,56,120,184,248,12,76,140,204,28,92,156,220,44,108,172,236,60,124,188,252,1,65,129,193,17,81,145,209,33,97,161,225,49,113,177,241,5,69,133,197,21,85,149,213,37,101,165,229,53,117,181,245,9,73,137,201,25,89,153,217,41,105,169,233,57,121,185,249,13,77,141,205,29,93,157,221,45,109,173,237,61,125,189,253,2,66,130,194,18,82,146,210,34,98,162,226,50,114,178,242,6,70,134,198,22,86,150,214,38,102,166,230,54,118,182,246,10,74,138,202,26,90,154,218,42,106,170,234,58,122,186,250,14,78,142,206,30,94,158,222,46,110,174,238,62,126,190,254,3,67,131,195,19,83,147,211,35,99,163,227,51,115,179,243,7,71,135,199,23,87,151,215,39,103,167,231,55,119,183,247,11,75,139,203,27,91,155,219,43,107,171,235,59,123,187,251,15,79,143,207,31,95,159,223,47,111,175,239,63,127,191,255,0,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240,1,17,33,49,65,81,97,113,129,145,161,177,193,209,225,241,2,18,34,50,66,82,98,114,130,146,162,178,194,210,226,242,3,19,35,51,67,83,99,115,131,147,163,179,195,211,227,243,4,20,36,52,68,84,100,116,132,148,164,180,196,212,228,244,5,21,37,53,69,85,101,117,133,149,165,181,197,213,229,245,6,22,38,54,70,86,102,118,134,150,166,182,198,214,230,246,7,23,39,55,71,87,103,119,135,151,167,183,199,215,231,247,8,24,40,56,72,88,104,120,136,152,168,184,200,216,232,248,9,25,41,57,73,89,105,121,137,153,169,185,201,217,233,249,10,26,42,58,74,90,106,122,138,154,170,186,202,218,234,250,11,27,43,59,75,91,107,123,139,155,171,187,203,219,235,251,12,28,44,60,76,92,108,124,140,156,172,188,204,220,236,252,13,29,45,61,77,93,109,125,141,157,173,189,205,221,237,253,14,30,46,62,78,94,110,126,142,158,174,190,206,222,238,254,15,31,47,63,79,95,111,127,143,159,175,191,207,223,239,255,0,0,0,0,150,48,7,119,44,97,14,238,186,81,9,153,25,196,109,7,143,244,106,112,53,165,99,233,163,149,100,158,50,136,219,14,164,184,220,121,30,233,213,224,136,217,210,151,43,76,182,9,189,124,177,126,7,45,184,231,145,29,191,144,100,16,183,29,242,32,176,106,72,113,185,243,222,65,190,132,125,212,218,26,235,228,221,109,81,181,212,244,199,133,211,131,86,152,108,19,192,168,107,100,122,249,98,253,236,201,101,138,79,92,1,20,217,108,6,99,99,61,15,250,245,13,8,141,200,32,110,59,94,16,105,76,228,65,96,213,114,113,103,162,209,228,3,60,71,212,4,75,253,133,13,210,107,181,10,165,250,168,181,53,108,152,178,66,214,201,187,219,64,249,188,172,227,108,216,50,117,92,223,69,207,13,214,220,89,61,209,171,172,48,217,38,58,0,222,81,128,81,215,200,22,97,208,191,181,244,180,33,35,196,179,86,153,149,186,207,15,165,189,184,158,184,2,40,8,136,5,95,178,217,12,198,36,233,11,177,135,124,111,47,17,76,104,88,171,29,97,193,61,45,102,182,144,65,220,118,6,113,219,1,188,32,210,152,42,16,213,239,137,133,177,113,31,181,182,6,165,228,191,159,51,212,184,232,162,201,7,120,52,249,0,15,142,168,9,150,24,152,14,225,187,13,106,127,45,61,109,8,151,108,100,145,1,92,99,230,244,81,107,107,98,97,108,28,216,48,101,133,78,0,98,242,237,149,6,108,123,165,1,27,193,244,8,130,87,196,15,245,198,217,176,101,80,233,183,18,234,184,190,139,124,136,185,252,223,29,221,98,73,45,218,21,243,124,211,140,101,76,212,251,88,97,178,77,206,81,181,58,116,0,188,163,226,48,187,212,65,165,223,74,215,149,216,61,109,196,209,164,251,244,214,211,106,233,105,67,252,217,110,52,70,136,103,173,208,184,96,218,115,45,4,68,229,29,3,51,95,76,10,170,201,124,13,221,60,113,5,80,170,65,2,39,16,16,11,190,134,32,12,201,37,181,104,87,179,133,111,32,9,212,102,185,159,228,97,206,14,249,222,94,152,201,217,41,34,152,208,176,180,168,215,199,23,61,179,89,129,13,180,46,59,92,189,183,173,108,186,192,32,131,184,237,182,179,191,154,12,226,182,3,154,210,177,116,57,71,213,234,175,119,210,157,21,38,219,4,131,22,220,115,18,11,99,227,132,59,100,148,62,106,109,13,168,90,106,122,11,207,14,228,157,255,9,147,39,174,0,10,177,158,7,125,68,147,15,240,210,163,8,135,104,242,1,30,254,194,6,105,93,87,98,247,203,103,101,128,113,54,108,25,231,6,107,110,118,27,212,254,224,43,211,137,90,122,218,16,204,74,221,103,111,223,185,249,249,239,190,142,67,190,183,23,213,142,176,96,232,163,214,214,126,147,209,161,196,194,216,56,82,242,223,79,241,103,187,209,103,87,188,166,221,6,181,63,75,54,178,72,218,43,13,216,76,27,10,175,246,74,3,54,96,122,4,65,195,239,96,223,85,223,103,168,239,142,110,49,121,190,105,70,140,179,97,203,26,131,102,188,160,210,111,37,54,226,104,82,149,119,12,204,3,71,11,187,185,22,2,34,47,38,5,85,190,59,186,197,40,11,189,178,146,90,180,43,4,106,179,92,167,255,215,194,49,207,208,181,139,158,217,44,29,174,222,91,176,194,100,155,38,242,99,236,156,163,106,117,10,147,109,2,169,6,9,156,63,54,14,235,133,103,7,114,19,87,0,5,130,74,191,149,20,122,184,226,174,43,177,123,56,27,182,12,155,142,210,146,13,190,213,229,183,239,220,124,33,223,219,11,212,210,211,134,66,226,212,241,248,179,221,104,110,131,218,31,205,22,190,129,91,38,185,246,225,119,176,111,119,71,183,24,230,90,8,136,112,106,15,255,202,59,6,102,92,11,1,17,255,158,101,143,105,174,98,248,211,255,107,97,69,207,108,22,120,226,10,160,238,210,13,215,84,131,4,78,194,179,3,57,97,38,103,167,247,22,96,208,77,71,105,73,219,119,110,62,74,106,209,174,220,90,214,217,102,11,223,64,240,59,216,55,83,174,188,169,197,158,187,222,127,207,178,71,233,255,181,48,28,242,189,189,138,194,186,202,48,147,179,83,166,163,180,36,5,54,208,186,147,6,215,205,41,87,222,84,191,103,217,35,46,122,102,179,184,74,97,196,2,27,104,93,148,43,111,42,55,190,11,180,161,142,12,195,27,223,5,90,141,239,2,45,0,0,0,0,65,49,27,25,130,98,54,50,195,83,45,43,4,197,108,100,69,244,119,125,134,167,90,86,199,150,65,79,8,138,217,200,73,187,194,209,138,232,239,250,203,217,244,227,12,79,181,172,77,126,174,181,142,45,131,158,207,28,152,135,81,18,194,74,16,35,217,83,211,112,244,120,146,65,239,97,85,215,174,46,20,230,181,55,215,181,152,28,150,132,131,5,89,152,27,130,24,169,0,155,219,250,45,176,154,203,54,169,93,93,119,230,28,108,108,255,223,63,65,212,158,14,90,205,162,36,132,149,227,21,159,140,32,70,178,167,97,119,169,190,166,225,232,241,231,208,243,232,36,131,222,195,101,178,197,218,170,174,93,93,235,159,70,68,40,204,107,111,105,253,112,118,174,107,49,57,239,90,42,32,44,9,7,11,109,56,28,18,243,54,70,223,178,7,93,198,113,84,112,237,48,101,107,244,247,243,42,187,182,194,49,162,117,145,28,137,52,160,7,144,251,188,159,23,186,141,132,14,121,222,169,37,56,239,178,60,255,121,243,115,190,72,232,106,125,27,197,65,60,42,222,88,5,79,121,240,68,126,98,233,135,45,79,194,198,28,84,219,1,138,21,148,64,187,14,141,131,232,35,166,194,217,56,191,13,197,160,56,76,244,187,33,143,167,150,10,206,150,141,19,9,0,204,92,72,49,215,69,139,98,250,110,202,83,225,119,84,93,187,186,21,108,160,163,214,63,141,136,151,14,150,145,80,152,215,222,17,169,204,199,210,250,225,236,147,203,250,245,92,215,98,114,29,230,121,107,222,181,84,64,159,132,79,89,88,18,14,22,25,35,21,15,218,112,56,36,155,65,35,61,167,107,253,101,230,90,230,124,37,9,203,87,100,56,208,78,163,174,145,1,226,159,138,24,33,204,167,51,96,253,188,42,175,225,36,173,238,208,63,180,45,131,18,159,108,178,9,134,171,36,72,201,234,21,83,208,41,70,126,251,104,119,101,226,246,121,63,47,183,72,36,54,116,27,9,29,53,42,18,4,242,188,83,75,179,141,72,82,112,222,101,121,49,239,126,96,254,243,230,231,191,194,253,254,124,145,208,213,61,160,203,204,250,54,138,131,187,7,145,154,120,84,188,177,57,101,167,168,75,152,131,59,10,169,152,34,201,250,181,9,136,203,174,16,79,93,239,95,14,108,244,70,205,63,217,109,140,14,194,116,67,18,90,243,2,35,65,234,193,112,108,193,128,65,119,216,71,215,54,151,6,230,45,142,197,181,0,165,132,132,27,188,26,138,65,113,91,187,90,104,152,232,119,67,217,217,108,90,30,79,45,21,95,126,54,12,156,45,27,39,221,28,0,62,18,0,152,185,83,49,131,160,144,98,174,139,209,83,181,146,22,197,244,221,87,244,239,196,148,167,194,239,213,150,217,246,233,188,7,174,168,141,28,183,107,222,49,156,42,239,42,133,237,121,107,202,172,72,112,211,111,27,93,248,46,42,70,225,225,54,222,102,160,7,197,127,99,84,232,84,34,101,243,77,229,243,178,2,164,194,169,27,103,145,132,48,38,160,159,41,184,174,197,228,249,159,222,253,58,204,243,214,123,253,232,207,188,107,169,128,253,90,178,153,62,9,159,178,127,56,132,171,176,36,28,44,241,21,7,53,50,70,42,30,115,119,49,7,180,225,112,72,245,208,107,81,54,131,70,122,119,178,93,99,78,215,250,203,15,230,225,210,204,181,204,249,141,132,215,224,74,18,150,175,11,35,141,182,200,112,160,157,137,65,187,132,70,93,35,3,7,108,56,26,196,63,21,49,133,14,14,40,66,152,79,103,3,169,84,126,192,250,121,85,129,203,98,76,31,197,56,129,94,244,35,152,157,167,14,179,220,150,21,170,27,0,84,229,90,49,79,252,153,98,98,215,216,83,121,206,23,79,225,73,86,126,250,80,149,45,215,123,212,28,204,98,19,138,141,45,82,187,150,52,145,232,187,31,208,217,160,6,236,243,126,94,173,194,101,71,110,145,72,108,47,160,83,117,232,54,18,58,169,7,9,35,106,84,36,8,43,101,63,17,228,121,167,150,165,72,188,143,102,27,145,164,39,42,138,189,224,188,203,242,161,141,208,235,98,222,253,192,35,239,230,217,189,225,188,20,252,208,167,13,63,131,138,38,126,178,145,63,185,36,208,112,248,21,203,105,59,70,230,66,122,119,253,91,181,107,101,220,244,90,126,197,55,9,83,238,118,56,72,247,177,174,9,184,240,159,18,161,51,204,63,138,114,253,36,147,0,0,0,0,55,106,194,1,110,212,132,3,89,190,70,2,220,168,9,7,235,194,203,6,178,124,141,4,133,22,79,5,184,81,19,14,143,59,209,15,214,133,151,13,225,239,85,12,100,249,26,9,83,147,216,8,10,45,158,10,61,71,92,11,112,163,38,28,71,201,228,29,30,119,162,31,41,29,96,30,172,11,47,27,155,97,237,26,194,223,171,24,245,181,105,25,200,242,53,18,255,152,247,19,166,38,177,17,145,76,115,16,20,90,60,21,35,48,254,20,122,142,184,22,77,228,122,23,224,70,77,56,215,44,143,57,142,146,201,59,185,248,11,58,60,238,68,63,11,132,134,62,82,58,192,60,101,80,2,61,88,23,94,54,111,125,156,55,54,195,218,53,1,169,24,52,132,191,87,49,179,213,149,48,234,107,211,50,221,1,17,51,144,229,107,36,167,143,169,37,254,49,239,39,201,91,45,38,76,77,98,35,123,39,160,34,34,153,230,32,21,243,36,33,40,180,120,42,31,222,186,43,70,96,252,41,113,10,62,40,244,28,113,45,195,118,179,44,154,200,245,46,173,162,55,47,192,141,154,112,247,231,88,113,174,89,30,115,153,51,220,114,28,37,147,119,43,79,81,118,114,241,23,116,69,155,213,117,120,220,137,126,79,182,75,127,22,8,13,125,33,98,207,124,164,116,128,121,147,30,66,120,202,160,4,122,253,202,198,123,176,46,188,108,135,68,126,109,222,250,56,111,233,144,250,110,108,134,181,107,91,236,119,106,2,82,49,104,53,56,243,105,8,127,175,98,63,21,109,99,102,171,43,97,81,193,233,96,212,215,166,101,227,189,100,100,186,3,34,102,141,105,224,103,32,203,215,72,23,161,21,73,78,31,83,75,121,117,145,74,252,99,222,79,203,9,28,78,146,183,90,76,165,221,152,77,152,154,196,70,175,240,6,71,246,78,64,69,193,36,130,68,68,50,205,65,115,88,15,64,42,230,73,66,29,140,139,67,80,104,241,84,103,2,51,85,62,188,117,87,9,214,183,86,140,192,248,83,187,170,58,82,226,20,124,80,213,126,190,81,232,57,226,90,223,83,32,91,134,237,102,89,177,135,164,88,52,145,235,93,3,251,41,92,90,69,111,94,109,47,173,95,128,27,53,225,183,113,247,224,238,207,177,226,217,165,115,227,92,179,60,230,107,217,254,231,50,103,184,229,5,13,122,228,56,74,38,239,15,32,228,238,86,158,162,236,97,244,96,237,228,226,47,232,211,136,237,233,138,54,171,235,189,92,105,234,240,184,19,253,199,210,209,252,158,108,151,254,169,6,85,255,44,16,26,250,27,122,216,251,66,196,158,249,117,174,92,248,72,233,0,243,127,131,194,242,38,61,132,240,17,87,70,241,148,65,9,244,163,43,203,245,250,149,141,247,205,255,79,246,96,93,120,217,87,55,186,216,14,137,252,218,57,227,62,219,188,245,113,222,139,159,179,223,210,33,245,221,229,75,55,220,216,12,107,215,239,102,169,214,182,216,239,212,129,178,45,213,4,164,98,208,51,206,160,209,106,112,230,211,93,26,36,210,16,254,94,197,39,148,156,196,126,42,218,198,73,64,24,199,204,86,87,194,251,60,149,195,162,130,211,193,149,232,17,192,168,175,77,203,159,197,143,202,198,123,201,200,241,17,11,201,116,7,68,204,67,109,134,205,26,211,192,207,45,185,2,206,64,150,175,145,119,252,109,144,46,66,43,146,25,40,233,147,156,62,166,150,171,84,100,151,242,234,34,149,197,128,224,148,248,199,188,159,207,173,126,158,150,19,56,156,161,121,250,157,36,111,181,152,19,5,119,153,74,187,49,155,125,209,243,154,48,53,137,141,7,95,75,140,94,225,13,142,105,139,207,143,236,157,128,138,219,247,66,139,130,73,4,137,181,35,198,136,136,100,154,131,191,14,88,130,230,176,30,128,209,218,220,129,84,204,147,132,99,166,81,133,58,24,23,135,13,114,213,134,160,208,226,169,151,186,32,168,206,4,102,170,249,110,164,171,124,120,235,174,75,18,41,175,18,172,111,173,37,198,173,172,24,129,241,167,47,235,51,166,118,85,117,164,65,63,183,165,196,41,248,160,243,67,58,161,170,253,124,163,157,151,190,162,208,115,196,181,231,25,6,180,190,167,64,182,137,205,130,183,12,219,205,178,59,177,15,179,98,15,73,177,85,101,139,176,104,34,215,187,95,72,21,186,6,246,83,184,49,156,145,185,180,138,222,188,131,224,28,189,218,94,90,191,237,52,152,190,0,0,0,0,101,103,188,184,139,200,9,170,238,175,181,18,87,151,98,143,50,240,222,55,220,95,107,37,185,56,215,157,239,40,180,197,138,79,8,125,100,224,189,111,1,135,1,215,184,191,214,74,221,216,106,242,51,119,223,224,86,16,99,88,159,87,25,80,250,48,165,232,20,159,16,250,113,248,172,66,200,192,123,223,173,167,199,103,67,8,114,117,38,111,206,205,112,127,173,149,21,24,17,45,251,183,164,63,158,208,24,135,39,232,207,26,66,143,115,162,172,32,198,176,201,71,122,8,62,175,50,160,91,200,142,24,181,103,59,10,208,0,135,178,105,56,80,47,12,95,236,151,226,240,89,133,135,151,229,61,209,135,134,101,180,224,58,221,90,79,143,207,63,40,51,119,134,16,228,234,227,119,88,82,13,216,237,64,104,191,81,248,161,248,43,240,196,159,151,72,42,48,34,90,79,87,158,226,246,111,73,127,147,8,245,199,125,167,64,213,24,192,252,109,78,208,159,53,43,183,35,141,197,24,150,159,160,127,42,39,25,71,253,186,124,32,65,2,146,143,244,16,247,232,72,168,61,88,20,155,88,63,168,35,182,144,29,49,211,247,161,137,106,207,118,20,15,168,202,172,225,7,127,190,132,96,195,6,210,112,160,94,183,23,28,230,89,184,169,244,60,223,21,76,133,231,194,209,224,128,126,105,14,47,203,123,107,72,119,195,162,15,13,203,199,104,177,115,41,199,4,97,76,160,184,217,245,152,111,68,144,255,211,252,126,80,102,238,27,55,218,86,77,39,185,14,40,64,5,182,198,239,176,164,163,136,12,28,26,176,219,129,127,215,103,57,145,120,210,43,244,31,110,147,3,247,38,59,102,144,154,131,136,63,47,145,237,88,147,41,84,96,68,180,49,7,248,12,223,168,77,30,186,207,241,166,236,223,146,254,137,184,46,70,103,23,155,84,2,112,39,236,187,72,240,113,222,47,76,201,48,128,249,219,85,231,69,99,156,160,63,107,249,199,131,211,23,104,54,193,114,15,138,121,203,55,93,228,174,80,225,92,64,255,84,78,37,152,232,246,115,136,139,174,22,239,55,22,248,64,130,4,157,39,62,188,36,31,233,33,65,120,85,153,175,215,224,139,202,176,92,51,59,182,89,237,94,209,229,85,176,126,80,71,213,25,236,255,108,33,59,98,9,70,135,218,231,233,50,200,130,142,142,112,212,158,237,40,177,249,81,144,95,86,228,130,58,49,88,58,131,9,143,167,230,110,51,31,8,193,134,13,109,166,58,181,164,225,64,189,193,134,252,5,47,41,73,23,74,78,245,175,243,118,34,50,150,17,158,138,120,190,43,152,29,217,151,32,75,201,244,120,46,174,72,192,192,1,253,210,165,102,65,106,28,94,150,247,121,57,42,79,151,150,159,93,242,241,35,229,5,25,107,77,96,126,215,245,142,209,98,231,235,182,222,95,82,142,9,194,55,233,181,122,217,70,0,104,188,33,188,208,234,49,223,136,143,86,99,48,97,249,214,34,4,158,106,154,189,166,189,7,216,193,1,191,54,110,180,173,83,9,8,21,154,78,114,29,255,41,206,165,17,134,123,183,116,225,199,15,205,217,16,146,168,190,172,42,70,17,25,56,35,118,165,128,117,102,198,216,16,1,122,96,254,174,207,114,155,201,115,202,34,241,164,87,71,150,24,239,169,57,173,253,204,94,17,69,6,238,77,118,99,137,241,206,141,38,68,220,232,65,248,100,81,121,47,249,52,30,147,65,218,177,38,83,191,214,154,235,233,198,249,179,140,161,69,11,98,14,240,25,7,105,76,161,190,81,155,60,219,54,39,132,53,153,146,150,80,254,46,46,153,185,84,38,252,222,232,158,18,113,93,140,119,22,225,52,206,46,54,169,171,73,138,17,69,230,63,3,32,129,131,187,118,145,224,227,19,246,92,91,253,89,233,73,152,62,85,241,33,6,130,108,68,97,62,212,170,206,139,198,207,169,55,126,56,65,127,214,93,38,195,110,179,137,118,124,214,238,202,196,111,214,29,89,10,177,161,225,228,30,20,243,129,121,168,75,215,105,203,19,178,14,119,171,92,161,194,185,57,198,126,1,128,254,169,156,229,153,21,36,11,54,160,54,110,81,28,142,167,22,102,134,194,113,218,62,44,222,111,44,73,185,211,148,240,129,4,9,149,230,184,177,123,73,13,163,30,46,177,27,72,62,210,67,45,89,110,251,195,246,219,233,166,145,103,81,31,169,176,204,122,206,12,116,148,97,185,102,241,6,5,222,0,0,0,0,119,7,48,150,238,14,97,44,153,9,81,186,7,109,196,25,112,106,244,143,233,99,165,53,158,100,149,163,14,219,136,50,121,220,184,164,224,213,233,30,151,210,217,136,9,182,76,43,126,177,124,189,231,184,45,7,144,191,29,145,29,183,16,100,106,176,32,242,243,185,113,72,132,190,65,222,26,218,212,125,109,221,228,235,244,212,181,81,131,211,133,199,19,108,152,86,100,107,168,192,253,98,249,122,138,101,201,236,20,1,92,79,99,6,108,217,250,15,61,99,141,8,13,245,59,110,32,200,76,105,16,94,213,96,65,228,162,103,113,114,60,3,228,209,75,4,212,71,210,13,133,253,165,10,181,107,53,181,168,250,66,178,152,108,219,187,201,214,172,188,249,64,50,216,108,227,69,223,92,117,220,214,13,207,171,209,61,89,38,217,48,172,81,222,0,58,200,215,81,128,191,208,97,22,33,180,244,181,86,179,196,35,207,186,149,153,184,189,165,15,40,2,184,158,95,5,136,8,198,12,217,178,177,11,233,36,47,111,124,135,88,104,76,17,193,97,29,171,182,102,45,61,118,220,65,144,1,219,113,6,152,210,32,188,239,213,16,42,113,177,133,137,6,182,181,31,159,191,228,165,232,184,212,51,120,7,201,162,15,0,249,52,150,9,168,142,225,14,152,24,127,106,13,187,8,109,61,45,145,100,108,151,230,99,92,1,107,107,81,244,28,108,97,98,133,101,48,216,242,98,0,78,108,6,149,237,27,1,165,123,130,8,244,193,245,15,196,87,101,176,217,198,18,183,233,80,139,190,184,234,252,185,136,124,98,221,29,223,21,218,45,73,140,211,124,243,251,212,76,101,77,178,97,88,58,181,81,206,163,188,0,116,212,187,48,226,74,223,165,65,61,216,149,215,164,209,196,109,211,214,244,251,67,105,233,106,52,110,217,252,173,103,136,70,218,96,184,208,68,4,45,115,51,3,29,229,170,10,76,95,221,13,124,201,80,5,113,60,39,2,65,170,190,11,16,16,201,12,32,134,87,104,181,37,32,111,133,179,185,102,212,9,206,97,228,159,94,222,249,14,41,217,201,152,176,208,152,34,199,215,168,180,89,179,61,23,46,180,13,129,183,189,92,59,192,186,108,173,237,184,131,32,154,191,179,182,3,182,226,12,116,177,210,154,234,213,71,57,157,210,119,175,4,219,38,21,115,220,22,131,227,99,11,18,148,100,59,132,13,109,106,62,122,106,90,168,228,14,207,11,147,9,255,157,10,0,174,39,125,7,158,177,240,15,147,68,135,8,163,210,30,1,242,104,105,6,194,254,247,98,87,93,128,101,103,203,25,108,54,113,110,107,6,231,254,212,27,118,137,211,43,224,16,218,122,90,103,221,74,204,249,185,223,111,142,190,239,249,23,183,190,67,96,176,142,213,214,214,163,232,161,209,147,126,56,216,194,196,79,223,242,82,209,187,103,241,166,188,87,103,63,181,6,221,72,178,54,75,216,13,43,218,175,10,27,76,54,3,74,246,65,4,122,96,223,96,239,195,168,103,223,85,49,110,142,239,70,105,190,121,203,97,179,140,188,102,131,26,37,111,210,160,82,104,226,54,204,12,119,149,187,11,71,3,34,2,22,185,85,5,38,47,197,186,59,190,178,189,11,40,43,180,90,146,92,179,106,4,194,215,255,167,181,208,207,49,44,217,158,139,91,222,174,29,155,100,194,176,236,99,242,38,117,106,163,156,2,109,147,10,156,9,6,169,235,14,54,63,114,7,103,133,5,0,87,19,149,191,74,130,226,184,122,20,123,177,43,174,12,182,27,56,146,210,142,155,229,213,190,13,124,220,239,183,11,219,223,33,134,211,210,212,241,212,226,66,104,221,179,248,31,218,131,110,129,190,22,205,246,185,38,91,111,176,119,225,24,183,71,119,136,8,90,230,255,15,106,112,102,6,59,202,17,1,11,92,143,101,158,255,248,98,174,105,97,107,255,211,22,108,207,69,160,10,226,120,215,13,210,238,78,4,131,84,57,3,179,194,167,103,38,97,208,96,22,247,73,105,71,77,62,110,119,219,174,209,106,74,217,214,90,220,64,223,11,102,55,216,59,240,169,188,174,83,222,187,158,197,71,178,207,127,48,181,255,233,189,189,242,28,202,186,194,138,83,179,147,48,36,180,163,166,186,208,54,5,205,215,6,147,84,222,87,41,35,217,103,191,179,102,122,46,196,97,74,184,93,104,27,2,42,111,43,148,180,11,190,55,195,12,142,161,90,5,223,27,45,2,239,141,0,0,0,0,25,27,49,65,50,54,98,130,43,45,83,195,100,108,197,4,125,119,244,69,86,90,167,134,79,65,150,199,200,217,138,8,209,194,187,73,250,239,232,138,227,244,217,203,172,181,79,12,181,174,126,77,158,131,45,142,135,152,28,207,74,194,18,81,83,217,35,16,120,244,112,211,97,239,65,146,46,174,215,85,55,181,230,20,28,152,181,215,5,131,132,150,130,27,152,89,155,0,169,24,176,45,250,219,169,54,203,154,230,119,93,93,255,108,108,28,212,65,63,223,205,90,14,158,149,132,36,162,140,159,21,227,167,178,70,32,190,169,119,97,241,232,225,166,232,243,208,231,195,222,131,36,218,197,178,101,93,93,174,170,68,70,159,235,111,107,204,40,118,112,253,105,57,49,107,174,32,42,90,239,11,7,9,44,18,28,56,109,223,70,54,243,198,93,7,178,237,112,84,113,244,107,101,48,187,42,243,247,162,49,194,182,137,28,145,117,144,7,160,52,23,159,188,251,14,132,141,186,37,169,222,121,60,178,239,56,115,243,121,255,106,232,72,190,65,197,27,125,88,222,42,60,240,121,79,5,233,98,126,68,194,79,45,135,219,84,28,198,148,21,138,1,141,14,187,64,166,35,232,131,191,56,217,194,56,160,197,13,33,187,244,76,10,150,167,143,19,141,150,206,92,204,0,9,69,215,49,72,110,250,98,139,119,225,83,202,186,187,93,84,163,160,108,21,136,141,63,214,145,150,14,151,222,215,152,80,199,204,169,17,236,225,250,210,245,250,203,147,114,98,215,92,107,121,230,29,64,84,181,222,89,79,132,159,22,14,18,88,15,21,35,25,36,56,112,218,61,35,65,155,101,253,107,167,124,230,90,230,87,203,9,37,78,208,56,100,1,145,174,163,24,138,159,226,51,167,204,33,42,188,253,96,173,36,225,175,180,63,208,238,159,18,131,45,134,9,178,108,201,72,36,171,208,83,21,234,251,126,70,41,226,101,119,104,47,63,121,246,54,36,72,183,29,9,27,116,4,18,42,53,75,83,188,242,82,72,141,179,121,101,222,112,96,126,239,49,231,230,243,254,254,253,194,191,213,208,145,124,204,203,160,61,131,138,54,250,154,145,7,187,177,188,84,120,168,167,101,57,59,131,152,75,34,152,169,10,9,181,250,201,16,174,203,136,95,239,93,79,70,244,108,14,109,217,63,205,116,194,14,140,243,90,18,67,234,65,35,2,193,108,112,193,216,119,65,128,151,54,215,71,142,45,230,6,165,0,181,197,188,27,132,132,113,65,138,26,104,90,187,91,67,119,232,152,90,108,217,217,21,45,79,30,12,54,126,95,39,27,45,156,62,0,28,221,185,152,0,18,160,131,49,83,139,174,98,144,146,181,83,209,221,244,197,22,196,239,244,87], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51184);
/* memory initializer */ allocate([239,194,167,148,246,217,150,213,174,7,188,233,183,28,141,168,156,49,222,107,133,42,239,42,202,107,121,237,211,112,72,172,248,93,27,111,225,70,42,46,102,222,54,225,127,197,7,160,84,232,84,99,77,243,101,34,2,178,243,229,27,169,194,164,48,132,145,103,41,159,160,38,228,197,174,184,253,222,159,249,214,243,204,58,207,232,253,123,128,169,107,188,153,178,90,253,178,159,9,62,171,132,56,127,44,28,36,176,53,7,21,241,30,42,70,50,7,49,119,115,72,112,225,180,81,107,208,245,122,70,131,54,99,93,178,119,203,250,215,78,210,225,230,15,249,204,181,204,224,215,132,141,175,150,18,74,182,141,35,11,157,160,112,200,132,187,65,137,3,35,93,70,26,56,108,7,49,21,63,196,40,14,14,133,103,79,152,66,126,84,169,3,85,121,250,192,76,98,203,129,129,56,197,31,152,35,244,94,179,14,167,157,170,21,150,220,229,84,0,27,252,79,49,90,215,98,98,153,206,121,83,216,73,225,79,23,80,250,126,86,123,215,45,149,98,204,28,212,45,141,138,19,52,150,187,82,31,187,232,145,6,160,217,208,94,126,243,236,71,101,194,173,108,72,145,110,117,83,160,47,58,18,54,232,35,9,7,169,8,36,84,106,17,63,101,43,150,167,121,228,143,188,72,165,164,145,27,102,189,138,42,39,242,203,188,224,235,208,141,161,192,253,222,98,217,230,239,35,20,188,225,189,13,167,208,252,38,138,131,63,63,145,178,126,112,208,36,185,105,203,21,248,66,230,70,59,91,253,119,122,220,101,107,181,197,126,90,244,238,83,9,55,247,72,56,118,184,9,174,177,161,18,159,240,138,63,204,51,147,36,253,114,0,0,0,0,1,194,106,55,3,132,212,110,2,70,190,89,7,9,168,220,6,203,194,235,4,141,124,178,5,79,22,133,14,19,81,184,15,209,59,143,13,151,133,214,12,85,239,225,9,26,249,100,8,216,147,83,10,158,45,10,11,92,71,61,28,38,163,112,29,228,201,71,31,162,119,30,30,96,29,41,27,47,11,172,26,237,97,155,24,171,223,194,25,105,181,245,18,53,242,200,19,247,152,255,17,177,38,166,16,115,76,145,21,60,90,20,20,254,48,35,22,184,142,122,23,122,228,77,56,77,70,224,57,143,44,215,59,201,146,142,58,11,248,185,63,68,238,60,62,134,132,11,60,192,58,82,61,2,80,101,54,94,23,88,55,156,125,111,53,218,195,54,52,24,169,1,49,87,191,132,48,149,213,179,50,211,107,234,51,17,1,221,36,107,229,144,37,169,143,167,39,239,49,254,38,45,91,201,35,98,77,76,34,160,39,123,32,230,153,34,33,36,243,21,42,120,180,40,43,186,222,31,41,252,96,70,40,62,10,113,45,113,28,244,44,179,118,195,46,245,200,154,47,55,162,173,112,154,141,192,113,88,231,247,115,30,89,174,114,220,51,153,119,147,37,28,118,81,79,43,116,23,241,114,117,213,155,69,126,137,220,120,127,75,182,79,125,13,8,22,124,207,98,33,121,128,116,164,120,66,30,147,122,4,160,202,123,198,202,253,108,188,46,176,109,126,68,135,111,56,250,222,110,250,144,233,107,181,134,108,106,119,236,91,104,49,82,2,105,243,56,53,98,175,127,8,99,109,21,63,97,43,171,102,96,233,193,81,101,166,215,212,100,100,189,227,102,34,3,186,103,224,105,141,72,215,203,32,73,21,161,23,75,83,31,78,74,145,117,121,79,222,99,252,78,28,9,203,76,90,183,146,77,152,221,165,70,196,154,152,71,6,240,175,69,64,78,246,68,130,36,193,65,205,50,68,64,15,88,115,66,73,230,42,67,139,140,29,84,241,104,80,85,51,2,103,87,117,188,62,86,183,214,9,83,248,192,140,82,58,170,187,80,124,20,226,81,190,126,213,90,226,57,232,91,32,83,223,89,102,237,134,88,164,135,177,93,235,145,52,92,41,251,3,94,111,69,90,95,173,47,109,225,53,27,128,224,247,113,183,226,177,207,238,227,115,165,217,230,60,179,92,231,254,217,107,229,184,103,50,228,122,13,5,239,38,74,56,238,228,32,15,236,162,158,86,237,96,244,97,232,47,226,228,233,237,136,211,235,171,54,138,234,105,92,189,253,19,184,240,252,209,210,199,254,151,108,158,255,85,6,169,250,26,16,44,251,216,122,27,249,158,196,66,248,92,174,117,243,0,233,72,242,194,131,127,240,132,61,38,241,70,87,17,244,9,65,148,245,203,43,163,247,141,149,250,246,79,255,205,217,120,93,96,216,186,55,87,218,252,137,14,219,62,227,57,222,113,245,188,223,179,159,139,221,245,33,210,220,55,75,229,215,107,12,216,214,169,102,239,212,239,216,182,213,45,178,129,208,98,164,4,209,160,206,51,211,230,112,106,210,36,26,93,197,94,254,16,196,156,148,39,198,218,42,126,199,24,64,73,194,87,86,204,195,149,60,251,193,211,130,162,192,17,232,149,203,77,175,168,202,143,197,159,200,201,123,198,201,11,17,241,204,68,7,116,205,134,109,67,207,192,211,26,206,2,185,45,145,175,150,64,144,109,252,119,146,43,66,46,147,233,40,25,150,166,62,156,151,100,84,171,149,34,234,242,148,224,128,197,159,188,199,248,158,126,173,207,156,56,19,150,157,250,121,161,152,181,111,36,153,119,5,19,155,49,187,74,154,243,209,125,141,137,53,48,140,75,95,7,142,13,225,94,143,207,139,105,138,128,157,236,139,66,247,219,137,4,73,130,136,198,35,181,131,154,100,136,130,88,14,191,128,30,176,230,129,220,218,209,132,147,204,84,133,81,166,99,135,23,24,58,134,213,114,13,169,226,208,160,168,32,186,151,170,102,4,206,171,164,110,249,174,235,120,124,175,41,18,75,173,111,172,18,172,173,198,37,167,241,129,24,166,51,235,47,164,117,85,118,165,183,63,65,160,248,41,196,161,58,67,243,163,124,253,170,162,190,151,157,181,196,115,208,180,6,25,231,182,64,167,190,183,130,205,137,178,205,219,12,179,15,177,59,177,73,15,98,176,139,101,85,187,215,34,104,186,21,72,95,184,83,246,6,185,145,156,49,188,222,138,180,189,28,224,131,191,90,94,218,190,152,52,237,0,0,0,0,184,188,103,101,170,9,200,139,18,181,175,238,143,98,151,87,55,222,240,50,37,107,95,220,157,215,56,185,197,180,40,239,125,8,79,138,111,189,224,100,215,1,135,1,74,214,191,184,242,106,216,221,224,223,119,51,88,99,16,86,80,25,87,159,232,165,48,250,250,16,159,20,66,172,248,113,223,123,192,200,103,199,167,173,117,114,8,67,205,206,111,38,149,173,127,112,45,17,24,21,63,164,183,251,135,24,208,158,26,207,232,39,162,115,143,66,176,198,32,172,8,122,71,201,160,50,175,62,24,142,200,91,10,59,103,181,178,135,0,208,47,80,56,105,151,236,95,12,133,89,240,226,61,229,151,135,101,134,135,209,221,58,224,180,207,143,79,90,119,51,40,63,234,228,16,134,82,88,119,227,64,237,216,13,248,81,191,104,240,43,248,161,72,151,159,196,90,34,48,42,226,158,87,79,127,73,111,246,199,245,8,147,213,64,167,125,109,252,192,24,53,159,208,78,141,35,183,43,159,150,24,197,39,42,127,160,186,253,71,25,2,65,32,124,16,244,143,146,168,72,232,247,155,20,88,61,35,168,63,88,49,29,144,182,137,161,247,211,20,118,207,106,172,202,168,15,190,127,7,225,6,195,96,132,94,160,112,210,230,28,23,183,244,169,184,89,76,21,223,60,209,194,231,133,105,126,128,224,123,203,47,14,195,119,72,107,203,13,15,162,115,177,104,199,97,4,199,41,217,184,160,76,68,111,152,245,252,211,255,144,238,102,80,126,86,218,55,27,14,185,39,77,182,5,64,40,164,176,239,198,28,12,136,163,129,219,176,26,57,103,215,127,43,210,120,145,147,110,31,244,59,38,247,3,131,154,144,102,145,47,63,136,41,147,88,237,180,68,96,84,12,248,7,49,30,77,168,223,166,241,207,186,254,146,223,236,70,46,184,137,84,155,23,103,236,39,112,2,113,240,72,187,201,76,47,222,219,249,128,48,99,69,231,85,107,63,160,156,211,131,199,249,193,54,104,23,121,138,15,114,228,93,55,203,92,225,80,174,78,84,255,64,246,232,152,37,174,139,136,115,22,55,239,22,4,130,64,248,188,62,39,157,33,233,31,36,153,85,120,65,139,224,215,175,51,92,176,202,237,89,182,59,85,229,209,94,71,80,126,176,255,236,25,213,98,59,33,108,218,135,70,9,200,50,233,231,112,142,142,130,40,237,158,212,144,81,249,177,130,228,86,95,58,88,49,58,167,143,9,131,31,51,110,230,13,134,193,8,181,58,166,109,189,64,225,164,5,252,134,193,23,73,41,47,175,245,78,74,50,34,118,243,138,158,17,150,152,43,190,120,32,151,217,29,120,244,201,75,192,72,174,46,210,253,1,192,106,65,102,165,247,150,94,28,79,42,57,121,93,159,150,151,229,35,241,242,77,107,25,5,245,215,126,96,231,98,209,142,95,222,182,235,194,9,142,82,122,181,233,55,104,0,70,217,208,188,33,188,136,223,49,234,48,99,86,143,34,214,249,97,154,106,158,4,7,189,166,189,191,1,193,216,173,180,110,54,21,8,9,83,29,114,78,154,165,206,41,255,183,123,134,17,15,199,225,116,146,16,217,205,42,172,190,168,56,25,17,70,128,165,118,35,216,198,102,117,96,122,1,16,114,207,174,254,202,115,201,155,87,164,241,34,239,24,150,71,253,173,57,169,69,17,94,204,118,77,238,6,206,241,137,99,220,68,38,141,100,248,65,232,249,47,121,81,65,147,30,52,83,38,177,218,235,154,214,191,179,249,198,233,11,69,161,140,25,240,14,98,161,76,105,7,60,155,81,190,132,39,54,219,150,146,153,53,46,46,254,80,38,84,185,153,158,232,222,252,140,93,113,18,52,225,22,119,169,54,46,206,17,138,73,171,3,63,230,69,187,131,129,32,227,224,145,118,91,92,246,19,73,233,89,253,241,85,62,152,108,130,6,33,212,62,97,68,198,139,206,170,126,55,169,207,214,127,65,56,110,195,38,93,124,118,137,179,196,202,238,214,89,29,214,111,225,161,177,10,243,20,30,228,75,168,121,129,19,203,105,215,171,119,14,178,185,194,161,92,1,126,198,57,156,169,254,128,36,21,153,229,54,160,54,11,142,28,81,110,134,102,22,167,62,218,113,194,44,111,222,44,148,211,185,73,9,4,129,240,177,184,230,149,163,13,73,123,27,177,46,30,67,210,62,72,251,110,89,45,233,219,246,195,81,103,145,166,204,176,169,31,116,12,206,122,102,185,97,148,222,5,6,241,16,0,17,0,18,0,0,0,8,0,7,0,9,0,6,0,10,0,5,0,11,0,4,0,12,0,3,0,13,0,2,0,14,0,1,0,15,0,0,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,0,0,0,0,117,110,107,110,111,119,110,32,104,101,97,100,101,114,32,102,108,97,103,115,32,115,101,116,0,0,0,0,0,0,0,0,104,101,97,100,101,114,32,99,114,99,32,109,105,115,109,97,116,99,104,0,0,0,0,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,0,0,0,0,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,0,0,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,0,0,0,0,105,110,118,97,108,105,100,32,99,111,100,101,32,108,101,110,103,116,104,115,32,115,101,116,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,115,32,115,101,116,0,0,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,115,32,115,101,116,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,0,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,0,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,0,0,0,105,110,99,111,114,114,101,99,116,32,108,101,110,103,116,104,32,99,104,101,99,107,0,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,192,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,160,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,224,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,144,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,208,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,176,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,240,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,200,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,168,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,232,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,152,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,216,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,184,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,248,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,196,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,164,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,228,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,148,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,212,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,180,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,244,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,204,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,172,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,236,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,156,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,220,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,188,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,252,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,194,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,162,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,226,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,146,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,210,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,178,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,242,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,202,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,170,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,234,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,154,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,218,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,186,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,250,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,198,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,166,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,230,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,150,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,214,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,182,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,246,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,206,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,174,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,238,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,158,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,222,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,190,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,254,0,96,7,0,0,0,8,80,0,0,8,16,0,20,8,115,0,18,7,31,0,0,8,112,0,0,8,48,0,0,9,193,0,16,7,10,0,0,8,96,0,0,8,32,0,0,9,161,0,0,8,0,0,0,8,128,0,0,8,64,0,0,9,225,0,16,7,6,0,0,8,88,0,0,8,24,0,0,9,145,0,19,7,59,0,0,8,120,0,0,8,56,0,0,9,209,0,17,7,17,0,0,8,104,0,0,8,40,0,0,9,177,0,0,8,8,0,0,8,136,0,0,8,72,0,0,9,241,0,16,7,4,0,0,8,84,0,0,8,20,0,21,8,227,0,19,7,43,0,0,8,116,0,0,8,52,0,0,9,201,0,17,7,13,0,0,8,100,0,0,8,36,0,0,9,169,0,0,8,4,0,0,8,132,0,0,8,68,0,0,9,233,0,16,7,8,0,0,8,92,0,0,8,28,0,0,9,153,0,20,7,83,0,0,8,124,0,0,8,60,0,0,9,217,0,18,7,23,0,0,8,108,0,0,8,44,0,0,9,185,0,0,8,12,0,0,8,140,0,0,8,76,0,0,9,249,0,16,7,3,0,0,8,82,0,0,8,18,0,21,8,163,0,19,7,35,0,0,8,114,0,0,8,50,0,0,9,197,0,17,7,11,0,0,8,98,0,0,8,34,0,0,9,165,0,0,8,2,0,0,8,130,0,0,8,66,0,0,9,229,0,16,7,7,0,0,8,90,0,0,8,26,0,0,9,149,0,20,7,67,0,0,8,122,0,0,8,58,0,0,9,213,0,18,7,19,0,0,8,106,0,0,8,42,0,0,9,181,0,0,8,10,0,0,8,138,0,0,8,74,0,0,9,245,0,16,7,5,0,0,8,86,0,0,8,22,0,64,8,0,0,19,7,51,0,0,8,118,0,0,8,54,0,0,9,205,0,17,7,15,0,0,8,102,0,0,8,38,0,0,9,173,0,0,8,6,0,0,8,134,0,0,8,70,0,0,9,237,0,16,7,9,0,0,8,94,0,0,8,30,0,0,9,157,0,20,7,99,0,0,8,126,0,0,8,62,0,0,9,221,0,18,7,27,0,0,8,110,0,0,8,46,0,0,9,189,0,0,8,14,0,0,8,142,0,0,8,78,0,0,9,253,0,96,7,0,0,0,8,81,0,0,8,17,0,21,8,131,0,18,7,31,0,0,8,113,0,0,8,49,0,0,9,195,0,16,7,10,0,0,8,97,0,0,8,33,0,0,9,163,0,0,8,1,0,0,8,129,0,0,8,65,0,0,9,227,0,16,7,6,0,0,8,89,0,0,8,25,0,0,9,147,0,19,7,59,0,0,8,121,0,0,8,57,0,0,9,211,0,17,7,17,0,0,8,105,0,0,8,41,0,0,9,179,0,0,8,9,0,0,8,137,0,0,8,73,0,0,9,243,0,16,7,4,0,0,8,85,0,0,8,21,0,16,8,2,1,19,7,43,0,0,8,117,0,0,8,53,0,0,9,203,0,17,7,13,0,0,8,101,0,0,8,37,0,0,9,171,0,0,8,5,0,0,8,133,0,0,8,69,0,0,9,235,0,16,7,8,0,0,8,93,0,0,8,29,0,0,9,155,0,20,7,83,0,0,8,125,0,0,8,61,0,0,9,219,0,18,7,23,0,0,8,109,0,0,8,45,0,0,9,187,0,0,8,13,0,0,8,141,0,0,8,77,0,0,9,251,0,16,7,3,0,0,8,83,0,0,8,19,0,21,8,195,0,19,7,35,0,0,8,115,0,0,8,51,0,0,9,199,0,17,7,11,0,0,8,99,0,0,8,35,0,0,9,167,0,0,8,3,0,0,8,131,0,0,8,67,0,0,9,231,0,16,7,7,0,0,8,91,0,0,8,27,0,0,9,151,0,20,7,67,0,0,8,123,0,0,8,59,0,0,9,215,0,18,7,19,0,0,8,107,0,0,8,43,0,0,9,183,0,0,8,11,0,0,8,139,0,0,8,75,0,0,9,247,0,16,7,5,0,0,8,87,0,0,8,23,0,64,8,0,0,19,7,51,0,0,8,119,0,0,8,55,0,0,9,207,0,17,7,15,0,0,8,103,0,0,8,39,0,0,9,175,0,0,8,7,0,0,8,135,0,0,8,71,0,0,9,239,0,16,7,9,0,0,8,95,0,0,8,31,0,0,9,159,0,20,7,99,0,0,8,127,0,0,8,63,0,0,9,223,0,18,7,27,0,0,8,111,0,0,8,47,0,0,9,191,0,0,8,15,0,0,8,143,0,0,8,79,0,0,9,255,0,16,5,1,0,23,5,1,1,19,5,17,0,27,5,1,16,17,5,5,0,25,5,1,4,21,5,65,0,29,5,1,64,16,5,3,0,24,5,1,2,20,5,33,0,28,5,1,32,18,5,9,0,26,5,1,8,22,5,129,0,64,5,0,0,16,5,2,0,23,5,129,1,19,5,25,0,27,5,1,24,17,5,7,0,25,5,1,6,21,5,97,0,29,5,1,96,16,5,4,0,24,5,1,3,20,5,49,0,28,5,1,48,18,5,13,0,26,5,1,12,22,5,193,0,64,5,0,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,17,0,17,0,17,0,17,0,18,0,18,0,18,0,18,0,19,0,19,0,19,0,19,0,20,0,20,0,20,0,20,0,21,0,21,0,21,0,21,0,16,0,76,0,66,0,0,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,16,0,16,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,24,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,64,0,64,0,0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,197,88,33,123,252,115,98,104,197,88,191,69,11,48,126,24,159,83,252,115,65,109,84,98,159,83,179,65,65,45,18,23,66,75,98,104,84,98,126,88,66,75,33,59,186,40,195,20,0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,73,50,191,69,179,65,33,59,73,50,130,39,55,27,224,13,163,34,11,48,65,45,186,40,163,34,55,27,191,18,142,9,168,17,126,24,18,23,195,20,168,17,224,13,142,9,223,4,0,0,0,0,0,0,240,63,239,97,72,177,80,49,246,63,202,111,77,145,174,231,244,63,170,17,108,239,98,208,242,63,0,0,0,0,0,0,240,63,59,191,167,192,105,36,233,63,187,32,199,123,122,81,225,63,93,171,114,222,85,168,209,63,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,0,0,0,255,255,255,255,253,255,255,255,249,255,255,255,241,255,255,255,225,255,255,255,193,255,255,255,129,255,255,255,1,255,255,255,1,254,255,255,1,252,255,255,1,248,255,255,1,240,255,255,1,224,255,255,1,192,255,255,1,128,255,255,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,116,111,111,32,102,97,114,32,98,97,99,107,0,0,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,0,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,56,7,1,0,168,6,1,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,96,7,1,0,192,6,1,0,184,6,1,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,96,7,1,0,248,6,1,0,232,6,1,0,0,0,0,0,0,0,0,0,32,7,1,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,168,7,1,0,16,0,0,0,20,0,0,0,18,0,0,0,19,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,96,7,1,0,128,7,1,0,32,7,1,0,0,0,0,0,69,88,84,0,0,0,0,0,65,82,66,0,0,0,0,0,79,69,83,0,0,0,0,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,0,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,0,0,0,0,0,103,108,85,115,101,80,114,111,103,114,97,109,0,0,0,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,79,98,106,101,99,116,0,0,0,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,0,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,0,103,108,68,101,116,97,99,104,79,98,106,101,99,116,0,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,0,103,108,80,105,120,101,108,83,116,111,114,101,105,0,0,0,103,108,71,101,116,83,116,114,105,110,103,0,0,0,0,0,103,108,71,101,116,73,110,116,101,103,101,114,118,0,0,0,103,108,71,101,116,70,108,111,97,116,118,0,0,0,0,0,103,108,71,101,116,66,111,111,108,101,97,110,118,0,0,0,103,108,71,101,110,84,101,120,116,117,114,101,115,0,0,0,103,108,68,101,108,101,116,101,84,101,120,116,117,114,101,115,0,0,0,0,0,0,0,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,50,68,0,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,50,68,0,0,0,0,0,0,0,103,108,84,101,120,73,109,97,103,101,50,68,0,0,0,0,103,108,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,82,101,97,100,80,105,120,101,108,115,0,0,0,0,103,108,66,105,110,100,84,101,120,116,117,114,101,0,0,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,0,0,0,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,0,0,0,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,0,0,0,0,0,0,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,0,0,0,0,0,0,0,103,108,73,115,84,101,120,116,117,114,101,0,0,0,0,0,103,108,71,101,110,66,117,102,102,101,114,115,0,0,0,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,0,103,108,66,117,102,102,101,114,68,97,116,97,0,0,0,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,103,108,73,115,66,117,102,102,101,114,0,0,0,0,0,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,0,0,0,0,0,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,0,0,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,0,0,0,0,0,0,103,108,71,101,116,82,101,110,100,101,114,98,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,0,0,0,103,108,73,115,82,101,110,100,101,114,98,117,102,102,101,114,0,0,0,0,0,0,0,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,0,0,0,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,0,0,0,0,0,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,50,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,51,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,52,102,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,50,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,51,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,52,105,0,0,0,0,0,103,108,85,110,105,102,111,114,109,49,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,50,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,51,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,52,105,118,0,0,0,0,103,108,85,110,105,102,111,114,109,49,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,50,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,51,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,52,102,118,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,0,0,0,0,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,0,0,0,0,0,103,108,66,105,110,100,66,117,102,102,101,114,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,0,0,0,0,0,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,0,0,0,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,0,0,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,0,0,0,0,0,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,0,0,0,0,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,0,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,0,103,108,73,115,83,104,97,100,101,114,0,0,0,0,0,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,103,108,71,101,116,83,104,97,100,101,114,80,114,101,99,105,115,105,111,110,70,111,114,109,97,116,0,0,0,0,0,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,0,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,0,0,0,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,0,0,0,0,0,0,103,108,73,115,80,114,111,103,114,97,109,0,0,0,0,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,0,0,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,0,0,0,0,0,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,0,0,0,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,0,0,0,0,0,0,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,0,0,0,103,108,73,115,70,114,97,109,101,98,117,102,102,101,114,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,0,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,0,0,103,108,71,101,116,73,110,102,111,76,111,103,0,0,0,0,103,108,66,105,110,100,80,114,111,103,114,97,109,0,0,0,103,108,71,101,116,80,111,105,110,116,101,114,118,0,0,0,103,108,68,114,97,119,82,97,110,103,101,69,108,101,109,101,110,116,115,0,0,0,0,0,103,108,69,110,97,98,108,101,67,108,105,101,110,116,83,116,97,116,101,0,0,0,0,0,103,108,86,101,114,116,101,120,80,111,105,110,116,101,114,0,103,108,84,101,120,67,111,111,114,100,80,111,105,110,116,101,114,0,0,0,0,0,0,0,103,108,78,111,114,109,97,108,80,111,105,110,116,101,114,0,103,108,67,111,108,111,114,80,111,105,110,116,101,114,0,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,0,0,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,0,0,0,0,0,0,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,0,0,0,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,0,0,0,0,0,0,0,103,108,77,97,116,114,105,120,77,111,100,101,0,0,0,0,103,108,76,111,97,100,73,100,101,110,116,105,116,121,0,0,103,108,76,111,97,100,77,97,116,114,105,120,102,0,0,0,103,108,70,114,117,115,116,117,109,0,0,0,0,0,0,0,103,108,82,111,116,97,116,101,102,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,0,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,0,0,0,0,0,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,0,0,0,0,0,103,108,68,114,97,119,65,114,114,97,121,115,0,0,0,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,0,0,103,108,83,104,97,100,101,114,66,105,110,97,114,121,0,0,103,108,82,101,108,101,97,115,101,83,104,97,100,101,114,67,111,109,112,105,108,101,114,0,103,108,71,101,116,69,114,114,111,114,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,0,0,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,0,0,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,0,103,108,70,105,110,105,115,104,0,0,0,0,0,0,0,0,103,108,70,108,117,115,104,0,103,108,67,108,101,97,114,68,101,112,116,104,0,0,0,0,103,108,67,108,101,97,114,68,101,112,116,104,102,0,0,0,103,108,68,101,112,116,104,70,117,110,99,0,0,0,0,0,103,108,69,110,97,98,108,101,0,0,0,0,0,0,0,0,103,108,68,105,115,97,98,108,101,0,0,0,0,0,0,0,103,108,70,114,111,110,116,70,97,99,101,0,0,0,0,0,103,108,67,117,108,108,70,97,99,101,0,0,0,0,0,0,103,108,67,108,101,97,114,0,103,108,76,105,110,101,87,105,100,116,104,0,0,0,0,0,103,108,67,108,101,97,114,83,116,101,110,99,105,108,0,0,103,108,68,101,112,116,104,77,97,115,107,0,0,0,0,0,103,108,83,116,101,110,99,105,108,77,97,115,107,0,0,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,0,0,0,0,0,0,0,0,103,108,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,0,0,0,0,0,0,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,0,103,108,73,115,69,110,97,98,108,101,100,0,0,0,0,0,103,108,66,108,101,110,100,70,117,110,99,0,0,0,0,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,83,101,112,97,114,97,116,101,0,103,108,68,101,112,116,104,82,97,110,103,101,0,0,0,0,103,108,68,101,112,116,104,82,97,110,103,101,102,0,0,0,103,108,83,116,101,110,99,105,108,77,97,115,107,83,101,112,97,114,97,116,101,0,0,0,103,108,72,105,110,116,0,0,103,108,80,111,108,121,103,111,110,79,102,102,115,101,116,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,0,0,0,0,0,0,0,103,108,83,97,109,112,108,101,67,111,118,101,114,97,103,101,0,0,0,0,0,0,0,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,0,0,0,0,0,0,0,103,108,83,116,101,110,99,105,108,70,117,110,99,0,0,0,103,108,83,116,101,110,99,105,108,79,112,0,0,0,0,0,103,108,86,105,101,119,112,111,114,116,0,0,0,0,0,0,103,108,67,108,101,97,114,67,111,108,111,114,0,0,0,0,103,108,83,99,105,115,115,111,114,0,0,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,0,0,0,0,0,0,0,103,108,67,111,108,111,114,77,97,115,107,0,0,0,0,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,0,0,0,103,108,66,108,101,110,100,70,117,110,99,83,101,112,97,114,97,116,101,0,0,0,0,0,103,108,66,108,101,110,100,67,111,108,111,114,0,0,0,0,103,108,83,116,101,110,99,105,108,70,117,110,99,83,101,112,97,114,97,116,101,0,0,0,103,108,83,116,101,110,99,105,108,79,112,83,101,112,97,114,97,116,101,0,0,0,0,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,0,0,0,0,0,0,0,103,108,67,111,112,121,84,101,120,73,109,97,103,101,50,68,0,0,0,0,0,0,0,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,50,68,0,0,0,0,0,98,97,100,32,110,97,109,101,32,105,110,32,103,101,116,80,114,111,99,65,100,100,114,101,115,115,58,32,37,115,32,124,32,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,23,1,0,21,0,0,0,22,0,0,0,1,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,96,7,1,0,88,23,1,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61424);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempVertexBuffers1:[],tempVertexBufferCounters1:[],tempVertexBuffers2:[],tempVertexBufferCounters2:[],numTempVertexBuffersPerSize:64,tempIndexBuffers:[],tempQuadIndexBuffer:null,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length = largestIndex+1;
        GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length = largestIndex+1;
        GL.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempIndexBuffers[i] = null; // Created on-demand
          GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          GL.tempVertexBuffers1[i] = [];
          GL.tempVertexBuffers2[i] = [];
          var ringbuffer1 = GL.tempVertexBuffers1[i];
          var ringbuffer2 = GL.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = GLctx.createBuffer();
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, GLctx.STATIC_DRAW);
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
        GL.tempVertexBufferCounters1[idx] = (GL.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        var vb = GL.tempVertexBuffers1;
        GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
        GL.tempVertexBuffers2 = vb;
        vb = GL.tempVertexBufferCounters1;
        GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
        GL.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempVertexBufferCounters1[i] = 0;
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = GLctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = GLctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))|0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[(p)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            internalFormat = GLctx.RGBA;
            break;
          default:
            throw 'Invalid type (' + type + ')';
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        }
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
  
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
  
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        GL.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        GL.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        GL.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
  
        var extensions = GLctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};
  
  function _SDL_GetTicks() {
      return Math.floor(Date.now() - SDL.startTime);
    }var SDL={defaults:{width:320,height:200,copyOnLock:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=0 /* XXX missing C define SDL_PIXELFORMAT_RGBA8888 */;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))|0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))|0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
        var data    = surfData.image.data;
        var colors  = surfData.colors;
  
        for (var y = startY; y < endY; ++y) {
          var indexBase = y * fullWidth;
          var colorBase = indexBase * 4;
          for (var x = startX; x < endX; ++x) {
            // HWPALETTE have only 256 colors (not rgba)
            var index = HEAPU8[((buffer + indexBase + x)|0)] * 3;
            var colorOffset = colorBase + x * 4;
  
            data[colorOffset   ] = colors[index   ];
            data[colorOffset +1] = colors[index +1];
            data[colorOffset +2] = colors[index +2];
            //unused: data[colorOffset +3] = color[index +3];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup': case 'DOMMouseScroll': case 'mousewheel':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'DOMMouseScroll' || event.type == 'mousewheel') {
              var button = Browser.getMouseWheelDelta(event) > 0 ? 4 : 3;
              var event2 = {
                type: 'mousedown',
                button: button,
                pageX: event.pageX,
                pageY: event.pageY
              };
              SDL.events.push(event2);
              event = {
                type: 'mouseup',
                button: button,
                pageX: event.pageX,
                pageY: event.pageY
              };
            } else if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'blur':
          case 'visibilitychange': {
            // Un-press all pressed keys: TODO
            for (var code in SDL.keyboardMap) {
              SDL.events.push({
                type: 'keyup',
                keyCode: SDL.keyboardMap[code]
              });
            }
            event.preventDefault();
            break;
          }
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        return;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = event.keyCode;
            if (code >= 65 && code <= 90) {
              code += 32; // make lowercase for SDL
            } else {
              code = SDL.keyCodes[event.keyCode] || event.keyCode;
            }
  
            HEAP8[(((SDL.keyboardState)+(code))|0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))|0)] ? 0x0040 | 0x0080 : 0) | // KMOD_LCTRL & KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))|0)] ? 0x0001 | 0x0002 : 0) | // KMOD_LSHIFT & KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))|0)] ? 0x0100 | 0x0200 : 0); // KMOD_LALT & KMOD_RALT
  
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28); // XXX
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = event.keyCode;
            if (key >= 65 && key <= 90) {
              key += 32; // make lowercase for SDL
            } else {
              key = SDL.keyCodes[event.keyCode] || event.keyCode;
            }
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))|0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))|0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))|0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))|0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))|0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))|0)]=event.index;
            HEAP8[(((ptr)+(5))|0)]=event.button;
            HEAP8[(((ptr)+(6))|0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))|0)]=event.index;
            HEAP8[(((ptr)+(5))|0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = volume / 128;
          if (info.audio) info.audio.volume = info.volume;
        }
        return ret;
      },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))|0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _Mix_VolumeMusic(volume) {
      return SDL.setGetVolume(SDL.music, volume);
    }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx.stencilMaskSeparate(x0, x1) }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  function _pthread_mutex_lock() {}

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }

  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == 45) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        return ((asm["setTempRet0"]((tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)),ret>>>0)|0);
      }
  
      return ret;
    }function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }

  function _SDL_ShowCursor(toggle) {
      switch (toggle) {
        case 0: // SDL_DISABLE
          if (Browser.isFullScreen) { // only try to lock the pointer when in full screen mode
            Module['canvas'].requestPointerLock();
            return 0;
          } else { // else return SDL_ENABLE to indicate the failure
            return 1;
          }
          break;
        case 1: // SDL_ENABLE
          Module['canvas'].exitPointerLock();
          return 1;
          break;
        case -1: // SDL_QUERY
          return !Browser.pointerLock;
          break;
        default:
          console.log( "SDL_ShowCursor called with unknown toggle parameter value: " + toggle + "." );
          break;
      }
    }

  
  
  
  var GLImmediate={MapTreeLib:null,spawnMapTreeLib:function () {
        /* A naive implementation of a map backed by an array, and accessed by
         * naive iteration along the array. (hashmap with only one bucket)
         */
        function CNaiveListMap() {
          var list = [];
  
          this.insert = function CNaiveListMap_insert(key, val) {
            if (this.contains(key|0)) return false;
            list.push([key, val]);
            return true;
          };
  
          var __contains_i;
          this.contains = function CNaiveListMap_contains(key) {
            for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
              if (list[__contains_i][0] === key) return true;
            }
            return false;
          };
  
          var __get_i;
          this.get = function CNaiveListMap_get(key) {
            for (__get_i = 0; __get_i < list.length; ++__get_i) {
              if (list[__get_i][0] === key) return list[__get_i][1];
            }
            return undefined;
          };
        };
  
        /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
  
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
  
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
  
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
        function CMapTree() {
          function CNLNode() {
            var map = new CNaiveListMap();
  
            this.child = function CNLNode_child(keyFrag) {
              if (!map.contains(keyFrag|0)) {
                map.insert(keyFrag|0, new CNLNode());
              }
              return map.get(keyFrag|0);
            };
  
            this.value = undefined;
            this.get = function CNLNode_get() {
              return this.value;
            };
  
            this.set = function CNLNode_set(val) {
              this.value = val;
            };
          }
  
          function CKeyView(root) {
            var cur;
  
            this.reset = function CKeyView_reset() {
              cur = root;
              return this;
            };
            this.reset();
  
            this.next = function CKeyView_next(keyFrag) {
              cur = cur.child(keyFrag);
              return this;
            };
  
            this.get = function CKeyView_get() {
              return cur.get();
            };
  
            this.set = function CKeyView_set(val) {
              cur.set(val);
            };
          };
  
          var root;
          var staticKeyView;
  
          this.createKeyView = function CNLNode_createKeyView() {
            return new CKeyView(root);
          }
  
          this.clear = function CNLNode_clear() {
            root = new CNLNode();
            staticKeyView = this.createKeyView();
          };
          this.clear();
  
          this.getStaticKeyView = function CNLNode_getStaticKeyView() {
            staticKeyView.reset();
            return staticKeyView;
          };
        };
  
        // Exports:
        return {
          create: function() {
            return new CMapTree();
          },
        };
      },TexEnvJIT:null,spawnTexEnvJIT:function () {
        // GL defs:
        var GL_TEXTURE0 = 0x84C0;
        var GL_TEXTURE_1D = 0x0DE0;
        var GL_TEXTURE_2D = 0x0DE1;
        var GL_TEXTURE_3D = 0x806f;
        var GL_TEXTURE_CUBE_MAP = 0x8513;
        var GL_TEXTURE_ENV = 0x2300;
        var GL_TEXTURE_ENV_MODE = 0x2200;
        var GL_TEXTURE_ENV_COLOR = 0x2201;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  
        var GL_SRC0_RGB = 0x8580;
        var GL_SRC1_RGB = 0x8581;
        var GL_SRC2_RGB = 0x8582;
  
        var GL_SRC0_ALPHA = 0x8588;
        var GL_SRC1_ALPHA = 0x8589;
        var GL_SRC2_ALPHA = 0x858A;
  
        var GL_OPERAND0_RGB = 0x8590;
        var GL_OPERAND1_RGB = 0x8591;
        var GL_OPERAND2_RGB = 0x8592;
  
        var GL_OPERAND0_ALPHA = 0x8598;
        var GL_OPERAND1_ALPHA = 0x8599;
        var GL_OPERAND2_ALPHA = 0x859A;
  
        var GL_COMBINE_RGB = 0x8571;
        var GL_COMBINE_ALPHA = 0x8572;
  
        var GL_RGB_SCALE = 0x8573;
        var GL_ALPHA_SCALE = 0x0D1C;
  
        // env.mode
        var GL_ADD      = 0x0104;
        var GL_BLEND    = 0x0BE2;
        var GL_REPLACE  = 0x1E01;
        var GL_MODULATE = 0x2100;
        var GL_DECAL    = 0x2101;
        var GL_COMBINE  = 0x8570;
  
        // env.color/alphaCombiner
        //var GL_ADD         = 0x0104;
        //var GL_REPLACE     = 0x1E01;
        //var GL_MODULATE    = 0x2100;
        var GL_SUBTRACT    = 0x84E7;
        var GL_INTERPOLATE = 0x8575;
  
        // env.color/alphaSrc
        var GL_TEXTURE       = 0x1702;
        var GL_CONSTANT      = 0x8576;
        var GL_PRIMARY_COLOR = 0x8577;
        var GL_PREVIOUS      = 0x8578;
  
        // env.color/alphaOp
        var GL_SRC_COLOR           = 0x0300;
        var GL_ONE_MINUS_SRC_COLOR = 0x0301;
        var GL_SRC_ALPHA           = 0x0302;
        var GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  
        var GL_RGB  = 0x1907;
        var GL_RGBA = 0x1908;
  
        // Our defs:
        var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
        // Not actually constant, as they can be changed between JIT passes:
        var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
        var TEX_COORD_VARYING_PREFIX = "vTexCoord";
        var PRIM_COLOR_VARYING = "vPrimColor";
        var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";
  
        // Static vars:
        var s_texUnits = null; //[];
        var s_activeTexture = 0;
  
        var s_requiredTexUnitsForPass = [];
  
        // Static funcs:
        function abort(info) {
          assert(false, "[TexEnvJIT] ABORT: " + info);
        }
  
        function abort_noSupport(info) {
          abort("No support: " + info);
        }
  
        function abort_sanity(info) {
          abort("Sanity failure: " + info);
        }
  
        function genTexUnitSampleExpr(texUnitID) {
          var texUnit = s_texUnits[texUnitID];
          var texType = texUnit.getTexType();
  
          var func = null;
          switch (texType) {
            case GL_TEXTURE_1D:
              func = "texture2D";
              break;
            case GL_TEXTURE_2D:
              func = "texture2D";
              break;
            case GL_TEXTURE_3D:
              return abort_noSupport("No support for 3D textures.");
            case GL_TEXTURE_CUBE_MAP:
              func = "textureCube";
              break;
            default:
              return abort_sanity("Unknown texType: 0x" + texType.toString(16));
          }
  
          var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
          if (TEX_MATRIX_UNIFORM_PREFIX != null) {
            texCoordExpr = "(" + TEX_MATRIX_UNIFORM_PREFIX + texUnitID + " * " + texCoordExpr + ")";
          }
          return func + "(" + TEX_UNIT_UNIFORM_PREFIX + texUnitID + ", " + texCoordExpr + ".xy)";
        }
  
        function getTypeFromCombineOp(op) {
          switch (op) {
            case GL_SRC_COLOR:
            case GL_ONE_MINUS_SRC_COLOR:
              return "vec3";
            case GL_SRC_ALPHA:
            case GL_ONE_MINUS_SRC_ALPHA:
              return "float";
          }
  
          return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
        }
  
        function getCurTexUnit() {
          return s_texUnits[s_activeTexture];
        }
  
        function genCombinerSourceExpr(texUnitID, constantExpr, previousVar,
                                       src, op)
        {
          var srcExpr = null;
          switch (src) {
            case GL_TEXTURE:
              srcExpr = genTexUnitSampleExpr(texUnitID);
              break;
            case GL_CONSTANT:
              srcExpr = constantExpr;
              break;
            case GL_PRIMARY_COLOR:
              srcExpr = PRIM_COLOR_VARYING;
              break;
            case GL_PREVIOUS:
              srcExpr = previousVar;
              break;
            default:
                return abort_noSupport("Unsupported combiner src: 0x" + src.toString(16));
          }
  
          var expr = null;
          switch (op) {
            case GL_SRC_COLOR:
              expr = srcExpr + ".rgb";
              break;
            case GL_ONE_MINUS_SRC_COLOR:
              expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
              break;
            case GL_SRC_ALPHA:
              expr = srcExpr + ".a";
              break;
            case GL_ONE_MINUS_SRC_ALPHA:
              expr = "(1.0 - " + srcExpr + ".a)";
              break;
            default:
              return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
          }
  
          return expr;
        }
  
        function valToFloatLiteral(val) {
          if (val == Math.round(val)) return val + '.0';
          return val;
        }
  
  
        // Classes:
        function CTexEnv() {
          this.mode = GL_MODULATE;
          this.colorCombiner = GL_MODULATE;
          this.alphaCombiner = GL_MODULATE;
          this.colorScale = 1;
          this.alphaScale = 1;
          this.envColor = [0, 0, 0, 0];
  
          this.colorSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.alphaSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.colorOp = [
            GL_SRC_COLOR,
            GL_SRC_COLOR,
            GL_SRC_ALPHA
          ];
          this.alphaOp = [
            GL_SRC_ALPHA,
            GL_SRC_ALPHA,
            GL_SRC_ALPHA
          ];
  
          // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
          this.traverseKey = {
            // mode
            0x1E01 /* GL_REPLACE */: 0,
            0x2100 /* GL_MODULATE */: 1,
            0x0104 /* GL_ADD */: 2,
            0x0BE2 /* GL_BLEND */: 3,
            0x2101 /* GL_DECAL */: 4,
            0x8570 /* GL_COMBINE */: 5,
  
            // additional color and alpha combiners
            0x84E7 /* GL_SUBTRACT */: 3,
            0x8575 /* GL_INTERPOLATE */: 4,
  
            // color and alpha src
            0x1702 /* GL_TEXTURE */: 0,
            0x8576 /* GL_CONSTANT */: 1,
            0x8577 /* GL_PRIMARY_COLOR */: 2,
            0x8578 /* GL_PREVIOUS */: 3,
  
            // color and alpha op
            0x0300 /* GL_SRC_COLOR */: 0,
            0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
            0x0302 /* GL_SRC_ALPHA */: 2,
            0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3
          };
  
          // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
          // -1 on key0 denotes 'the whole cached key is dirty'
          this.key0 = -1;
          this.key1 = 0;
          this.key2 = 0;
  
          this.computeKey0 = function() {
            var k = this.traverseKey;
            var key = k[this.mode] * 1638400; // 6 distinct values.
            key += k[this.colorCombiner] * 327680; // 5 distinct values.
            key += k[this.alphaCombiner] * 65536; // 5 distinct values.
            // The above three fields have 6*5*5=150 distinct values -> 8 bits.
            key += (this.colorScale-1) * 16384; // 10 bits used.
            key += (this.alphaScale-1) * 4096; // 12 bits used.
            key += k[this.colorSrc[0]] * 1024; // 14
            key += k[this.colorSrc[1]] * 256; // 16
            key += k[this.colorSrc[2]] * 64; // 18
            key += k[this.alphaSrc[0]] * 16; // 20
            key += k[this.alphaSrc[1]] * 4; // 22
            key += k[this.alphaSrc[2]]; // 24 bits used total.
            return key;
          }
          this.computeKey1 = function() {
            var k = this.traverseKey;
            key = k[this.colorOp[0]] * 4096;
            key += k[this.colorOp[1]] * 1024;             
            key += k[this.colorOp[2]] * 256;
            key += k[this.alphaOp[0]] * 16;
            key += k[this.alphaOp[1]] * 4;
            key += k[this.alphaOp[2]];
            return key;            
          }
          // TODO: remove this. The color should not be part of the key!
          this.computeKey2 = function() {
            return this.envColor[0] * 16777216 + this.envColor[1] * 65536 + this.envColor[2] * 256 + 1 + this.envColor[3];
          }
          this.recomputeKey = function() {
            this.key0 = this.computeKey0();
            this.key1 = this.computeKey1();
            this.key2 = this.computeKey2();
          }
          this.invalidateKey = function() {
            this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
            GLImmediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
          }
        }
  
        function CTexUnit() {
          this.env = new CTexEnv();
          this.enabled_tex1D   = false;
          this.enabled_tex2D   = false;
          this.enabled_tex3D   = false;
          this.enabled_texCube = false;
          this.texTypesEnabled = 0; // A bitfield combination of the four flags above, used for fast access to operations.
  
          this.traverseState = function CTexUnit_traverseState(keyView) {
            if (this.texTypesEnabled) {
              if (this.env.key0 == -1) {
                this.env.recomputeKey();
              }
              keyView.next(this.texTypesEnabled | (this.env.key0 << 4));
              keyView.next(this.env.key1);
              keyView.next(this.env.key2);
            } else {
              // For correctness, must traverse a zero value, theoretically a subsequent integer key could collide with this value otherwise.
              keyView.next(0);
            }
          };
        };
  
        // Class impls:
        CTexUnit.prototype.enabled = function CTexUnit_enabled() {
          return this.texTypesEnabled;
        }
  
        CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(passOutputVar, passInputVar, texUnitID) {
          if (!this.enabled()) {
            return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
          }
          var lines = this.env.genPassLines(passOutputVar, passInputVar, texUnitID).join('\n');
  
          var texLoadLines = '';
          var texLoadRegex = /(texture.*?\(.*?\))/g;
          var loadCounter = 0;
          var load;
  
          // As an optimization, merge duplicate identical texture loads to one var.
          while(load = texLoadRegex.exec(lines)) {
            var texLoadExpr = load[1];
            var secondOccurrence = lines.slice(load.index+1).indexOf(texLoadExpr);
            if (secondOccurrence != -1) { // And also has a second occurrence of same load expression..
              // Create new var to store the common load.
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texLoadVar = prefix + 'texload' + loadCounter++;
              var texLoadLine = 'vec4 ' + texLoadVar + ' = ' + texLoadExpr + ';\n';
              texLoadLines += texLoadLine + '\n'; // Store the generated texture load statements in a temp string to not confuse regex search in progress.
              lines = lines.split(texLoadExpr).join(texLoadVar);
              // Reset regex search, since we modified the string.
              texLoadRegex = /(texture.*\(.*\))/g;
            }
          }
          return [texLoadLines + lines];
        }
  
        CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
          if (this.enabled_texCube) {
            return GL_TEXTURE_CUBE_MAP;
          } else if (this.enabled_tex3D) {
            return GL_TEXTURE_3D;
          } else if (this.enabled_tex2D) {
            return GL_TEXTURE_2D;
          } else if (this.enabled_tex1D) {
            return GL_TEXTURE_1D;
          }
          return 0;
        }
  
        CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(passOutputVar, passInputVar, texUnitID) {
          switch (this.mode) {
            case GL_REPLACE: {
              /* RGB:
               * Cv = Cs
               * Av = Ap // Note how this is different, and that we'll
               *            need to track the bound texture internalFormat
               *            to get this right.
               *
               * RGBA:
               * Cv = Cs
               * Av = As
               */
              return [
                "vec4 " + passOutputVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
              ];
            }
            case GL_ADD: {
              /* RGBA:
               * Cv = Cp + Cs
               * Av = ApAs
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                "vec3 " + colorVar + " = " + passInputVar + ".rgb + " + texVar + ".rgb;",
                "float " + alphaVar + " = " + passInputVar + ".a * " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_MODULATE: {
              /* RGBA:
               * Cv = CpCs
               * Av = ApAs
               */
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  passInputVar,
                  " * ",
                  genTexUnitSampleExpr(texUnitID),
                ";",
              ];
              return [line.join("")];
            }
            case GL_DECAL: {
              /* RGBA:
               * Cv = Cp(1 - As) + CsAs
               * Av = Ap
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
                      " + ",
                    texVar + ".rgb * " + texVar + ".a",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + passInputVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_BLEND: {
              /* RGBA:
               * Cv = Cp(1 - Cs) + CcCs
               * Av = As
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
                      " + ",
                    PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_COMBINE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              var colorLines = this.genCombinerLines(true, colorVar,
                                                     passInputVar, texUnitID,
                                                     this.colorCombiner, this.colorSrc, this.colorOp);
              var alphaLines = this.genCombinerLines(false, alphaVar,
                                                     passInputVar, texUnitID,
                                                     this.alphaCombiner, this.alphaSrc, this.alphaOp);
  
              // Generate scale, but avoid generating an identity op that multiplies by one.
              var scaledColor = (this.colorScale == 1) ? colorVar : (colorVar + " * " + valToFloatLiteral(this.colorScale));
              var scaledAlpha = (this.alphaScale == 1) ? alphaVar : (alphaVar + " * " + valToFloatLiteral(this.alphaScale));
  
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  "vec4(",
                      scaledColor,
                      ", ",
                      scaledAlpha,
                  ")",
                ";",
              ].join("");
              return [].concat(colorLines, alphaLines, [line]);
            }
          }
  
          return abort_noSupport("Unsupported TexEnv mode: 0x" + this.mode.toString(16));
        }
  
        CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(isColor, outputVar,
                                                                               passInputVar, texUnitID,
                                                                               combiner, srcArr, opArr)
        {
          var argsNeeded = null;
          switch (combiner) {
            case GL_REPLACE:
              argsNeeded = 1;
              break;
  
            case GL_MODULATE:
            case GL_ADD:
            case GL_SUBTRACT:
              argsNeeded = 2;
              break;
  
            case GL_INTERPOLATE:
              argsNeeded = 3;
              break;
  
            default:
              return abort_noSupport("Unsupported combiner: 0x" + combiner.toString(16));
          }
  
          var constantExpr = [
            "vec4(",
              valToFloatLiteral(this.envColor[0]),
              ", ",
              valToFloatLiteral(this.envColor[1]),
              ", ",
              valToFloatLiteral(this.envColor[2]),
              ", ",
              valToFloatLiteral(this.envColor[3]),
            ")",
          ].join("");
          var src0Expr = (argsNeeded >= 1) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[0], opArr[0])
                                           : null;
          var src1Expr = (argsNeeded >= 2) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[1], opArr[1])
                                           : null;
          var src2Expr = (argsNeeded >= 3) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[2], opArr[2])
                                           : null;
  
          var outputType = isColor ? "vec3" : "float";
          var lines = null;
          switch (combiner) {
            case GL_REPLACE: {
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_MODULATE: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " * " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_ADD: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " + " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_SUBTRACT: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " - " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_INTERPOLATE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var arg2Var = prefix + "colorSrc2";
              var arg2Line = getTypeFromCombineOp(this.colorOp[2]) + " " + arg2Var + " = " + src2Expr + ";";
  
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr + " * " + arg2Var,
                  " + ",
                  src1Expr + " * (1.0 - " + arg2Var + ")",
                ";",
              ];
              lines = [
                arg2Line,
                line.join(""),
              ];
              break;
            }
  
            default:
              return abort_sanity("Unmatched TexEnv.colorCombiner?");
          }
  
          return lines;
        }
  
        return {
          // Exports:
          init: function(gl, specifiedMaxTextureImageUnits) {
            var maxTexUnits = 0;
            if (specifiedMaxTextureImageUnits) {
              maxTexUnits = specifiedMaxTextureImageUnits;
            } else if (gl) {
              maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            }
            s_texUnits = [];
            for (var i = 0; i < maxTexUnits; i++) {
              s_texUnits.push(new CTexUnit());
            }
          },
  
          setGLSLVars: function(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix) {
            TEX_UNIT_UNIFORM_PREFIX   = uTexUnitPrefix;
            TEX_COORD_VARYING_PREFIX  = vTexCoordPrefix;
            PRIM_COLOR_VARYING        = vPrimColor;
            TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
          },
  
          genAllPassLines: function(resultDest, indentSize) {
            indentSize = indentSize || 0;
  
            s_requiredTexUnitsForPass.length = 0; // Clear the list.
            var lines = [];
            var lastPassVar = PRIM_COLOR_VARYING;
            for (var i = 0; i < s_texUnits.length; i++) {
              if (!s_texUnits[i].enabled()) continue;
  
              s_requiredTexUnitsForPass.push(i);
  
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + i + "_";
              var passOutputVar = prefix + "result";
  
              var newLines = s_texUnits[i].genPassLines(passOutputVar, lastPassVar, i);
              lines = lines.concat(newLines, [""]);
  
              lastPassVar = passOutputVar;
            }
            lines.push(resultDest + " = " + lastPassVar + ";");
  
            var indent = "";
            for (var i = 0; i < indentSize; i++) indent += " ";
  
            var output = indent + lines.join("\n" + indent);
  
            return output;
          },
  
          getUsedTexUnitList: function() {
            return s_requiredTexUnitsForPass;
          },
  
          traverseState: function(keyView) {
            for (var i = 0; i < s_texUnits.length; i++) {
              s_texUnits[i].traverseState(keyView);
            }
          },
  
          getTexUnitType: function(texUnitID) {
            return s_texUnits[texUnitID].getTexType();
          },
  
          // Hooks:
          hook_activeTexture: function(texture) {
            s_activeTexture = texture - GL_TEXTURE0;
          },
  
          hook_enable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (!cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = true;
                  cur.texTypesEnabled |= 1;
                }
                break;
              case GL_TEXTURE_2D:
                if (!cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = true;
                  cur.texTypesEnabled |= 2;
                }
                break;
              case GL_TEXTURE_3D:
                if (!cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = true;
                  cur.texTypesEnabled |= 4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (!cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = true;
                  cur.texTypesEnabled |= 8;
                }
                break;
            }
          },
  
          hook_disable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = false;
                  cur.texTypesEnabled &= ~1;
                }
                break;
              case GL_TEXTURE_2D:
                if (cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = false;
                  cur.texTypesEnabled &= ~2;
                }
                break;
              case GL_TEXTURE_3D:
                if (cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = false;
                  cur.texTypesEnabled &= ~4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = false;
                  cur.texTypesEnabled &= ~8;
                }
                break;
            }
          },
  
          hook_texEnvf: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvf`.');
            }
          },
  
          hook_texEnvi: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                if (env.mode != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.mode = param;
                }
                break;
  
              case GL_COMBINE_RGB:
                if (env.colorCombiner != param) {
                  env.invalidateKey();
                  env.colorCombiner = param;
                }
                break;
              case GL_COMBINE_ALPHA:
                if (env.alphaCombiner != param) {
                  env.invalidateKey();
                  env.alphaCombiner = param;
                }
                break;
  
              case GL_SRC0_RGB:
                if (env.colorSrc[0] != param) {
                  env.invalidateKey();
                  env.colorSrc[0] = param;
                }
                break;
              case GL_SRC1_RGB:
                if (env.colorSrc[1] != param) {
                  env.invalidateKey();
                  env.colorSrc[1] = param;
                }
                break;
              case GL_SRC2_RGB:
                if (env.colorSrc[2] != param) {
                  env.invalidateKey();
                  env.colorSrc[2] = param;
                }
                break;
  
              case GL_SRC0_ALPHA:
                if (env.alphaSrc[0] != param) {
                  env.invalidateKey();
                  env.alphaSrc[0] = param;
                }
                break;
              case GL_SRC1_ALPHA:
                if (env.alphaSrc[1] != param) {
                  env.invalidateKey();
                  env.alphaSrc[1] = param;
                }
                break;
              case GL_SRC2_ALPHA:
                if (env.alphaSrc[2] != param) {
                  env.invalidateKey();
                  env.alphaSrc[2] = param;
                }
                break;
  
              case GL_OPERAND0_RGB:
                if (env.colorOp[0] != param) {
                  env.invalidateKey();
                  env.colorOp[0] = param;
                }
                break;
              case GL_OPERAND1_RGB:
                if (env.colorOp[1] != param) {
                  env.invalidateKey();
                  env.colorOp[1] = param;
                }
                break;
              case GL_OPERAND2_RGB:
                if (env.colorOp[2] != param) {
                  env.invalidateKey();
                  env.colorOp[2] = param;
                }
                break;
  
              case GL_OPERAND0_ALPHA:
                if (env.alphaOp[0] != param) {
                  env.invalidateKey();
                  env.alphaOp[0] = param;
                }
                break;
              case GL_OPERAND1_ALPHA:
                if (env.alphaOp[1] != param) {
                  env.invalidateKey();
                  env.alphaOp[1] = param;
                }
                break;
              case GL_OPERAND2_ALPHA:
                if (env.alphaOp[2] != param) {
                  env.invalidateKey();
                  env.alphaOp[2] = param;
                }
                break;
  
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey();
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvi`.');
            }
          },
  
          hook_texEnvfv: function(target, pname, params) {
            if (target != GL_TEXTURE_ENV) return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR: {
                for (var i = 0; i < 4; i++) {
                  var param = HEAPF32[(((params)+(i*4))>>2)];
                  if (env.envColor[i] != param) {
                    env.invalidateKey(); // We changed FFP emulation renderer state.
                    env.envColor[i] = param;
                  }
                }
                break
              }
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvfv`.');
            }
          },
  
          hook_getTexEnviv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                HEAP32[((param)>>2)]=env.mode;
                return;
  
              case GL_TEXTURE_ENV_COLOR:
                HEAP32[((param)>>2)]=Math.max(Math.min(env.envColor[0]*255, 255, -255));
                HEAP32[(((param)+(1))>>2)]=Math.max(Math.min(env.envColor[1]*255, 255, -255));
                HEAP32[(((param)+(2))>>2)]=Math.max(Math.min(env.envColor[2]*255, 255, -255));
                HEAP32[(((param)+(3))>>2)]=Math.max(Math.min(env.envColor[3]*255, 255, -255));
                return;
  
              case GL_COMBINE_RGB:
                HEAP32[((param)>>2)]=env.colorCombiner;
                return;
  
              case GL_COMBINE_ALPHA:
                HEAP32[((param)>>2)]=env.alphaCombiner;
                return;
  
              case GL_SRC0_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[0];
                return;
  
              case GL_SRC1_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[1];
                return;
  
              case GL_SRC2_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[2];
                return;
  
              case GL_SRC0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[0];
                return;
  
              case GL_SRC1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[1];
                return;
  
              case GL_SRC2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[2];
                return;
  
              case GL_OPERAND0_RGB:
                HEAP32[((param)>>2)]=env.colorOp[0];
                return;
  
              case GL_OPERAND1_RGB:
                HEAP32[((param)>>2)]=env.colorOp[1];
                return;
  
              case GL_OPERAND2_RGB:
                HEAP32[((param)>>2)]=env.colorOp[2];
                return;
  
              case GL_OPERAND0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[0];
                return;
  
              case GL_OPERAND1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[1];
                return;
  
              case GL_OPERAND2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[2];
                return;
  
              case GL_RGB_SCALE:
                HEAP32[((param)>>2)]=env.colorScale;
                return;
  
              case GL_ALPHA_SCALE:
                HEAP32[((param)>>2)]=env.alphaScale;
                return;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glGetTexEnvi`.');
            }
          },
  
          hook_getTexEnvfv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR:
                HEAPF32[((param)>>2)]=env.envColor[0];
                HEAPF32[(((param)+(4))>>2)]=env.envColor[1];
                HEAPF32[(((param)+(8))>>2)]=env.envColor[2];
                HEAPF32[(((param)+(12))>>2)]=env.envColor[3];
                return;
            }
          }
        };
      },vertexData:null,vertexDataU8:null,tempData:null,indexData:null,vertexCounter:0,mode:-1,rendererCache:null,rendererComponents:[],rendererComponentPointer:0,lastRenderer:null,lastArrayBuffer:null,lastProgram:null,lastStride:-1,matrix:[],matrixStack:[],currentMatrix:0,tempMatrix:null,matricesModified:false,useTextureMatrix:false,VERTEX:0,NORMAL:1,COLOR:2,TEXTURE0:3,NUM_ATTRIBUTES:-1,MAX_TEXTURES:-1,totalEnabledClientAttributes:0,enabledClientAttributes:[0,0],clientAttributes:[],liveClientAttributes:[],currentRenderer:null,modifiedClientAttributes:false,clientActiveTexture:0,clientColor:null,usedTexUnitList:[],fixedFunctionProgram:null,setClientAttribute:function setClientAttribute(name, size, type, stride, pointer) {
        var attrib = GLImmediate.clientAttributes[name];
        if (!attrib) {
          for (var i = 0; i <= name; i++) { // keep flat
            if (!GLImmediate.clientAttributes[i]) {
              GLImmediate.clientAttributes[i] = {
                name: name,
                size: size,
                type: type,
                stride: stride,
                pointer: pointer,
                offset: 0
              };
            }
          }
        } else {
          attrib.name = name;
          attrib.size = size;
          attrib.type = type;
          attrib.stride = stride;
          attrib.pointer = pointer;
          attrib.offset = 0;
        }
        GLImmediate.modifiedClientAttributes = true;
      },addRendererComponent:function addRendererComponent(name, size, type) {
        if (!GLImmediate.rendererComponents[name]) {
          GLImmediate.rendererComponents[name] = 1;
          GLImmediate.enabledClientAttributes[name] = true;
          GLImmediate.setClientAttribute(name, size, type, 0, GLImmediate.rendererComponentPointer);
          GLImmediate.rendererComponentPointer += size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        } else {
          GLImmediate.rendererComponents[name]++;
        }
      },disableBeginEndClientAttributes:function disableBeginEndClientAttributes() {
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          if (GLImmediate.rendererComponents[i]) GLImmediate.enabledClientAttributes[i] = false;
        }
      },getRenderer:function getRenderer() {
        // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
        // we have the currently used renderer in cache, and can immediately return that.
        if (GLImmediate.currentRenderer) {
          return GLImmediate.currentRenderer;
        }
        // return a renderer object given the liveClientAttributes
        // we maintain a cache of renderers, optimized to not generate garbage
        var attributes = GLImmediate.liveClientAttributes;
        var cacheMap = GLImmediate.rendererCache;
        var keyView = cacheMap.getStaticKeyView().reset();
  
        // By attrib state:
        var enabledAttributesKey = 0;
        for (var i = 0; i < attributes.length; i++) {
          enabledAttributesKey |= 1 << attributes[i].name;
        }
  
        // By fog state:
        var fogParam = 0;
        if (GLEmulation.fogEnabled) {
          switch (GLEmulation.fogMode) {
            case 0x0801: // GL_EXP2
              fogParam = 1;
              break;
            case 0x2601: // GL_LINEAR
              fogParam = 2;
              break;
            default: // default to GL_EXP
              fogParam = 3;
              break;
          }
        }
        keyView.next((enabledAttributesKey << 2) | fogParam);
  
        // By cur program:
        keyView.next(GL.currProgram);
        if (!GL.currProgram) {
          GLImmediate.TexEnvJIT.traverseState(keyView);
        }
  
        // If we don't already have it, create it.
        var renderer = keyView.get();
        if (!renderer) {
          renderer = GLImmediate.createRenderer();
          GLImmediate.currentRenderer = renderer;
          keyView.set(renderer);
          return renderer;
        }
        GLImmediate.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
        return renderer;
      },createRenderer:function createRenderer(renderer) {
        var useCurrProgram = !!GL.currProgram;
        var hasTextures = false;
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          var texAttribName = GLImmediate.TEXTURE0 + i;
          if (!GLImmediate.enabledClientAttributes[texAttribName])
            continue;
  
  
          hasTextures = true;
        }
  
        var ret = {
          init: function init() {
            // For fixed-function shader generation.
            var uTexUnitPrefix = 'u_texUnit';
            var aTexCoordPrefix = 'a_texCoord';
            var vTexCoordPrefix = 'v_texCoord';
            var vPrimColor = 'v_color';
            var uTexMatrixPrefix = GLImmediate.useTextureMatrix ? 'u_textureMatrix' : null;
  
            if (useCurrProgram) {
              if (GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type == GLctx.VERTEX_SHADER) {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
              } else {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
              }
              this.program = GL.programs[GL.currProgram];
              this.usedTexUnitList = [];
            } else {
              // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
              // in order to create the least expensive shader possible based on the features being
              // used, you should also update the code in the beginning of getRenderer to make sure
              // that you cache the renderer based on the said parameters.
              if (GLEmulation.fogEnabled) {
                switch (GLEmulation.fogMode) {
                  case 0x0801: // GL_EXP2
                    // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                    var fogFormula = '  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n';
                    break;
                  case 0x2601: // GL_LINEAR
                    // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                    var fogFormula = '  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n';
                    break;
                  default: // default to GL_EXP
                    // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                    var fogFormula = '  float fog = exp(-u_fogDensity * ecDistance); \n';
                    break;
                }
              }
  
              GLImmediate.TexEnvJIT.setGLSLVars(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix);
              var fsTexEnvPass = GLImmediate.TexEnvJIT.genAllPassLines('gl_FragColor', 2);
  
              var texUnitAttribList = '';
              var texUnitVaryingList = '';
              var texUnitUniformList = '';
              var vsTexCoordInits = '';
              this.usedTexUnitList = GLImmediate.TexEnvJIT.getUsedTexUnitList();
              for (var i = 0; i < this.usedTexUnitList.length; i++) {
                var texUnit = this.usedTexUnitList[i];
                texUnitAttribList += 'attribute vec4 ' + aTexCoordPrefix + texUnit + ';\n';
                texUnitVaryingList += 'varying vec4 ' + vTexCoordPrefix + texUnit + ';\n';
                texUnitUniformList += 'uniform sampler2D ' + uTexUnitPrefix + texUnit + ';\n';
                vsTexCoordInits += '  ' + vTexCoordPrefix + texUnit + ' = ' + aTexCoordPrefix + texUnit + ';\n';
  
                if (GLImmediate.useTextureMatrix) {
                  texUnitUniformList += 'uniform mat4 ' + uTexMatrixPrefix + texUnit + ';\n';
                }
              }
  
              var vsFogVaryingInit = null;
              if (GLEmulation.fogEnabled) {
                vsFogVaryingInit = '  v_fogFragCoord = abs(ecPosition.z);\n';
              }
  
              var vsSource = [
                'attribute vec4 a_position;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',
                texUnitAttribList,
                texUnitVaryingList,
                (GLEmulation.fogEnabled ? 'varying float v_fogFragCoord;' : null),
                'uniform mat4 u_modelView;',
                'uniform mat4 u_projection;',
                'void main()',
                '{',
                '  vec4 ecPosition = u_modelView * a_position;', // eye-coordinate position
                '  gl_Position = u_projection * ecPosition;',
                '  v_color = a_color;',
                vsTexCoordInits,
                vsFogVaryingInit,
                '}',
                ''
              ].join('\n').replace(/\n\n+/g, '\n');
  
              this.vertexShader = GLctx.createShader(GLctx.VERTEX_SHADER);
              GLctx.shaderSource(this.vertexShader, vsSource);
              GLctx.compileShader(this.vertexShader);
  
              var fogHeaderIfNeeded = null;
              if (GLEmulation.fogEnabled) {
                fogHeaderIfNeeded = [
                  '',
                  'varying float v_fogFragCoord; ',
                  'uniform vec4 u_fogColor;      ',
                  'uniform float u_fogEnd;       ',
                  'uniform float u_fogScale;     ',
                  'uniform float u_fogDensity;   ',
                  'float ffog(in float ecDistance) { ',
                  fogFormula,
                  '  fog = clamp(fog, 0.0, 1.0); ',
                  '  return fog;                 ',
                  '}',
                  '',
                ].join("\n");
              }
  
              var fogPass = null;
              if (GLEmulation.fogEnabled) {
                fogPass = 'gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n';
              }
  
              var fsSource = [
                'precision mediump float;',
                texUnitVaryingList,
                texUnitUniformList,
                'varying vec4 v_color;',
                fogHeaderIfNeeded,
                'void main()',
                '{',
                fsTexEnvPass,
                fogPass,
                '}',
                ''
              ].join("\n").replace(/\n\n+/g, '\n');
  
              this.fragmentShader = GLctx.createShader(GLctx.FRAGMENT_SHADER);
              GLctx.shaderSource(this.fragmentShader, fsSource);
              GLctx.compileShader(this.fragmentShader);
  
              this.program = GLctx.createProgram();
              GLctx.attachShader(this.program, this.vertexShader);
              GLctx.attachShader(this.program, this.fragmentShader);
  
              // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
              // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
              // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
              // own shaders that didn't have attributes in the same locations.
              GLctx.bindAttribLocation(this.program, GLImmediate.VERTEX, 'a_position');
              GLctx.bindAttribLocation(this.program, GLImmediate.COLOR, 'a_color');
              GLctx.bindAttribLocation(this.program, GLImmediate.NORMAL, 'a_normal');
              var maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
              for (var i = 0; i < GLImmediate.MAX_TEXTURES && GLImmediate.TEXTURE0 + i < maxVertexAttribs; i++) {
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, 'a_texCoord'+i);
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, aTexCoordPrefix+i);
              }
              GLctx.linkProgram(this.program);
            }
  
            // Stores an array that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
            // each time we render with this program.
            this.textureMatrixVersion = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
  
            this.positionLocation = GLctx.getAttribLocation(this.program, 'a_position');
  
            this.texCoordLocations = [];
  
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              if (!GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i]) {
                this.texCoordLocations[i] = -1;
                continue;
              }
  
              if (useCurrProgram) {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, 'a_texCoord' + i);
              } else {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, aTexCoordPrefix + i);
              }
            }
            this.colorLocation = GLctx.getAttribLocation(this.program, 'a_color');
            if (!useCurrProgram) {
              // Temporarily switch to the program so we can set our sampler uniforms early.
              var prevBoundProg = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              GLctx.useProgram(this.program);
              {
                for (var i = 0; i < this.usedTexUnitList.length; i++) {
                  var texUnitID = this.usedTexUnitList[i];
                  var texSamplerLoc = GLctx.getUniformLocation(this.program, uTexUnitPrefix + texUnitID);
                  GLctx.uniform1i(texSamplerLoc, texUnitID);
                }
              }
              // The default color attribute value is not the same as the default for all other attribute streams (0,0,0,1) but (1,1,1,1),
              // so explicitly set it right at start.
              GLctx.vertexAttrib4fv(this.colorLocation, [1,1,1,1]);
              GLctx.useProgram(prevBoundProg);
            }
  
            this.textureMatrixLocations = [];
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              this.textureMatrixLocations[i] = GLctx.getUniformLocation(this.program, 'u_textureMatrix' + i);
            }
            this.normalLocation = GLctx.getAttribLocation(this.program, 'a_normal');
  
            this.modelViewLocation = GLctx.getUniformLocation(this.program, 'u_modelView');
            this.projectionLocation = GLctx.getUniformLocation(this.program, 'u_projection');
  
            this.hasTextures = hasTextures;
            this.hasNormal = GLImmediate.enabledClientAttributes[GLImmediate.NORMAL] &&
                             GLImmediate.clientAttributes[GLImmediate.NORMAL].size > 0 &&
                             this.normalLocation >= 0;
            this.hasColor = (this.colorLocation === 0) || this.colorLocation > 0;
  
            this.floatType = GLctx.FLOAT; // minor optimization
  
            this.fogColorLocation = GLctx.getUniformLocation(this.program, 'u_fogColor');
            this.fogEndLocation = GLctx.getUniformLocation(this.program, 'u_fogEnd');
            this.fogScaleLocation = GLctx.getUniformLocation(this.program, 'u_fogScale');
            this.fogDensityLocation = GLctx.getUniformLocation(this.program, 'u_fogDensity');
            this.hasFog = !!(this.fogColorLocation || this.fogEndLocation ||
                             this.fogScaleLocation || this.fogDensityLocation);
          },
  
          prepare: function prepare() {
            // Calculate the array buffer
            var arrayBuffer;
            if (!GL.currArrayBuffer) {
              var start = GLImmediate.firstVertex*GLImmediate.stride;
              var end = GLImmediate.lastVertex*GLImmediate.stride;
              arrayBuffer = GL.getTempVertexBuffer(end);
              // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
            } else {
              arrayBuffer = GL.currArrayBuffer;
            }
  
            // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
            // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
            // have odd glitches
            var lastRenderer = GLImmediate.lastRenderer;
            var canSkip = this == lastRenderer &&
                          arrayBuffer == GLImmediate.lastArrayBuffer &&
                          (GL.currProgram || this.program) == GLImmediate.lastProgram &&
                          GLImmediate.stride == GLImmediate.lastStride &&
                          !GLImmediate.matricesModified;
            if (!canSkip && lastRenderer) lastRenderer.cleanup();
            if (!GL.currArrayBuffer) {
              // Bind the array buffer and upload data after cleaning up the previous renderer
  
              if (arrayBuffer != GLImmediate.lastArrayBuffer) {
                GLctx.bindBuffer(GLctx.ARRAY_BUFFER, arrayBuffer);
                GLImmediate.lastArrayBuffer = arrayBuffer;
              }
  
              GLctx.bufferSubData(GLctx.ARRAY_BUFFER, start, GLImmediate.vertexData.subarray(start >> 2, end >> 2));
            }
            if (canSkip) return;
            GLImmediate.lastRenderer = this;
            GLImmediate.lastProgram = GL.currProgram || this.program;
            GLImmediate.lastStride == GLImmediate.stride;
            GLImmediate.matricesModified = false;
  
            if (!GL.currProgram) {
              if (GLImmediate.fixedFunctionProgram != this.program) {
                GLctx.useProgram(this.program);
                GLImmediate.fixedFunctionProgram = this.program;
              }
            }
  
            if (this.modelViewLocation && this.modelViewMatrixVersion != GLImmediate.matrixVersion[0/*m*/]) {
              this.modelViewMatrixVersion = GLImmediate.matrixVersion[0/*m*/];
              GLctx.uniformMatrix4fv(this.modelViewLocation, false, GLImmediate.matrix[0/*m*/]);
            }
            if (this.projectionLocation && this.projectionMatrixVersion != GLImmediate.matrixVersion[1/*p*/]) {
              this.projectionMatrixVersion = GLImmediate.matrixVersion[1/*p*/];
              GLctx.uniformMatrix4fv(this.projectionLocation, false, GLImmediate.matrix[1/*p*/]);
            }
  
            var clientAttributes = GLImmediate.clientAttributes;
            var posAttr = clientAttributes[GLImmediate.VERTEX];
  
  
            GLctx.vertexAttribPointer(this.positionLocation, posAttr.size, posAttr.type, false, GLImmediate.stride, posAttr.offset);
            GLctx.enableVertexAttribArray(this.positionLocation);
            if (this.hasNormal) {
              var normalAttr = clientAttributes[GLImmediate.NORMAL];
              GLctx.vertexAttribPointer(this.normalLocation, normalAttr.size, normalAttr.type, true, GLImmediate.stride, normalAttr.offset);
              GLctx.enableVertexAttribArray(this.normalLocation);
            }
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                var attribLoc = this.texCoordLocations[i];
                if (attribLoc === undefined || attribLoc < 0) continue;
                var texAttr = clientAttributes[GLImmediate.TEXTURE0+i];
  
                if (texAttr.size) {
                  GLctx.vertexAttribPointer(attribLoc, texAttr.size, texAttr.type, false, GLImmediate.stride, texAttr.offset);
                  GLctx.enableVertexAttribArray(attribLoc);
                } else {
                  // These two might be dangerous, but let's try them.
                  GLctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
                  GLctx.disableVertexAttribArray(attribLoc);
                }
                var t = 2/*t*/+i;
                if (this.textureMatrixLocations[i] && this.textureMatrixVersion[t] != GLImmediate.matrixVersion[t]) { // XXX might we need this even without the condition we are currently in?
                  this.textureMatrixVersion[t] = GLImmediate.matrixVersion[t];
                  GLctx.uniformMatrix4fv(this.textureMatrixLocations[i], false, GLImmediate.matrix[t]);
                }
              }
            }
            if (GLImmediate.enabledClientAttributes[GLImmediate.COLOR]) {
              var colorAttr = clientAttributes[GLImmediate.COLOR];
              GLctx.vertexAttribPointer(this.colorLocation, colorAttr.size, colorAttr.type, true, GLImmediate.stride, colorAttr.offset);
              GLctx.enableVertexAttribArray(this.colorLocation);
            }
            else if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
              GLctx.vertexAttrib4fv(this.colorLocation, GLImmediate.clientColor);
            }
            if (this.hasFog) {
              if (this.fogColorLocation) GLctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
              if (this.fogEndLocation) GLctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
              if (this.fogScaleLocation) GLctx.uniform1f(this.fogScaleLocation, 1/(GLEmulation.fogEnd - GLEmulation.fogStart));
              if (this.fogDensityLocation) GLctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
            }
          },
  
          cleanup: function cleanup() {
            GLctx.disableVertexAttribArray(this.positionLocation);
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                if (GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0+i] && this.texCoordLocations[i] >= 0) {
                  GLctx.disableVertexAttribArray(this.texCoordLocations[i]);
                }
              }
            }
            if (this.hasColor) {
              GLctx.disableVertexAttribArray(this.colorLocation);
            }
            if (this.hasNormal) {
              GLctx.disableVertexAttribArray(this.normalLocation);
            }
            if (!GL.currProgram) {
              GLctx.useProgram(null);
              GLImmediate.fixedFunctionProgram = 0;
            }
            if (!GL.currArrayBuffer) {
              GLctx.bindBuffer(GLctx.ARRAY_BUFFER, null);
              GLImmediate.lastArrayBuffer = null;
            }
  
            GLImmediate.lastRenderer = null;
            GLImmediate.lastProgram = null;
            GLImmediate.matricesModified = true;
          }
        };
        ret.init();
        return ret;
      },setupFuncs:function () {
        // Replace some functions with immediate-mode aware versions. If there are no client
        // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
        // for emulation
        _glDrawArrays = _emscripten_glDrawArrays = function _glDrawArrays(mode, first, count) {
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6) {
            GLctx.drawArrays(mode, first, count);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,(GLImmediate.vertexPointer + (first+count)*GLImmediate.stride)>>2); // XXX assuming float
            GLImmediate.firstVertex = first;
            GLImmediate.lastVertex = first + count;
          }
          GLImmediate.flush(null, first);
          GLImmediate.mode = -1;
        };
  
        _glDrawElements = _emscripten_glDrawElements = function _glDrawElements(mode, count, type, indices, start, end) { // start, end are given if we come from glDrawRangeElements
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6 && GL.currElementArrayBuffer) {
            GLctx.drawElements(mode, count, type, indices);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
            GLImmediate.lastVertex = end ? end+1 : 0;
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,((end ? GLImmediate.vertexPointer + (end+1)*GLImmediate.stride : TOTAL_MEMORY))>>2); // XXX assuming float
          }
          GLImmediate.flush(count, 0, indices);
          GLImmediate.mode = -1;
        };
  
        // TexEnv stuff needs to be prepared early, so do it here.
        // init() is too late for -O2, since it freezes the GL functions
        // by that point.
        GLImmediate.MapTreeLib = GLImmediate.spawnMapTreeLib();
        GLImmediate.spawnMapTreeLib = null;
  
        GLImmediate.TexEnvJIT = GLImmediate.spawnTexEnvJIT();
        GLImmediate.spawnTexEnvJIT = null;
  
        GLImmediate.setupHooks();
      },setupHooks:function () {
        if (!GLEmulation.hasRunInit) {
          GLEmulation.init();
        }
  
        var glActiveTexture = _glActiveTexture;
        _glActiveTexture = _emscripten_glActiveTexture = function _glActiveTexture(texture) {
          GLImmediate.TexEnvJIT.hook_activeTexture(texture);
          glActiveTexture(texture);
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          GLImmediate.TexEnvJIT.hook_enable(cap);
          glEnable(cap);
        };
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          GLImmediate.TexEnvJIT.hook_disable(cap);
          glDisable(cap);
        };
  
        var glTexEnvf = (typeof(_glTexEnvf) != 'undefined') ? _glTexEnvf : function(){};
        _glTexEnvf = _emscripten_glTexEnvf = function _glTexEnvf(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvf(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvf(target, pname, param);
        };
        var glTexEnvi = (typeof(_glTexEnvi) != 'undefined') ? _glTexEnvi : function(){};
        _glTexEnvi = _emscripten_glTexEnvi = function _glTexEnvi(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvi(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvi(target, pname, param);
        };
        var glTexEnvfv = (typeof(_glTexEnvfv) != 'undefined') ? _glTexEnvfv : function(){};
        _glTexEnvfv = _emscripten_glTexEnvfv = function _glTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvfv(target, pname, param);
        };
  
        _glGetTexEnviv = function _glGetTexEnviv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnviv(target, pname, param);
        };
  
        _glGetTexEnvfv = function _glGetTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnvfv(target, pname, param);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x8B8D: { // GL_CURRENT_PROGRAM
              // Just query directly so we're working with WebGL objects.
              var cur = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              if (cur == GLImmediate.fixedFunctionProgram) {
                // Pretend we're not using a program.
                HEAP32[((params)>>2)]=0;
                return;
              }
              break;
            }
          }
          glGetIntegerv(pname, params);
        };
      },initted:false,init:function () {
        Module.printErr('WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports');
        GLImmediate.initted = true;
  
        if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case
  
        // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
        // slightly, so it is advantageous to choose as small value as needed.
        GLImmediate.MAX_TEXTURES = Module['GL_MAX_TEXTURE_IMAGE_UNITS'] || GLctx.getParameter(GLctx.MAX_TEXTURE_IMAGE_UNITS);
  
        GLImmediate.TexEnvJIT.init(GLctx, GLImmediate.MAX_TEXTURES);
  
        GLImmediate.NUM_ATTRIBUTES = 3 /*pos+normal+color attributes*/ + GLImmediate.MAX_TEXTURES;
        GLImmediate.clientAttributes = [];
        GLEmulation.enabledClientAttribIndices = [];
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          GLImmediate.clientAttributes.push({});
          GLEmulation.enabledClientAttribIndices.push(false);
        }
  
        // Initialize matrix library
        // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
        // the matrices to the shader program only if they have an old version of the data.
        GLImmediate.matrix = [];
        GLImmediate.matrixStack = [];
        GLImmediate.matrixVersion = [];
        for (var i = 0; i < 2 + GLImmediate.MAX_TEXTURES; i++) { // Modelview, Projection, plus one matrix for each texture coordinate.
          GLImmediate.matrixStack.push([]);
          GLImmediate.matrixVersion.push(0);
          GLImmediate.matrix.push(GLImmediate.matrixLib.mat4.create());
          GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[i]);
        }
  
        // Renderer cache
        GLImmediate.rendererCache = GLImmediate.MapTreeLib.create();
  
        // Buffers for data
        GLImmediate.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
        GLImmediate.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);
  
        GLImmediate.vertexDataU8 = new Uint8Array(GLImmediate.tempData.buffer);
  
        GL.generateTempBuffers(true);
  
        GLImmediate.clientColor = new Float32Array([1, 1, 1, 1]);
      },prepareClientAttributes:function prepareClientAttributes(count, beginEnd) {
        // If no client attributes were modified since we were last called, do nothing. Note that this
        // does not work for glBegin/End, where we generate renderer components dynamically and then
        // disable them ourselves, but it does help with glDrawElements/Arrays.
        if (!GLImmediate.modifiedClientAttributes) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
          return;
        }
        GLImmediate.modifiedClientAttributes = false;
  
        // The role of prepareClientAttributes is to examine the set of client-side vertex attribute buffers
        // that user code has submitted, and to prepare them to be uploaded to a VBO in GPU memory
        // (since WebGL does not support client-side rendering, i.e. rendering from vertex data in CPU memory)
        // User can submit vertex data generally in three different configurations:
        // 1. Fully planar: all attributes are in their own separate tightly-packed arrays in CPU memory.
        // 2. Fully interleaved: all attributes share a single array where data is interleaved something like (pos,uv,normal), (pos,uv,normal), ...
        // 3. Complex hybrid: Multiple separate arrays that either are sparsely strided, and/or partially interleave vertex attributes.
  
        // For simplicity, we support the case (2) as the fast case. For (1) and (3), we do a memory copy of the
        // vertex data here to prepare a relayouted buffer that is of the structure in case (2). The reason
        // for this is that it allows the emulation code to get away with using just one VBO buffer for rendering,
        // and not have to maintain multiple ones. Therefore cases (1) and (3) will be very slow, and case (2) is fast.
  
        // Detect which case we are in by using a quick heuristic by examining the strides of the buffers. If all the buffers have identical 
        // stride, we assume we have case (2), otherwise we have something more complex.
        var clientStartPointer = 0x7FFFFFFF;
        var bytes = 0; // Total number of bytes taken up by a single vertex.
        var minStride = 0x7FFFFFFF;
        var maxStride = 0;
        var attributes = GLImmediate.liveClientAttributes;
        attributes.length = 0;
        for (var i = 0; i < 3+GLImmediate.MAX_TEXTURES; i++) {
          if (GLImmediate.enabledClientAttributes[i]) {
            var attr = GLImmediate.clientAttributes[i];
            attributes.push(attr);
            clientStartPointer = Math.min(clientStartPointer, attr.pointer);
            attr.sizeBytes = attr.size * GL.byteSizeByType[attr.type - GL.byteSizeByTypeRoot];
            bytes += attr.sizeBytes;
            minStride = Math.min(minStride, attr.stride);
            maxStride = Math.max(maxStride, attr.stride);
          }
        }
  
        if ((minStride != maxStride || maxStride < bytes) && !beginEnd) {
          // We are in cases (1) or (3): slow path, shuffle the data around into a single interleaved vertex buffer.
          // The immediate-mode glBegin()/glEnd() vertex submission gets automatically generated in appropriate layout,
          // so never need to come down this path if that was used.
          if (!GLImmediate.restrideBuffer) GLImmediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
          var start = GLImmediate.restrideBuffer;
          bytes = 0;
          // calculate restrided offsets and total size
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var size = attr.sizeBytes;
            if (size % 4 != 0) size += 4 - (size % 4); // align everything
            attr.offset = bytes;
            bytes += size;
          }
          // copy out the data (we need to know the stride for that, and define attr.pointer)
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var srcStride = Math.max(attr.sizeBytes, attr.stride);
            if ((srcStride & 3) == 0 && (attr.sizeBytes & 3) == 0) {
              var size4 = attr.sizeBytes>>2;
              var srcStride4 = Math.max(attr.sizeBytes, attr.stride)>>2;
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < size4; k++) { // copy in chunks of 4 bytes, our alignment makes this possible
                  HEAP32[((start + attr.offset + bytes*j)>>2) + k] = HEAP32[(attr.pointer>>2) + j*srcStride4 + k];
                }
              }
            } else {
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < attr.sizeBytes; k++) { // source data was not aligned to multiples of 4, must copy byte by byte.
                  HEAP8[start + attr.offset + bytes*j + k] = HEAP8[attr.pointer + j*srcStride + k];
                }
              }
            }
            attr.pointer = start + attr.offset;
          }
          GLImmediate.stride = bytes;
          GLImmediate.vertexPointer = start;
        } else {
          // case (2): fast path, all data is interleaved to a single vertex array so we can get away with a single VBO upload.
          if (GL.currArrayBuffer) {
            GLImmediate.vertexPointer = 0;
          } else {
            GLImmediate.vertexPointer = clientStartPointer;
          }
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            attr.offset = attr.pointer - GLImmediate.vertexPointer; // Compute what will be the offset of this attribute in the VBO after we upload.
          }
          GLImmediate.stride = Math.max(maxStride, bytes);
        }
        if (!beginEnd) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
        }
      },flush:function flush(numProvidedIndexes, startIndex, ptr) {
        startIndex = startIndex || 0;
        ptr = ptr || 0;
  
        var renderer = GLImmediate.getRenderer();
  
        // Generate index data in a format suitable for GLES 2.0/WebGL
        var numVertexes = 4 * GLImmediate.vertexCounter / GLImmediate.stride;
        var emulatedElementArrayBuffer = false;
        var numIndexes = 0;
        if (numProvidedIndexes) {
          numIndexes = numProvidedIndexes;
          if (!GL.currArrayBuffer && GLImmediate.firstVertex > GLImmediate.lastVertex) {
            // Figure out the first and last vertex from the index data
            for (var i = 0; i < numProvidedIndexes; i++) {
              var currIndex = HEAPU16[(((ptr)+(i*2))>>1)];
              GLImmediate.firstVertex = Math.min(GLImmediate.firstVertex, currIndex);
              GLImmediate.lastVertex = Math.max(GLImmediate.lastVertex, currIndex+1);
            }
          }
          if (!GL.currElementArrayBuffer) {
            // If no element array buffer is bound, then indices is a literal pointer to clientside data
            var indexBuffer = GL.getTempIndexBuffer(numProvidedIndexes << 1);
            GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
            GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER, 0, HEAPU16.subarray((ptr)>>1,(ptr + (numProvidedIndexes << 1))>>1));
            ptr = 0;
            emulatedElementArrayBuffer = true;
          }
        } else if (GLImmediate.mode > 6) { // above GL_TRIANGLE_FAN are the non-GL ES modes
          if (GLImmediate.mode != 7) throw 'unsupported immediate mode ' + GLImmediate.mode; // GL_QUADS
          // GLImmediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
          // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
          // Then since indexes are 2 bytes each, that means 3
          ptr = GLImmediate.firstVertex*3;
          var numQuads = numVertexes / 4;
          numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          emulatedElementArrayBuffer = true;
        }
  
        renderer.prepare();
  
        if (numIndexes) {
          GLctx.drawElements(GLctx.TRIANGLES, numIndexes, GLctx.UNSIGNED_SHORT, ptr);
        } else {
          GLctx.drawArrays(GLImmediate.mode, startIndex, numVertexes);
        }
  
        if (emulatedElementArrayBuffer) {
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.buffers[GL.currElementArrayBuffer] || null);
        }
  
      }};
  GLImmediate.matrixLib = (function() {
  
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */
  
  // Modifed for emscripten: Global scoping etc.
  
  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */
  
  
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};
  
  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};
  
  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};
  
  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};
  
  var MatrixArray = Float32Array;
  
  /*
   * vec3
   */
   
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
      var dest = new MatrixArray(3);
  
      if (vec) {
          dest[0] = vec[0];
          dest[1] = vec[1];
          dest[2] = vec[2];
      } else {
          dest[0] = dest[1] = dest[2] = 0;
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
  
      return dest;
  };
  
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] += vec2[0];
          vec[1] += vec2[1];
          vec[2] += vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] + vec2[0];
      dest[1] = vec[1] + vec2[1];
      dest[2] = vec[2] + vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] -= vec2[0];
          vec[1] -= vec2[1];
          vec[2] -= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] - vec2[0];
      dest[1] = vec[1] - vec2[1];
      dest[2] = vec[2] - vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] *= vec2[0];
          vec[1] *= vec2[1];
          vec[2] *= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] * vec2[0];
      dest[1] = vec[1] * vec2[1];
      dest[2] = vec[2] * vec2[2];
      return dest;
  };
  
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = -vec[0];
      dest[1] = -vec[1];
      dest[2] = -vec[2];
      return dest;
  };
  
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
      if (!dest || vec === dest) {
          vec[0] *= val;
          vec[1] *= val;
          vec[2] *= val;
          return vec;
      }
  
      dest[0] = vec[0] * val;
      dest[1] = vec[1] * val;
      dest[2] = vec[2] * val;
      return dest;
  };
  
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      } else if (len === 1) {
          dest[0] = x;
          dest[1] = y;
          dest[2] = z;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];
  
      dest[0] = y * z2 - z * y2;
      dest[1] = z * x2 - x * z2;
      dest[2] = x * y2 - y * x2;
      return dest;
  };
  
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
      var x = vec[0], y = vec[1], z = vec[2];
      return Math.sqrt(x * x + y * y + z * z);
  };
  
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
      return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0] - vec2[0],
          y = vec[1] - vec2[1],
          z = vec[2] - vec2[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
      dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
      dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
  
      return dest;
  };
  
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
      var x = vec2[0] - vec[0],
          y = vec2[1] - vec[1],
          z = vec2[2] - vec[2];
          
      return Math.sqrt(x*x + y*y + z*z);
  };
  
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
      if (!dest) { dest = vec; }
  
      var m = mat4.create();
      var v = new MatrixArray(4);
      
      v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
      v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
      v[2] = 2.0 * vec[2] - 1.0;
      v[3] = 1.0;
      
      mat4.multiply(proj, view, m);
      if(!mat4.inverse(m)) { return null; }
      
      mat4.multiplyVec4(m, v);
      if(v[3] === 0.0) { return null; }
  
      dest[0] = v[0] / v[3];
      dest[1] = v[1] / v[3];
      dest[2] = v[2] / v[3];
      
      return dest;
  };
  
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
      return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  
  /*
   * mat3
   */
  
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
      var dest = new MatrixArray(9);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 1;
      dest[5] = 0;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2],
              a12 = mat[5];
  
          mat[1] = mat[3];
          mat[2] = mat[6];
          mat[3] = a01;
          mat[5] = mat[7];
          mat[6] = a02;
          mat[7] = a12;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[3];
      dest[2] = mat[6];
      dest[3] = mat[1];
      dest[4] = mat[4];
      dest[5] = mat[7];
      dest[6] = mat[2];
      dest[7] = mat[5];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[15] = 1;
      dest[14] = 0;
      dest[13] = 0;
      dest[12] = 0;
  
      dest[11] = 0;
      dest[10] = mat[8];
      dest[9] = mat[7];
      dest[8] = mat[6];
  
      dest[7] = 0;
      dest[6] = mat[5];
      dest[5] = mat[4];
      dest[4] = mat[3];
  
      dest[3] = 0;
      dest[2] = mat[2];
      dest[1] = mat[1];
      dest[0] = mat[0];
  
      return dest;
  };
  
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +
          ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] +
          ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  
  /*
   * mat4
   */
  
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
      var dest = new MatrixArray(16);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 1;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = 1;
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2], a03 = mat[3],
              a12 = mat[6], a13 = mat[7],
              a23 = mat[11];
  
          mat[1] = mat[4];
          mat[2] = mat[8];
          mat[3] = mat[12];
          mat[4] = a01;
          mat[6] = mat[9];
          mat[7] = mat[13];
          mat[8] = a02;
          mat[9] = a12;
          mat[11] = mat[14];
          mat[12] = a03;
          mat[13] = a13;
          mat[14] = a23;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[4];
      dest[2] = mat[8];
      dest[3] = mat[12];
      dest[4] = mat[1];
      dest[5] = mat[5];
      dest[6] = mat[9];
      dest[7] = mat[13];
      dest[8] = mat[2];
      dest[9] = mat[6];
      dest[10] = mat[10];
      dest[11] = mat[14];
      dest[12] = mat[3];
      dest[13] = mat[7];
      dest[14] = mat[11];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
  
      return (a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
              a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
              a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
              a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
              a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
              a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33);
  };
  
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,
  
          d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06),
          invDet;
  
          // Calculate the determinant
          if (!d) { return null; }
          invDet = 1 / d;
  
      dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[4];
      dest[4] = mat[5];
      dest[5] = mat[6];
      dest[6] = mat[8];
      dest[7] = mat[9];
      dest[8] = mat[10];
  
      return dest;
  };
  
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2],
          a10 = mat[4], a11 = mat[5], a12 = mat[6],
          a20 = mat[8], a21 = mat[9], a22 = mat[10],
  
          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,
  
          d = a00 * b01 + a01 * b11 + a02 * b21,
          id;
  
      if (!d) { return null; }
      id = 1 / d;
  
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = b01 * id;
      dest[1] = (-a22 * a01 + a02 * a21) * id;
      dest[2] = (a12 * a01 - a02 * a11) * id;
      dest[3] = b11 * id;
      dest[4] = (a22 * a00 - a02 * a20) * id;
      dest[5] = (-a12 * a00 + a02 * a10) * id;
      dest[6] = b21 * id;
      dest[7] = (-a21 * a00 + a01 * a20) * id;
      dest[8] = (a11 * a00 - a01 * a10) * id;
  
      return dest;
  };
  
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3],
          b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7],
          b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11],
          b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
  
      dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
      dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
      dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
      dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
      dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
      dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
      dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
      dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
      dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
      dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
      dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
      dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
      dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
      dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
      dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
      dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
  
      return dest;
  };
  
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
      dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
  
      return dest;
  };
  
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;
  
      if (!dest || mat === dest) {
          mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
          mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
          mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
          mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
          return mat;
      }
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      dest[0] = a00; dest[1] = a01; dest[2] = a02; dest[3] = a03;
      dest[4] = a10; dest[5] = a11; dest[6] = a12; dest[7] = a13;
      dest[8] = a20; dest[9] = a21; dest[10] = a22; dest[11] = a23;
  
      dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
      dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
      dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
      dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
      return dest;
  };
  
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2];
  
      if (!dest || mat === dest) {
          mat[0] *= x;
          mat[1] *= x;
          mat[2] *= x;
          mat[3] *= x;
          mat[4] *= y;
          mat[5] *= y;
          mat[6] *= y;
          mat[7] *= y;
          mat[8] *= z;
          mat[9] *= z;
          mat[10] *= z;
          mat[11] *= z;
          return mat;
      }
  
      dest[0] = mat[0] * x;
      dest[1] = mat[1] * x;
      dest[2] = mat[2] * x;
      dest[3] = mat[3] * x;
      dest[4] = mat[4] * y;
      dest[5] = mat[5] * y;
      dest[6] = mat[6] * y;
      dest[7] = mat[7] * y;
      dest[8] = mat[8] * z;
      dest[9] = mat[9] * z;
      dest[10] = mat[10] * z;
      dest[11] = mat[11] * z;
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around 
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;
  
      if (!len) { return null; }
      if (len !== 1) {
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
      }
  
      s = Math.sin(angle);
      c = Math.cos(angle);
      t = 1 - c;
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform rotation-specific matrix multiplication
      dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
      dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
      dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
      dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
  
      dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
      dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
      dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
      dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
  
      dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
      dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
      dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
      dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[4] = a10 * c + a20 * s;
      dest[5] = a11 * c + a21 * s;
      dest[6] = a12 * c + a22 * s;
      dest[7] = a13 * c + a23 * s;
  
      dest[8] = a10 * -s + a20 * c;
      dest[9] = a11 * -s + a21 * c;
      dest[10] = a12 * -s + a22 * c;
      dest[11] = a13 * -s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a20 * -s;
      dest[1] = a01 * c + a21 * -s;
      dest[2] = a02 * c + a22 * -s;
      dest[3] = a03 * c + a23 * -s;
  
      dest[8] = a00 * s + a20 * c;
      dest[9] = a01 * s + a21 * c;
      dest[10] = a02 * s + a22 * c;
      dest[11] = a03 * s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a10 * s;
      dest[1] = a01 * c + a11 * s;
      dest[2] = a02 * c + a12 * s;
      dest[3] = a03 * c + a13 * s;
  
      dest[4] = a00 * -s + a10 * c;
      dest[5] = a01 * -s + a11 * c;
      dest[6] = a02 * -s + a12 * c;
      dest[7] = a03 * -s + a13 * c;
  
      return dest;
  };
  
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = (near * 2) / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = (near * 2) / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = (right + left) / rl;
      dest[9] = (top + bottom) / tb;
      dest[10] = -(far + near) / fn;
      dest[11] = -1;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = -(far * near * 2) / fn;
      dest[15] = 0;
      return dest;
  };
  
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
      var top = near * Math.tan(fovy * Math.PI / 360.0),
          right = top * aspect;
      return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = 2 / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 2 / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = -2 / fn;
      dest[11] = 0;
      dest[12] = -(left + right) / rl;
      dest[13] = -(top + bottom) / tb;
      dest[14] = -(far + near) / fn;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];
  
      if (eyex === centerx && eyey === centery && eyez === centerz) {
          return mat4.identity(dest);
      }
  
      //vec3.direction(eye, center, z);
      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
  
      // normalize (no check needed for 0 because of early return)
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
  
      //vec3.normalize(vec3.cross(up, z, x));
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }
  
      //vec3.normalize(vec3.cross(z, x, y));
      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
  
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }
  
      dest[0] = x0;
      dest[1] = y0;
      dest[2] = z0;
      dest[3] = 0;
      dest[4] = x1;
      dest[5] = y1;
      dest[6] = z1;
      dest[7] = 0;
      dest[8] = x2;
      dest[9] = y2;
      dest[10] = z2;
      dest[11] = 0;
      dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
      if (!dest) { dest = mat4.create(); }
  
      // Quaternion math
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = vec[0];
      dest[13] = vec[1];
      dest[14] = vec[2];
      dest[15] = 1;
      
      return dest;
  };
  
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +
          ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +
          ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +
          ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  
  /*
   * quat4
   */
  
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
      var dest = new MatrixArray(4);
  
      if (quat) {
          dest[0] = quat[0];
          dest[1] = quat[1];
          dest[2] = quat[2];
          dest[3] = quat[3];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
  
      return dest;
  };
  
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length. 
   * Any existing W component will be ignored. 
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
      var x = quat[0], y = quat[1], z = quat[2];
  
      if (!dest || quat === dest) {
          quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
          return quat;
      }
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return dest;
  };
  
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function(quat, quat2){
      return quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];
  };
  
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function(quat, dest) {
      var q0 = quat[0], q1 = quat[1], q2 = quat[2], q3 = quat[3],
          dot = q0*q0 + q1*q1 + q2*q2 + q3*q3,
          invDot = dot ? 1.0/dot : 0;
      
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
      
      if(!dest || quat === dest) {
          quat[0] *= -invDot;
          quat[1] *= -invDot;
          quat[2] *= -invDot;
          quat[3] *= invDot;
          return quat;
      }
      dest[0] = -quat[0]*invDot;
      dest[1] = -quat[1]*invDot;
      dest[2] = -quat[2]*invDot;
      dest[3] = quat[3]*invDot;
      return dest;
  };
  
  
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
      if (!dest || quat === dest) {
          quat[0] *= -1;
          quat[1] *= -1;
          quat[2] *= -1;
          return quat;
      }
      dest[0] = -quat[0];
      dest[1] = -quat[1];
      dest[2] = -quat[2];
      dest[3] = quat[3];
      return dest;
  };
  
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
      if (!dest) { dest = quat; }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          len = Math.sqrt(x * x + y * y + z * z + w * w);
      if (len === 0) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          dest[3] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      dest[3] = w * len;
  
      return dest;
  };
  
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
      if(!dest || quat === dest) {
          quat[0] += quat2[0];
          quat[1] += quat2[1];
          quat[2] += quat2[2];
          quat[3] += quat2[3];
          return quat;
      }
      dest[0] = quat[0]+quat2[0];
      dest[1] = quat[1]+quat2[1];
      dest[2] = quat[2]+quat2[2];
      dest[3] = quat[3]+quat2[3];
      return dest;
  };
  
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
      if (!dest) { dest = quat; }
  
      var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3],
          qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];
  
      dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3],
  
          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;
  
      // calculate result * inverse quat
      dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  
      return dest;
  };
  
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
      if(!dest || quat === dest) {
          quat[0] *= val;
          quat[1] *= val;
          quat[2] *= val;
          quat[3] *= val;
          return quat;
      }
      dest[0] = quat[0]*val;
      dest[1] = quat[1]*val;
      dest[2] = quat[2]*val;
      dest[3] = quat[3]*val;
      return dest;
  };
  
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
  
      dest[3] = xy - wz;
      dest[4] = 1 - (xx + zz);
      dest[5] = yz + wx;
  
      dest[6] = xz + wy;
      dest[7] = yz - wx;
      dest[8] = 1 - (xx + yy);
  
      return dest;
  };
  
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
  
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
  
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
  
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
      if (!dest) { dest = quat; }
  
      var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
          halfTheta,
          sinHalfTheta,
          ratioA,
          ratioB;
  
      if (Math.abs(cosHalfTheta) >= 1.0) {
          if (dest !== quat) {
              dest[0] = quat[0];
              dest[1] = quat[1];
              dest[2] = quat[2];
              dest[3] = quat[3];
          }
          return dest;
      }
  
      halfTheta = Math.acos(cosHalfTheta);
      sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
  
      if (Math.abs(sinHalfTheta) < 0.001) {
          dest[0] = (quat[0] * 0.5 + quat2[0] * 0.5);
          dest[1] = (quat[1] * 0.5 + quat2[1] * 0.5);
          dest[2] = (quat[2] * 0.5 + quat2[2] * 0.5);
          dest[3] = (quat[3] * 0.5 + quat2[3] * 0.5);
          return dest;
      }
  
      ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
      ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
  
      dest[0] = (quat[0] * ratioA + quat2[0] * ratioB);
      dest[1] = (quat[1] * ratioA + quat2[1] * ratioB);
      dest[2] = (quat[2] * ratioA + quat2[2] * ratioB);
      dest[3] = (quat[3] * ratioA + quat2[3] * ratioB);
  
      return dest;
  };
  
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
      return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  
  
  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
  
  })();
  
  ;
  var GLImmediateSetup={};
  
  function _glEnable(x0) { GLctx.enable(x0) }
  
  function _glDisable(x0) { GLctx.disable(x0) }
  
  function _glIsEnabled(x0) { return GLctx.isEnabled(x0) }
  
  function _glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }
  
  function _glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  
  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }
  
  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  
  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  
  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }
  
  function _glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }
  
  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }
  
  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  
  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GLImmediate.lastArrayBuffer = GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }
  
  function _glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }
  
  function _glHint(x0, x1) { GLctx.hint(x0, x1) }
  
  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  
  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }
  
  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }var GLEmulation={fogStart:0,fogEnd:1,fogDensity:1,fogColor:null,fogMode:2048,fogEnabled:false,vaos:[],currentVao:null,enabledVertexAttribArrays:{},hasRunInit:false,init:function () {
        // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
        // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
        // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
        // code and legacy gl emulation code.
  
        if (GLEmulation.hasRunInit) {
          return;
        }
        GLEmulation.hasRunInit = true;
  
        GLEmulation.fogColor = new Float32Array(4);
  
        // Add some emulation workarounds
        Module.printErr('WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work.');
        Module.printErr('WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0');
  
        // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
        var validCapabilities = {
          0x0B44: 1, // GL_CULL_FACE
          0x0BE2: 1, // GL_BLEND
          0x0BD0: 1, // GL_DITHER,
          0x0B90: 1, // GL_STENCIL_TEST
          0x0B71: 1, // GL_DEPTH_TEST
          0x0C11: 1, // GL_SCISSOR_TEST
          0x8037: 1, // GL_POLYGON_OFFSET_FILL
          0x809E: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
          0x80A0: 1  // GL_SAMPLE_COVERAGE
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          // Clean up the renderer on any change to the rendering state. The optimization of
          // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != true) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = true;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glEnableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glEnable(cap);
        };
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != false) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = false;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glDisableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glDisable(cap);
        };
        _glIsEnabled = _emscripten_glIsEnabled = function _glIsEnabled(cap) {
          if (cap == 0x0B60 /* GL_FOG */) {
            return GLEmulation.fogEnabled ? 1 : 0;
          } else if (!(cap in validCapabilities)) {
            return 0;
          }
          return GLctx.isEnabled(cap);
        };
  
        var glGetBooleanv = _glGetBooleanv;
        _glGetBooleanv = _emscripten_glGetBooleanv = function _glGetBooleanv(pname, p) {
          var attrib = GLEmulation.getAttributeFromCapability(pname);
          if (attrib !== null) {
            var result = GLImmediate.enabledClientAttributes[attrib];
            HEAP8[(p)]=result === true ? 1 : 0;
            return;
          }
          glGetBooleanv(pname, p);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x84E2: pname = GLctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */; break; // GL_MAX_TEXTURE_UNITS
            case 0x8B4A: { // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VERTEX_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B49: { // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_FRAGMENT_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B4B: { // GL_MAX_VARYING_FLOATS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VARYING_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8871: pname = GLctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */; break; // GL_MAX_TEXTURE_COORDS
            case 0x807A: { // GL_VERTEX_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x807B: { // GL_VERTEX_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x807C: { // GL_VERTEX_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8081: { // GL_COLOR_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8082: { // GL_COLOR_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x8083: { // GL_COLOR_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8088: { // GL_TEXTURE_COORD_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8089: { // GL_TEXTURE_COORD_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x808A: { // GL_TEXTURE_COORD_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
          }
          glGetIntegerv(pname, params);
        };
  
        var glGetString = _glGetString;
        _glGetString = _emscripten_glGetString = function _glGetString(name_) {
          if (GL.stringCache[name_]) return GL.stringCache[name_];
          switch(name_) {
            case 0x1F03 /* GL_EXTENSIONS */: // Add various extensions that we can support
              var ret = allocate(intArrayFromString(GLctx.getSupportedExtensions().join(' ') +
                     ' GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements' +
                     (GL.compressionExt ? ' GL_ARB_texture_compression GL_EXT_texture_compression_s3tc' : '') +
                     (GL.anisotropicExt ? ' GL_EXT_texture_filter_anisotropic' : '')
              ), 'i8', ALLOC_NORMAL);
              GL.stringCache[name_] = ret;
              return ret;
          }
          return glGetString(name_);
        };
  
        // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
        // tandem with the rest of the program, by itself it cannot suffice.
        // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
        GL.shaderInfos = {};
        var glCreateShader = _glCreateShader;
        _glCreateShader = _emscripten_glCreateShader = function _glCreateShader(shaderType) {
          var id = glCreateShader(shaderType);
          GL.shaderInfos[id] = {
            type: shaderType,
            ftransform: false
          };
          return id;
        };
  
        function ensurePrecision(source) {
          if (!/precision +(low|medium|high)p +float *;/.test(source)) {
            source = 'precision mediump float;\n' + source;
          }
          return source;
        }
  
        var glShaderSource = _glShaderSource;
        _glShaderSource = _emscripten_glShaderSource = function _glShaderSource(shader, count, string, length) {
          var source = GL.getSource(shader, count, string, length);
          // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
          // ones we generated, potentially confusing it? Perhaps we should hide them.
          if (GL.shaderInfos[shader].type == GLctx.VERTEX_SHADER) {
            // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
            var has_pm = source.search(/u_projection/) >= 0;
            var has_mm = source.search(/u_modelView/) >= 0;
            var has_pv = source.search(/a_position/) >= 0;
            var need_pm = 0, need_mm = 0, need_pv = 0;
            var old = source;
            source = source.replace(/ftransform\(\)/g, '(u_projection * u_modelView * a_position)');
            if (old != source) need_pm = need_mm = need_pv = 1;
            old = source;
            source = source.replace(/gl_ProjectionMatrix/g, 'u_projection');
            if (old != source) need_pm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrixTranspose\[2\]/g, 'vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])'); // XXX extremely inefficient
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrix/g, 'u_modelView');
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_Vertex/g, 'a_position');
            if (old != source) need_pv = 1;
            old = source;
            source = source.replace(/gl_ModelViewProjectionMatrix/g, '(u_projection * u_modelView)');
            if (old != source) need_pm = need_mm = 1;
            if (need_pv && !has_pv) source = 'attribute vec4 a_position; \n' + source;
            if (need_mm && !has_mm) source = 'uniform mat4 u_modelView; \n' + source;
            if (need_pm && !has_pm) source = 'uniform mat4 u_projection; \n' + source;
            GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
              var old = source;
              var need_vtc = source.search('v_texCoord' + i) == -1;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i)
                             .replace(new RegExp('gl_MultiTexCoord' + i, 'g'), 'a_texCoord' + i);
              if (source != old) {
                source = 'attribute vec4 a_texCoord' + i + '; \n' + source;
                if (need_vtc) {
                  source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
                }
              }
  
              old = source;
              source = source.replace(new RegExp('gl_TextureMatrix\\[' + i + '\\]', 'g'), 'u_textureMatrix' + i);
              if (source != old) {
                source = 'uniform mat4 u_textureMatrix' + i + '; \n' + source;
              }
            }
            if (source.indexOf('gl_FrontColor') >= 0) {
              source = 'varying vec4 v_color; \n' +
                       source.replace(/gl_FrontColor/g, 'v_color');
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'attribute vec4 a_color; \n' +
                       source.replace(/gl_Color/g, 'a_color');
            }
            if (source.indexOf('gl_Normal') >= 0) {
              source = 'attribute vec3 a_normal; \n' +
                       source.replace(/gl_Normal/g, 'a_normal');
            }
            // fog
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          } else { // Fragment shader
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              var old = source;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i);
              if (source != old) {
                source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
              }
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'varying vec4 v_color; \n' + source.replace(/gl_Color/g, 'v_color');
            }
            if (source.indexOf('gl_Fog.color') >= 0) {
              source = 'uniform vec4 u_fogColor;   \n' +
                       source.replace(/gl_Fog.color/g, 'u_fogColor');
            }
            if (source.indexOf('gl_Fog.end') >= 0) {
              source = 'uniform float u_fogEnd;   \n' +
                       source.replace(/gl_Fog.end/g, 'u_fogEnd');
            }
            if (source.indexOf('gl_Fog.scale') >= 0) {
              source = 'uniform float u_fogScale;   \n' +
                       source.replace(/gl_Fog.scale/g, 'u_fogScale');
            }
            if (source.indexOf('gl_Fog.density') >= 0) {
              source = 'uniform float u_fogDensity;   \n' +
                       source.replace(/gl_Fog.density/g, 'u_fogDensity');
            }
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          }
          GLctx.shaderSource(GL.shaders[shader], source);
        };
  
        var glCompileShader = _glCompileShader;
        _glCompileShader = _emscripten_glCompileShader = function _glCompileShader(shader) {
          GLctx.compileShader(GL.shaders[shader]);
        };
  
        GL.programShaders = {};
        var glAttachShader = _glAttachShader;
        _glAttachShader = _emscripten_glAttachShader = function _glAttachShader(program, shader) {
          if (!GL.programShaders[program]) GL.programShaders[program] = [];
          GL.programShaders[program].push(shader);
          glAttachShader(program, shader);
        };
  
        var glDetachShader = _glDetachShader;
        _glDetachShader = _emscripten_glDetachShader = function _glDetachShader(program, shader) {
          var programShader = GL.programShaders[program];
          if (!programShader) {
            Module.printErr('WARNING: _glDetachShader received invalid program: ' + program);
            return;
          }
          var index = programShader.indexOf(shader);
          programShader.splice(index, 1);
          glDetachShader(program, shader);
        };
  
        var glUseProgram = _glUseProgram;
        _glUseProgram = _emscripten_glUseProgram = function _glUseProgram(program) {
          if (GL.currProgram != program) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = program;
            GLImmediate.fixedFunctionProgram = 0;
            glUseProgram(program);
          }
        }
  
        var glDeleteProgram = _glDeleteProgram;
        _glDeleteProgram = _emscripten_glDeleteProgram = function _glDeleteProgram(program) {
          glDeleteProgram(program);
          if (program == GL.currProgram) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = 0;
          }
        };
  
        // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
        var zeroUsedPrograms = {};
        var glBindAttribLocation = _glBindAttribLocation;
        _glBindAttribLocation = _emscripten_glBindAttribLocation = function _glBindAttribLocation(program, index, name) {
          if (index == 0) zeroUsedPrograms[program] = true;
          glBindAttribLocation(program, index, name);
        };
        var glLinkProgram = _glLinkProgram;
        _glLinkProgram = _emscripten_glLinkProgram = function _glLinkProgram(program) {
          if (!(program in zeroUsedPrograms)) {
            GLctx.bindAttribLocation(GL.programs[program], 0, 'a_position');
          }
          glLinkProgram(program);
        };
  
        var glBindBuffer = _glBindBuffer;
        _glBindBuffer = _emscripten_glBindBuffer = function _glBindBuffer(target, buffer) {
          glBindBuffer(target, buffer);
          if (target == GLctx.ARRAY_BUFFER) {
            if (GLEmulation.currentVao) {
              GLEmulation.currentVao.arrayBuffer = buffer;
            }
          } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
            if (GLEmulation.currentVao) GLEmulation.currentVao.elementArrayBuffer = buffer;
          }
        };
  
        var glGetFloatv = _glGetFloatv;
        _glGetFloatv = _emscripten_glGetFloatv = function _glGetFloatv(pname, params) {
          if (pname == 0x0BA6) { // GL_MODELVIEW_MATRIX
            HEAPF32.set(GLImmediate.matrix[0/*m*/], params >> 2);
          } else if (pname == 0x0BA7) { // GL_PROJECTION_MATRIX
            HEAPF32.set(GLImmediate.matrix[1/*p*/], params >> 2);
          } else if (pname == 0x0BA8) { // GL_TEXTURE_MATRIX
            HEAPF32.set(GLImmediate.matrix[2/*t*/ + GLImmediate.clientActiveTexture], params >> 2);
          } else if (pname == 0x0B66) { // GL_FOG_COLOR
            HEAPF32.set(GLEmulation.fogColor, params >> 2);
          } else if (pname == 0x0B63) { // GL_FOG_START
            HEAPF32[((params)>>2)]=GLEmulation.fogStart;
          } else if (pname == 0x0B64) { // GL_FOG_END
            HEAPF32[((params)>>2)]=GLEmulation.fogEnd;
          } else if (pname == 0x0B62) { // GL_FOG_DENSITY
            HEAPF32[((params)>>2)]=GLEmulation.fogDensity;
          } else if (pname == 0x0B65) { // GL_FOG_MODE
            HEAPF32[((params)>>2)]=GLEmulation.fogMode;
          } else {
            glGetFloatv(pname, params);
          }
        };
  
        var glHint = _glHint;
        _glHint = _emscripten_glHint = function _glHint(target, mode) {
          if (target == 0x84EF) { // GL_TEXTURE_COMPRESSION_HINT
            return;
          }
          glHint(target, mode);
        };
  
        var glEnableVertexAttribArray = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray = _emscripten_glEnableVertexAttribArray = function _glEnableVertexAttribArray(index) {
          glEnableVertexAttribArray(index);
          GLEmulation.enabledVertexAttribArrays[index] = 1;
          if (GLEmulation.currentVao) GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
        };
  
        var glDisableVertexAttribArray = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray = _emscripten_glDisableVertexAttribArray = function _glDisableVertexAttribArray(index) {
          glDisableVertexAttribArray(index);
          delete GLEmulation.enabledVertexAttribArrays[index];
          if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
        };
  
        var glVertexAttribPointer = _glVertexAttribPointer;
        _glVertexAttribPointer = _emscripten_glVertexAttribPointer = function _glVertexAttribPointer(index, size, type, normalized, stride, pointer) {
          glVertexAttribPointer(index, size, type, normalized, stride, pointer);
          if (GLEmulation.currentVao) { // TODO: avoid object creation here? likely not hot though
            GLEmulation.currentVao.vertexAttribPointers[index] = [index, size, type, normalized, stride, pointer];
          }
        };
      },getAttributeFromCapability:function (cap) {
        var attrib = null;
        switch (cap) {
          case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
            // Fall through:
          case 0x8078: // GL_TEXTURE_COORD_ARRAY
            attrib = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture; break;
          case 0x8074: // GL_VERTEX_ARRAY
            attrib = GLImmediate.VERTEX; break;
          case 0x8075: // GL_NORMAL_ARRAY
            attrib = GLImmediate.NORMAL; break;
          case 0x8076: // GL_COLOR_ARRAY
            attrib = GLImmediate.COLOR; break;
        }
        return attrib;
      }};function _emscripten_glVertexPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.VERTEX, size, type, stride, pointer);
    }

  
  function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }var _Mix_FreeMusic=_Mix_FreeChunk;

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }

  function _pthread_mutex_init() {}

  
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }


  function _emscripten_glSampleCoverage(x0, x1) { GLctx.sampleCoverage(x0, x1) }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glFrustum(left, right, bottom, top_, nearVal, farVal) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.multiply(GLImmediate.matrix[GLImmediate.currentMatrix],
          GLImmediate.matrixLib.mat4.frustum(left, right, bottom, top_, nearVal, farVal));
    }

  function _SDL_NumJoysticks() {
      var count = 0;
      var gamepads = SDL.getGamepads();
      // The length is not the number of gamepads; check which ones are defined.
      for (var i = 0; i < gamepads.length; i++) {
        if (gamepads[i] !== undefined) count++;
      }
      return count;
    }

  function _Mix_OpenAudio(frequency, format, channels, chunksize) {
      SDL.allocateChannels(32);
      // Just record the values for a later call to Mix_QuickLoad_RAW
      SDL.mixerFrequency = frequency;
      SDL.mixerFormat = format;
      SDL.mixerNumChannels = channels;
      SDL.mixerChunkSize = chunksize;
      return 0;
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4i(location, v0, v1, v2, v3);
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _SDL_PumpEvents(){
      SDL.events.forEach(function(event) {
        SDL.handleEvent(event);
      });
    }

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  
  var GLB={accX:0,accY:0,accZ:0,cb_lastPoints:null,cb_canvas:null,setCoords:function (e, idn) {
  			var i = 0;
  			if(e.identifier)
  				i=e.identifier;
  				
  			var p = null;
  			if (e.offsetX) {
  				// Works in Chrome / Safari (except on iPad/iPhone)
  				p= { id: i, x: e.offsetX, y: e.offsetY, b1: idn };
  			}
  			else {
  				// Works in Safari on iPad/iPhone and Firefox 23+
  				p= { id:i, x: e.pageX - cb_canvas.offsetLeft, y: e.pageY - cb_canvas.offsetTop, b1: idn };
  			}
  			
  			for(var j=0; j<GLB.cb_lastPoints.length; ++j)
  			{
  				if(GLB.cb_lastPoints[j].id == i)
  				{
  					if(idn>0)
  					{
  						GLB.cb_lastPoints[j] = p;
  						return;
  					}
  					else
  					{
  						GLB.cb_lastPoints.splice(j, 1);
  						return;
  					}
  				}
  			}
  			if(idn>0)
  			{
  				GLB.cb_lastPoints.push(p);
  			}
  		},glb_start_touch:function (e) {
  			if (e.touches) {
  				// Touch event
  				for (var i = 1; i <= e.touches.length; i++) {
  					GLB.setCoords(e.touches[i - 1], 1); // Get info for finger #1
  				}
  			}
  			else {
  				// Mouse event
  				GLB.setCoords(e, 1);
  				cb_canvas.onmousemove = GLB.glb_move_touch;
  			}
  			return false;
  		},glb_stop_touch:function (e) {
  			e.preventDefault();
  			// iOS sends the old touches here, and e.touches is empty
  			if(e.changedTouches)
  			{
  				for (var i = 1; i <= e.changedTouches.length; i++) {
  					GLB.setCoords(e.changedTouches[i - 1], 0);
  				}
  			}
  			else if (e.touches) {
  				// Touch event
  				for (var i = 1; i <= e.touches.length; i++) {
  					GLB.setCoords(e.touches[i - 1], 0);
  				}
  			}
  			else {
  				// Mouse event
  				GLB.setCoords(e, 0);
  				cb_canvas.onmousemove = null;
  			}
  		},glb_move_touch:function (e) {
  			e.preventDefault(); // will think it's a scroll otherwise
  			if (e.touches) {
  				// Touch Enabled
  				for (var i = 0; i < e.touches.length; i++) {
  					GLB.setCoords(e.touches[i], 1); // Get info for finger i
  				}
  			}
  			else {
  				// Not touch enabled
  				GLB.setCoords(e, 1);
  			}
  			return false;
  		}};function _glb_get_gravity( float_ptr )
  	{
  		HEAPF32[((float_ptr)>>2)]=GLB.accX
  		HEAPF32[(((float_ptr)+(4))>>2)]=GLB.accY
  		HEAPF32[(((float_ptr)+(8))>>2)]=GLB.accZ
  		return (window.DeviceOrientationEvent) ? 1: 0;
  	}

  var _emscripten_preinvoke=true;

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  function _emscripten_glDepthRangef(x0, x1) { GLctx.depthRange(x0, x1) }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3f(location, v0, v1, v2);
    }

  
  function _emscripten_glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        HEAP32[((p)>>2)]=GLctx.getProgramInfoLog(GL.programs[program]).length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }
  
  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        // Work around a bug in Chromium which causes getShaderInfoLog to return null
        if (!log) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }function _emscripten_glGetObjectParameterivARB(id, type, result) {
      if (GL.programs[id]) {
        if (type == 0x8B84) { // GL_OBJECT_INFO_LOG_LENGTH_ARB
          HEAP32[((result)>>2)]=GLctx.getProgramInfoLog(GL.programs[id]).length;
          return;
        }
        _emscripten_glGetProgramiv(id, type, result);
      } else if (GL.shaders[id]) {
        if (type == 0x8B84) { // GL_OBJECT_INFO_LOG_LENGTH_ARB
          HEAP32[((result)>>2)]=GLctx.getShaderInfoLog(GL.shaders[id]).length;
          return;
        } else if (type == 0x8B88) { // GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
          HEAP32[((result)>>2)]=GLctx.getShaderSource(GL.shaders[id]).length;
          return;
        }
        _emscripten_glGetShaderiv(id, type, result);
      } else {
        Module.printErr('WARNING: getObjectParameteriv received invalid id: ' + id);
      }
    }

  function _emscripten_glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3i(location, v0, v1, v2);
    }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }

  function _glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

   
  Module["_memset"] = _memset;

   
  Module["_strcat"] = _strcat;

  function _SDL_JoystickClose(joystick) {
      delete SDL.lastJoystickState[joystick];
    }



  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

  function _glCullFace(x0) { GLctx.cullFace(x0) }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx.vertexAttrib3f(x0, x1, x2, x3) }

  
  
  function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
        if (SDL.audio.scriptProcessorNode !== undefined) {
          SDL.audio.scriptProcessorNode['disconnect']();
          SDL.audio.scriptProcessorNode = undefined;
        }
      } else if (!SDL.audio.timer && !SDL.audio.scriptProcessorNode) {
        // If we are using the same sampling frequency as the native sampling rate of the Web Audio graph is using, we can feed our buffers via
        // Web Audio ScriptProcessorNode, which is a pull-mode API that calls back to our code to get audio data.
        if (SDL.audioContext !== undefined && SDL.audio.freq == SDL.audioContext['sampleRate'] && typeof SDL.audioContext['createScriptProcessor'] !== 'undefined') {
          var sizeSamplesPerChannel = SDL.audio.bufferSize / SDL.audio.bytesPerSample / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
          SDL.audio.scriptProcessorNode = SDL.audioContext['createScriptProcessor'](sizeSamplesPerChannel, 0, SDL.audio.channels);
          SDL.audio.scriptProcessorNode['onaudioprocess'] = function (e) {
            Runtime.dynCall('viii', SDL.audio.callback, [SDL.audio.userdata, SDL.audio.buffer, SDL.audio.bufferSize]);
            SDL.fillWebAudioBufferFromHeap(SDL.audio.buffer, sizeSamplesPerChannel, e['outputBuffer']);
          }
          SDL.audio.scriptProcessorNode['connect'](SDL.audioContext['destination']);
        } else { // If we are using a different sampling rate, must manually queue audio data to the graph via timers.
          // Start the audio playback timer callback loop.
          SDL.audio.numAudioTimersPending = 1;
          SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
          SDL.audio.startTime = Date.now() / 1000.0; // Only used for Mozilla Audio Data API. Not needed for Web Audio API.
        }
      }
      SDL.audio.paused = pauseOn;
    }
  
  function _free() {
  }
  Module["_free"] = _free;function _SDL_CloseAudio() {
      if (SDL.audio) {
        try{
          for(var i = 0; i < SDL.audio.soundSource.length; ++i) {
            if (!(typeof(SDL.audio.soundSource[i]==='undefined'))) {
              SDL.audio.soundSource[i].stop(0);
            }
          }
        } catch(e) {}
        SDL.audio.soundSource = null;
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }var _Mix_CloseAudio=_SDL_CloseAudio;

  function _emscripten_glNormalPointer(type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.NORMAL, 3, type, stride, pointer);
    }

  var _abs=Math_abs;


  var _emscripten_get_longjmp_result=true;

  function _glLoadIdentity() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _emscripten_glGetVertexAttribfv(index, pname, params) {
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number') {
        HEAPF32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAPF32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _glVertex3f(x, y, z) {
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = x;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = y;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = z || 0;
      GLImmediate.addRendererComponent(GLImmediate.VERTEX, 3, GLctx.FLOAT);
    }


  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }

  function _emscripten_glDeleteShader(shader) {
      GLctx.deleteShader(GL.shaders[shader]);
      GL.shaders[shader] = null;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }


  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[3];
        for (var i = 0; i < 4; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(location, transpose, view);
    }


  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _dlopen(filename, flag) {
      // void *dlopen(const char *file, int mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlopen.html
      filename = filename === 0 ? '__self__' : (ENV['LD_LIBRARY_PATH'] || '/') + Pointer_stringify(filename);
  
      abort('need to build with DLOPEN_SUPPORT=1 to get dlopen support in asm.js');
  
      if (DLFCN.loadedLibNames[filename]) {
        // Already loaded; increment ref count and return.
        var handle = DLFCN.loadedLibNames[filename];
        DLFCN.loadedLibs[handle].refcount++;
        return handle;
      }
  
      if (filename === '__self__') {
        var handle = -1;
        var lib_module = Module;
        var cached_functions = SYMBOL_TABLE;
      } else {
        var target = FS.findObject(filename);
        if (!target || target.isFolder || target.isDevice) {
          DLFCN.errorMsg = 'Could not find dynamic lib: ' + filename;
          return 0;
        } else {
          FS.forceLoadFile(target);
          var lib_data = intArrayToString(target.contents);
        }
  
        try {
          var lib_module = eval(lib_data)(
            DLFCN.functionTable.length,
            Module
          );
        } catch (e) {
          DLFCN.errorMsg = 'Could not evaluate dynamic lib: ' + filename;
          return 0;
        }
  
        // Not all browsers support Object.keys().
        var handle = 1;
        for (var key in DLFCN.loadedLibs) {
          if (DLFCN.loadedLibs.hasOwnProperty(key)) handle++;
        }
  
        // We don't care about RTLD_NOW and RTLD_LAZY.
        if (flag & 256) { // RTLD_GLOBAL
          for (var ident in lib_module) {
            if (lib_module.hasOwnProperty(ident)) {
              Module[ident] = lib_module[ident];
            }
          }
        }
  
        var cached_functions = {};
      }
      DLFCN.loadedLibs[handle] = {
        refcount: 1,
        name: filename,
        module: lib_module,
        cached_functions: cached_functions
      };
      DLFCN.loadedLibNames[filename] = handle;
  
      return handle;
    }

  function _emscripten_glUniform3iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 3;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform3iv(location, value);
    }

  function _setsockopt(fd, level, optname, optval, optlen) {
      return 0;
    }

  var _cos=Math_cos;

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number' || typeof data == 'boolean') {
        HEAP32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAP32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GL.instancedArraysExt.drawArraysInstancedANGLE(mode, first, count, primcount);
    }

  function _emscripten_glEnableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        return;
      }
      if (!GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = true;
        GLImmediate.totalEnabledClientAttributes++;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  function _emscripten_glGetPointerv(name, p) {
      var attribute;
      switch(name) {
        case 0x808E: // GL_VERTEX_ARRAY_POINTER
          attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX]; break;
        case 0x8090: // GL_COLOR_ARRAY_POINTER
          attribute = GLImmediate.clientAttributes[GLImmediate.COLOR]; break;
        case 0x8092: // GL_TEXTURE_COORD_ARRAY_POINTER
          attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture]; break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return;
      }
      HEAP32[((p)>>2)]=attribute ? attribute.pointer : 0;
    }

  function _emscripten_glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _SDL_WM_GrabInput() {}

  function _emscripten_glStencilMask(x0) { GLctx.stencilMask(x0) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx.stencilFuncSeparate(x0, x1, x2, x3) }

  function _glPopMatrix() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrix[GLImmediate.currentMatrix] = GLImmediate.matrixStack[GLImmediate.currentMatrix].pop();
    }

  function _glTexCoord2f(u, v) {
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = u;
      GLImmediate.vertexData[GLImmediate.vertexCounter++] = v;
      GLImmediate.addRendererComponent(GLImmediate.TEXTURE0, 2, GLctx.FLOAT);
    }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _glBegin(mode) {
      // Push the old state:
      GLImmediate.enabledClientAttributes_preBegin = GLImmediate.enabledClientAttributes;
      GLImmediate.enabledClientAttributes = [];
  
      GLImmediate.clientAttributes_preBegin = GLImmediate.clientAttributes;
      GLImmediate.clientAttributes = []
      for (var i = 0; i < GLImmediate.clientAttributes_preBegin.length; i++) {
        GLImmediate.clientAttributes.push({});
      }
  
      GLImmediate.mode = mode;
      GLImmediate.vertexCounter = 0;
      var components = GLImmediate.rendererComponents = [];
      for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
        components[i] = 0;
      }
      GLImmediate.rendererComponentPointer = 0;
      GLImmediate.vertexData = GLImmediate.tempData;
    }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _shutdown(fd, how) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      _close(fd);
    }

  
  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx.vertexAttrib1f(x0, x1) }

  function _glVertexPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.VERTEX, size, type, stride, pointer);
    }

  function _emscripten_glFinish() { GLctx.finish() }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDepthFunc(x0) { GLctx.depthFunc(x0) }

  function _SDL_GL_SetAttribute(attr, value) {
      if (!(attr in SDL.glAttributes)) {
        abort('Unknown SDL GL attribute (' + attr + '). Please check if your SDL version is supported.');
      }
  
      SDL.glAttributes[attr] = value;
    }

  function _emscripten_glHint(x0, x1) { GLctx.hint(x0, x1) }

  var _emscripten_postinvoke=true;

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }

  function _emscripten_glUniform4iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 4;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform4iv(location, value);
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _emscripten_glLoadIdentity() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GL.instancedArraysExt.vertexAttribDivisorANGLE(index, divisor);    
    }

  function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (!audio) return 0;
      audio.src = audio.src; // rewind
      audio.pause();
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glRotatef(angle, x, y, z) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.rotate(GLImmediate.matrix[GLImmediate.currentMatrix], angle*Math.PI/180, [x, y, z]);
    }

  function _glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var sizePerPixel;
      switch (format) {
        case 0x1907 /* GL_RGB */:
          sizePerPixel = 3;
          break;
        case 0x1908 /* GL_RGBA */:
          sizePerPixel = 4;
          break;
        default: 
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return;
      }
      var totalSize = width*height*sizePerPixel;
      GLctx.readPixels(x, y, width, height, format, type, HEAPU8.subarray(pixels, pixels + totalSize));
    }

  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _glTranslatef(x, y, z) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.translate(GLImmediate.matrix[GLImmediate.currentMatrix], [x, y, z]);
    }

  function _glShadeModel() { Runtime.warnOnce('TODO: glShadeModel') }

  var _emscripten_prep_setjmp=true;

  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }var _ftello=_ftell;

  function _glDisableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        return;
      }
      if (GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = false;
        GLImmediate.totalEnabledClientAttributes--;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledClientStates[cap];
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _emscripten_glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[3];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
        view[3] = HEAPF32[(((value)+(12))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function _emscripten_glClearStencil(x0) { GLctx.clearStencil(x0) }

  function _SDL_GetVideoSurface() {
      return SDL.screen;
    }

  function _SDL_WM_SetCaption(title, icon) {
      title = title && Pointer_stringify(title);
      icon = icon && Pointer_stringify(icon);
    }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  
  function _emulGlDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLEmulation.vaos[id] = null;
        if (GLEmulation.currentVao && GLEmulation.currentVao.id == id) GLEmulation.currentVao = null;
      }
    }function _emscripten_glDeleteVertexArrays(n, vaos) {
      _emulGlDeleteVertexArrays(n, vaos);
    }

  function _chdir(path) {
      // int chdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/chdir.html
      // NOTE: The path argument may be a string, to simplify fchdir().
      if (typeof path !== 'string') path = Pointer_stringify(path);
      try {
        FS.chdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function ___errno_location() {
      return ___errno_state;
    }

  function _pthread_mutex_destroy() {}

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _SDL_GL_SwapBuffers() {}

  
  function _SDL_GetKeyboardState(numKeys) {
      if (numKeys) {
        HEAP32[((numKeys)>>2)]=65536;
      }
      return SDL.keyboardState;
    }function _SDL_GetKeyState() {
      return _SDL_GetKeyboardState();
    }

  function _llvm_trap() {
      abort('trap!');
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _glTexCoordPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture, size, type, stride, pointer);
    }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glb_get_multitouch_info(imouse, int_ptr)
  	{
  		if(imouse<GLB.cb_lastPoints.length)
  		{
  			var p = GLB.cb_lastPoints[imouse];
  			HEAP32[((int_ptr)>>2)]=p.x
  			HEAP32[(((int_ptr)+(4))>>2)]=p.y
  			HEAP32[(((int_ptr)+(8))>>2)]=p.b1
  		}
  		return GLB.cb_lastPoints.length;
  	}

  function _emscripten_glCullFace(x0) { GLctx.cullFace(x0) }

  function _glLoadMatrixf(matrix) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.set(HEAPF32.subarray((matrix)>>2,(matrix+64)>>2), GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4f(location, v0, v1, v2, v3);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = '_' + Pointer_stringify(symbol);
  
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        // self-dlopen means that lib.module is not a superset of
        // cached_functions, so check the latter first
        if (lib.cached_functions.hasOwnProperty(symbol)) {
          return lib.cached_functions[symbol];
        } else {
          if (!lib.module.hasOwnProperty(symbol)) {
            DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                   '" in dynamic lib: ' + lib.name);
            return 0;
          } else {
            var result = lib.module[symbol];
            if (typeof result == 'function') {
              result = lib.module.SYMBOL_TABLE[symbol];
              assert(result);
              lib.cached_functions = result;
            }
            return result;
          }
        }
      }
    }

  function _emscripten_glUniform2fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[1];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(location, view);
    }

  function _emscripten_glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GLImmediate.currentMatrix = 0/*m*/;
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GLImmediate.currentMatrix = 1/*p*/;
      } else if (mode == 0x1702) { // GL_TEXTURE
        GLImmediate.useTextureMatrix = true;
        GLImmediate.currentMatrix = 2/*t*/ + GLImmediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }

  function _abort() {
      Module['abort']();
    }


  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }


  function _emscripten_glPolygonOffset(x0, x1) { GLctx.polygonOffset(x0, x1) }


  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glUniform2iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 2;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform2iv(location, value);
    }

  function _emscripten_glVertexAttrib1fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+4)>>2);
      GLctx.vertexAttrib1fv(index, v);
    }


  var _fabs=Math_abs;

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, -1);
        pixels = data.pixels;
      } else {
        pixels = null;
      }
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    }

  function _emscripten_glUniform2f(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2f(location, v0, v1);
    }

  function _glb_init_multitouch() {
  		cb_canvas = document.getElementById("canvas");
  
  		GLB.cb_lastPoints = Array();
  
  		if (cb_canvas.getContext) {
  			cb_canvas.onmousedown  = GLB.glb_start_touch;
  			cb_canvas.onmouseup    = GLB.glb_stop_touch;
  			cb_canvas.ontouchstart = GLB.glb_start_touch;
  			cb_canvas.ontouchmove  = GLB.glb_move_touch;
  			cb_canvas.ontouchend   = GLB.glb_stop_touch;
  			cb_canvas.ontouchcancel= GLB.glb_stop_touch;
  			cb_canvas.onleave      = GLB.glb_stop_touch;
  			// cb_canvas.ontouchstop  = GLB.glb_stop_touch; // does not exist?
  		}
  
  		// also init tilt support
  		window.ondevicemotion = function(event) {
  			GLB.accX = event.accelerationIncludingGravity.x;  
  			GLB.accY = event.accelerationIncludingGravity.y;  
  			GLB.accZ = event.accelerationIncludingGravity.z;  
  		}
  		// write to int32 ptr array
  		// HEAP32[(((outPtr)+(index*4))>>2)]=js_var
  	}

  function _emscripten_glUniform2i(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2i(location, v0, v1);
    }

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        HEAP32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAP32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _emscripten_glDepthMask(x0) { GLctx.depthMask(x0) }

  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        if (Module['preMainLoop']) {
          Module['preMainLoop']();
        }
  
        try {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
  
        if (Module['postMainLoop']) {
          Module['postMainLoop']();
        }
  
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  function _emscripten_glDepthRange(x0, x1) { GLctx.depthRange(x0, x1) }

  function _Mix_AllocateChannels(num) {
      SDL.allocateChannels(num);
      return num;
    }

  var _emscripten_setjmp=true;

  function _emscripten_glGetShaderPrecisionFormat() { throw 'glGetShaderPrecisionFormat: TODO' }

  function _glPushMatrix() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixStack[GLImmediate.currentMatrix].push(
          Array.prototype.slice.call(GLImmediate.matrix[GLImmediate.currentMatrix]));
    }

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  function _glEnd() {
      GLImmediate.prepareClientAttributes(GLImmediate.rendererComponents[GLImmediate.VERTEX], true);
      GLImmediate.firstVertex = 0;
      GLImmediate.lastVertex = GLImmediate.vertexCounter / (GLImmediate.stride >> 2);
      GLImmediate.flush();
      GLImmediate.disableBeginEndClientAttributes();
      GLImmediate.mode = -1;
  
      // Pop the old state:
      GLImmediate.enabledClientAttributes = GLImmediate.enabledClientAttributes_preBegin;
      GLImmediate.clientAttributes = GLImmediate.clientAttributes_preBegin;
      GLImmediate.currentRenderer = null; // The set of active client attributes changed, we must re-lookup the renderer to use.
      GLImmediate.modifiedClientAttributes = true;
    }

  function _glOrtho(left, right, bottom, top_, nearVal, farVal) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.multiply(GLImmediate.matrix[GLImmediate.currentMatrix],
          GLImmediate.matrixLib.mat4.ortho(left, right, bottom, top_, nearVal, farVal));
    }

  var _atan2=Math_atan2;

  function _emscripten_glBindProgramARB(type, id) {
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }

  function _emscripten_glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }

  function _emscripten_glDisable(x0) { GLctx.disable(x0) }

  function _emscripten_glVertexAttrib3fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+12)>>2);
      GLctx.vertexAttrib3fv(index, v);
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      writeStringToMemory(infoname, name);
  
      if (length) {
        HEAP32[((length)>>2)]=infoname.length;
      }
      if (size) {
        HEAP32[((size)>>2)]=info.size;
      }
      if (type) {
        HEAP32[((type)>>2)]=info.type;
      }
    }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glLineWidth(x0) { GLctx.lineWidth(x0) }

  function _SDL_JoystickOpened(deviceIndex) {
      return SDL.lastJoystickState.hasOwnProperty(deviceIndex+1) ? 1 : 0;
    }

  function _SDL_JoystickOpen(deviceIndex) {
      var gamepad = SDL.getGamepad(deviceIndex);
      if (gamepad) {
        // Use this as a unique 'pointer' for this joystick.
        var joystick = deviceIndex+1;
        SDL.recordJoystickState(joystick, gamepad);
        return joystick;
      }
      return 0;
    }

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _emscripten_glRotatef(angle, x, y, z) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.rotate(GLImmediate.matrix[GLImmediate.currentMatrix], angle*Math.PI/180, [x, y, z]);
    }


  function _emscripten_glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }

  var _emscripten_check_longjmp=true;

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      HEAP32[((params)>>2)]=result;
    }


  function _emscripten_glClientActiveTexture(texture) {
      GLImmediate.clientActiveTexture = texture - 0x84C0; // GL_TEXTURE0
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      // Work around a bug in Chromium which causes getShaderInfoLog to return null
      if (!log) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  
  function _getgid() {
      // gid_t getgid(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/getgid.html
      // We have just one process/group/user, all with ID 0.
      return 0;
    }var _getpid=_getgid;

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx.stencilOpSeparate(x0, x1, x2, x3) }

  function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var sizePerPixel;
      switch (format) {
        case 0x1907 /* GL_RGB */:
          sizePerPixel = 3;
          break;
        case 0x1908 /* GL_RGBA */:
          sizePerPixel = 4;
          break;
        default: 
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return;
      }
      var totalSize = width*height*sizePerPixel;
      GLctx.readPixels(x, y, width, height, format, type, HEAPU8.subarray(pixels, pixels + totalSize));
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx.isEnabled(x0) }

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx.vertexAttrib4f(x0, x1, x2, x3, x4) }

  function _glDepthFunc(x0) { GLctx.depthFunc(x0) }

  var _sin=Math_sin;

  function _emscripten_glClearDepthf(x0) { GLctx.clearDepth(x0) }

  function _fmod(x, y) {
      return x % y;
    }

  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  
  var _ntohs=_htons;function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }function _sendto(fd, message, length, flags, dest_addr, dest_len) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
      // read the address and port to send to
      var info = __read_sockaddr(dest_addr, dest_len);
      if (info.errno) {
        ___setErrNo(info.errno);
        return -1;
      }
      var port = info.port;
      var addr = DNS.lookup_addr(info.addr) || info.addr;
  
      // send the message
      try {
        var slab = HEAP8;
        return sock.sock_ops.sendmsg(sock, slab, message, length, addr, port);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _emscripten_glClear(x0) { GLctx.clear(x0) }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GLImmediate.lastArrayBuffer = GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _pthread_mutexattr_init() {}

  var _ceilf=Math_ceil;

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      var entries;
      try {
        entries = FS.readdir(stream.path);
      } catch (e) {
        return FS.handleFSError(e);
      }
      if (stream.position < 0 || stream.position >= entries.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = entries[stream.position];
      var offset = stream.position + 1;
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        var child = FS.lookupNode(stream.node, name);
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=offset;
      HEAP32[(((entry)+(8))>>2)]=name.length + 1;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))|0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))|0)]=0;
      HEAP8[(((entry)+(10))|0)]=type;
      HEAP32[((result)>>2)]=entry;
      stream.position++;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }

  function _glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }


  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.renderbuffers);
        var renderbuffer = GLctx.createRenderbuffer();
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glFrontFace(x0) { GLctx.frontFace(x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glUniform1iv(location, count, value) {
      location = GL.uniforms[location];
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform1iv(location, value);
    }

  function _emscripten_glTexCoordPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture, size, type, stride, pointer);
    }

  
  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      // Work around a bug in Chromium which causes getProgramInfoLog to return null
      if (!log) {
        log = "";
      }
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }function _emscripten_glGetInfoLogARB(id, maxLength, length, infoLog) {
      if (GL.programs[id]) {
        _emscripten_glGetProgramInfoLog(id, maxLength, length, infoLog);
      } else if (GL.shaders[id]) {
        _emscripten_glGetShaderInfoLog(id, maxLength, length, infoLog);
      } else {
        Module.printErr('WARNING: getObjectParameteriv received invalid id: ' + id);
      }
    }



  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _glEnableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        return;
      }
      if (!GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = true;
        GLImmediate.totalEnabledClientAttributes++;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glIsProgram(program) {
      var program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx.blendColor(x0, x1, x2, x3) }


  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[8];
        for (var i = 0; i < 9; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(location, transpose, view);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx.vertexAttrib2f(x0, x1, x2) }

  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }var _fseeko=_fseek;


  function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  function __ZNSt9exceptionD2Ev() {}

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        document.addEventListener("keydown", SDL.receiveEvent);
        document.addEventListener("keyup", SDL.receiveEvent);
        document.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  function _glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GLImmediate.currentMatrix = 0/*m*/;
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GLImmediate.currentMatrix = 1/*p*/;
      } else if (mode == 0x1702) { // GL_TEXTURE
        GLImmediate.useTextureMatrix = true;
        GLImmediate.currentMatrix = 2/*t*/ + GLImmediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var id = GL.getNewId(GL.framebuffers);
        var framebuffer = GLctx.createFramebuffer();
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

   
  Module["_strcpy"] = _strcpy;

  function _readlink(path, buf, bufsize) {
      // ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsize);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/readlink.html
      path = Pointer_stringify(path);
      var str;
      try {
        str = FS.readlink(path);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
      str = str.slice(0, Math.max(0, bufsize - 1));
      writeStringToMemory(str, buf, true);
      return str.length;
    }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx.blendEquationSeparate(x0, x1) }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  
  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }function _emscripten_glDrawRangeElements(mode, start, end, count, type, indices) {
      _emscripten_glDrawElements(mode, count, type, indices, start, end);
    }

  
   
  Module["_rand_r"] = _rand_r;
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC); 
  Module["_rand"] = _rand;

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib2fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+8)>>2);
      GLctx.vertexAttrib2fv(index, v);
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      writeStringToMemory(infoname, name);
  
      if (length) {
        HEAP32[((length)>>2)]=infoname.length;
      }
      if (size) {
        HEAP32[((size)>>2)]=info.size;
      }
      if (type) {
        HEAP32[((type)>>2)]=info.type;
      }
    }

  function _emscripten_glDeleteObjectARB(id) {
      if (GL.programs[id]) {
        _emscripten_glDeleteProgram(id);
      } else if (GL.shaders[id]) {
        _emscripten_glDeleteShader(id);
      } else {
        Module.printErr('WARNING: deleteObject received invalid id: ' + id);
      }
    }

  function _emscripten_glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        var canvas = Module['canvas'];
        width = canvas.width;
        height = canvas.height;
      }
  
      Browser.setCanvasSize(width, height, true);
      // Free the old surface first.
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          SDL.receiveEvent({
            type: 'resize',
            w: w,
            h: h
          });
        });
      }
      return SDL.screen;
    }

  function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _sqrtf=Math_sqrt;

  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if (ENVIRONMENT_IS_WEB && window['performance'] && window['performance']['now']) {
        var start = window['performance']['now']();
        while (window['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.buffers);
        var buffer = GLctx.createBuffer();
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glClearDepth(x0) { GLctx.clearDepth(x0) }

  function _SDL_PollEvent(ptr) {
      if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
        // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
        // to automatically query for events, query for joystick events.
        SDL.queryJoysticks();
      }
      if (SDL.events.length === 0) return 0;
      if (ptr) {
        SDL.makeCEvent(SDL.events.shift(), ptr);
      }
      return 1;
    }

  function _SDL_GetVideoInfo() {
      // %struct.SDL_VideoInfo = type { i32, i32, %struct.SDL_PixelFormat*, i32, i32 } - 5 fields of quantum size
      var ret = _malloc(5*Runtime.QUANTUM_SIZE);
      HEAP32[((ret+Runtime.QUANTUM_SIZE*0)>>2)]=0; // TODO
      HEAP32[((ret+Runtime.QUANTUM_SIZE*1)>>2)]=0; // TODO
      HEAP32[((ret+Runtime.QUANTUM_SIZE*2)>>2)]=0;
      HEAP32[((ret+Runtime.QUANTUM_SIZE*3)>>2)]=Module["canvas"].width;
      HEAP32[((ret+Runtime.QUANTUM_SIZE*4)>>2)]=Module["canvas"].height;
      return ret;
    }

  var _copysignl=_copysign;

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _pthread_mutexattr_destroy() {}

  function _glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glEnable(x0) { GLctx.enable(x0) }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx.scissor(x0, x1, x2, x3) }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function _emscripten_glGetUniformfv(program, location, params) {
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number') {
        HEAPF32[((params)>>2)]=data;
      } else {
        for (var i = 0; i < data.length; i++) {
          HEAPF32[(((params)+(i))>>2)]=data[i];
        }
      }
    }

  function _glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _pthread_mutex_unlock() {}

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _emscripten_glBlendEquation(x0) { GLctx.blendEquation(x0) }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }

  function _emscripten_glVertexAttrib4fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+16)>>2);
      GLctx.vertexAttrib4fv(index, v);
    }

  var _BItoD=true;


  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      result = result.slice(0, Math.max(0, bufSize - 1));
      writeStringToMemory(result, source);
      if (length) {
        HEAP32[((length)>>2)]=result.length;
      }
    }

  function _emscripten_glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _SDL_Quit() {
      for (var i = 0; i < SDL.numChannels; ++i) {
        if (SDL.channels[i].audio) {
          SDL.channels[i].audio.pause();
        }
      }
      if (SDL.music.audio) {
        SDL.music.audio.pause();
      }
      Module.print('SDL_Quit called (and ignored)');
    }

  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }

  function ___cxa_guard_release() {}

  function _emscripten_glUniform1fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[0];
        view[0] = HEAPF32[((value)>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(location, view);
    }

  
  var _emscripten_GetProcAddress=undefined;
  Module["_emscripten_GetProcAddress"] = _emscripten_GetProcAddress;function _SDL_GL_GetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  function _emscripten_glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _emscripten_glUniform3fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[2];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(location, view);
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GL.instancedArraysExt.drawElementsInstancedANGLE(mode, count, type, indices, primcount);
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }


  function _SDL_WM_ToggleFullScreen(surf) {
      if (Browser.isFullScreen) {
        Module['canvas'].cancelFullScreen();
        return 1;
      } else {
        if (!SDL.canRequestFullscreen) {
          return 0;
        }
        SDL.isRequestingFullscreen = true;
        return 1;
      }
    }

  var ___cxa_atexit=_atexit;

  function _glMultMatrixf(matrix) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.multiply(GLImmediate.matrix[GLImmediate.currentMatrix],
          HEAPF32.subarray((matrix)>>2,(matrix+64)>>2));
    }

  function _pthread_mutexattr_settype() {}

  function _glColor4f(r, g, b, a) {
      r = Math.max(Math.min(r, 1), 0);
      g = Math.max(Math.min(g, 1), 0);
      b = Math.max(Math.min(b, 1), 0);
      a = Math.max(Math.min(a, 1), 0);
  
      // TODO: make ub the default, not f, save a few mathops
      if (GLImmediate.mode >= 0) {
        var start = GLImmediate.vertexCounter << 2;
        GLImmediate.vertexDataU8[start + 0] = r * 255;
        GLImmediate.vertexDataU8[start + 1] = g * 255;
        GLImmediate.vertexDataU8[start + 2] = b * 255;
        GLImmediate.vertexDataU8[start + 3] = a * 255;
        GLImmediate.vertexCounter++;
        GLImmediate.addRendererComponent(GLImmediate.COLOR, 4, GLctx.UNSIGNED_BYTE);
      } else {
        GLImmediate.clientColor[0] = r;
        GLImmediate.clientColor[1] = g;
        GLImmediate.clientColor[2] = b;
        GLImmediate.clientColor[3] = a;
      }
    }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      // N.b. using array notation explicitly to not confuse Closure minification.
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data);
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  
  function _emulGlBindVertexArray(vao) {
      // undo vao-related things, wipe the slate clean, both for vao of 0 or an actual vao
      GLEmulation.currentVao = null; // make sure the commands we run here are not recorded
      if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
      _glBindBuffer(GLctx.ARRAY_BUFFER, 0); // XXX if one was there before we were bound?
      _glBindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, 0);
      for (var vaa in GLEmulation.enabledVertexAttribArrays) {
        GLctx.disableVertexAttribArray(vaa);
      }
      GLEmulation.enabledVertexAttribArrays = {};
      GLImmediate.enabledClientAttributes = [0, 0];
      GLImmediate.totalEnabledClientAttributes = 0;
      GLImmediate.modifiedClientAttributes = true;
      if (vao) {
        // replay vao
        var info = GLEmulation.vaos[vao];
        _glBindBuffer(GLctx.ARRAY_BUFFER, info.arrayBuffer); // XXX overwrite current binding?
        _glBindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, info.elementArrayBuffer);
        for (var vaa in info.enabledVertexAttribArrays) {
          _glEnableVertexAttribArray(vaa);
        }
        for (var vaa in info.vertexAttribPointers) {
          _glVertexAttribPointer.apply(null, info.vertexAttribPointers[vaa]);
        }
        for (var attrib in info.enabledClientStates) {
          _glEnableClientState(attrib|0);
        }
        GLEmulation.currentVao = info; // set currentVao last, so the commands we ran here were not recorded
      }
    }function _emscripten_glBindVertexArray(vao) {
      _emulGlBindVertexArray(vao);
    }


  function _emscripten_glLoadMatrixf(matrix) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.set(HEAPF32.subarray((matrix)>>2,(matrix+64)>>2), GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }


  var _fmodl=_fmod;


  function _realpath(file_name, resolved_name) {
      // char *realpath(const char *restrict file_name, char *restrict resolved_name);
      // http://pubs.opengroup.org/onlinepubs/009604499/functions/realpath.html
      var absolute = FS.analyzePath(Pointer_stringify(file_name));
      if (absolute.error) {
        ___setErrNo(absolute.error);
        return 0;
      } else {
        var size = Math.min(4095, absolute.path.length);  // PATH_MAX - 1.
        for (var i = 0; i < size; i++) {
          HEAP8[(((resolved_name)+(i))|0)]=absolute.path.charCodeAt(i);
        }
        HEAP8[(((resolved_name)+(size))|0)]=0;
        return resolved_name;
      }
    }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

   
  Module["_tolower"] = _tolower;

  function _emscripten_glColorPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.COLOR, size, type, stride, pointer);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }


  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      return _close(fd);
    }

  function _emscripten_glFlush() { GLctx.flush() }

  function _glDepthMask(x0) { GLctx.depthMask(x0) }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }

  function _glColorPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.COLOR, size, type, stride, pointer);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glFrontFace(x0) { GLctx.frontFace(x0) }

  function _emscripten_glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  
  function _emulGlGenVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GLEmulation.vaos);
        GLEmulation.vaos[id] = {
          id: id,
          arrayBuffer: 0,
          elementArrayBuffer: 0,
          enabledVertexAttribArrays: {},
          vertexAttribPointers: {},
          enabledClientStates: {},
        };
        HEAP32[(((vaos)+(i*4))>>2)]=id;
      }
    }function _emscripten_glGenVertexArrays(n, arrays) {
      _emulGlGenVertexArrays(n, arrays);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _emscripten_glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
GLEmulation.init();
GLImmediate.setupFuncs(); Browser.moduleContextCreatedCallbacks.push(function() { GLImmediate.init() });
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdi(index,a1,a2) {
  try {
    Module["dynCall_vdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer){"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=env.ctlz_i8|0;var o=env.___rand_seed|0;var p=env.__ZTISt9exception|0;var q=env.___dso_handle|0;var r=env._stderr|0;var s=env._stdout|0;var t=0;var u=0;var v=0;var w=0;var x=+env.NaN,y=+env.Infinity;var z=0,A=0,B=0,C=0,D=0.0,E=0,F=0,G=0,H=0.0;var I=0;var J=0;var K=0;var L=0;var M=0;var N=0;var O=0;var P=0;var Q=0;var R=0;var S=global.Math.floor;var T=global.Math.abs;var U=global.Math.sqrt;var V=global.Math.pow;var W=global.Math.cos;var X=global.Math.sin;var Y=global.Math.tan;var Z=global.Math.acos;var _=global.Math.asin;var $=global.Math.atan;var aa=global.Math.atan2;var ba=global.Math.exp;var ca=global.Math.log;var da=global.Math.ceil;var ea=global.Math.imul;var fa=env.abort;var ga=env.assert;var ha=env.asmPrintInt;var ia=env.asmPrintFloat;var ja=env.min;var ka=env.invoke_viiiii;var la=env.invoke_vd;var ma=env.invoke_vid;var na=env.invoke_vi;var oa=env.invoke_vii;var pa=env.invoke_iiiiiii;var qa=env.invoke_ii;var ra=env.invoke_viddd;var sa=env.invoke_iiiiii;var ta=env.invoke_vidd;var ua=env.invoke_iiii;var va=env.invoke_viiiiiiii;var wa=env.invoke_viiiiii;var xa=env.invoke_viii;var ya=env.invoke_vidddd;var za=env.invoke_vdi;var Aa=env.invoke_viiiiiii;var Ba=env.invoke_viiiiiiiii;var Ca=env.invoke_iii;var Da=env.invoke_i;var Ea=env.invoke_iiiii;var Fa=env.invoke_vdddddd;var Ga=env.invoke_vdddd;var Ha=env.invoke_vdd;var Ia=env.invoke_v;var Ja=env.invoke_viid;var Ka=env.invoke_viiii;var La=env._emscripten_glGetTexParameterfv;var Ma=env._fabs;var Na=env.__inet_ntop6_raw;var Oa=env._emscripten_glBlendFuncSeparate;var Pa=env._emscripten_glGetIntegerv;var Qa=env._emscripten_glDepthFunc;var Ra=env._glTranslatef;var Sa=env._glDisableVertexAttribArray;var Ta=env._emscripten_memcpy_big;var Ua=env._glStencilFunc;var Va=env._emscripten_glUniform1f;var Wa=env._emscripten_glUniform1i;var Xa=env._puts;var Ya=env._emscripten_glIsProgram;var Za=env._ftell;var _a=env._glOrtho;var $a=env._emscripten_glTexParameteriv;var ab=env._emscripten_glAttachShader;var bb=env._emscripten_glTexParameterfv;var cb=env.__inet_ntop4_raw;var db=env._emscripten_glUniformMatrix2fv;var eb=env._SDL_GetTicks;var fb=env._emscripten_glDrawArraysInstanced;var gb=env._SDL_GetKeyboardState;var hb=env._glDepthMask;var ib=env._emscripten_glVertexAttrib2fv;var jb=env._glViewport;var kb=env._emscripten_glFlush;var lb=env._sprintf;var mb=env._dlopen;var nb=env._emscripten_glGetAttribLocation;var ob=env._glAttachShader;var pb=env._emscripten_glTexCoordPointer;var qb=env._glGenTextures;var rb=env._emscripten_glStencilFuncSeparate;var sb=env._emscripten_glVertexAttrib3f;var tb=env._pthread_mutex_lock;var ub=env._readdir_r;var vb=env._glCullFace;var wb=env._lseek;var xb=env._emscripten_glUniform1iv;var yb=env._glClearColor;var zb=env._SDL_Quit;var Ab=env._emscripten_glVertexAttrib4fv;var Bb=env._glDrawArrays;var Cb=env._glGetError;var Db=env._emscripten_glDepthRange;var Eb=env._sqrtf;var Fb=env._glActiveTexture;var Gb=env._SDL_NumJoysticks;var Hb=env._emscripten_glCopyTexImage2D;var Ib=env._emscripten_glFramebufferTexture2D;var Jb=env._glEnableVertexAttribArray;var Kb=env._emscripten_glStencilFunc;var Lb=env._Mix_VolumeMusic;var Mb=env._fopen;var Nb=env._getgid;var Ob=env._sin;var Pb=env._SDL_SetVideoMode;var Qb=env._SDL_JoystickOpened;var Rb=env._emscripten_glRenderbufferStorage;var Sb=env._emscripten_glVertexPointer;var Tb=env.__read_sockaddr;var Ub=env._glLinkProgram;var Vb=env._emscripten_glGetUniformfv;var Wb=env._sscanf;var Xb=env._fileno;var Yb=env._glMatrixMode;var Zb=env._emscripten_glStencilOp;var _b=env._emscripten_glBlendEquation;var $b=env._glVertex3f;var ac=env._emscripten_glVertexAttrib1fv;var bc=env._dlclose;var cc=env._emscripten_glGetProgramInfoLog;var dc=env._emscripten_glUniform4fv;var ec=env.___cxa_throw;var fc=env._SDL_GetKeyState;var gc=env._emscripten_glUniform2fv;var hc=env._emscripten_glBindBuffer;var ic=env._emscripten_glGetFloatv;var jc=env._pthread_mutex_init;var kc=env._glUseProgram;var lc=env._fread;var mc=env._emscripten_glCullFace;var nc=env._emscripten_glStencilMaskSeparate;var oc=env._atexit;var pc=env._emscripten_glUniform3fv;var qc=env._glPushMatrix;var rc=env._emscripten_glDisableVertexAttribArray;var sc=env._glColor4f;var tc=env._emscripten_glGetBooleanv;var uc=env._emscripten_glVertexAttribDivisor;var vc=env._readdir;var wc=env._emscripten_glGenBuffers;var xc=env._glLoadIdentity;var yc=env._emscripten_glGetShaderPrecisionFormat;var zc=env._write;var Ac=env._fsync;var Bc=env._emscripten_glIsEnabled;var Cc=env.___cxa_does_inherit;var Dc=env._SDL_JoystickOpen;var Ec=env._emscripten_glStencilOpSeparate;var Fc=env._emulGlDeleteVertexArrays;var Gc=env._emscripten_glGetActiveAttrib;var Hc=env._glHint;var Ic=env._SDL_GL_SetAttribute;var Jc=env.___cxa_find_matching_catch;var Kc=env._emscripten_glClear;var Lc=env.___cxa_guard_release;var Mc=env._emscripten_glValidateProgram;var Nc=env._emscripten_glUniform4iv;var Oc=env.___setErrNo;var Pc=env._emscripten_glVertexAttrib2f;var Qc=env.___resumeException;var Rc=env._emscripten_glGetError;var Sc=env._putchar;var Tc=env._emscripten_glBufferData;var Uc=env._emscripten_glReadPixels;var Vc=env._glGetIntegerv;var Wc=env._emscripten_glClearStencil;var Xc=env._emscripten_glFinish;var Yc=env._emscripten_glClearDepth;var Zc=env._emscripten_glUniform1fv;var _c=env._fwrite;var $c=env._chdir;var ad=env._emscripten_glUniform4i;var bd=env._llvm_pow_f64;var cd=env._emscripten_glUniform4f;var dd=env._emscripten_glBlendFunc;var ed=env._emscripten_glStencilMask;var fd=env._SDL_PumpEvents;var gd=env._readlink;var hd=env._glBindTexture;var id=env._snprintf;var jd=env._glGetFloatv;var kd=env._emscripten_glGetVertexAttribiv;var ld=env._glReadPixels;var md=env._emulGlGenVertexArrays;var nd=env._emscripten_glUniformMatrix3fv;var od=env._SDL_GetVideoSurface;var pd=env._SDL_PauseAudio;var qd=env._SDL_GL_GetProcAddress;var rd=env._recv;var sd=env._glFrontFace;var td=env._emscripten_glGetObjectParameterivARB;var ud=env._send;var vd=env._emscripten_glGetUniformiv;var wd=env._abs;var xd=env._isspace;var yd=env._emscripten_glCreateShader;var zd=env._realpath;var Ad=env._emscripten_glDeleteTextures;var Bd=env._fflush;var Cd=env._SDL_GetVideoInfo;var Dd=env._SDL_PollEvent;var Ed=env._Mix_OpenAudio;var Fd=env._fseek;var Gd=env.__exit;var Hd=env._glBindAttribLocation;var Id=env._emscripten_glColorMask;var Jd=env._emscripten_glBufferSubData;var Kd=env._pthread_mutex_unlock;var Ld=env._emscripten_glBindTexture;var Md=env._emscripten_glGenRenderbuffers;var Nd=env._glEnd;var Od=env._emscripten_set_main_loop;var Pd=env.___errno_location;var Qd=env._emscripten_glIsShader;var Rd=env._copysign;var Sd=env._fputc;var Td=env._emscripten_glCompressedTexImage2D;var Ud=env._glMultMatrixf;var Vd=env._glDisable;var Wd=env._emscripten_glGetInfoLogARB;var Xd=env._emscripten_longjmp;var Yd=env.__formatString;var Zd=env._SDL_WM_ToggleFullScreen;var _d=env._emscripten_glDeleteVertexArrays;var $d=env._emscripten_glReleaseShaderCompiler;var ae=env._dlsym;var be=env.__ZSt9terminatev;var ce=env._sendto;var de=env.___cxa_guard_acquire;var ee=env._emscripten_glFrontFace;var fe=env._glDeleteProgram;var ge=env.__ZSt18uncaught_exceptionv;var he=env._emscripten_glUseProgram;var ie=env._Mix_AllocateChannels;var je=env._SDL_GetError;var ke=env._glBlendFunc;var le=env._emscripten_glUniform3iv;var me=env._glb_init_multitouch;var ne=env._glCreateShader;var oe=env._sysconf;var pe=env._glTexCoord2f;var qe=env._pthread_mutexattr_settype;var re=env._glShaderSource;var se=env.__ZNSt9exceptionD2Ev;var te=env._emscripten_glScissor;var ue=env._glVertexPointer;var ve=env._glGetBooleanv;var we=env._closedir;var xe=env._llvm_trap;var ye=env._glPixelStorei;var ze=env._emscripten_glIsBuffer;var Ae=env._emscripten_glVertexAttrib1f;var Be=env._glVertexAttribPointer;var Ce=env._emscripten_glCompressedTexSubImage2D;var De=env._emscripten_glGetAttachedShaders;var Ee=env._emscripten_glGenTextures;var Fe=env._emscripten_glGetTexParameteriv;var Ge=env._glDeleteTextures;var He=env._emscripten_glClientActiveTexture;var Ie=env._emscripten_glCheckFramebufferStatus;var Je=env._emscripten_glUniform3f;var Ke=env._emscripten_glUniform3i;var Le=env._emscripten_glDeleteShader;var Me=env._glEnable;var Ne=env._glGetString;var Oe=env._emscripten_glGetUniformLocation;var Pe=env._glBindBuffer;var Qe=env._emscripten_glEnableVertexAttribArray;var Re=env._fprintf;var Se=env._glDetachShader;var Te=env._emscripten_glEnableClientState;var Ue=env._SDL_ShowCursor;var Ve=env._fmod;var We=env._emscripten_glDrawElements;var Xe=env._sbrk;var Ye=env._glEnableClientState;var Ze=env._glIsEnabled;var _e=env._SDL_Init;var $e=env._emscripten_glDisable;var af=env._emscripten_glDeleteRenderbuffers;var bf=env._emscripten_glDrawElementsInstanced;var cf=env._emscripten_glVertexAttrib4f;var df=env._emscripten_glPixelStorei;var ef=env._getenv;var ff=env._fclose;var gf=env._glTexCoordPointer;var hf=env._emscripten_glFramebufferRenderbuffer;var jf=env.__getFloat;var kf=env._emscripten_glRotatef;var lf=env._emscripten_glGetShaderiv;var mf=env._emscripten_glUniformMatrix4fv;var nf=env._emscripten_glGetPointerv;var of=env._emscripten_glIsRenderbuffer;var pf=env._emscripten_glLoadMatrixf;var qf=env.__inet_pton6_raw;var rf=env._pthread_mutexattr_destroy;var sf=env._emscripten_glGetVertexAttribfv;var tf=env.__reallyNegative;var uf=env._emscripten_glVertexAttrib3fv;var vf=env._emscripten_glCompileShader;var wf=env._glClear;var xf=env._glPopMatrix;var yf=env._SDL_WM_SetCaption;var zf=env._emscripten_glLinkProgram;var Af=env._pread;var Bf=env._mkport;var Cf=env._emscripten_glDrawRangeElements;var Df=env._emscripten_glDeleteFramebuffers;var Ef=env._rmdir;var Ff=env._glColorMask;var Gf=env._emscripten_glClearColor;var Hf=env._glCopyTexSubImage2D;var If=env._emscripten_glCreateProgram;var Jf=env._glTexParameteri;var Kf=env._emscripten_glDetachShader;var Lf=env._glTexParameterf;var Mf=env._emscripten_glVertexAttribPointer;var Nf=env._glb_get_gravity;var Of=env._emscripten_glDrawArrays;var Pf=env._emscripten_glPolygonOffset;var Qf=env._longjmp;var Rf=env._emscripten_glBlendColor;var Sf=env._ceilf;var Tf=env.___cxa_begin_catch;var Uf=env._emscripten_glGetProgramiv;var Vf=env._SDL_JoystickClose;var Wf=env._close;var Xf=env._glStencilOp;var Yf=env._emscripten_glGetShaderSource;var Zf=env._cos;var _f=env._emscripten_glTexImage2D;var $f=env._emscripten_glBlendEquationSeparate;var ag=env._emscripten_glGetString;var bg=env._emscripten_glIsFramebuffer;var cg=env._emscripten_glBindProgramARB;var dg=env._emscripten_glUniform2i;var eg=env._emscripten_glUniform2f;var fg=env._glBegin;var gg=env._atan2;var hg=env._emscripten_glTexParameterf;var ig=env._emscripten_glTexParameteri;var jg=env._emscripten_glGenVertexArrays;var kg=env._strtol;var lg=env._opendir;var mg=env._Mix_HaltMusic;var ng=env._emscripten_glBindAttribLocation;var og=env._glDepthFunc;var pg=env.___cxa_allocate_exception;var qg=env._unlink;var rg=env._emscripten_glClearDepthf;var sg=env.___buildEnvironment;var tg=env._printf;var ug=env._emscripten_glMatrixMode;var vg=env._setsockopt;var wg=env._llvm_bswap_i32;var xg=env._emulGlBindVertexArray;var yg=env._emscripten_glNormalPointer;var zg=env._emscripten_glBindVertexArray;var Ag=env._emscripten_glEnable;var Bg=env._read;var Cg=env._emscripten_glBindFramebuffer;var Dg=env._emscripten_glBindRenderbuffer;var Eg=env._time;var Fg=env._emscripten_glGetFramebufferAttachmentParameteriv;var Gg=env._exit;var Hg=env.__inet_pton4_raw;var Ig=env._glLoadMatrixf;var Jg=env._emscripten_glShaderBinary;var Kg=env._emscripten_glGetShaderInfoLog;var Lg=env._emscripten_glGetVertexAttribPointerv;var Mg=env._pwrite;var Ng=env._open;var Og=env._remove;var Pg=env._emscripten_glGetActiveUniform;var Qg=env._SDL_WM_GrabInput;var Rg=env.__scanString;var Sg=env._emscripten_glDeleteProgram;var Tg=env._emscripten_glTexSubImage2D;var Ug=env._pthread_mutex_destroy;var Vg=env._emscripten_glColorPointer;var Wg=env.__parseInt;var Xg=env._emscripten_glGetBufferParameteriv;var Yg=env._emscripten_glViewport;var Zg=env._emscripten_glDepthMask;var _g=env._emscripten_glLineWidth;var $g=env._glCompileShader;var ah=env._shutdown;var bh=env._glRotatef;var ch=env._abort;var dh=env._glTexImage2D;var eh=env._emscripten_glGenFramebuffers;var fh=env._glDisableClientState;var gh=env._emscripten_glLoadIdentity;var hh=env.___cxa_is_number_type;var ih=env._emscripten_glShaderSource;var jh=env._SDL_CloseAudio;var kh=env._usleep;var lh=env._glb_get_multitouch_info;var mh=env._emscripten_glGetRenderbufferParameteriv;var nh=env._glColorPointer;var oh=env._emscripten_glSampleCoverage;var ph=env._emscripten_glFrustum;var qh=env._Mix_FreeChunk;var rh=env._emscripten_glDepthRangef;var sh=env._emscripten_glGenerateMipmap;var th=env._emscripten_glIsTexture;var uh=env._fputs;var vh=env._emscripten_glHint;var wh=env._glShadeModel;var xh=env._emscripten_glDeleteObjectARB;var yh=env._emscripten_glActiveTexture;var zh=env._emscripten_glDeleteBuffers;var Ah=env._htons;var Bh=env._emscripten_glUniform2iv;var Ch=env._pthread_mutexattr_init;var Dh=env._SDL_GL_SwapBuffers;var Eh=env._emscripten_glCopyTexSubImage2D;var Fh=0.0;
// EMSCRIPTEN_START_FUNCS
function fi(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+7&-8;return b|0}function gi(){return i|0}function hi(a){a=a|0;i=a}function ii(a,b){a=a|0;b=b|0;if((t|0)==0){t=a;u=b}}function ji(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0]}function ki(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0];a[k+4|0]=a[b+4|0];a[k+5|0]=a[b+5|0];a[k+6|0]=a[b+6|0];a[k+7|0]=a[b+7|0]}function li(a){a=a|0;I=a}function mi(a){a=a|0;J=a}function ni(a){a=a|0;K=a}function oi(a){a=a|0;L=a}function pi(a){a=a|0;M=a}function qi(a){a=a|0;N=a}function ri(a){a=a|0;O=a}function si(a){a=a|0;P=a}function ti(a){a=a|0;Q=a}function ui(a){a=a|0;R=a}function vi(a){a=a|0;Tf(a|0)|0;be()}function wi(a,b){a=a|0;b=+b;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;d=i;i=i+32|0;e=d+16|0;f=d;g=d+12|0;h=a+32|0;j=c[h>>2]|0;if((j+ -2|0)>=0){k=a+28|0;l=a+4|0;m=a+8|0;n=a+12|0;o=a+36|0;p=a+52|0;q=c[k>>2]|0;r=j;s=0.0;while(1){if((q|0)<1){t=r;u=q}else{j=q;v=r;w=0.0;while(1){x=w+ +(ea(c[l>>2]|0,j)|0);y=s+ +(ea(v,c[m>>2]|0)|0);z=~~(x+ +(c[n>>2]|0)*y);if((z|0)<0){A=(c[24>>2]|0)+z|0}else{A=z}z=c[2]|0;if((z|0)==0){B=8}else{if((A|0)>=(c[24>>2]|0)|(A|0)<0){B=8}else{C=z;D=j}}if((B|0)==8){B=0;fj(8,A,0,0,0);Xj(9)|0;Fl();C=c[2]|0;D=c[k>>2]|0}z=c[C+(A<<2)>>2]|0;E=~~(w+s*+(D|0));if((E|0)<0){F=(c[p>>2]|0)+E|0}else{F=E}E=c[o>>2]|0;if((E|0)==0){B=13}else{if((F|0)>=(c[p>>2]|0)|(F|0)<0){B=13}else{G=E}}if((B|0)==13){B=0;fj(o,F,0,0,0);Xj(9)|0;Fl();G=c[o>>2]|0}c[G+(F<<2)>>2]=z;y=w+1.0;z=c[k>>2]|0;E=c[h>>2]|0;if(!(y<=+(z+ -1|0))){t=E;u=z;break}else{j=z;v=E;w=y}}}s=s+1.0;if(!(s<=+(t+ -2|0))){break}else{q=u;r=t}}}t=a+80|0;c[t>>2]=fl()|0;c[g>>2]=56;c[e+0>>2]=c[g+0>>2];gk(f,e);Ok(f,c[t>>2]|0);ik(f);Vk(a+36|0,c[t>>2]|0,32,32)|0;if(b!=0.0){c[a+84>>2]=1;t=a+88|0;c[t>>2]=~~+xi(a);f=~~+yi(a);c[a+92>>2]=f;c[a+96>>2]=(c[a+28>>2]|0)-f-(c[t>>2]|0);i=d;return 0.0}else{c[a+96>>2]=c[a+28>>2];i=d;return 0.0}return 0.0}function xi(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0.0,j=0.0,k=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0;b=i;d=a+36|0;e=a+28|0;f=a+52|0;g=a+32|0;h=0.0;j=0.0;while(1){a=~~(j+h*+(c[e>>2]|0));if((a|0)<0){k=(c[f>>2]|0)+a|0}else{k=a}a=c[d>>2]|0;if((a|0)==0){l=6}else{if((k|0)>=(c[f>>2]|0)|(k|0)<0){l=6}else{m=a}}if((l|0)==6){l=0;fj(d,k,0,0,0);Xj(9)|0;Fl();m=c[d>>2]|0}a=c[m+(k<<2)>>2]&16777215;n=h+1.0;if(!(n>=+(c[g>>2]|0))){o=j;p=n}else{n=j+1.0;if(!(n>=+(c[e>>2]|0))){o=n;p=0.0}else{q=0.0;l=10;break}}if((a|0)==0){h=p;j=o}else{q=o;l=10;break}}if((l|0)==10){i=b;return+q}return 0.0}function yi(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0.0,k=0.0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0.0;b=i;d=a+28|0;e=c[d>>2]|0;f=a+36|0;g=a+52|0;h=a+32|0;j=0.0;k=+(e+ -1|0);a=e;while(1){e=~~(k+j*+(a|0));if((e|0)<0){l=(c[g>>2]|0)+e|0}else{l=e}e=c[f>>2]|0;if((e|0)==0){m=6}else{if((l|0)>=(c[g>>2]|0)|(l|0)<0){m=6}else{n=e}}if((m|0)==6){m=0;fj(f,l,0,0,0);Xj(9)|0;Fl();n=c[f>>2]|0}e=c[n+(l<<2)>>2]&16777215;o=j+1.0;if(!(o>=+(c[h>>2]|0))){p=k;q=o}else{o=k+-1.0;if(!(o<=0.0)){p=o;q=0.0}else{r=0.0;m=11;break}}if((e|0)!=0){r=p;m=11;break}j=q;k=p;a=c[d>>2]|0}if((m|0)==11){i=b;return+r}return 0.0}function zi(a,b){a=a|0;b=+b;var c=0;c=i;Zk(b,a+24|0,a+32|0);i=c;return 0.0}function Ai(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;var e=0.0,f=0.0;a=i;cl(~~+h[9],0);e=d*500.0+b;dl(e,c,500.0,0.0,16777215);dl(b,c,0.0,0.0,16777215);f=d*695.0+c;dl(b,f,0.0,695.0,16777215);dl(e,f,500.0,695.0,16777215);el();i=a;return 0.0}function Bi(a){a=a|0;var b=0,d=0,e=0,f=0,g=0.0,j=0.0;b=i;i=i+32|0;d=b+16|0;e=b;f=b+12|0;c[f>>2]=80;g=+h[a+32>>3];c[d+0>>2]=c[f+0>>2];nk(e,d,g);+Hj(e);ik(e);g=+h[a+8>>3];e=a+16|0;d=~~+h[e>>3];f=a+24|0;a=~~(g+ +yk(+h[f>>3])*30.0);j=+h[e>>3];Xk(~~g,d,a,~~(j+ +xk(+h[f>>3])*30.0),16777215);i=b;return 0.0}function Ci(a){a=a|0;var b=0,c=0;b=i;if((Il(200)|0)!=0){c=a+24|0;h[c>>3]=+h[c>>3]+1.0}if((Il(208)|0)!=0){c=a+24|0;h[c>>3]=+h[c>>3]+-1.0}if((Il(13)|0)!=0){c=a+32|0;h[c>>3]=+h[c>>3]+.05}if((Il(12)|0)==0){i=b;return 0.0}c=a+32|0;h[c>>3]=+h[c>>3]+-.05;i=b;return 0.0}function Di(a,b,d,e,f){a=a|0;b=+b;d=+d;e=+e;f=+f;var g=0,j=0,k=0,l=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;j=a+32|0;Ei(j,~~e,0,0,0);k=a+48|0;if((c[k>>2]|0)<1){i=g;return 0.0}e=f*.5;l=b-e;a=~~f;f=d-e;e=0.0;do{d=l+ +(rk(a)|0);m=~~e;n=(m|0)<0;if(n){o=(c[k>>2]|0)+m|0}else{o=m}p=c[j>>2]|0;if((p|0)==0){q=7}else{if((o|0)>=(c[k>>2]|0)|(o|0)<0){q=7}else{r=p}}if((q|0)==7){q=0;bj(j,o,0,0,0);Xj(9)|0;Fl();r=c[j>>2]|0}h[r+(o*24|0)+8>>3]=d;d=f+ +(rk(a)|0);if(n){s=(c[k>>2]|0)+m|0}else{s=m}m=c[j>>2]|0;if((m|0)==0){q=12}else{n=c[k>>2]|0;if((s|0)>=(n|0)|(s|0)<0){q=12}else{t=m;u=n}}if((q|0)==12){q=0;bj(j,s,0,0,0);Xj(9)|0;Fl();t=c[j>>2]|0;u=c[k>>2]|0}h[t+(s*24|0)+16>>3]=d;e=e+1.0}while(e<=+(u+ -1|0));i=g;return 0.0}function Ei(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;g=i;h=(b|0)<1;j=h?0:b;b=(d|0)<1?1:d;k=ea(b,j)|0;l=(e|0)<1?1:e;m=ea(k,l)|0;k=(f|0)<1?1:f;n=ea(m,k)|0;m=a+40|0;do{if((n|0)<=(c[m>>2]|0)&(h^1)){if((n|0)>0){o=ea(j,(f|0)>1?f:1)|0;p=ea(o,(e|0)>1?e:1)|0;o=ea(p,(d|0)>1?d:1)|0;p=0;q=c[a>>2]|0;while(1){r=q+24|0;s=q+8|0;t=p+1|0;u=(t|0)==(o|0);c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;c[s+12>>2]=0;if(u){break}else{p=t;q=r}}}}else{if((n|0)==0){v=0}else{v=(((n|0)/64|0)<<6)+64|0}c[m>>2]=v;q=c[a>>2]|0;if((q|0)!=0){au(q)}if((v|0)<=0){c[a>>2]=0;break}q=_t(v>>>0>178956970?-1:v*24|0)|0;p=q+(v*24|0)|0;o=q;do{c[o>>2]=848;r=o+8|0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;o=o+24|0}while((o|0)!=(p|0));c[a>>2]=q;if((q|0)==0){Xj(7)|0;Fl()}}}while(0);do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}v=a+36|0;if((j|0)==0){c[v>>2]=0;break}else{c[v>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=j;v=ea(j,d)|0;c[a+8>>2]=v;c[a+12>>2]=ea(v,e)|0;c[a+16>>2]=j;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(j,k)|0,b)|0,l)|0;i=g;return}function Fi(a){a=a|0;var b=0,d=0,e=0,f=0,g=0.0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;b=i;d=a+32|0;e=a+48|0;a=c[e>>2]|0;if((a|0)<1){i=b;return 0.0}f=a;g=0.0;do{a=~~+h[11];j=~~g;k=(j|0)<0;l=(k?f:0)+j|0;m=c[d>>2]|0;if((m|0)==0){n=5}else{if((l|0)>=(f|0)|(l|0)<0){n=5}else{o=m}}if((n|0)==5){n=0;bj(d,l,0,0,0);Xj(9)|0;Fl();o=c[d>>2]|0}m=~~+h[o+(l*24|0)+8>>3];if(k){p=(c[e>>2]|0)+j|0}else{p=j}if((o|0)==0){n=10}else{if((p|0)>=(c[e>>2]|0)|(p|0)<0){n=10}else{q=o}}if((n|0)==10){n=0;bj(d,p,0,0,0);Xj(9)|0;Fl();q=c[d>>2]|0}Rk(a,m,~~+h[q+(p*24|0)+16>>3]);g=g+1.0;f=c[e>>2]|0}while(g<=+(f+ -1|0));i=b;return 0.0}function Gi(a){a=a|0;var b=0,c=0.0;b=i;h[a+8>>3]=+h[104>>3];h[a+16>>3]=+h[112>>3];c=+yk(+h[120>>3]);h[a+24>>3]=c*+h[128>>3];c=+xk(+h[120>>3]);h[a+32>>3]=c*+h[128>>3];h[a+40>>3]=1.0;h[a+48>>3]=0.0;i=b;return 0.0}function Hi(a){a=a|0;var b=0,c=0,d=0.0,e=0.0;b=i;c=a+48|0;d=+h[128>>3]+ +h[c>>3];e=d>360.0?0.0:d;h[c>>3]=e;Qk(~~+h[17],~~(+h[a+8>>3]+-64.0),~~(+h[a+16>>3]+-64.0),e,.25);i=b;return 0.0}function Ii(a,b){a=a|0;b=+b;var c=0,d=0.0,e=0,f=0,g=0.0;c=i;d=+h[a+40>>3];if(d==1.0){e=a+8|0;h[e>>3]=+h[a+24>>3]+ +h[e>>3];e=a+16|0;f=a+32|0;g=+h[f>>3];h[e>>3]=g+ +h[e>>3];h[f>>3]=g+.08}else{if(d==2.0){f=a+16|0;h[f>>3]=+h[f>>3]+5.0}}if(!(+h[a+8>>3]<0.0)){if(!(+h[a+16>>3]>+h[160>>3])){i=c;return 0.0}}Ji(192,~~b);i=c;return 0.0}function Ji(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;d=i;e=c[a+16>>2]|0;f=((b|0)<0?e:0)+b|0;b=a+16|0;do{if((e|0)>0&(f|0)<(e|0)){g=e}else{j=((f|0)<0?e:0)+f|0;if((c[a>>2]|0)!=0){if(!((j|0)>=(e|0)|(j|0)<0)){g=e;break}}aj(a,j,0,0,0);Xj(9)|0;Fl();g=c[b>>2]|0}}while(0);if((f|0)>=(g|0)){k=g;l=k+ -1|0;c[b>>2]=l;m=a+32|0;n=c[m>>2]|0;o=n+ -1|0;c[m>>2]=o;i=d;return}if((c[a+20>>2]|0)==0){e=((f|0)<0?g:0)+f|0;j=c[a>>2]|0;if((j|0)==0){p=20}else{if((e|0)>=(g|0)|(e|0)<0){p=20}else{q=g;r=j}}if((p|0)==20){aj(a,e,0,0,0);Xj(9)|0;Fl();q=c[b>>2]|0;r=c[a>>2]|0}j=f+1|0;if((j|0)>=(q|0)){k=q;l=k+ -1|0;c[b>>2]=l;m=a+32|0;n=c[m>>2]|0;o=n+ -1|0;c[m>>2]=o;i=d;return}s=r+(e*56|0)|0;e=j;while(1){h[s+8>>3]=+h[s+64>>3];h[s+16>>3]=+h[s+72>>3];h[s+24>>3]=+h[s+80>>3];h[s+32>>3]=+h[s+88>>3];h[s+40>>3]=+h[s+96>>3];h[s+48>>3]=+h[s+104>>3];j=e+1|0;if((j|0)<(q|0)){s=s+56|0;e=j}else{k=q;break}}l=k+ -1|0;c[b>>2]=l;m=a+32|0;n=c[m>>2]|0;o=n+ -1|0;c[m>>2]=o;i=d;return}if((f|0)>=(g+ -1|0)){k=g;l=k+ -1|0;c[b>>2]=l;m=a+32|0;n=c[m>>2]|0;o=n+ -1|0;c[m>>2]=o;i=d;return}q=g;g=c[a>>2]|0;e=f;while(1){f=e+1|0;s=((e|0)<0?q:0)+e|0;if((g|0)==0){p=11}else{if((s|0)>=(q|0)|(s|0)<0){p=11}else{t=g}}if((p|0)==11){p=0;aj(a,s,0,0,0);Xj(9)|0;Fl();t=c[a>>2]|0}if((f|0)<0){u=(c[b>>2]|0)+f|0}else{u=f}if((t|0)==0){p=16}else{j=c[b>>2]|0;if((u|0)>=(j|0)|(u|0)<0){p=16}else{v=t;w=j}}if((p|0)==16){p=0;aj(a,u,0,0,0);Xj(9)|0;Fl();v=c[a>>2]|0;w=c[b>>2]|0}h[t+(s*56|0)+8>>3]=+h[v+(u*56|0)+8>>3];h[t+(s*56|0)+16>>3]=+h[v+(u*56|0)+16>>3];h[t+(s*56|0)+24>>3]=+h[v+(u*56|0)+24>>3];h[t+(s*56|0)+32>>3]=+h[v+(u*56|0)+32>>3];h[t+(s*56|0)+40>>3]=+h[v+(u*56|0)+40>>3];h[t+(s*56|0)+48>>3]=+h[v+(u*56|0)+48>>3];if((f|0)<(w+ -1|0)){q=w;g=v;e=f}else{k=w;break}}l=k+ -1|0;c[b>>2]=l;m=a+32|0;n=c[m>>2]|0;o=n+ -1|0;c[m>>2]=o;i=d;return}function Ki(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;h[a+56>>3]=e;h[a+8>>3]=b;h[a+16>>3]=c;h[a+24>>3]=b-d;h[a+32>>3]=b+d;h[a+64>>3]=.1;return 0.0}function Li(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0;b=i;i=i+80|0;d=b+76|0;e=b+64|0;f=b+60|0;g=b+48|0;j=b+44|0;k=b+32|0;l=b+16|0;m=b+4|0;n=b;o=b+28|0;c[f>>2]=240;p=a+56|0;q=+h[p>>3];c[d+0>>2]=c[f+0>>2];nk(e,d,q);+Hj(e);ik(e);c[j>>2]=248;e=a+8|0;q=+h[e>>3];c[d+0>>2]=c[j+0>>2];nk(g,d,q);+Hj(g);ik(g);c[n>>2]=256;g=a+24|0;q=+h[g>>3];c[d+0>>2]=c[n+0>>2];nk(m,d,q);c[o>>2]=272;c[d+0>>2]=c[o+0>>2];ak(l,m,d);d=a+32|0;ok(k,l,+h[d>>3]);+Hj(k);ik(k);ik(l);ik(m);q=+h[p>>3];r=+h[a+64>>3];s=+h[e>>3];if(q==0.0){t=r+s;h[e>>3]=t;u=+h[d>>3];if(!(t>u)){i=b;return 0.0}h[p>>3]=+(~~q^1|0);h[e>>3]=u+-1.0;i=b;return 0.0}else{u=s-r;h[e>>3]=u;r=+h[g>>3];if(!(u<r)){i=b;return 0.0}h[p>>3]=+(~~q^1|0);h[e>>3]=r+1.0;i=b;return 0.0}return 0.0}function Mi(a){a=a|0;var b=0;b=i;Rk(~~+h[35],~~+h[a+8>>3],~~+h[a+16>>3]);i=b;return 0.0}function Ni(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;var f=0,g=0.0;f=i;g=+Kj(d,e,b,c);c=+yk(g)*5.0+d;d=+xk(g)*5.0+e;h[a+8>>3]=c;h[a+16>>3]=d;i=f;return 0.0}function Oi(a,b,c,d,e,f,g){a=a|0;b=+b;c=+c;d=+d;e=+e;f=+f;g=+g;h[a+8>>3]=b;h[a+16>>3]=c;h[a+24>>3]=d;h[a+32>>3]=e;h[a+40>>3]=f;h[a+48>>3]=g;return 0.0}function Pi(a){a=a|0;var b=0,c=0.0;b=i;c=+h[a+8>>3];if(c==0.0){+Ej(+h[a+16>>3],+h[a+24>>3],+h[a+48>>3],20.0,16711935.0,0.0);i=b;return 0.0}if(!(c==1.0)){i=b;return 0.0}+Dj(+h[a+16>>3],+h[a+24>>3],+h[a+32>>3],+h[a+40>>3],16711935.0,0.0,0.0);i=b;return 0.0}function Qi(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){au(d)}c[a>>2]=0;i=b;return}function Ri(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=c[a>>2]|0;if((d|0)==0){c[a>>2]=0;i=b;return}e=d+ -4|0;f=c[e>>2]|0;if((f|0)!=0){g=d+(f*100|0)|0;while(1){f=g+ -100|0;c[f>>2]=736;h=g+ -64|0;j=c[h>>2]|0;if((j|0)!=0){au(j)}c[h>>2]=0;if((f|0)==(d|0)){break}else{g=f}}}au(e);c[a>>2]=0;i=b;return}function Si(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=c[a>>2]|0;if((d|0)==0){c[a>>2]=0;i=b;return}e=d+ -8|0;f=c[e+4>>2]|0;if((f|0)!=0){g=d+(f*80|0)|0;while(1){f=g+ -80|0;c[f>>2]=688;h=g+ -48|0;j=c[h>>2]|0;if((j|0)!=0){au(j)}c[h>>2]=0;if((f|0)==(d|0)){break}else{g=f}}}au(e);c[a>>2]=0;i=b;return}function Ti(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){au(d)}c[a>>2]=0;i=b;return}function Ui(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){au(d)}c[a>>2]=0;i=b;return}function Vi(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){au(d)}c[a>>2]=0;i=b;return}function Wi(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){au(d)}c[a>>2]=0;i=b;return}function Xi(a){a=a|0;var b=0;b=i;c[a>>2]=896;ik(a+24|0);i=b;return}function Yi(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=c[a>>2]|0;if((d|0)==0){c[a>>2]=0;i=b;return}e=d+ -4|0;f=c[e>>2]|0;if((f|0)!=0){g=d+(f*12|0)|0;do{g=g+ -12|0;ik(g)}while((g|0)!=(d|0))}au(e);c[a>>2]=0;i=b;return}function Zi(){h[36]=.5;return}function _i(a){a=a|0;return}function $i(a){a=a|0;return}function aj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;i=i+256|0;e=f+240|0;d=f+228|0;g=f+216|0;h=f+204|0;j=f+192|0;k=f+188|0;l=f+176|0;m=f+172|0;n=f+160|0;o=f+148|0;p=f+144|0;q=f+132|0;r=f+128|0;s=f+116|0;t=f+104|0;u=f+36|0;v=f;w=f+4|0;x=f+16|0;y=f+28|0;z=f+32|0;A=f+40|0;B=f+52|0;C=f+64|0;D=f+68|0;E=f+72|0;F=f+84|0;G=f+96|0;H=f+100|0;ek(d);ek(g);c[k>>2]=784;Gk(l,4.0,0.0,c[a+16>>2]|0);c[e+0>>2]=c[k+0>>2];$j(j,e,l);c[m>>2]=792;c[e+0>>2]=c[m+0>>2];ak(h,j,e);Wj(d,h)|0;ik(h);ik(j);ik(l);c[p>>2]=784;Gk(q,4.0,0.0,b);c[e+0>>2]=c[p+0>>2];$j(o,e,q);c[r>>2]=792;c[e+0>>2]=c[r+0>>2];ak(n,o,e);Wj(g,n)|0;ik(n);ik(o);ik(q);c[u>>2]=800;c[e+0>>2]=c[u+0>>2];$j(t,e,d);c[v>>2]=816;c[e+0>>2]=c[v+0>>2];ak(s,t,e);Hk(s);ik(s);ik(t);c[y>>2]=824;c[e+0>>2]=c[y+0>>2];$j(x,e,g);c[z>>2]=816;c[e+0>>2]=c[z+0>>2];ak(w,x,e);Hk(w);ik(w);ik(x);c[C>>2]=800;c[e+0>>2]=c[C+0>>2];$j(B,e,d);c[D>>2]=816;c[e+0>>2]=c[D+0>>2];ak(A,B,e);Jk(A);ik(A);ik(B);c[G>>2]=824;c[e+0>>2]=c[G+0>>2];$j(F,e,g);c[H>>2]=816;c[e+0>>2]=c[H+0>>2];ak(E,F,e);Jk(E);ik(E);ik(F);ik(g);ik(d);i=f;return}function bj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;i=i+256|0;e=f+240|0;d=f+228|0;g=f+216|0;h=f+204|0;j=f+192|0;k=f+188|0;l=f+176|0;m=f+172|0;n=f+160|0;o=f+148|0;p=f+144|0;q=f+132|0;r=f+128|0;s=f+116|0;t=f+104|0;u=f+36|0;v=f;w=f+4|0;x=f+16|0;y=f+28|0;z=f+32|0;A=f+40|0;B=f+52|0;C=f+64|0;D=f+68|0;E=f+72|0;F=f+84|0;G=f+96|0;H=f+100|0;ek(d);ek(g);c[k>>2]=784;Gk(l,4.0,0.0,c[a+16>>2]|0);c[e+0>>2]=c[k+0>>2];$j(j,e,l);c[m>>2]=792;c[e+0>>2]=c[m+0>>2];ak(h,j,e);Wj(d,h)|0;ik(h);ik(j);ik(l);c[p>>2]=784;Gk(q,4.0,0.0,b);c[e+0>>2]=c[p+0>>2];$j(o,e,q);c[r>>2]=792;c[e+0>>2]=c[r+0>>2];ak(n,o,e);Wj(g,n)|0;ik(n);ik(o);ik(q);c[u>>2]=800;c[e+0>>2]=c[u+0>>2];$j(t,e,d);c[v>>2]=816;c[e+0>>2]=c[v+0>>2];ak(s,t,e);Hk(s);ik(s);ik(t);c[y>>2]=824;c[e+0>>2]=c[y+0>>2];$j(x,e,g);c[z>>2]=816;c[e+0>>2]=c[z+0>>2];ak(w,x,e);Hk(w);ik(w);ik(x);c[C>>2]=800;c[e+0>>2]=c[C+0>>2];$j(B,e,d);c[D>>2]=816;c[e+0>>2]=c[D+0>>2];ak(A,B,e);Jk(A);ik(A);ik(B);c[G>>2]=824;c[e+0>>2]=c[G+0>>2];$j(F,e,g);c[H>>2]=816;c[e+0>>2]=c[H+0>>2];ak(E,F,e);Jk(E);ik(E);ik(F);ik(g);ik(d);i=f;return}function cj(a){a=a|0;return}function dj(a){a=a|0;return}function ej(a){a=a|0;return}function fj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;i=i+256|0;e=f+240|0;d=f+228|0;g=f+216|0;h=f+204|0;j=f+192|0;k=f+188|0;l=f+176|0;m=f+172|0;n=f+160|0;o=f+148|0;p=f+144|0;q=f+132|0;r=f+128|0;s=f+116|0;t=f+104|0;u=f+36|0;v=f;w=f+4|0;x=f+16|0;y=f+28|0;z=f+32|0;A=f+40|0;B=f+52|0;C=f+64|0;D=f+68|0;E=f+72|0;F=f+84|0;G=f+96|0;H=f+100|0;ek(d);ek(g);c[k>>2]=784;Gk(l,4.0,0.0,c[a+16>>2]|0);c[e+0>>2]=c[k+0>>2];$j(j,e,l);c[m>>2]=792;c[e+0>>2]=c[m+0>>2];ak(h,j,e);Wj(d,h)|0;ik(h);ik(j);ik(l);c[p>>2]=784;Gk(q,4.0,0.0,b);c[e+0>>2]=c[p+0>>2];$j(o,e,q);c[r>>2]=792;c[e+0>>2]=c[r+0>>2];ak(n,o,e);Wj(g,n)|0;ik(n);ik(o);ik(q);c[u>>2]=800;c[e+0>>2]=c[u+0>>2];$j(t,e,d);c[v>>2]=816;c[e+0>>2]=c[v+0>>2];ak(s,t,e);Hk(s);ik(s);ik(t);c[y>>2]=824;c[e+0>>2]=c[y+0>>2];$j(x,e,g);c[z>>2]=816;c[e+0>>2]=c[z+0>>2];ak(w,x,e);Hk(w);ik(w);ik(x);c[C>>2]=800;c[e+0>>2]=c[C+0>>2];$j(B,e,d);c[D>>2]=816;c[e+0>>2]=c[D+0>>2];ak(A,B,e);Jk(A);ik(A);ik(B);c[G>>2]=824;c[e+0>>2]=c[G+0>>2];$j(F,e,g);c[H>>2]=816;c[e+0>>2]=c[H+0>>2];ak(E,F,e);Jk(E);ik(E);ik(F);ik(g);ik(d);i=f;return}function gj(){var a=0,b=0,d=0;a=i;b=8|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));oc(23,8,q|0)|0;b=304|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));oc(24,304,q|0)|0;c[24]=944;c[104>>2]=0;c[108>>2]=0;c[112>>2]=0;c[116>>2]=0;c[120>>2]=0;c[124>>2]=0;c[128>>2]=0;c[132>>2]=0;b=376|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));oc(25,376,q|0)|0;b=424|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));oc(26,424,q|0)|0;b=480|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));oc(27,480,q|0)|0;b=552|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));oc(28,552,q|0)|0;b=192|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));oc(29,192,q|0)|0;c[36]=896;ek(168|0);h[184>>3]=0.0;c[152>>2]=0;c[156>>2]=0;c[160>>2]=0;c[164>>2]=0;oc(30,144,q|0)|0;b=600|0;d=b+44|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(d|0));oc(31,600,q|0)|0;i=a;return}function hj(){return}function ij(){var a=0,b=0,d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0,B=0;a=i;i=i+144|0;b=a+128|0;d=a+116|0;e=a+112|0;f=a+100|0;g=a+96|0;j=a+8|0;k=a;l=a+84|0;m=a+28|0;n=a+32|0;o=a+44|0;p=a+16|0;q=a+48|0;r=a+52|0;s=a+64|0;t=a+68|0;u=a+80|0;Zi();Ql(1.0);c[e>>2]=984;c[b+0>>2]=c[e+0>>2];gk(d,b);+wk(d);ik(d);h[36]=.5;+Bj();hl(50.0,0);c[g>>2]=992;c[b+0>>2]=c[g+0>>2];gk(f,b);h[37]=+Gj(f);ik(f);h[j>>3]=0.0;h[k>>3]=0.0;Zk(+h[37],j,k);Bk(8,~~(+h[j>>3]*+h[k>>3]),0,0,0);Wk(8,~~+h[37])|0;+Lj(+h[j>>3],+h[k>>3]);h[104>>3]=+h[152>>3]*.9;h[112>>3]=+h[160>>3]+-30.0;h[120>>3]=220.0;h[128>>3]=8.0;c[m>>2]=1008;c[b+0>>2]=c[m+0>>2];gk(l,b);h[45]=+Gj(l);ik(l);c[o>>2]=1024;c[b+0>>2]=c[o+0>>2];gk(n,b);h[46]=+Gj(n);ik(n);c[q>>2]=1040;c[b+0>>2]=c[q+0>>2];gk(p,b);h[35]=+Gj(p);ik(p);c[s>>2]=1048;c[b+0>>2]=c[s+0>>2];gk(r,b);h[17]=+Gj(r);ik(r);jj(376,0,0,0,0);kj(424,1,0,0,0);h[59]=+(gl()|0);r=fl()|0;h[9]=+(r|0);al(~~+h[59],r,500,695);lj(480,4,0,0,0);r=c[120]|0;if((r|0)==0|(c[496>>2]|0)<1){yj(480,0,0,0,0);Xj(9)|0;Fl();v=c[120]|0}else{v=r}w=+h[36];+Oi(v,0.0,w*250.0,w*240.0,0.0,0.0,w*150.0);v=c[120]|0;if((v|0)==0|(c[496>>2]|0)<2){yj(480,1,0,0,0);Xj(9)|0;Fl();x=c[120]|0}else{x=v}w=+h[36];+Oi(x+56|0,0.0,w*250.0,w*350.0,0.0,0.0,w*150.0);x=c[106]|0;if((x|0)==0|(c[440>>2]|0)<1){xj(424,0,0,0,0);Xj(9)|0;Fl();y=c[106]|0}else{y=x}+zi(y,+h[9]);w=+(fl()|0);h[11]=w;+Fj(10.0,10.0,5.0,4210816.0,w);w=+(fl()|0);h[66]=w;+Fj(10.0,10.0,5.0,255.0,w);w=+(fl()|0);h[67]=w;+Fj(10.0,10.0,5.0,16711680.0,w);w=+(fl()|0);h[68]=w;+Fj(10.0,10.0,5.0,65280.0,w);mj(552,2,0,0,0);nj(192,0,0,0,0);y=c[138]|0;if((y|0)==0|(c[568>>2]|0)<1){uj(552,0,0,0,0);Xj(9)|0;Fl();z=c[138]|0}else{z=y}+Ki(z,209.0,248.0,15.0,1.0);z=c[138]|0;if(!((z|0)==0|(c[568>>2]|0)<2)){A=z;B=A+72|0;+Ki(B,329.0,255.0,15.0,1.0);c[u>>2]=1064;c[b+0>>2]=c[u+0>>2];gk(t,b);Ek(t);ik(t);i=a;return 0}uj(552,1,0,0,0);Xj(9)|0;Fl();A=c[138]|0;B=A+72|0;+Ki(B,329.0,255.0,15.0,1.0);c[u>>2]=1064;c[b+0>>2]=c[u+0>>2];gk(t,b);Ek(t);ik(t);i=a;return 0}function jj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;h=(b|0)<1;j=h?0:b;b=(d|0)<1?1:d;k=ea(b,j)|0;l=(e|0)<1?1:e;m=ea(k,l)|0;k=(f|0)<1?1:f;n=ea(m,k)|0;m=a+40|0;do{if((n|0)<=(c[m>>2]|0)&(h^1)){if((n|0)>0){o=ea(j,(f|0)>1?f:1)|0;p=ea(o,(e|0)>1?e:1)|0;o=ea(p,(d|0)>1?d:1)|0;p=0;q=c[a>>2]|0;while(1){r=q+8|0;s=q+32|0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;Ei(s,0,0,0,0);p=p+1|0;if((p|0)==(o|0)){break}else{q=q+80|0}}}}else{if((n|0)==0){t=0}else{t=(((n|0)/64|0)<<6)+64|0}c[m>>2]=t;q=c[a>>2]|0;if((q|0)!=0){o=q+ -8|0;p=c[o+4>>2]|0;if((p|0)!=0){s=q+(p*80|0)|0;while(1){p=s+ -80|0;c[p>>2]=688;r=s+ -48|0;u=c[r>>2]|0;if((u|0)!=0){au(u)}c[r>>2]=0;if((p|0)==(q|0)){break}else{s=p}}}au(o)}if((t|0)<=0){c[a>>2]=0;break}s=t*80|0;q=_t(t>>>0>53687091|s>>>0>4294967287?-1:s+8|0)|0;c[q+4>>2]=t;s=q+8|0;q=s+(t*80|0)|0;p=s;do{c[p>>2]=688;r=p+8|0;u=r+68|0;do{c[r>>2]=0;r=r+4|0}while((r|0)<(u|0));p=p+80|0}while((p|0)!=(q|0));c[a>>2]=s}}while(0);do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}t=a+36|0;if((j|0)==0){c[t>>2]=0;break}else{c[t>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=j;t=ea(j,d)|0;c[a+8>>2]=t;c[a+12>>2]=ea(t,e)|0;c[a+16>>2]=j;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(j,k)|0,b)|0,l)|0;i=g;return}function kj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;g=i;h=(b|0)<1;j=h?0:b;b=(d|0)<1?1:d;k=ea(b,j)|0;l=(e|0)<1?1:e;m=ea(k,l)|0;k=(f|0)<1?1:f;n=ea(m,k)|0;m=a+40|0;do{if((n|0)<=(c[m>>2]|0)&(h^1)){if((n|0)>0){o=ea(j,(f|0)>1?f:1)|0;p=ea(o,(e|0)>1?e:1)|0;o=ea(p,(d|0)>1?d:1)|0;p=0;q=c[a>>2]|0;while(1){r=q+96|0;s=p+1|0;t=(s|0)==(o|0);u=q+8|0;v=u+88|0;do{c[u>>2]=0;u=u+4|0}while((u|0)<(v|0));if(t){break}else{p=s;q=r}}}}else{if((n|0)==0){w=0}else{w=(((n|0)/64|0)<<6)+64|0}c[m>>2]=w;q=c[a>>2]|0;if((q|0)!=0){au(q)}if((w|0)<=0){c[a>>2]=0;break}q=_t(w>>>0>44739242?-1:w*96|0)|0;p=q+(w*96|0)|0;o=q;do{c[o>>2]=1576;u=o+8|0;v=u+88|0;do{c[u>>2]=0;u=u+4|0}while((u|0)<(v|0));o=o+96|0}while((o|0)!=(p|0));c[a>>2]=q;if((q|0)==0){Xj(7)|0;Fl()}}}while(0);do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}u=a+36|0;if((j|0)==0){c[u>>2]=0;break}else{c[u>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=j;u=ea(j,d)|0;c[a+8>>2]=u;c[a+12>>2]=ea(u,e)|0;c[a+16>>2]=j;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(j,k)|0,b)|0,l)|0;i=g;return}function lj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;g=i;h=(b|0)<1;j=h?0:b;b=(d|0)<1?1:d;k=ea(b,j)|0;l=(e|0)<1?1:e;m=ea(k,l)|0;k=(f|0)<1?1:f;n=ea(m,k)|0;m=a+40|0;do{if((n|0)<=(c[m>>2]|0)&(h^1)){if((n|0)>0){o=ea(j,(f|0)>1?f:1)|0;p=ea(o,(e|0)>1?e:1)|0;o=ea(p,(d|0)>1?d:1)|0;p=0;q=c[a>>2]|0;while(1){r=q+56|0;s=p+1|0;t=(s|0)==(o|0);u=q+8|0;v=u+48|0;do{c[u>>2]=0;u=u+4|0}while((u|0)<(v|0));if(t){break}else{p=s;q=r}}}}else{if((n|0)==0){w=0}else{w=(((n|0)/64|0)<<6)+64|0}c[m>>2]=w;q=c[a>>2]|0;if((q|0)!=0){au(q)}if((w|0)<=0){c[a>>2]=0;break}q=_t(w>>>0>76695844?-1:w*56|0)|0;p=q+(w*56|0)|0;o=q;do{c[o>>2]=1528;u=o+8|0;v=u+48|0;do{c[u>>2]=0;u=u+4|0}while((u|0)<(v|0));o=o+56|0}while((o|0)!=(p|0));c[a>>2]=q;if((q|0)==0){Xj(7)|0;Fl()}}}while(0);do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}u=a+36|0;if((j|0)==0){c[u>>2]=0;break}else{c[u>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=j;u=ea(j,d)|0;c[a+8>>2]=u;c[a+12>>2]=ea(u,e)|0;c[a+16>>2]=j;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(j,k)|0,b)|0,l)|0;i=g;return}function mj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;g=i;h=(b|0)<1;j=h?0:b;b=(d|0)<1?1:d;k=ea(b,j)|0;l=(e|0)<1?1:e;m=ea(k,l)|0;k=(f|0)<1?1:f;n=ea(m,k)|0;m=a+40|0;do{if((n|0)<=(c[m>>2]|0)&(h^1)){if((n|0)>0){o=ea(j,(f|0)>1?f:1)|0;p=ea(o,(e|0)>1?e:1)|0;o=ea(p,(d|0)>1?d:1)|0;p=0;q=c[a>>2]|0;while(1){r=q+72|0;s=p+1|0;t=(s|0)==(o|0);u=q+8|0;v=u+64|0;do{c[u>>2]=0;u=u+4|0}while((u|0)<(v|0));if(t){break}else{p=s;q=r}}}}else{if((n|0)==0){w=0}else{w=(((n|0)/64|0)<<6)+64|0}c[m>>2]=w;q=c[a>>2]|0;if((q|0)!=0){au(q)}if((w|0)<=0){c[a>>2]=0;break}q=_t(w>>>0>59652323?-1:w*72|0)|0;p=q+(w*72|0)|0;o=q;do{c[o>>2]=1480;u=o+8|0;v=u+64|0;do{c[u>>2]=0;u=u+4|0}while((u|0)<(v|0));o=o+72|0}while((o|0)!=(p|0));c[a>>2]=q;if((q|0)==0){Xj(7)|0;Fl()}}}while(0);do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}u=a+36|0;if((j|0)==0){c[u>>2]=0;break}else{c[u>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=j;u=ea(j,d)|0;c[a+8>>2]=u;c[a+12>>2]=ea(u,e)|0;c[a+16>>2]=j;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(j,k)|0,b)|0,l)|0;i=g;return}function nj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;g=i;h=(b|0)<1;j=h?0:b;b=(d|0)<1?1:d;k=ea(b,j)|0;l=(e|0)<1?1:e;m=ea(k,l)|0;k=(f|0)<1?1:f;n=ea(m,k)|0;m=a+40|0;do{if((n|0)<=(c[m>>2]|0)&(h^1)){if((n|0)>0){o=ea(j,(f|0)>1?f:1)|0;p=ea(o,(e|0)>1?e:1)|0;o=ea(p,(d|0)>1?d:1)|0;p=0;q=c[a>>2]|0;while(1){r=q+56|0;s=p+1|0;t=(s|0)==(o|0);u=q+8|0;v=u+48|0;do{c[u>>2]=0;u=u+4|0}while((u|0)<(v|0));if(t){break}else{p=s;q=r}}}}else{if((n|0)==0){w=0}else{w=(((n|0)/64|0)<<6)+64|0}c[m>>2]=w;q=c[a>>2]|0;if((q|0)!=0){au(q)}if((w|0)<=0){c[a>>2]=0;break}q=_t(w>>>0>76695844?-1:w*56|0)|0;p=q+(w*56|0)|0;o=q;do{c[o>>2]=1424;u=o+8|0;v=u+48|0;do{c[u>>2]=0;u=u+4|0}while((u|0)<(v|0));o=o+56|0}while((o|0)!=(p|0));c[a>>2]=q;if((q|0)==0){Xj(7)|0;Fl()}}}while(0);do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}u=a+36|0;if((j|0)==0){c[u>>2]=0;break}else{c[u>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=j;u=ea(j,d)|0;c[a+8>>2]=u;c[a+12>>2]=ea(u,e)|0;c[a+16>>2]=j;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(j,k)|0,b)|0,l)|0;i=g;return}function oj(){var a=0,b=0,d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0.0,O=0.0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0.0,ca=0.0;a=i;i=i+176|0;b=a+168|0;d=a;e=a+8|0;f=a+16|0;g=a+24|0;j=a+156|0;k=a+152|0;l=a+140|0;m=a+128|0;n=a+116|0;o=a+32|0;p=a+76|0;q=a+36|0;r=a+80|0;s=a+92|0;t=a+64|0;u=a+60|0;v=a+48|0;w=a+96|0;x=a+100|0;y=a+112|0;h[d>>3]=0.0;h[e>>3]=0.0;h[f>>3]=0.0;h[g>>3]=0.0;Nl(d,e,f,g);c[k>>2]=1096;z=+h[184>>3];c[b+0>>2]=c[k+0>>2];nk(j,b,z);+Hj(j);ik(j);c[o>>2]=1104;z=+h[104>>3];c[b+0>>2]=c[o+0>>2];nk(n,b,z);c[p>>2]=1112;c[b+0>>2]=c[p+0>>2];ak(m,n,b);ok(l,m,+h[112>>3]);+Hj(l);ik(l);ik(m);ik(n);hk(q,+sk());+Hj(q);ik(q);bl(~~+h[59]);Yk(190,230,180,50,16777215);q=(c[208>>2]|0)>0;n=c[138]|0;if((n|0)==0|(c[568>>2]|0)<1){uj(552,0,0,0,0);Xj(9)|0;Fl();A=c[138]|0}else{A=n}if(q){q=c[48]|0;n=c[208>>2]|0;if((q|0)==0|(n|0)<1){aj(192,0,0,0,0);Xj(9)|0;Fl();B=c[48]|0;C=c[208>>2]|0}else{B=q;C=n}z=+h[B+8>>3];if((B|0)==0|(C|0)<1){aj(192,0,0,0,0);Xj(9)|0;Fl();D=c[48]|0}else{D=B}+Ni(A,z,+h[D+16>>3],209.0,248.0);D=c[138]|0;if((D|0)==0|(c[568>>2]|0)<2){uj(552,1,0,0,0);Xj(9)|0;Fl();E=c[138]|0}else{E=D}D=c[48]|0;B=c[208>>2]|0;if((D|0)==0|(B|0)<1){aj(192,0,0,0,0);Xj(9)|0;Fl();F=c[48]|0;G=c[208>>2]|0}else{F=D;G=B}z=+h[F+8>>3];if((F|0)==0|(G|0)<1){aj(192,0,0,0,0);Xj(9)|0;Fl();H=c[48]|0}else{H=F}+Ni(E+72|0,z,+h[H+16>>3],329.0,255.0)}else{+Li(A);A=c[138]|0;if((A|0)==0|(c[568>>2]|0)<2){uj(552,1,0,0,0);Xj(9)|0;Fl();I=c[138]|0}else{I=A}+Li(I+72|0)}I=c[138]|0;if((I|0)==0|(c[568>>2]|0)<1){uj(552,0,0,0,0);Xj(9)|0;Fl();J=c[138]|0}else{J=I}+Mi(J);J=c[138]|0;if((J|0)==0|(c[568>>2]|0)<2){uj(552,1,0,0,0);Xj(9)|0;Fl();K=c[138]|0}else{K=J}+Mi(K+72|0);Rk(~~+h[45],0,0);Rk(~~+h[46],230,~~(+h[135]+380.0));bl(-1);K=c[120]|0;if((K|0)==0|(c[496>>2]|0)<3){yj(480,2,0,0,0);Xj(9)|0;Fl();L=c[120]|0}else{L=K}z=+h[36];+Oi(L+112|0,1.0,z*240.0,z*384.0,z*70.0,z*+h[135],0.0);L=c[120]|0;if((L|0)==0|(c[496>>2]|0)<4){yj(480,3,0,0,0);Xj(9)|0;Fl();M=c[120]|0}else{M=L}z=+h[36];N=z*100.0;+Oi(M+168|0,1.0,z*230.0,z*(+h[135]+384.0),N,N,0.0);N=+h[135];if(+h[136]==0.0){O=N+.5}else{O=N+-.5}h[135]=O;if(O<0.0){h[136]=0.0}if(O>30.0){h[136]=1.0}M=c[106]|0;if((M|0)==0|(c[440>>2]|0)<1){xj(424,0,0,0,0);Xj(9)|0;Fl();P=c[106]|0}else{P=M}+Ai(P,0.0,0.0,.5);P=c[392>>2]|0;if((P|0)<1){Q=P}else{M=P;O=0.0;while(1){P=~~O;L=((P|0)<0?M:0)+P|0;P=c[94]|0;if((P|0)==0){R=38}else{if((L|0)>=(M|0)|(L|0)<0){R=38}else{S=P}}if((R|0)==38){R=0;tj(376,L,0,0,0);Xj(9)|0;Fl();S=c[94]|0}+Fi(S+(L*80|0)|0);N=O+1.0;L=c[392>>2]|0;if(!(N<=+(L+ -1|0))){Q=L;break}else{M=L;O=N}}}c[s>>2]=1120;c[b+0>>2]=c[s+0>>2];mk(r,b,Q);+Hj(r);ik(r);+Ci(96);+Bi(96);c[u>>2]=1136;O=+h[128>>3];c[b+0>>2]=c[u+0>>2];nk(t,b,O);+Hj(t);ik(t);if((Il(57)|0)!=0){O=+sk();if(O>+h[44]){t=c[208>>2]|0;pj(192,~~(+(t|0)+1.0),0,0,0);if((t|0)<0){T=(c[208>>2]|0)+t|0}else{T=t}t=c[48]|0;if((t|0)==0){R=47}else{if((T|0)>=(c[208>>2]|0)|(T|0)<0){R=47}else{U=t}}if((R|0)==47){aj(192,T,0,0,0);Xj(9)|0;Fl();U=c[48]|0}+Gi(U+(T*56|0)|0);h[44]=+sk()+500.0}}T=c[208>>2]|0;if((T|0)>=1){U=T;O=0.0;do{T=~~O;t=(T|0)<0;u=(t?U:0)+T|0;r=c[48]|0;if((r|0)==0){R=51}else{if((u|0)>=(U|0)|(u|0)<0){R=51}else{V=r}}if((R|0)==51){R=0;aj(192,u,0,0,0);Xj(9)|0;Fl();V=c[48]|0}+Hi(V+(u*56|0)|0);if(t){W=(c[208>>2]|0)+T|0}else{W=T}T=c[48]|0;if((T|0)==0){R=56}else{if((W|0)>=(c[208>>2]|0)|(W|0)<0){R=56}else{X=T}}if((R|0)==56){R=0;aj(192,W,0,0,0);Xj(9)|0;Fl();X=c[48]|0}+Ii(X+(W*56|0)|0,O);O=O+1.0;U=c[208>>2]|0}while(O<=+(U+ -1|0))}U=c[120]|0;if((U|0)==0|(c[496>>2]|0)<1){yj(480,0,0,0,0);Xj(9)|0;Fl();Y=c[120]|0}else{Y=U}+Pi(Y);Y=c[120]|0;if((Y|0)==0|(c[496>>2]|0)<2){yj(480,1,0,0,0);Xj(9)|0;Fl();Z=c[120]|0}else{Z=Y}+Pi(Z+56|0);Z=c[120]|0;if((Z|0)==0|(c[496>>2]|0)<3){yj(480,2,0,0,0);Xj(9)|0;Fl();_=c[120]|0}else{_=Z}+Pi(_+112|0);_=c[120]|0;if(!((_|0)==0|(c[496>>2]|0)<4)){$=_;aa=$+168|0;+Pi(aa);ba=+h[135];+qj(ba);c[w>>2]=1144;ca=+il();c[b+0>>2]=c[w+0>>2];nk(v,b,ca);+Hj(v);ik(v);c[y>>2]=1160;c[b+0>>2]=c[y+0>>2];nk(x,b,0.0);+Hj(x);ik(x);+Jj(0.0,0.0);i=a;return}yj(480,3,0,0,0);Xj(9)|0;Fl();$=c[120]|0;aa=$+168|0;+Pi(aa);ba=+h[135];+qj(ba);c[w>>2]=1144;ca=+il();c[b+0>>2]=c[w+0>>2];nk(v,b,ca);+Hj(v);ik(v);c[y>>2]=1160;c[b+0>>2]=c[y+0>>2];nk(x,b,0.0);+Hj(x);ik(x);+Jj(0.0,0.0);i=a;return}function pj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;g=i;i=i+48|0;j=g;if((b|0)<1){k=a+4|0;l=k+36|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0));i=g;return}k=j+0|0;l=k+44|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0));nj(j,b,d,e,f);f=a+16|0;e=c[f>>2]|0;d=(e|0)<(b|0)?e:b;b=a+20|0;e=a+24|0;k=a+28|0;if((d|0)>0){l=j+16|0;m=0;while(1){n=c[j>>2]|0;if((n|0)==0){o=8}else{if((m|0)>=(c[l>>2]|0)|(m|0)<0){o=8}else{p=n}}if((o|0)==8){o=0;aj(j,m,0,0,0);Xj(9)|0;Fl();p=c[j>>2]|0}n=c[a>>2]|0;if((n|0)==0){o=11}else{if((m|0)>=(c[f>>2]|0)|(m|0)<0){o=11}else{q=n}}if((o|0)==11){o=0;aj(a,m,0,0,0);Xj(9)|0;Fl();q=c[a>>2]|0}h[p+(m*56|0)+8>>3]=+h[q+(m*56|0)+8>>3];h[p+(m*56|0)+16>>3]=+h[q+(m*56|0)+16>>3];h[p+(m*56|0)+24>>3]=+h[q+(m*56|0)+24>>3];h[p+(m*56|0)+32>>3]=+h[q+(m*56|0)+32>>3];h[p+(m*56|0)+40>>3]=+h[q+(m*56|0)+40>>3];h[p+(m*56|0)+48>>3]=+h[q+(m*56|0)+48>>3];n=m+1|0;if((n|0)<(d|0)){m=n}else{r=l;s=p;t=q;break}}}else{r=j+16|0;s=c[j>>2]|0;t=c[a>>2]|0}c[a+4>>2]=c[j+4>>2];c[a+8>>2]=c[j+8>>2];c[a+12>>2]=c[j+12>>2];c[f>>2]=c[r>>2];c[b>>2]=c[j+20>>2];c[e>>2]=c[j+24>>2];c[k>>2]=c[j+28>>2];c[a+32>>2]=c[j+32>>2];c[a+36>>2]=c[j+36>>2];c[a+40>>2]=c[j+40>>2];c[a>>2]=s;c[j>>2]=t;if((t|0)==0){i=g;return}au(t);i=g;return}function qj(a){a=+a;var b=0,d=0,e=0,f=0,g=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0.0,R=0,S=0,T=0,U=0;b=i;i=i+32|0;d=b+16|0;e=b;f=b+12|0;g=+yk(+h[120>>3]);j=g*+h[128>>3];g=+xk(+h[120>>3]);k=g*+h[128>>3];g=+h[104>>3];l=+h[112>>3];m=+h[36];+Dj(m*100.0,m*90.0,m*300.0,m*500.0,16777215.0,0.0,0.0);m=g;g=k;k=l;l=0.0;while(1){n=+h[68];m=j+m;k=k+g;g=g+.08;o=+h[36];p=o*100.0;q=o*90.0;r=o*500.0;if(m>p){if(m<p+o*300.0&k>q){if(k<q+r){s=+h[67]}else{s=n}}else{s=n}}else{s=n}n=o*240.0;r=o*70.0;q=o*384.0;p=o*a;if(m>n){if(m<n+r&k>q){if(k<q+p){t=l+1.0;u=+h[66]}else{t=l;u=s}}else{t=l;u=s}}else{t=l;u=s}Sk(~~u,~~m,~~k,.5,.5);v=c[208>>2]|0;if((v|0)>=1){o=n+r;r=q+p;w=v;p=0.0;do{v=~~p;x=(v|0)<0;y=(x?w:0)+v|0;z=c[48]|0;if((z|0)==0){A=14}else{if((y|0)>=(w|0)|(y|0)<0){A=14}else{B=z}}if((A|0)==14){A=0;aj(192,y,0,0,0);Xj(9)|0;Fl();B=c[48]|0}z=+h[B+(y*56|0)+40>>3]==1.0;if(x){C=(c[208>>2]|0)+v|0}else{C=v}if((B|0)==0){A=19}else{if((C|0)>=(c[208>>2]|0)|(C|0)<0){A=19}else{D=B}}if((A|0)==19){A=0;aj(192,C,0,0,0);Xj(9)|0;Fl();D=c[48]|0}if(z){if(+h[D+(C*56|0)+8>>3]>n){if(x){E=(c[208>>2]|0)+v|0}else{E=v}if((D|0)==0){A=26}else{if((E|0)>=(c[208>>2]|0)|(E|0)<0){A=26}else{F=D}}if((A|0)==26){A=0;aj(192,E,0,0,0);Xj(9)|0;Fl();F=c[48]|0}if(+h[F+(E*56|0)+8>>3]<o){if(x){G=(c[208>>2]|0)+v|0}else{G=v}if((F|0)==0){A=32}else{if((G|0)>=(c[208>>2]|0)|(G|0)<0){A=32}else{H=F}}if((A|0)==32){A=0;aj(192,G,0,0,0);Xj(9)|0;Fl();H=c[48]|0}if(+h[H+(G*56|0)+16>>3]>q){if(x){I=(c[208>>2]|0)+v|0}else{I=v}if((H|0)==0){A=38}else{if((I|0)>=(c[208>>2]|0)|(I|0)<0){A=38}else{J=H}}if((A|0)==38){A=0;aj(192,I,0,0,0);Xj(9)|0;Fl();J=c[48]|0}if(+h[J+(I*56|0)+16>>3]<r){h[184>>3]=+h[184>>3]+1.0;if(x){K=(c[208>>2]|0)+v|0}else{K=v}if((J|0)==0){A=44}else{if((K|0)>=(c[208>>2]|0)|(K|0)<0){A=44}else{L=J}}if((A|0)==44){A=0;aj(192,K,0,0,0);Xj(9)|0;Fl();L=c[48]|0}h[L+(K*56|0)+40>>3]=2.0;z=c[392>>2]|0;rj(376,~~(+(z|0)+1.0),0,0,0);if((z|0)<0){M=(c[392>>2]|0)+z|0}else{M=z}z=c[94]|0;if((z|0)==0){A=49}else{if((M|0)>=(c[392>>2]|0)|(M|0)<0){A=49}else{N=z}}if((A|0)==49){A=0;tj(376,M,0,0,0);Xj(9)|0;Fl();N=c[94]|0}z=N+(M*80|0)|0;if(x){O=(c[208>>2]|0)+v|0}else{O=v}y=c[48]|0;if((y|0)==0){A=54}else{if((O|0)>=(c[208>>2]|0)|(O|0)<0){A=54}else{P=y}}if((A|0)==54){A=0;aj(192,O,0,0,0);Xj(9)|0;Fl();P=c[48]|0}Q=+h[P+(O*56|0)+8>>3];if(x){R=(c[208>>2]|0)+v|0}else{R=v}if((P|0)==0){A=59}else{if((R|0)>=(c[208>>2]|0)|(R|0)<0){A=59}else{S=P}}if((A|0)==59){A=0;aj(192,R,0,0,0);Xj(9)|0;Fl();S=c[48]|0}+Di(z,Q,+h[S+(R*56|0)+16>>3],10.0,20.0)}}}}}else{if(+h[D+(C*56|0)+40>>3]==2.0){if(x){T=(c[208>>2]|0)+v|0}else{T=v}if((D|0)==0){A=66}else{if((T|0)>=(c[208>>2]|0)|(T|0)<0){A=66}else{U=D}}if((A|0)==66){A=0;aj(192,T,0,0,0);Xj(9)|0;Fl();U=c[48]|0}if(+h[U+(T*56|0)+16>>3]>+h[160>>3]){Ji(192,v)}}}p=p+1.0;w=c[208>>2]|0}while(p<=+(w+ -1|0))}if(!(!(m<0.0)&!(k>+h[152>>3]))){break}else{l=t}}c[f>>2]=1168;c[d+0>>2]=c[f+0>>2];nk(e,d,t);+Hj(e);ik(e);i=b;return 0.0}function rj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;g=i;i=i+48|0;j=g;if((b|0)<1){k=a+4|0;l=k+36|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0));i=g;return}k=j+0|0;l=k+44|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0));jj(j,b,d,e,f);f=a+16|0;e=c[f>>2]|0;d=(e|0)<(b|0)?e:b;b=a+20|0;e=a+24|0;k=a+28|0;l=j+16|0;if((d|0)>0){m=0;while(1){n=c[j>>2]|0;if((n|0)==0){o=8}else{if((m|0)>=(c[l>>2]|0)|(m|0)<0){o=8}else{p=n}}if((o|0)==8){o=0;tj(j,m,0,0,0);Xj(9)|0;Fl();p=c[j>>2]|0}n=c[a>>2]|0;if((n|0)==0){o=11}else{if((m|0)>=(c[f>>2]|0)|(m|0)<0){o=11}else{q=n}}if((o|0)==11){o=0;tj(a,m,0,0,0);Xj(9)|0;Fl();q=c[a>>2]|0}h[p+(m*80|0)+8>>3]=+h[q+(m*80|0)+8>>3];h[p+(m*80|0)+16>>3]=+h[q+(m*80|0)+16>>3];h[p+(m*80|0)+24>>3]=+h[q+(m*80|0)+24>>3];n=p+(m*80|0)+32|0;Ei(n,c[q+(m*80|0)+48>>2]|0,c[q+(m*80|0)+52>>2]|0,c[q+(m*80|0)+56>>2]|0,c[q+(m*80|0)+60>>2]|0);r=c[q+(m*80|0)+64>>2]|0;if((r|0)!=0){s=c[q+(m*80|0)+32>>2]|0;t=c[n>>2]|0;n=r;while(1){h[t+8>>3]=+h[s+8>>3];h[t+16>>3]=+h[s+16>>3];n=n+ -1|0;if((n|0)==0){break}else{s=s+24|0;t=t+24|0}}}t=m+1|0;if((t|0)<(d|0)){m=t}else{u=a;v=j;break}}}else{u=a;v=j}c[a+4>>2]=c[j+4>>2];c[a+8>>2]=c[j+8>>2];c[a+12>>2]=c[j+12>>2];c[f>>2]=c[l>>2];c[b>>2]=c[j+20>>2];c[e>>2]=c[j+24>>2];c[k>>2]=c[j+28>>2];c[a+32>>2]=c[j+32>>2];c[a+36>>2]=c[j+36>>2];c[a+40>>2]=c[j+40>>2];j=c[u>>2]|0;c[u>>2]=c[v>>2];c[v>>2]=j;if((j|0)!=0){u=j+ -8|0;a=c[u+4>>2]|0;if((a|0)!=0){k=j+(a*80|0)|0;while(1){a=k+ -80|0;c[a>>2]=688;e=k+ -48|0;b=c[e>>2]|0;if((b|0)!=0){au(b)}c[e>>2]=0;if((a|0)==(j|0)){break}else{k=a}}}au(u)}c[v>>2]=0;i=g;return}function sj(){var a=0,b=0,d=0,e=0,f=0,g=0;a=i;i=i+16|0;b=a;c[430]=800;c[432]=600;c[446]=0;c[438]=0;c[442]=60;c[440]=0;c[444]=1;c[1250]=0;d=Ik()|0;fk(b,1184);e=c[b>>2]|0;c[b>>2]=c[d>>2];c[d>>2]=e;e=b+8|0;f=d+8|0;g=c[e>>2]|0;c[e>>2]=c[f>>2];c[f>>2]=g;g=b+4|0;f=d+4|0;d=c[g>>2]|0;c[g>>2]=c[f>>2];c[f>>2]=d;ik(b);i=a;return}function tj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;i=i+256|0;e=f+240|0;d=f+228|0;g=f+216|0;h=f+204|0;j=f+192|0;k=f+188|0;l=f+176|0;m=f+172|0;n=f+160|0;o=f+148|0;p=f+144|0;q=f+132|0;r=f+128|0;s=f+116|0;t=f+104|0;u=f+36|0;v=f;w=f+4|0;x=f+16|0;y=f+28|0;z=f+32|0;A=f+40|0;B=f+52|0;C=f+64|0;D=f+68|0;E=f+72|0;F=f+84|0;G=f+96|0;H=f+100|0;ek(d);ek(g);c[k>>2]=1360;Gk(l,4.0,0.0,c[a+16>>2]|0);c[e+0>>2]=c[k+0>>2];$j(j,e,l);c[m>>2]=1368;c[e+0>>2]=c[m+0>>2];ak(h,j,e);Wj(d,h)|0;ik(h);ik(j);ik(l);c[p>>2]=1360;Gk(q,4.0,0.0,b);c[e+0>>2]=c[p+0>>2];$j(o,e,q);c[r>>2]=1368;c[e+0>>2]=c[r+0>>2];ak(n,o,e);Wj(g,n)|0;ik(n);ik(o);ik(q);c[u>>2]=1376;c[e+0>>2]=c[u+0>>2];$j(t,e,d);c[v>>2]=1392;c[e+0>>2]=c[v+0>>2];ak(s,t,e);Hk(s);ik(s);ik(t);c[y>>2]=1400;c[e+0>>2]=c[y+0>>2];$j(x,e,g);c[z>>2]=1392;c[e+0>>2]=c[z+0>>2];ak(w,x,e);Hk(w);ik(w);ik(x);c[C>>2]=1376;c[e+0>>2]=c[C+0>>2];$j(B,e,d);c[D>>2]=1392;c[e+0>>2]=c[D+0>>2];ak(A,B,e);Jk(A);ik(A);ik(B);c[G>>2]=1400;c[e+0>>2]=c[G+0>>2];$j(F,e,g);c[H>>2]=1392;c[e+0>>2]=c[H+0>>2];ak(E,F,e);Jk(E);ik(E);ik(F);ik(g);ik(d);i=f;return}function uj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;i=i+256|0;e=f+240|0;d=f+228|0;g=f+216|0;h=f+204|0;j=f+192|0;k=f+188|0;l=f+176|0;m=f+172|0;n=f+160|0;o=f+148|0;p=f+144|0;q=f+132|0;r=f+128|0;s=f+116|0;t=f+104|0;u=f+36|0;v=f;w=f+4|0;x=f+16|0;y=f+28|0;z=f+32|0;A=f+40|0;B=f+52|0;C=f+64|0;D=f+68|0;E=f+72|0;F=f+84|0;G=f+96|0;H=f+100|0;ek(d);ek(g);c[k>>2]=1360;Gk(l,4.0,0.0,c[a+16>>2]|0);c[e+0>>2]=c[k+0>>2];$j(j,e,l);c[m>>2]=1368;c[e+0>>2]=c[m+0>>2];ak(h,j,e);Wj(d,h)|0;ik(h);ik(j);ik(l);c[p>>2]=1360;Gk(q,4.0,0.0,b);c[e+0>>2]=c[p+0>>2];$j(o,e,q);c[r>>2]=1368;c[e+0>>2]=c[r+0>>2];ak(n,o,e);Wj(g,n)|0;ik(n);ik(o);ik(q);c[u>>2]=1376;c[e+0>>2]=c[u+0>>2];$j(t,e,d);c[v>>2]=1392;c[e+0>>2]=c[v+0>>2];ak(s,t,e);Hk(s);ik(s);ik(t);c[y>>2]=1400;c[e+0>>2]=c[y+0>>2];$j(x,e,g);c[z>>2]=1392;c[e+0>>2]=c[z+0>>2];ak(w,x,e);Hk(w);ik(w);ik(x);c[C>>2]=1376;c[e+0>>2]=c[C+0>>2];$j(B,e,d);c[D>>2]=1392;c[e+0>>2]=c[D+0>>2];ak(A,B,e);Jk(A);ik(A);ik(B);c[G>>2]=1400;c[e+0>>2]=c[G+0>>2];$j(F,e,g);c[H>>2]=1392;c[e+0>>2]=c[H+0>>2];ak(E,F,e);Jk(E);ik(E);ik(F);ik(g);ik(d);i=f;return}function vj(a){a=a|0;return}function wj(a){a=a|0;return}function xj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;i=i+256|0;e=f+240|0;d=f+228|0;g=f+216|0;h=f+204|0;j=f+192|0;k=f+188|0;l=f+176|0;m=f+172|0;n=f+160|0;o=f+148|0;p=f+144|0;q=f+132|0;r=f+128|0;s=f+116|0;t=f+104|0;u=f+36|0;v=f;w=f+4|0;x=f+16|0;y=f+28|0;z=f+32|0;A=f+40|0;B=f+52|0;C=f+64|0;D=f+68|0;E=f+72|0;F=f+84|0;G=f+96|0;H=f+100|0;ek(d);ek(g);c[k>>2]=1360;Gk(l,4.0,0.0,c[a+16>>2]|0);c[e+0>>2]=c[k+0>>2];$j(j,e,l);c[m>>2]=1368;c[e+0>>2]=c[m+0>>2];ak(h,j,e);Wj(d,h)|0;ik(h);ik(j);ik(l);c[p>>2]=1360;Gk(q,4.0,0.0,b);c[e+0>>2]=c[p+0>>2];$j(o,e,q);c[r>>2]=1368;c[e+0>>2]=c[r+0>>2];ak(n,o,e);Wj(g,n)|0;ik(n);ik(o);ik(q);c[u>>2]=1376;c[e+0>>2]=c[u+0>>2];$j(t,e,d);c[v>>2]=1392;c[e+0>>2]=c[v+0>>2];ak(s,t,e);Hk(s);ik(s);ik(t);c[y>>2]=1400;c[e+0>>2]=c[y+0>>2];$j(x,e,g);c[z>>2]=1392;c[e+0>>2]=c[z+0>>2];ak(w,x,e);Hk(w);ik(w);ik(x);c[C>>2]=1376;c[e+0>>2]=c[C+0>>2];$j(B,e,d);c[D>>2]=1392;c[e+0>>2]=c[D+0>>2];ak(A,B,e);Jk(A);ik(A);ik(B);c[G>>2]=1400;c[e+0>>2]=c[G+0>>2];$j(F,e,g);c[H>>2]=1392;c[e+0>>2]=c[H+0>>2];ak(E,F,e);Jk(E);ik(E);ik(F);ik(g);ik(d);i=f;return}function yj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;i=i+256|0;e=f+240|0;d=f+228|0;g=f+216|0;h=f+204|0;j=f+192|0;k=f+188|0;l=f+176|0;m=f+172|0;n=f+160|0;o=f+148|0;p=f+144|0;q=f+132|0;r=f+128|0;s=f+116|0;t=f+104|0;u=f+36|0;v=f;w=f+4|0;x=f+16|0;y=f+28|0;z=f+32|0;A=f+40|0;B=f+52|0;C=f+64|0;D=f+68|0;E=f+72|0;F=f+84|0;G=f+96|0;H=f+100|0;ek(d);ek(g);c[k>>2]=1360;Gk(l,4.0,0.0,c[a+16>>2]|0);c[e+0>>2]=c[k+0>>2];$j(j,e,l);c[m>>2]=1368;c[e+0>>2]=c[m+0>>2];ak(h,j,e);Wj(d,h)|0;ik(h);ik(j);ik(l);c[p>>2]=1360;Gk(q,4.0,0.0,b);c[e+0>>2]=c[p+0>>2];$j(o,e,q);c[r>>2]=1368;c[e+0>>2]=c[r+0>>2];ak(n,o,e);Wj(g,n)|0;ik(n);ik(o);ik(q);c[u>>2]=1376;c[e+0>>2]=c[u+0>>2];$j(t,e,d);c[v>>2]=1392;c[e+0>>2]=c[v+0>>2];ak(s,t,e);Hk(s);ik(s);ik(t);c[y>>2]=1400;c[e+0>>2]=c[y+0>>2];$j(x,e,g);c[z>>2]=1392;c[e+0>>2]=c[z+0>>2];ak(w,x,e);Hk(w);ik(w);ik(x);c[C>>2]=1376;c[e+0>>2]=c[C+0>>2];$j(B,e,d);c[D>>2]=1392;c[e+0>>2]=c[D+0>>2];ak(A,B,e);Jk(A);ik(A);ik(B);c[G>>2]=1400;c[e+0>>2]=c[G+0>>2];$j(F,e,g);c[H>>2]=1392;c[e+0>>2]=c[H+0>>2];ak(E,F,e);Jk(E);ik(E);ik(F);ik(g);ik(d);i=f;return}function zj(a){a=a|0;return}function Aj(a){a=a|0;return}function Bj(){var a=0;a=i;$k(152|0,160|0);Cj(600,200,0,0,0);i=a;return 0.0}function Cj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;g=i;i=i+16|0;h=g;j=(b|0)<1;k=j?0:b;b=(d|0)<1?1:d;l=ea(b,k)|0;m=(e|0)<1?1:e;n=ea(l,m)|0;l=(f|0)<1?1:f;o=ea(n,l)|0;n=a+40|0;do{if((o|0)<=(c[n>>2]|0)&(j^1)){if((o|0)>0){p=0;q=c[a>>2]|0;while(1){ek(h);Wj(q,h)|0;ik(h);p=p+1|0;if((p|0)>=(o|0)){break}else{q=q+12|0}}}}else{if((o|0)==0){r=0}else{r=(((o|0)/64|0)<<6)+64|0}c[n>>2]=r;q=c[a>>2]|0;if((q|0)!=0){p=q+ -4|0;s=c[p>>2]|0;if((s|0)!=0){t=q+(s*12|0)|0;do{t=t+ -12|0;ik(t)}while((t|0)!=(q|0))}au(p)}if((r|0)<=0){c[a>>2]=0;break}q=r*12|0;t=_t(r>>>0>357913941|q>>>0>4294967291?-1:q+4|0)|0;c[t>>2]=r;q=t+4|0;t=q+(r*12|0)|0;s=q;do{ek(s);s=s+12|0}while((s|0)!=(t|0));c[a>>2]=q}}while(0);do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}r=a+36|0;if((k|0)==0){c[r>>2]=0;break}else{c[r>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=k;r=ea(k,d)|0;c[a+8>>2]=r;c[a+12>>2]=ea(r,e)|0;c[a+16>>2]=k;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(k,l)|0,b)|0,m)|0;i=g;return}function Dj(a,b,c,d,e,f,g){a=+a;b=+b;c=+c;d=+d;e=+e;f=+f;g=+g;var h=0,j=0,k=0,l=0,m=0,n=0;h=i;j=~~a;k=~~b;l=~~(a+c);m=~~e;Xk(j,k,l,k,m);n=~~(b+d);Xk(l,k,l,n,m);Xk(l,n,j,n,m);Xk(j,k,j,n,m);i=h;return 0.0}function Ej(a,b,c,d,e,f){a=+a;b=+b;c=+c;d=+d;e=+e;f=+f;var g=0,h=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0;g=i;h=f>0.0;if(h){j=gl()|0;k=~~(c*2.0);al(j,~~f,k,k);bl(j);l=c;m=c}else{l=a;m=b}b=+yk(0.0);a=+xk(0.0);f=359.0/d;j=~~e;a:do{if(!(f<0.0)){e=0.0;d=b*c;n=a*c;while(1){if(!(e<=359.0)){break a}o=+yk(e)*c;p=+xk(e)*c;Xk(~~(l+o),~~(m+p),~~(l+d),~~(m+n),j);e=e+f;d=o;n=p}}}while(0);if(!h){i=g;return 0.0}bl(-1);i=g;return 0.0}function Fj(a,b,c,d,e){a=+a;b=+b;c=+c;d=+d;e=+e;var f=0,g=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0;f=i;g=e>0.0;if(g){h=gl()|0;j=~~(c*2.0);al(h,fl()|0,j,j);bl(h);k=c;l=c}else{k=a;l=b}b=180.0/(c*3.145);h=~~d;a:do{if(!(b<0.0)){d=0.0;while(1){if(!(d<=180.0)){break a}a=+yk(d)*c;e=+xk(d)*c;m=360.0-d;n=+yk(m)*c;Xk(~~(k+a),~~(l+e),~~(k+n),~~(l+ +xk(m)*c),h);d=d+b}}}while(0);if(!g){i=f;return 0.0}bl(-1);i=f;return 0.0}function Gj(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0.0;b=i;i=i+64|0;d=b+48|0;e=b;f=b+8|0;g=b+16|0;j=b+28|0;k=b+32|0;l=b+44|0;h[e>>3]=0.0;h[f>>3]=0.0;m=fl()|0;n=+(m|0);Ok(a,m);Zk(n,e,f);if(+h[e>>3]==0.0){c[j>>2]=1616;c[d+0>>2]=c[j+0>>2];ak(g,a,d);Nk(g,400.0,400.0,0);ik(g);Rl();Dk()}c[l>>2]=1624;c[d+0>>2]=c[l+0>>2];ak(k,a,d);Nk(k,400.0,400.0,0);ik(k);Rk(m,200,200);i=b;return+n}function Hj(a){a=a|0;var b=0,d=0.0,e=0,f=0,g=0,h=0;b=i;d=+(c[616>>2]|0);Ij(600,~~(d+2.0),0,0,0);e=~~(d+1.0);if((e|0)<0){f=(c[616>>2]|0)+e|0}else{f=e}e=c[150]|0;if((e|0)!=0){if(!((f|0)>=(c[616>>2]|0)|(f|0)<0)){g=e;h=g+(f*12|0)|0;Wj(h,a)|0;i=b;return 0.0}}Oj(600,f,0,0,0);Xj(9)|0;Fl();g=c[150]|0;h=g+(f*12|0)|0;Wj(h,a)|0;i=b;return 0.0}function Ij(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;g=i;i=i+48|0;h=g;if((b|0)<1){j=a+4|0;k=j+36|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(k|0));i=g;return}j=h+0|0;k=j+44|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(k|0));Cj(h,b,d,e,f);f=a+16|0;e=c[f>>2]|0;d=(e|0)<(b|0)?e:b;b=a+20|0;e=a+24|0;j=a+28|0;if((d|0)>0){k=h+16|0;l=0;while(1){m=c[h>>2]|0;if((m|0)==0){n=8}else{if((l|0)>=(c[k>>2]|0)|(l|0)<0){n=8}else{o=m}}if((n|0)==8){n=0;Oj(h,l,0,0,0);Xj(9)|0;Fl();o=c[h>>2]|0}m=o+(l*12|0)|0;p=c[a>>2]|0;if((p|0)==0){n=11}else{if((l|0)>=(c[f>>2]|0)|(l|0)<0){n=11}else{q=p}}if((n|0)==11){n=0;Oj(a,l,0,0,0);Xj(9)|0;Fl();q=c[a>>2]|0}Wj(m,q+(l*12|0)|0)|0;m=l+1|0;if((m|0)<(d|0)){l=m}else{r=a;s=k;t=o;break}}}else{r=a;s=h+16|0;t=c[h>>2]|0}c[a+4>>2]=c[h+4>>2];c[a+8>>2]=c[h+8>>2];c[a+12>>2]=c[h+12>>2];c[f>>2]=c[s>>2];c[b>>2]=c[h+20>>2];c[e>>2]=c[h+24>>2];c[j>>2]=c[h+28>>2];c[a+32>>2]=c[h+32>>2];c[a+36>>2]=c[h+36>>2];c[a+40>>2]=c[h+40>>2];a=c[r>>2]|0;c[r>>2]=t;c[h>>2]=a;if((a|0)==0){i=g;return}h=a+ -4|0;t=c[h>>2]|0;if((t|0)!=0){r=a+(t*12|0)|0;do{r=r+ -12|0;ik(r)}while((r|0)!=(a|0))}au(h);i=g;return}function Jj(a,b){a=+a;b=+b;var d=0,e=0,f=0,g=0,j=0.0,k=0,l=0,m=0;d=i;i=i+16|0;e=d+8|0;f=d;Tk(0,2.0);h[e>>3]=0.0;h[f>>3]=0.0;_k(e,f);e=c[616>>2]|0;if((e|0)<1){Cj(600,0,0,0,0);i=d;return 0.0}else{g=e;j=0.0}do{e=~~j;k=((e|0)<0?g:0)+e|0;e=c[150]|0;if((e|0)==0){l=4}else{if((k|0)>=(g|0)|(k|0)<0){l=4}else{m=e}}if((l|0)==4){l=0;Oj(600,k,0,0,0);Xj(9)|0;Fl();m=c[150]|0}Nk(m+(k*12|0)|0,a,j*+h[f>>3]+b,0);j=j+1.0;g=c[616>>2]|0}while(j<=+(g+ -1|0));Cj(600,0,0,0,0);i=d;return 0.0}function Kj(a,b,c,d){a=+a;b=+b;c=+c;d=+d;var e=0,f=0.0;e=i;f=+zk(d-b,c-a);i=e;return+f}function Lj(a,b){a=+a;b=+b;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;d=i;Mj(304,255,0,0,0);e=~~a;f=~~b;b=32.0;g=2;while(1){a=b;h=0;do{j=~~a;k=(j|0)<0;if(k){l=(c[320>>2]|0)+j|0}else{l=j}m=c[76]|0;if((m|0)==0){n=7}else{if((l|0)>=(c[320>>2]|0)|(l|0)<0){n=7}else{o=m}}if((n|0)==7){n=0;Nj(304,l,0,0,0);Xj(9)|0;Fl();o=c[76]|0}c[o+(l*100|0)+4>>2]=h;if(k){p=(c[320>>2]|0)+j|0}else{p=j}if((o|0)==0){n=12}else{if((p|0)>=(c[320>>2]|0)|(p|0)<0){n=12}else{q=o}}if((n|0)==12){n=0;Nj(304,p,0,0,0);Xj(9)|0;Fl();q=c[76]|0}c[q+(p*100|0)+8>>2]=g;if(k){r=(c[320>>2]|0)+j|0}else{r=j}if((q|0)==0){n=17}else{if((r|0)>=(c[320>>2]|0)|(r|0)<0){n=17}else{s=q}}if((n|0)==17){n=0;Nj(304,r,0,0,0);Xj(9)|0;Fl();s=c[76]|0}c[s+(r*100|0)+12>>2]=e;if(k){t=(c[320>>2]|0)+j|0}else{t=j}if((s|0)==0){n=22}else{if((t|0)>=(c[320>>2]|0)|(t|0)<0){n=22}else{u=s}}if((n|0)==22){n=0;Nj(304,t,0,0,0);Xj(9)|0;Fl();u=c[76]|0}c[u+(t*100|0)+16>>2]=f;if(k){v=(c[320>>2]|0)+j|0}else{v=j}if((u|0)==0){n=27}else{if((v|0)>=(c[320>>2]|0)|(v|0)<0){n=27}else{w=u}}if((n|0)==27){n=0;Nj(304,v,0,0,0);Xj(9)|0;Fl();w=c[76]|0}c[w+(v*100|0)+28>>2]=32;if(k){x=(c[320>>2]|0)+j|0}else{x=j}if((w|0)==0){n=32}else{if((x|0)>=(c[320>>2]|0)|(x|0)<0){n=32}else{y=w}}if((n|0)==32){n=0;Nj(304,x,0,0,0);Xj(9)|0;Fl();y=c[76]|0}c[y+(x*100|0)+32>>2]=32;if(k){z=(c[320>>2]|0)+j|0}else{z=j}if((y|0)==0){n=37}else{if((z|0)>=(c[320>>2]|0)|(z|0)<0){n=37}else{A=y}}if((n|0)==37){n=0;Nj(304,z,0,0,0);Xj(9)|0;Fl();A=c[76]|0}m=A+(z*100|0)+36|0;if(k){B=(c[320>>2]|0)+j|0}else{B=j}if((A|0)==0){n=42}else{if((B|0)>=(c[320>>2]|0)|(B|0)<0){n=42}else{C=A}}if((n|0)==42){n=0;Nj(304,B,0,0,0);Xj(9)|0;Fl();C=c[76]|0}D=c[C+(B*100|0)+28>>2]|0;if(k){E=(c[320>>2]|0)+j|0}else{E=j}if((C|0)==0){n=47}else{if((E|0)>=(c[320>>2]|0)|(E|0)<0){n=47}else{F=C}}if((n|0)==47){n=0;Nj(304,E,0,0,0);Xj(9)|0;Fl();F=c[76]|0}Bk(m,ea(c[F+(E*100|0)+32>>2]|0,D)|0,0,0,0);if(k){G=(c[320>>2]|0)+j|0}else{G=j}j=c[76]|0;if((j|0)==0){n=52}else{if((G|0)>=(c[320>>2]|0)|(G|0)<0){n=52}else{H=j}}if((n|0)==52){n=0;Nj(304,G,0,0,0);Xj(9)|0;Fl();H=c[76]|0}+wi(H+(G*100|0)|0,1.0);a=a+1.0;h=h+1|0}while((h|0)!=16);g=g+1|0;if((g|0)==8){break}else{b=a}}i=d;return 0.0}function Mj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;g=i;i=i+112|0;h=g;j=(b|0)<1;k=j?0:b;b=(d|0)<1?1:d;l=ea(b,k)|0;m=(e|0)<1?1:e;n=ea(l,m)|0;l=(f|0)<1?1:f;o=ea(n,l)|0;n=a+40|0;do{if((o|0)<=(c[n>>2]|0)&(j^1)){if((o|0)>0){p=h+4|0;q=h+8|0;r=h+12|0;s=h+16|0;t=h+20|0;u=h+24|0;v=h+28|0;w=h+32|0;x=h+36|0;y=h+80|0;z=h+84|0;A=h+88|0;B=h+92|0;C=h+96|0;D=h+36|0;E=0;F=c[a>>2]|0;while(1){c[h>>2]=736;G=p+0|0;H=G+96|0;do{c[G>>2]=0;G=G+4|0}while((G|0)<(H|0));c[F+4>>2]=0;c[F+8>>2]=c[q>>2];c[F+12>>2]=c[r>>2];c[F+16>>2]=c[s>>2];c[F+20>>2]=c[t>>2];c[F+24>>2]=c[u>>2];c[F+28>>2]=c[v>>2];c[F+32>>2]=c[w>>2];Ak(F+36|0,x)|0;c[F+80>>2]=c[y>>2];c[F+84>>2]=c[z>>2];c[F+88>>2]=c[A>>2];c[F+92>>2]=c[B>>2];c[F+96>>2]=c[C>>2];c[h>>2]=736;I=c[D>>2]|0;if((I|0)!=0){au(I)}c[D>>2]=0;E=E+1|0;if((E|0)>=(o|0)){break}else{F=F+100|0}}}}else{if((o|0)==0){J=0}else{J=(((o|0)/64|0)<<6)+64|0}c[n>>2]=J;F=c[a>>2]|0;if((F|0)!=0){E=F+ -4|0;D=c[E>>2]|0;if((D|0)!=0){C=F+(D*100|0)|0;while(1){D=C+ -100|0;c[D>>2]=736;B=C+ -64|0;A=c[B>>2]|0;if((A|0)!=0){au(A)}c[B>>2]=0;if((D|0)==(F|0)){break}else{C=D}}}au(E)}if((J|0)<=0){c[a>>2]=0;break}C=J*100|0;F=_t(J>>>0>42949672|C>>>0>4294967291?-1:C+4|0)|0;c[F>>2]=J;C=F+4|0;F=C+(J*100|0)|0;D=C;do{c[D>>2]=736;G=D+4|0;H=G+96|0;do{c[G>>2]=0;G=G+4|0}while((G|0)<(H|0));D=D+100|0}while((D|0)!=(F|0));c[a>>2]=C}}while(0);do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}G=a+36|0;if((k|0)==0){c[G>>2]=0;break}else{c[G>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=k;G=ea(k,d)|0;c[a+8>>2]=G;c[a+12>>2]=ea(G,e)|0;c[a+16>>2]=k;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(k,l)|0,b)|0,m)|0;i=g;return}function Nj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;i=i+256|0;e=f+240|0;d=f+228|0;g=f+216|0;h=f+204|0;j=f+192|0;k=f+188|0;l=f+176|0;m=f+172|0;n=f+160|0;o=f+148|0;p=f+144|0;q=f+132|0;r=f+128|0;s=f+116|0;t=f+104|0;u=f+36|0;v=f;w=f+4|0;x=f+16|0;y=f+28|0;z=f+32|0;A=f+40|0;B=f+52|0;C=f+64|0;D=f+68|0;E=f+72|0;F=f+84|0;G=f+96|0;H=f+100|0;ek(d);ek(g);c[k>>2]=1640;Gk(l,4.0,0.0,c[a+16>>2]|0);c[e+0>>2]=c[k+0>>2];$j(j,e,l);c[m>>2]=1648;c[e+0>>2]=c[m+0>>2];ak(h,j,e);Wj(d,h)|0;ik(h);ik(j);ik(l);c[p>>2]=1640;Gk(q,4.0,0.0,b);c[e+0>>2]=c[p+0>>2];$j(o,e,q);c[r>>2]=1648;c[e+0>>2]=c[r+0>>2];ak(n,o,e);Wj(g,n)|0;ik(n);ik(o);ik(q);c[u>>2]=1656;c[e+0>>2]=c[u+0>>2];$j(t,e,d);c[v>>2]=1672;c[e+0>>2]=c[v+0>>2];ak(s,t,e);Hk(s);ik(s);ik(t);c[y>>2]=1680;c[e+0>>2]=c[y+0>>2];$j(x,e,g);c[z>>2]=1672;c[e+0>>2]=c[z+0>>2];ak(w,x,e);Hk(w);ik(w);ik(x);c[C>>2]=1656;c[e+0>>2]=c[C+0>>2];$j(B,e,d);c[D>>2]=1672;c[e+0>>2]=c[D+0>>2];ak(A,B,e);Jk(A);ik(A);ik(B);c[G>>2]=1680;c[e+0>>2]=c[G+0>>2];$j(F,e,g);c[H>>2]=1672;c[e+0>>2]=c[H+0>>2];ak(E,F,e);Jk(E);ik(E);ik(F);ik(g);ik(d);i=f;return}function Oj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;f=i;i=i+256|0;e=f+240|0;d=f+228|0;g=f+216|0;h=f+204|0;j=f+192|0;k=f+188|0;l=f+176|0;m=f+172|0;n=f+160|0;o=f+148|0;p=f+144|0;q=f+132|0;r=f+128|0;s=f+116|0;t=f+104|0;u=f+36|0;v=f;w=f+4|0;x=f+16|0;y=f+28|0;z=f+32|0;A=f+40|0;B=f+52|0;C=f+64|0;D=f+68|0;E=f+72|0;F=f+84|0;G=f+96|0;H=f+100|0;ek(d);ek(g);c[k>>2]=1640;Gk(l,4.0,0.0,c[a+16>>2]|0);c[e+0>>2]=c[k+0>>2];$j(j,e,l);c[m>>2]=1648;c[e+0>>2]=c[m+0>>2];ak(h,j,e);Wj(d,h)|0;ik(h);ik(j);ik(l);c[p>>2]=1640;Gk(q,4.0,0.0,b);c[e+0>>2]=c[p+0>>2];$j(o,e,q);c[r>>2]=1648;c[e+0>>2]=c[r+0>>2];ak(n,o,e);Wj(g,n)|0;ik(n);ik(o);ik(q);c[u>>2]=1656;c[e+0>>2]=c[u+0>>2];$j(t,e,d);c[v>>2]=1672;c[e+0>>2]=c[v+0>>2];ak(s,t,e);Hk(s);ik(s);ik(t);c[y>>2]=1680;c[e+0>>2]=c[y+0>>2];$j(x,e,g);c[z>>2]=1672;c[e+0>>2]=c[z+0>>2];ak(w,x,e);Hk(w);ik(w);ik(x);c[C>>2]=1656;c[e+0>>2]=c[C+0>>2];$j(B,e,d);c[D>>2]=1672;c[e+0>>2]=c[D+0>>2];ak(A,B,e);Jk(A);ik(A);ik(B);c[G>>2]=1680;c[e+0>>2]=c[G+0>>2];$j(F,e,g);c[H>>2]=1672;c[e+0>>2]=c[H+0>>2];ak(E,F,e);Jk(E);ik(E);ik(F);ik(g);ik(d);i=f;return}function Pj(b,d,e){b=+b;d=d|0;e=e|0;var f=0,g=0,j=0,l=0,m=0,n=0;f=i;i=i+16|0;g=f;c[g>>2]=d;d=g+4|0;h[k>>3]=b;c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];lb(e|0,1696,g|0)|0;g=(a[e]|0)==45?e+1|0:e;if((a[g]|0)==48){d=g+1|0;if((a[d]|0)==46){Au(g|0,d|0,(uu(d|0)|0)+1|0)|0}}d=Dt(e,101)|0;if((d|0)==0){g=uu(e|0)|0;j=e+g|0;l=e+2|0;m=e+(g+ -1)|0;if((a[m]|0)==48&(g|0)>2){g=m;while(1){a[g]=0;m=g+ -1|0;if((a[m]|0)==48&g>>>0>l>>>0){g=m}else{n=g;break}}}else{n=j}}else{n=d}if(!(n>>>0>e>>>0)){i=f;return e|0}d=n+ -1|0;if((a[d]|0)!=46){i=f;return e|0}Au(d|0,n|0,(uu(n|0)|0)+1|0)|0;i=f;return e|0}function Qj(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;d=i;i=i+16|0;e=d;f=c[166]|0;g=c[b+8>>2]|0;a:do{if((f|0)!=0){h=f;j=664;while(1){k=j+8|0;l=c[j+4>>2]|0;if((g|0)==(uu(l|0)|0)){if((nu(c[b>>2]|0,l,g)|0)==0){break}}l=c[k>>2]|0;if((l|0)==0){break a}else{h=l;j=k}}if((h|0)!=0){ci[h&15]();m=1;i=d;return m|0}}}while(0);f=b+8|0;if((g|0)==11){if((nu(c[b>>2]|0,2312,11)|0)==0){m=0;i=d;return m|0}}else if((g|0)==13){if((nu(c[b>>2]|0,2328,13)|0)==0){m=0;i=d;return m|0}}j=_t(16)|0;k=j+0|0;l=2344|0;n=k+12|0;do{a[k]=a[l]|0;k=k+1|0;l=l+1|0}while((k|0)<(n|0));a[j+12|0]=0;if((g|0)==0){o=12;p=j;q=15}else{if((g|0)!=-12&(g+13|0)>>>0>16){r=_t(g+29&-16)|0;k=r+0|0;l=j+0|0;n=k+12|0;do{a[k]=a[l]|0;k=k+1|0;l=l+1|0}while((k|0)<(n|0));a[r+12|0]=0;if((j|0)==2080|(j|0)==0){t=r;u=g}else{au(j);t=r;u=c[f>>2]|0}}else{t=j;u=g}tu(t+12|0,c[b>>2]|0,u|0)|0;b=u+12|0;a[t+b|0]=0;if((u|0)==-13){v=2080;w=t;x=-1;y=0;q=16}else if((u|0)==-12){z=0;A=0;B=2080;C=t}else{o=b;p=t;q=15}}if((q|0)==15){t=o+17&-16;b=_t(t)|0;c[b>>2]=0;v=b;w=p;x=o;y=t;q=16}if((q|0)==16){tu(v|0,w|0,x|0)|0;a[v+x|0]=0;z=x;A=y;B=v;C=w}w=z+17|0;if((w|0)!=0&A>>>0<(z+18|0)>>>0){A=_t(z+34&-16)|0;if((z|0)==0){c[A>>2]=0}else{tu(A|0,B|0,z|0)|0;a[A+z|0]=0}if((B|0)==2080|(B|0)==0){D=A}else{au(B);D=A}}else{D=B}k=D+z+0|0;l=2360|0;n=k+17|0;do{a[k]=a[l]|0;k=k+1|0;l=l+1|0}while((k|0)<(n|0));a[D+w|0]=0;c[e>>2]=D;tg(2480,e|0)|0;Bd(c[s>>2]|0)|0;if(!((D|0)==2080|(D|0)==0)){au(D)}if((C|0)==2080|(C|0)==0){m=0;i=d;return m|0}au(C);m=0;i=d;return m|0}function Rj(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if(!((d|0)==2080|(d|0)==0)){au(d)}c[a>>2]=2080;c[a+8>>2]=0;c[a+4>>2]=0;i=b;return}function Sj(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;d=i;e=b+8|0;f=c[e>>2]|0;if((f|0)==0){g=0;i=d;return g|0}h=c[426]|0;j=b+4|0;if((c[j>>2]|0)>>>0<1025){c[j>>2]=1040;k=_t(1040)|0;l=c[b>>2]|0;tu(k|0,l|0,f|0)|0;a[k+f|0]=0;if(!((l|0)==2080|(l|0)==0)){au(l)}c[b>>2]=k;m=k}else{m=c[b>>2]|0}k=_t(1040)|0;c[k>>2]=0;l=(Tj(h,m,k,1)|0)==0;do{if((a[k]|0)==0){n=0}else{m=0;while(1){o=m+1|0;if(!(m>>>0<1040)){p=m;break}if((a[k+o|0]|0)==0){q=10;break}else{m=o}}if((q|0)==10){if(o>>>0<1040){n=o;break}else{p=o}}m=p+ -1|0;a[k+m|0]=0;n=m}}while(0);do{if(l){r=0}else{p=c[b>>2]|0;if((k|0)==(p|0)){r=1}else{if((n|0)==0){if((p|0)!=2080){a[p]=0}c[e>>2]=0;r=1;break}o=n+1|0;if((c[j>>2]|0)>>>0<o>>>0){q=n+17&-16;c[j>>2]=q;m=_t(q)|0;c[m>>2]=0;if(!((p|0)==2080|(p|0)==0)){au(p)}c[b>>2]=m;s=m}else{s=p}c[e>>2]=n;tu(s|0,k|0,o|0)|0;r=1}}}while(0);if((k|0)==2080|(k|0)==0){g=r;i=d;return g|0}au(k);g=r;i=d;return g|0}function Tj(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0;g=i;i=i+4464|0;h=g;j=g+2124|0;k=g+3440|0;l=g+8|0;m=g+3432|0;n=g+2128|0;o=g+2400|0;p=g+56|0;q=g+2408|0;r=g+32|0;s=b+2052|0;t=c[s>>2]|0;if((t|0)!=0){au(t);c[s>>2]=0}t=b+1025|0;if((a[t]|0)!=0){Og(t|0)|0;a[t]=0}if((d|0)!=0){if((a[d]|0)!=0){a[k]=0;if(rl(d,e)|0){u=1;i=g;return u|0}if((a[b]|0)==0){u=0;i=g;return u|0}c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[l+16>>2]=0;c[l+20>>2]=0;v=b+1|0;a:do{if((a[v]|0)==0){a[b]=0;w=0}else{if(!(qk(l,v)|0)){a[b]=0;w=0;break}x=c[l>>2]|0;if((x|0)==0){if((c[l+4>>2]|0)!=0){y=l+8|0;z=yu(c[y>>2]|0,c[y+4>>2]|0,-7,-1)|0;y=l+16|0;c[y>>2]=z;c[y+4>>2]=I}a[m+3|0]=0;A=m;B=20}else{y=l+8|0;z=yu(c[y>>2]|0,c[y+4>>2]|0,-7,-1)|0;y=l+16|0;c[y>>2]=z;c[y+4>>2]=I;Fd(x|0,z|0,0)|0;z=c[l>>2]|0;a[m+3|0]=0;if((z|0)==0){A=m;B=20}else{x=l+16|0;y=x;C=yu(c[y>>2]|0,c[y+4>>2]|0,3,0)|0;y=x;c[y>>2]=C;c[y+4>>2]=I;if((lc(m|0,3,1,z|0)|0)==1){D=m;B=24}else{A=m;B=20}}}do{if((B|0)==20){z=c[l+4>>2]|0;if((z|0)!=0){y=l+16|0;C=y;x=c[C>>2]|0;E=c[C+4>>2]|0;C=yu(x|0,E|0,3,0)|0;F=I;G=l+8|0;H=c[G>>2]|0;J=c[G+4>>2]|0;if((F|0)>(J|0)|(F|0)==(J|0)&C>>>0>H>>>0){C=xu(H|0,J|0,x|0,E|0)|0;if((C|0)<0){break}else{K=C}}else{K=3}tu(A|0,z+x|0,K|0)|0;z=yu(x|0,E|0,K|0,((K|0)<0)<<31>>31|0)|0;E=y;c[E>>2]=z;c[E+4>>2]=I;D=A;B=24}}}while(0);b:do{if((B|0)==24){if((a[D]|0)==115){if((a[m+1|0]|0)==98){if((a[m+2|0]|0)==88){E=c[l>>2]|0;if((E|0)==0){B=30}else{z=l+16|0;y=z;x=yu(c[y>>2]|0,c[y+4>>2]|0,4,0)|0;y=z;c[y>>2]=x;c[y+4>>2]=I;if((lc(j|0,4,1,E|0)|0)!=1){B=30}}if((B|0)==30){E=c[l+4>>2]|0;if((E|0)==0){break}y=l+16|0;x=y;z=c[x>>2]|0;C=c[x+4>>2]|0;x=yu(z|0,C|0,4,0)|0;J=I;H=l+8|0;F=c[H>>2]|0;G=c[H+4>>2]|0;if((J|0)>(G|0)|(J|0)==(G|0)&x>>>0>F>>>0){x=xu(F|0,G|0,z|0,C|0)|0;if((x|0)<0){break}else{L=x}}else{L=4}tu(j|0,E+z|0,L|0)|0;E=yu(L|0,((L|0)<0)<<31>>31|0,z|0,C|0)|0;C=y;c[C>>2]=E;c[C+4>>2]=I}C=c[j>>2]|0;E=(C|0)<0;y=((C|0)<0)<<31>>31;z=c[l>>2]|0;x=(z|0)==0;do{if(E){if(!x){G=l+8|0;F=yu(c[G>>2]|0,c[G+4>>2]|0,C|0,y|0)|0;G=l+16|0;c[G>>2]=F;c[G+4>>2]=I;Fd(z|0,F|0,0)|0;break}if((c[l+4>>2]|0)!=0){F=l+8|0;G=yu(c[F>>2]|0,c[F+4>>2]|0,C|0,y|0)|0;F=l+16|0;c[F>>2]=G;c[F+4>>2]=I}}else{if(!x){F=l+16|0;c[F>>2]=C;c[F+4>>2]=y;Fd(z|0,C|0,0)|0;break}if((c[l+4>>2]|0)!=0){F=l+16|0;c[F>>2]=C;c[F+4>>2]=y}}}while(0);y=l+4|0;C=l+16|0;z=l+8|0;x=n+260|0;F=n+264|0;while(1){G=c[l>>2]|0;if((G|0)==0){B=46}else{J=C;H=yu(c[J>>2]|0,c[J+4>>2]|0,1,0)|0;J=C;c[J>>2]=H;c[J+4>>2]=I;if((lc(o|0,1,1,G|0)|0)!=1){B=46}}if((B|0)==46){B=0;G=c[y>>2]|0;if((G|0)==0){break b}J=C;H=c[J>>2]|0;M=c[J+4>>2]|0;J=z;N=c[J>>2]|0;O=c[J+4>>2]|0;if((M|0)<(O|0)|(M|0)==(O|0)&H>>>0<N>>>0){P=1}else{J=xu(N|0,O|0,H|0,M|0)|0;if((J|0)<0){break b}else{P=J}}tu(o|0,G+H|0,P|0)|0;G=yu(H|0,M|0,P|0,((P|0)<0)<<31>>31|0)|0;M=C;c[M>>2]=G;c[M+4>>2]=I}M=a[o]|0;if(M<<24>>24==0){break b}G=M&255;H=c[l>>2]|0;if((H|0)==0){B=53}else{J=C;O=yu(c[J>>2]|0,c[J+4>>2]|0,M&255|0,0)|0;J=C;c[J>>2]=O;c[J+4>>2]=I;if((lc(n|0,G|0,1,H|0)|0)!=1){B=53}}do{if((B|0)==53){B=0;H=c[y>>2]|0;if((H|0)!=0){J=C;O=c[J>>2]|0;N=c[J+4>>2]|0;J=yu(O|0,N|0,M&255|0,0)|0;Q=I;R=z;S=c[R>>2]|0;T=c[R+4>>2]|0;if((Q|0)>(T|0)|(Q|0)==(T|0)&J>>>0>S>>>0){J=xu(S|0,T|0,O|0,N|0)|0;if((J|0)<0){break}else{U=J}}else{U=G}tu(n|0,H+O|0,U|0)|0;H=yu(O|0,N|0,U|0,((U|0)<0)<<31>>31|0)|0;N=C;c[N>>2]=H;c[N+4>>2]=I}}}while(0);a[n+G|0]=0;M=c[l>>2]|0;if((M|0)==0){B=59}else{N=C;H=yu(c[N>>2]|0,c[N+4>>2]|0,4,0)|0;N=C;c[N>>2]=H;c[N+4>>2]=I;if((lc(h|0,4,1,M|0)|0)==1){B=63}else{B=59}}do{if((B|0)==59){B=0;M=c[y>>2]|0;if((M|0)!=0){N=C;H=c[N>>2]|0;O=c[N+4>>2]|0;N=yu(H|0,O|0,4,0)|0;J=I;T=z;S=c[T>>2]|0;Q=c[T+4>>2]|0;if((J|0)>(Q|0)|(J|0)==(Q|0)&N>>>0>S>>>0){N=xu(S|0,Q|0,H|0,O|0)|0;if((N|0)<0){break}else{V=N}}else{V=4}tu(h|0,M+H|0,V|0)|0;M=yu(V|0,((V|0)<0)<<31>>31|0,H|0,O|0)|0;O=C;c[O>>2]=M;c[O+4>>2]=I;B=63}}}while(0);if((B|0)==63){B=0;c[x>>2]=c[h>>2]}G=c[l>>2]|0;if((G|0)==0){B=66}else{O=C;M=yu(c[O>>2]|0,c[O+4>>2]|0,4,0)|0;O=C;c[O>>2]=M;c[O+4>>2]=I;if((lc(h|0,4,1,G|0)|0)==1){B=70}else{B=66}}do{if((B|0)==66){B=0;G=c[y>>2]|0;if((G|0)!=0){O=C;M=c[O>>2]|0;H=c[O+4>>2]|0;O=yu(M|0,H|0,4,0)|0;N=I;Q=z;S=c[Q>>2]|0;J=c[Q+4>>2]|0;if((N|0)>(J|0)|(N|0)==(J|0)&O>>>0>S>>>0){O=xu(S|0,J|0,M|0,H|0)|0;if((O|0)<0){break}else{W=O}}else{W=4}tu(h|0,G+M|0,W|0)|0;G=yu(W|0,((W|0)<0)<<31>>31|0,M|0,H|0)|0;H=C;c[H>>2]=G;c[H+4>>2]=I;B=70}}}while(0);if((B|0)==70){B=0;c[F>>2]=c[h>>2]}H=(uu(d|0)|0)+ -1|0;c:do{if((H|0)<0){X=0}else{G=0;M=d+H|0;while(1){O=a[M]|0;if(O<<24>>24==92|O<<24>>24==47){X=G;break c}O=M+ -1|0;J=G+1|0;if(O>>>0<d>>>0){X=J;break}else{G=J;M=O}}}}while(0);if((uu(n|0)|0)<(X|0)){continue}if((ou(n,d+((uu(d|0)|0)-X)|0)|0)==0){break}}H=c[x>>2]|0;M=((H|0)<0)<<31>>31;G=c[l>>2]|0;O=(G|0)==0;do{if(E){if(!O){J=z;S=yu(c[J>>2]|0,c[J+4>>2]|0,H|0,M|0)|0;J=C;c[J>>2]=S;c[J+4>>2]=I;Fd(G|0,S|0,0)|0;break}if((c[y>>2]|0)!=0){S=z;J=yu(c[S>>2]|0,c[S+4>>2]|0,H|0,M|0)|0;S=C;c[S>>2]=J;c[S+4>>2]=I}}else{if(!O){S=C;c[S>>2]=H;c[S+4>>2]=M;Fd(G|0,H|0,0)|0;break}if((c[y>>2]|0)!=0){S=C;c[S>>2]=H;c[S+4>>2]=M}}}while(0);M=c[F>>2]|0;G=M+4|0;O=_t((G|0)<-3?-1:((G|0)/4|0)<<2)|0;G=c[l>>2]|0;if((G|0)==0){B=88}else{E=C;x=yu(c[E>>2]|0,c[E+4>>2]|0,M|0,((M|0)<0)<<31>>31|0)|0;E=C;c[E>>2]=x;c[E+4>>2]=I;if((lc(O|0,M|0,1,G|0)|0)!=1){B=88}}do{if((B|0)==88){G=c[y>>2]|0;if((G|0)!=0){E=C;x=c[E>>2]|0;S=c[E+4>>2]|0;E=yu(x|0,S|0,M|0,((M|0)<0)<<31>>31|0)|0;J=I;N=z;Q=c[N>>2]|0;T=c[N+4>>2]|0;if((J|0)>(T|0)|(J|0)==(T|0)&E>>>0>Q>>>0){E=xu(Q|0,T|0,x|0,S|0)|0;if((E|0)<0){break}else{Y=E}}else{Y=M}tu(O|0,G+x|0,Y|0)|0;G=yu(x|0,S|0,Y|0,((Y|0)<0)<<31>>31|0)|0;S=C;c[S>>2]=G;c[S+4>>2]=I}}}while(0);C=c[l>>2]|0;if((C|0)!=0){ff(C|0)|0;c[l>>2]=0;c[z+0>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;c[z+12>>2]=0}if((c[y>>2]|0)!=0){c[y+0>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;c[y+12>>2]=0;c[y+16>>2]=0}c[p>>2]=_t(262144)|0;C=p+4|0;c[C>>2]=0;mm(p);c[p+2064>>2]=1;nm(p,O,M)|0;if((O|0)!=0){au(O)}a[k+0|0]=a[2824|0]|0;a[k+1|0]=a[2825|0]|0;a[k+2|0]=a[2826|0]|0;a[k+3|0]=a[2827|0]|0;a[k+4|0]=a[2828|0]|0;a[k+5|0]=a[2829|0]|0;a[q+0|0]=a[2800|0]|0;a[q+1|0]=a[2801|0]|0;a[q+2|0]=a[2802|0]|0;a[q+3|0]=a[2803|0]|0;a[q+4|0]=a[2804|0]|0;a[q+5|0]=a[2805|0]|0;a[q+3|0]=(((H&255)>>>0)%26|0)+65;a[q+4|0]=(((M&255)>>>0)%26|0)+65;wu(q|0,n|0)|0;wu(k|0,q|0)|0;if(f){F=c[C>>2]|0;c[s>>2]=F;S=p+8|0;c[h>>2]=c[S>>2];c[h+4>>2]=F;lb(e|0,2808,h|0)|0;c[S>>2]=0;c[C>>2]=0;Z=1}else{c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;if(tk(r,k)|0){S=c[C>>2]|0;C=c[p+8>>2]|0;F=c[r>>2]|0;G=(F|0)==0;if((C|0)==0){if(!G){B=106}}else{if(!G){_c(S|0,C|0,1,F|0)|0;B=106}}if((B|0)==106){ff(F|0)|0;c[r>>2]=0;F=r+8|0;c[F+0>>2]=0;c[F+4>>2]=0;c[F+8>>2]=0;c[F+12>>2]=0}F=r+4|0;if((c[F>>2]|0)!=0){c[F+0>>2]=0;c[F+4>>2]=0;c[F+8>>2]=0;c[F+12>>2]=0;c[F+16>>2]=0}Cu(t|0,k|0)|0;Cu(e|0,k|0)|0;_=1;$=0}else{_=0;$=c[r>>2]|0}if(($|0)!=0){ff($|0)|0;c[r>>2]=0;F=r+8|0;c[F+0>>2]=0;c[F+4>>2]=0;c[F+8>>2]=0;c[F+12>>2]=0}F=r+4|0;if((c[F>>2]|0)==0){Z=_}else{c[F+0>>2]=0;c[F+4>>2]=0;c[F+8>>2]=0;c[F+12>>2]=0;c[F+16>>2]=0;Z=_}}F=c[p>>2]|0;if((F|0)!=0){au(F)}c[p>>2]=0;mm(p);w=Z;break a}}}a[b]=0;w=0;break a}}while(0);F=c[l>>2]|0;if((F|0)!=0){ff(F|0)|0;c[l>>2]=0;F=l+8|0;c[F+0>>2]=0;c[F+4>>2]=0;c[F+8>>2]=0;c[F+12>>2]=0}F=l+4|0;if((c[F>>2]|0)!=0){c[F+0>>2]=0;c[F+4>>2]=0;c[F+8>>2]=0;c[F+12>>2]=0;c[F+16>>2]=0}a[e]=0;w=0}}while(0);b=c[l>>2]|0;if((b|0)!=0){ff(b|0)|0;c[l>>2]=0;b=l+8|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0}b=l+4|0;if((c[b>>2]|0)==0){u=w;i=g;return u|0}c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;u=w;i=g;return u|0}}a[e]=0;u=0;i=g;return u|0}function Uj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;if((d|0)==0){f=c[b>>2]|0;i=e;return f|0}g=b+4|0;if(!((c[g>>2]|0)>>>0<(d+1|0)>>>0)){f=c[b>>2]|0;i=e;return f|0}h=d+17&-16;c[g>>2]=h;g=_t(h)|0;h=c[b+8>>2]|0;if((h|0)==0){c[g>>2]=0;j=c[b>>2]|0}else{d=c[b>>2]|0;tu(g|0,d|0,h|0)|0;a[g+h|0]=0;j=d}if(!((j|0)==2080|(j|0)==0)){au(j)}c[b>>2]=g;f=c[b>>2]|0;i=e;return f|0}function Vj(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=b+8|0;c[e>>2]=0;f=c[b>>2]|0;if((a[f]|0)==0){i=d;return}g=c[b+4>>2]|0;b=0;while(1){h=b+1|0;if(!(b>>>0<g>>>0)){j=b;break}c[e>>2]=h;if((a[f+h|0]|0)==0){j=h;break}else{b=h}}if(j>>>0<g>>>0|(j|0)==0){i=d;return}g=j+ -1|0;c[e>>2]=g;a[f+g|0]=0;i=d;return}function Wj(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;f=c[d>>2]|0;g=c[b>>2]|0;if((f|0)==(g|0)){i=e;return b|0}h=d+8|0;j=c[h>>2]|0;if((j|0)==0){if((g|0)!=2080){a[g]=0}c[b+8>>2]=0;i=e;return b|0}k=b+4|0;if((c[k>>2]|0)>>>0<(j+1|0)>>>0){l=j+17&-16;c[k>>2]=l;k=_t(l)|0;c[k>>2]=0;if(!((g|0)==2080|(g|0)==0)){au(g)}c[b>>2]=k;m=c[h>>2]|0;n=k;o=c[d>>2]|0}else{m=j;n=g;o=f}c[b+8>>2]=m;tu(n|0,o|0,m+1|0)|0;i=e;return b|0}function Xj(a){a=a|0;if((a|0)!=0){c[470]=a;c[472]=c[468]}return a|0}function Yj(a){a=a|0;var b=0;b=i;sl(a);i=b;return}function Zj(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,r=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;f=i;i=i+32|0;g=f;h=f+8|0;j=uu(b|0)|0;if((j|0)==0){c[h>>2]=2080;c[h+4>>2]=0;k=h+8|0;c[k>>2]=0;l=k;m=h}else if((j|0)==-1){n=2080;o=4}else{k=_t(j+17&-16)|0;c[k>>2]=0;n=k;o=4}if((o|0)==4){tu(n|0,b|0,j|0)|0;a[n+j|0]=0;c[h>>2]=2080;k=h+4|0;c[k>>2]=0;p=h+8|0;c[p>>2]=0;if((j|0)==-1){c[p>>2]=-1;tu(2080,n|0,-1)|0;a[2080+ -1|0]=0}else{r=j+17&-16;c[k>>2]=r;k=_t(r)|0;c[k>>2]=0;c[h>>2]=k;c[p>>2]=j;tu(k|0,n|0,j|0)|0;r=k+j|0;a[r]=0;if((j|0)>0){j=k;do{a[j]=Fu(a[j]|0)|0;j=j+1|0}while(j>>>0<r>>>0)}}if((n|0)==2080|(n|0)==0){l=p;m=h}else{au(n);l=p;m=h}}p=0;while(1){if((a[1960]|0)==0){if((de(1960)|0)!=0){c[1900>>2]=0;c[1904>>2]=0;c[474]=0;c[1912>>2]=512;c[1908>>2]=128;c[1920>>2]=0;c[1924>>2]=0;c[1916>>2]=0;c[1932>>2]=512;c[1928>>2]=128;c[1940>>2]=0;c[1944>>2]=0;c[1936>>2]=0;c[1952>>2]=512;c[1948>>2]=128;oc(32,1896,q|0)|0;Lc(1960)}}if((p|0)>=(c[1920>>2]|0)){o=25;break}if((a[1960]|0)==0){if((de(1960)|0)!=0){c[1900>>2]=0;c[1904>>2]=0;c[474]=0;c[1912>>2]=512;c[1908>>2]=128;c[1920>>2]=0;c[1924>>2]=0;c[1916>>2]=0;c[1932>>2]=512;c[1928>>2]=128;c[1940>>2]=0;c[1944>>2]=0;c[1936>>2]=0;c[1952>>2]=512;c[1948>>2]=128;oc(32,1896,q|0)|0;Lc(1960)}}n=c[1916>>2]|0;r=c[n+(p*12|0)+8>>2]|0;if((r|0)==(c[l>>2]|0)){if((nu(c[n+(p*12|0)>>2]|0,c[m>>2]|0,r)|0)==0){o=20;break}}p=p+1|0}if((o|0)==20){if((a[1960]|0)==0){if((de(1960)|0)!=0){c[1900>>2]=0;c[1904>>2]=0;c[474]=0;c[1912>>2]=512;c[1908>>2]=128;c[1920>>2]=0;c[1924>>2]=0;c[1916>>2]=0;c[1932>>2]=512;c[1928>>2]=128;c[1940>>2]=0;c[1944>>2]=0;c[1936>>2]=0;c[1952>>2]=512;c[1948>>2]=128;oc(32,1896,q|0)|0;Lc(1960)}}r=c[(c[474]|0)+(p<<2)>>2]|0;if((r|0)==0){o=25}else{t=r;o=65}}if((o|0)==25){r=mb(b|0,1)|0;p=(r|0)==0;if(p){n=_t(32)|0;u=n+0|0;v=1968|0;w=u+26|0;do{a[u]=a[v]|0;u=u+1|0;v=v+1|0}while((u|0)<(w|0));a[n+26|0]=0;j=c[l>>2]|0;if((j|0)==0){x=26;y=n;o=52}else{if((j|0)!=-26&(j+27|0)>>>0>32){k=_t(j+43&-16)|0;u=k+0|0;v=n+0|0;w=u+26|0;do{a[u]=a[v]|0;u=u+1|0;v=v+1|0}while((u|0)<(w|0));a[k+26|0]=0;if((n|0)==2080|(n|0)==0){z=k;A=j}else{au(n);z=k;A=c[l>>2]|0}}else{z=n;A=j}tu(z+26|0,c[m>>2]|0,A|0)|0;j=A+26|0;a[z+j|0]=0;if((A|0)==-26){B=0;C=0;D=2080;E=z}else if((A|0)==-27){F=2080;G=z;H=-1;I=0;o=53}else{x=j;y=z;o=52}}if((o|0)==52){z=x+17&-16;j=_t(z)|0;c[j>>2]=0;F=j;G=y;H=x;I=z;o=53}if((o|0)==53){tu(F|0,G|0,H|0)|0;a[F+H|0]=0;B=H;C=I;D=F;E=G}G=B+1|0;if((G|0)!=0&C>>>0<(B+2|0)>>>0){C=_t(B+18&-16)|0;if((B|0)==0){c[C>>2]=0}else{tu(C|0,D|0,B|0)|0;a[C+B|0]=0}if((D|0)==2080|(D|0)==0){J=C}else{au(D);J=C}}else{J=D}a[J+B|0]=10;a[J+G|0]=0;c[g>>2]=J;tg(2480,g|0)|0;Bd(c[s>>2]|0)|0;if(!((J|0)==2080|(J|0)==0)){au(J)}Xa(E|0)|0;if(!((E|0)==2080|(E|0)==0)){au(E)}}else{if((a[1960]|0)==0){if((de(1960)|0)!=0){c[1900>>2]=0;c[1904>>2]=0;c[474]=0;c[1912>>2]=512;c[1908>>2]=128;c[1920>>2]=0;c[1924>>2]=0;c[1916>>2]=0;c[1932>>2]=512;c[1928>>2]=128;c[1940>>2]=0;c[1944>>2]=0;c[1936>>2]=0;c[1952>>2]=512;c[1948>>2]=128;oc(32,1896,q|0)|0;Lc(1960)}}E=c[1904>>2]|0;J=c[1900>>2]|0;do{if((E|0)>(J|0)){K=J;o=42}else{G=J+1|0;if((E|0)>(G|0)){K=J;o=42}else{B=c[1912>>2]|0;if((B|0)<(G|0)){D=c[1908>>2]|0;L=ea(((G|0)/(D|0)|0)+1|0,D)|0}else{L=B}c[1904>>2]=L;B=_t(L>>>0>1073741823?-1:L<<2)|0;D=c[474]|0;G=(D|0)==0;if((B|0)==0){if(!G){au(D);c[474]=0;c[1904>>2]=0}c[1900>>2]=0;break}if(G){M=J}else{if((J|0)>0){G=0;do{c[B+(G<<2)>>2]=c[D+(G<<2)>>2];G=G+1|0}while((G|0)!=(J|0))}au(D);M=c[1900>>2]|0}c[474]=B;K=M;o=42}}}while(0);if((o|0)==42){c[1900>>2]=K+1;c[(c[474]|0)+(K<<2)>>2]=r}if((a[1960]|0)==0){if((de(1960)|0)!=0){c[1900>>2]=0;c[1904>>2]=0;c[474]=0;c[1912>>2]=512;c[1908>>2]=128;c[1920>>2]=0;c[1924>>2]=0;c[1916>>2]=0;c[1932>>2]=512;c[1928>>2]=128;c[1940>>2]=0;c[1944>>2]=0;c[1936>>2]=0;c[1952>>2]=512;c[1948>>2]=128;oc(32,1896,q|0)|0;Lc(1960)}}_j(1916|0,h)|0}if(!p){t=r;o=65}}if((o|0)==65){r=ae(t|0,d|0)|0;c[e>>2]=r;if((r|0)==0){r=_t(32)|0;u=r+0|0;v=2e3|0;w=u+25|0;do{a[u]=a[v]|0;u=u+1|0;v=v+1|0}while((u|0)<(w|0));a[r+25|0]=0;e=uu(d|0)|0;if((e|0)==0){N=25;O=r;o=71}else{t=e+25|0;if((t|0)!=0&(e+26|0)>>>0>32){p=_t(e+42&-16)|0;u=p+0|0;v=r+0|0;w=u+25|0;do{a[u]=a[v]|0;u=u+1|0;v=v+1|0}while((u|0)<(w|0));a[p+25|0]=0;if((r|0)==2080|(r|0)==0){P=p}else{au(r);P=p}}else{P=r}tu(P+25|0,d|0,e|0)|0;a[P+t|0]=0;if((e|0)==-26){Q=2080;R=P;S=-1;T=0;o=72}else if((e|0)==-25){U=0;V=0;W=2080;X=P}else{N=t;O=P;o=71}}if((o|0)==71){P=N+17&-16;t=_t(P)|0;c[t>>2]=0;Q=t;R=O;S=N;T=P;o=72}if((o|0)==72){tu(Q|0,R|0,S|0)|0;a[Q+S|0]=0;U=S;V=T;W=Q;X=R}R=U+1|0;if((R|0)!=0&V>>>0<(U+2|0)>>>0){V=_t(U+18&-16)|0;if((U|0)==0){c[V>>2]=0}else{tu(V|0,W|0,U|0)|0;a[V+U|0]=0}if((W|0)==2080|(W|0)==0){Y=V}else{au(W);Y=V}}else{Y=W}a[Y+U|0]=10;a[Y+R|0]=0;c[g>>2]=Y;tg(2480,g|0)|0;Bd(c[s>>2]|0)|0;if(!((Y|0)==2080|(Y|0)==0)){au(Y)}Xa(X|0)|0;c[g>>2]=d;c[g+4>>2]=b;tg(2032,g|0)|0;if(!((X|0)==2080|(X|0)==0)){au(X)}}}X=c[m>>2]|0;if((X|0)==2080|(X|0)==0){i=f;return}au(X);i=f;return}function _j(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;f=b+4|0;g=c[f>>2]|0;do{if((c[b+8>>2]|0)>(g|0)){h=g}else{if(ol(b,g+1|0)|0){h=c[f>>2]|0;break}else{j=0;i=e;return j|0}}}while(0);c[f>>2]=h+1;f=c[b>>2]|0;b=c[d>>2]|0;g=f+(h*12|0)|0;k=c[g>>2]|0;if((b|0)==(k|0)){j=1;i=e;return j|0}l=d+8|0;m=c[l>>2]|0;if((m|0)==0){if((k|0)!=2080){a[k]=0}c[f+(h*12|0)+8>>2]=0;j=1;i=e;return j|0}n=f+(h*12|0)+4|0;if((c[n>>2]|0)>>>0<(m+1|0)>>>0){o=m+17&-16;c[n>>2]=o;n=_t(o)|0;c[n>>2]=0;if(!((k|0)==2080|(k|0)==0)){au(k)}c[g>>2]=n;p=c[l>>2]|0;q=n;r=c[d>>2]|0}else{p=m;q=k;r=b}c[f+(h*12|0)+8>>2]=p;tu(q|0,r|0,p+1|0)|0;j=1;i=e;return j|0}function $j(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=c[d>>2]|0;c[b>>2]=2080;d=b+4|0;c[d>>2]=0;h=b+8|0;c[h>>2]=0;j=uu(g|0)|0;if((j|0)==-1){k=2080}else if((j|0)==0){jk(b,e)|0;i=f;return}else{l=j+17&-16;c[d>>2]=l;d=_t(l)|0;c[d>>2]=0;c[b>>2]=d;k=d}c[h>>2]=j;tu(k|0,g|0,j|0)|0;a[k+j|0]=0;jk(b,e)|0;i=f;return}function ak(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;c[b>>2]=2080;g=b+4|0;c[g>>2]=0;h=b+8|0;c[h>>2]=0;j=d+8|0;k=c[j>>2]|0;if((k|0)==-1){l=-1;m=2080}else if((k|0)==0){n=c[e>>2]|0;dk(b,n)|0;i=f;return}else{o=k+17&-16;c[g>>2]=o;g=_t(o)|0;c[g>>2]=0;c[b>>2]=g;l=c[j>>2]|0;m=g}c[h>>2]=l;tu(m|0,c[d>>2]|0,l|0)|0;a[m+l|0]=0;n=c[e>>2]|0;dk(b,n)|0;i=f;return}function bk(){var b=0,d=0,e=0;b=i;if((a[1960]|0)==0){if((de(1960)|0)!=0){c[1900>>2]=0;c[1904>>2]=0;c[474]=0;c[1912>>2]=512;c[1908>>2]=128;c[1920>>2]=0;c[1924>>2]=0;c[1916>>2]=0;c[1932>>2]=512;c[1928>>2]=128;c[1940>>2]=0;c[1944>>2]=0;c[1936>>2]=0;c[1952>>2]=512;c[1948>>2]=128;oc(32,1896,q|0)|0;Lc(1960)}}if((c[1940>>2]|0)==0){i=b;return}Xa(2832)|0;d=0;while(1){if((a[1960]|0)==0){if((de(1960)|0)!=0){c[1900>>2]=0;c[1904>>2]=0;c[474]=0;c[1912>>2]=512;c[1908>>2]=128;c[1920>>2]=0;c[1924>>2]=0;c[1916>>2]=0;c[1932>>2]=512;c[1928>>2]=128;c[1940>>2]=0;c[1944>>2]=0;c[1936>>2]=0;c[1952>>2]=512;c[1948>>2]=128;oc(32,1896,q|0)|0;Lc(1960)}}if((d|0)>=(c[1940>>2]|0)){break}if((a[1960]|0)==0){if((de(1960)|0)!=0){c[1900>>2]=0;c[1904>>2]=0;c[474]=0;c[1912>>2]=512;c[1908>>2]=128;c[1920>>2]=0;c[1924>>2]=0;c[1916>>2]=0;c[1932>>2]=512;c[1928>>2]=128;c[1940>>2]=0;c[1944>>2]=0;c[1936>>2]=0;c[1952>>2]=512;c[1948>>2]=128;oc(32,1896,q|0)|0;Lc(1960)}}e=c[1936>>2]|0;Zj(c[e+(d*12|0)>>2]|0,c[e+(d*12|0)+4>>2]|0,c[e+(d*12|0)+8>>2]|0);d=d+1|0}i=b;return}function ck(){var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;b=i;i=i+48|0;d=b;e=b+8|0;f=c[338]|0;g=uu(f|0)|0;if((g|0)==0){i=b;return}h=(g<<1|0)/3|0;j=((h|0)%8|0)+h|0;h=j<<2;k=_t((j|0)<0?-1:h)|0;vu(k|0,0,h|0)|0;h=(g|0)/3|0;if((g|0)>2){g=0;do{l=g*3|0;m=a[f+(l+1)|0]|0;n=a[f+l|0]|0;a[k+g|0]=(n<<24>>24>57?169:208)+(n&255)+((m<<24>>24>57?9:0)+(m&255)<<4);g=g+1|0}while((g|0)<(h|0))}Qn(d);h=e+0|0;g=2056|0;f=h+10|0;do{a[h]=a[g]|0;h=h+1|0;g=g+1|0}while((h|0)<(f|0));a[e+1|0]=57;a[e+3|0]=82;a[e+5|0]=69;Un(d,e,9);Vn(d,k,k,(j|0)/2|0);c[1262]=0;j=c[316]|0;e=_t(((uu(j|0)|0)>>>1)+1|0)|0;if((uu(j|0)|0)>1){g=0;do{a[e+g|0]=a[j+(g<<1)|0]|0;g=g+1|0;a[e+g|0]=0}while((g|0)<((uu(j|0)|0)/2|0|0))}do{if((ou(k+4|0,e)|0)==0){if((qu(k,2072,3)|0)==0){c[1250]=1;c[1262]=3;o=3}else{o=0}j=a[k+1|0]|0;if(j<<24>>24==78){p=o}else if(j<<24>>24==51){j=o|1;c[1262]=j;q=j;r=11}else{q=o;r=11}if((r|0)==11){if((a[k+2|0]|0)==78){p=q}else{break}}c[1262]=p|2}}while(0);if((e|0)!=0){au(e)}if((k|0)!=0){au(k)}Rn(d);i=b;return}function dk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;f=uu(d|0)|0;if((f|0)==0){i=e;return b|0}g=b+8|0;h=c[g>>2]|0;j=h+f|0;if((j|0)==0){k=h}else{l=b+4|0;if((c[l>>2]|0)>>>0<(j+1|0)>>>0){m=j+17&-16;c[l>>2]=m;l=_t(m)|0;if((h|0)==0){c[l>>2]=0;n=c[b>>2]|0}else{m=c[b>>2]|0;tu(l|0,m|0,h|0)|0;a[l+h|0]=0;n=m}if((n|0)==2080|(n|0)==0){o=h}else{au(n);o=c[g>>2]|0}c[b>>2]=l;k=o}else{k=h}}tu((c[b>>2]|0)+k|0,d|0,f|0)|0;d=(c[g>>2]|0)+f|0;c[g>>2]=d;a[(c[b>>2]|0)+d|0]=0;i=e;return b|0}function ek(a){a=a|0;c[a>>2]=2080;c[a+4>>2]=0;c[a+8>>2]=0;return}function fk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;c[b>>2]=2080;f=b+4|0;c[f>>2]=0;g=b+8|0;c[g>>2]=0;h=uu(d|0)|0;if((h|0)==0){i=e;return}else if((h|0)==-1){j=2080}else{k=h+17&-16;c[f>>2]=k;f=_t(k)|0;c[f>>2]=0;c[b>>2]=f;j=f}c[g>>2]=h;tu(j|0,d|0,h|0)|0;a[(c[b>>2]|0)+(c[g>>2]|0)|0]=0;i=e;return}function gk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;c[b>>2]=2080;f=b+4|0;c[f>>2]=0;g=b+8|0;c[g>>2]=0;h=c[d>>2]|0;d=uu(h|0)|0;if((d|0)==0){i=e;return}else if((d|0)==-1){j=2080}else{k=d+17&-16;c[f>>2]=k;f=_t(k)|0;c[f>>2]=0;c[b>>2]=f;j=f}c[g>>2]=d;tu(j|0,h|0,d|0)|0;a[(c[b>>2]|0)+(c[g>>2]|0)|0]=0;i=e;return}function hk(b,d){b=b|0;d=+d;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;f=b+4|0;g=b+8|0;c[g>>2]=0;c[f>>2]=80;h=_t(80)|0;c[h>>2]=0;c[b>>2]=h;Pj(d,10,h)|0;if((a[h]|0)==46){j=h+1|0;if((a[j]|0)==48){if((a[h+2|0]|0)==0){a[h]=48;a[j]=0}else{k=5}}else{k=5}}else{k=5}if((k|0)==5){k=h+((uu(h|0)|0)+ -1)|0;if((a[k]|0)==46){a[k]=0}}c[g>>2]=0;k=c[b>>2]|0;if((a[k]|0)==0){i=e;return}b=c[f>>2]|0;f=0;while(1){h=f+1|0;if(!(f>>>0<b>>>0)){l=f;break}c[g>>2]=h;if((a[k+h|0]|0)==0){l=h;break}else{f=h}}if(l>>>0<b>>>0|(l|0)==0){i=e;return}b=l+ -1|0;c[g>>2]=b;a[k+b|0]=0;i=e;return}function ik(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if(!((d|0)==2080|(d|0)==0)){au(d)}c[a>>2]=2080;c[a+8>>2]=0;c[a+4>>2]=0;i=b;return}function jk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;f=d+8|0;g=c[f>>2]|0;if((g|0)==0){i=e;return b|0}h=b+8|0;j=c[h>>2]|0;k=j+g|0;if((k|0)==0){l=j;m=g}else{n=b+4|0;if((c[n>>2]|0)>>>0<(k+1|0)>>>0){o=k+17&-16;c[n>>2]=o;n=_t(o)|0;if((j|0)==0){c[n>>2]=0;p=c[b>>2]|0}else{o=c[b>>2]|0;tu(n|0,o|0,j|0)|0;a[n+j|0]=0;p=o}if((p|0)==2080|(p|0)==0){q=j}else{au(p);q=c[h>>2]|0}c[b>>2]=n;l=q;m=c[f>>2]|0}else{l=j;m=g}}tu((c[b>>2]|0)+l|0,c[d>>2]|0,m|0)|0;m=(c[h>>2]|0)+(c[f>>2]|0)|0;c[h>>2]=m;a[(c[b>>2]|0)+m|0]=0;i=e;return b|0}function kk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;i=i+16|0;f=e;g=_t(32)|0;c[g>>2]=0;c[f>>2]=d;lb(g|0,2792,f|0)|0;if((a[g]|0)!=0){f=0;while(1){h=f+1|0;if(!(f>>>0<32)){j=f;k=5;break}if((a[g+h|0]|0)==0){k=4;break}else{f=h}}if((k|0)==4){if(h>>>0<32){l=h}else{j=h;k=5}}if((k|0)==5){k=j+ -1|0;a[g+k|0]=0;l=k}if((l|0)!=0){k=b+8|0;j=c[k>>2]|0;h=j+l|0;if((h|0)==0){m=j}else{f=b+4|0;if((c[f>>2]|0)>>>0<(h+1|0)>>>0){d=h+17&-16;c[f>>2]=d;f=_t(d)|0;if((j|0)==0){c[f>>2]=0;n=c[b>>2]|0}else{d=c[b>>2]|0;tu(f|0,d|0,j|0)|0;a[f+j|0]=0;n=d}if((n|0)==2080|(n|0)==0){o=j}else{au(n);o=c[k>>2]|0}c[b>>2]=f;m=o}else{m=j}}tu((c[b>>2]|0)+m|0,g|0,l|0)|0;m=(c[k>>2]|0)+l|0;c[k>>2]=m;a[(c[b>>2]|0)+m|0]=0}}if((g|0)==2080|(g|0)==0){i=e;return b|0}au(g);i=e;return b|0}function lk(b,d){b=b|0;d=+d;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+16|0;f=e;hk(f,d);g=c[f+8>>2]|0;if((g|0)==0){h=c[f>>2]|0}else{j=b+8|0;k=c[j>>2]|0;l=k+g|0;if((l|0)==0){m=k}else{n=b+4|0;if((c[n>>2]|0)>>>0<(l+1|0)>>>0){o=l+17&-16;c[n>>2]=o;n=_t(o)|0;if((k|0)==0){c[n>>2]=0;p=c[b>>2]|0}else{o=c[b>>2]|0;tu(n|0,o|0,k|0)|0;a[n+k|0]=0;p=o}if((p|0)==2080|(p|0)==0){q=k}else{au(p);q=c[j>>2]|0}c[b>>2]=n;m=q}else{m=k}}k=c[f>>2]|0;tu((c[b>>2]|0)+m|0,k|0,g|0)|0;m=(c[j>>2]|0)+g|0;c[j>>2]=m;a[(c[b>>2]|0)+m|0]=0;h=k}if((h|0)==2080|(h|0)==0){i=e;return b|0}au(h);i=e;return b|0}function mk(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=c[d>>2]|0;c[b>>2]=2080;d=b+4|0;c[d>>2]=0;h=b+8|0;c[h>>2]=0;j=uu(g|0)|0;if((j|0)==-1){k=2080}else if((j|0)==0){kk(b,e)|0;i=f;return}else{l=j+17&-16;c[d>>2]=l;d=_t(l)|0;c[d>>2]=0;c[b>>2]=d;k=d}c[h>>2]=j;tu(k|0,g|0,j|0)|0;a[k+j|0]=0;kk(b,e)|0;i=f;return}function nk(b,d,e){b=b|0;d=d|0;e=+e;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=c[d>>2]|0;c[b>>2]=2080;d=b+4|0;c[d>>2]=0;h=b+8|0;c[h>>2]=0;j=uu(g|0)|0;if((j|0)==0){lk(b,e)|0;i=f;return}else if((j|0)==-1){k=2080}else{l=j+17&-16;c[d>>2]=l;d=_t(l)|0;c[d>>2]=0;c[b>>2]=d;k=d}c[h>>2]=j;tu(k|0,g|0,j|0)|0;a[k+j|0]=0;lk(b,e)|0;i=f;return}function ok(b,d,e){b=b|0;d=d|0;e=+e;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;c[b>>2]=2080;g=b+4|0;c[g>>2]=0;h=b+8|0;c[h>>2]=0;j=d+8|0;k=c[j>>2]|0;if((k|0)==0){lk(b,e)|0;i=f;return}else if((k|0)==-1){l=-1;m=2080}else{n=k+17&-16;c[g>>2]=n;g=_t(n)|0;c[g>>2]=0;c[b>>2]=g;l=c[j>>2]|0;m=g}c[h>>2]=l;tu(m|0,c[d>>2]|0,l|0)|0;a[m+l|0]=0;lk(b,e)|0;i=f;return}function pk(a){a=a|0;var b=0,d=0;b=i;d=uu(c[a>>2]|0)|0;i=b;return d|0}function qk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;f=c[b>>2]|0;g=b+4|0;if((f|0)==0){if((c[g>>2]|0)!=0){h=4}}else{ff(f|0)|0;c[b>>2]=0;f=b+8|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;if((c[g>>2]|0)!=0){h=4}}if((h|0)==4){g=b+4|0;c[g+0>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0}if((a[d]|0)==0){j=0;i=e;return j|0}if((qu(d,2592,6)|0)!=0){g=ql(0,d,2736)|0;c[b>>2]=g;f=b+16|0;c[f>>2]=0;c[f+4>>2]=0;if((g|0)==0){if((c[b+4>>2]|0)==0){k=0;l=0;m=0}else{h=14}}else{h=14}if((h|0)==14){f=Za(g|0)|0;Fd(c[b>>2]|0,0,2)|0;g=Za(c[b>>2]|0)|0;Fd(c[b>>2]|0,f|0,0)|0;k=g;l=((g|0)<0)<<31>>31;m=(c[b>>2]|0)!=0}g=b+8|0;c[g>>2]=k;c[g+4>>2]=l;j=m;i=e;return j|0}m=kg(d+6|0,0,16)|0;l=kg(d+15|0,0,16)|0;d=c[b>>2]|0;g=b+4|0;if((d|0)==0){if((c[g>>2]|0)!=0){h=10}}else{ff(d|0)|0;c[b>>2]=0;d=b+8|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;if((c[g>>2]|0)!=0){h=10}}if((h|0)==10){c[g+0>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0}c[g>>2]=l;l=b+8|0;c[l>>2]=m;c[l+4>>2]=((m|0)<0)<<31>>31;m=b+16|0;c[m>>2]=0;c[m+4>>2]=0;j=1;i=e;return j|0}function rk(a){a=a|0;var b=0,c=0;b=i;if((a|0)<1){c=0}else{c=((Al()|0)>>>0)%((a+1|0)>>>0)|0}i=b;return c|0}function sk(){var a=0,b=0;a=i;if((c[634]|0)==0){c[634]=eb()|0}b=eb()|0;i=a;return+(+((b-(c[634]|0)|0)>>>0)- +h[224])}function tk(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;i=i+16|0;e=d;f=c[a>>2]|0;g=a+4|0;if((f|0)==0){if((c[g>>2]|0)!=0){h=4}}else{ff(f|0)|0;c[a>>2]=0;f=a+8|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;if((c[g>>2]|0)!=0){h=4}}if((h|0)==4){h=a+4|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0}if((qu(b,2592,6)|0)==0){j=0;i=d;return j|0}Og(b|0)|0;h=ql(0,b,2752)|0;c[a>>2]=h;if((h|0)==0){g=Mb(b|0,2752)|0;c[a>>2]=g;if((g|0)==0){c[e>>2]=b;tg(2760,e|0)|0;k=c[a>>2]|0}else{k=g}}else{k=h}h=a+8|0;a=(k|0)!=0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;j=a;i=d;return j|0}function uk(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;f=c[426]|0;g=c[b>>2]|0;a[f]=1;b=f+2052|0;h=c[b>>2]|0;if((h|0)==0){j=f+1025|0;if((a[j]|0)!=0){Og(j|0)|0}}else{au(h);c[b>>2]=0}b=f+2056|0;h=c[b>>2]|0;if((h|0)!=0){j=h;do{c[b>>2]=c[j+268>>2];$t(j);j=c[b>>2]|0}while((j|0)!=0)}c[b>>2]=0;b=f+1|0;a[b]=0;a[f+1025|0]=0;Cu(b|0,g|0)|0;g=c[428]|0;b=c[d>>2]|0;a[g]=1;d=g+2052|0;f=c[d>>2]|0;if((f|0)==0){j=g+1025|0;if((a[j]|0)!=0){Og(j|0)|0}}else{au(f);c[d>>2]=0}d=g+2056|0;f=c[d>>2]|0;if((f|0)==0){c[d>>2]=0;k=g+1|0;a[k]=0;l=g+1025|0;a[l]=0;Cu(k|0,b|0)|0;i=e;return}else{m=f}do{c[d>>2]=c[m+268>>2];$t(m);m=c[d>>2]|0}while((m|0)!=0);c[d>>2]=0;k=g+1|0;a[k]=0;l=g+1025|0;a[l]=0;Cu(k|0,b|0)|0;i=e;return}function vk(a){a=a|0;var b=0;a=i;b=c[2272>>2]|0;if((b|0)!=0){ff(b|0)|0;c[2272>>2]=0;c[2280>>2]=0;c[2284>>2]=0;c[2288>>2]=0;c[2292>>2]=0}if((c[2276>>2]|0)!=0){c[2276>>2]=0;c[2280>>2]=0;c[2284>>2]=0;c[2288>>2]=0;c[2292>>2]=0}b=c[2248>>2]|0;if((b|0)!=0){ff(b|0)|0;c[2248>>2]=0;c[2256>>2]=0;c[2260>>2]=0;c[2264>>2]=0;c[2268>>2]=0}if((c[2252>>2]|0)!=0){c[2252>>2]=0;c[2256>>2]=0;c[2260>>2]=0;c[2264>>2]=0;c[2268>>2]=0}b=c[2224>>2]|0;if((b|0)!=0){ff(b|0)|0;c[2224>>2]=0;c[2232>>2]=0;c[2236>>2]=0;c[2240>>2]=0;c[2244>>2]=0}if((c[2228>>2]|0)!=0){c[2228>>2]=0;c[2232>>2]=0;c[2236>>2]=0;c[2240>>2]=0;c[2244>>2]=0}b=c[2200>>2]|0;if((b|0)!=0){ff(b|0)|0;c[2200>>2]=0;c[2208>>2]=0;c[2212>>2]=0;c[2216>>2]=0;c[2220>>2]=0}if((c[2204>>2]|0)!=0){c[2204>>2]=0;c[2208>>2]=0;c[2212>>2]=0;c[2216>>2]=0;c[2220>>2]=0}b=c[2176>>2]|0;if((b|0)!=0){ff(b|0)|0;c[2176>>2]=0;c[2184>>2]=0;c[2188>>2]=0;c[2192>>2]=0;c[2196>>2]=0}if((c[2180>>2]|0)!=0){c[2180>>2]=0;c[2184>>2]=0;c[2188>>2]=0;c[2192>>2]=0;c[2196>>2]=0}b=c[2152>>2]|0;if((b|0)!=0){ff(b|0)|0;c[2152>>2]=0;c[2160>>2]=0;c[2164>>2]=0;c[2168>>2]=0;c[2172>>2]=0}if((c[2156>>2]|0)!=0){c[2156>>2]=0;c[2160>>2]=0;c[2164>>2]=0;c[2168>>2]=0;c[2172>>2]=0}b=c[2128>>2]|0;if((b|0)!=0){ff(b|0)|0;c[2128>>2]=0;c[2136>>2]=0;c[2140>>2]=0;c[2144>>2]=0;c[2148>>2]=0}if((c[2132>>2]|0)!=0){c[2132>>2]=0;c[2136>>2]=0;c[2140>>2]=0;c[2144>>2]=0;c[2148>>2]=0}b=c[526]|0;if((b|0)!=0){ff(b|0)|0;c[526]=0;c[2112>>2]=0;c[2116>>2]=0;c[2120>>2]=0;c[2124>>2]=0}if((c[2108>>2]|0)==0){i=a;return}c[2108>>2]=0;c[2112>>2]=0;c[2116>>2]=0;c[2120>>2]=0;c[2124>>2]=0;i=a;return}function wk(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0;d=i;i=i+16|0;e=d;c[470]=0;f=($c(c[b>>2]|0)|0)==0;g=_t(16)|0;h=g+0|0;j=2296|0;k=h+14|0;do{a[h]=a[j]|0;h=h+1|0;j=j+1|0}while((h|0)<(k|0));a[g+14|0]=0;l=_t(16)|0;h=l+0|0;j=g+0|0;k=h+14|0;do{a[h]=a[j]|0;h=h+1|0;j=j+1|0}while((h|0)<(k|0));a[l+14|0]=0;m=b+8|0;n=c[m>>2]|0;if((n|0)==0){o=14;p=l}else{if((n|0)!=-14&(n+15|0)>>>0>16){q=_t(n+31&-16)|0;h=q+0|0;j=l+0|0;k=h+14|0;do{a[h]=a[j]|0;h=h+1|0;j=j+1|0}while((h|0)<(k|0));a[q+14|0]=0;if((l|0)==2080|(l|0)==0){r=q;t=n}else{au(l);r=q;t=c[m>>2]|0}}else{r=l;t=n}tu(r+14|0,c[b>>2]|0,t|0)|0;b=t+14|0;a[r+b|0]=0;o=b;p=r}r=_t(16)|0;c[r>>2]=0;a[r]=10;a[r+1|0]=0;if((o|0)==0){u=0;v=0;w=2080}else if((o|0)==-1){x=2080;y=-1;z=0;A=8}else{b=o+17&-16;t=_t(b)|0;c[t>>2]=0;x=t;y=o;z=b;A=8}if((A|0)==8){tu(x|0,p|0,y|0)|0;a[x+y|0]=0;u=y;v=z;w=x}x=u+1|0;if((x|0)!=0&v>>>0<(u+2|0)>>>0){v=_t(u+18&-16)|0;if((u|0)==0){c[v>>2]=0}else{tu(v|0,w|0,u|0)|0;a[v+u|0]=0}if((w|0)==2080|(w|0)==0){B=v;C=10}else{au(w);B=v;C=a[r]|0}}else{B=w;C=10}a[B+u|0]=C;a[B+x|0]=0;c[e>>2]=B;tg(2480,e|0)|0;Bd(c[s>>2]|0)|0;if(!((B|0)==2080|(B|0)==0)){au(B)}if(!((r|0)==2080|(r|0)==0)){au(r)}if(!((p|0)==2080|(p|0)==0)){au(p)}if(!((g|0)==2080|(g|0)==0)){au(g)}if(f){D=1.0;i=d;return+D}c[470]=3;c[472]=c[468];D=0.0;i=d;return+D}function xk(a){a=+a;var b=0.0;b=+X(+(a*.017453292519943295));return+b}function yk(a){a=+a;var b=0.0;b=+W(+(a*.017453292519943295));return+b}function zk(a,b){a=+a;b=+b;var c=0.0;c=+aa(+a,+b)*57.29577951308232;return+c}function Ak(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;Bk(a,c[b+16>>2]|0,c[b+20>>2]|0,c[b+24>>2]|0,c[b+28>>2]|0);e=c[a+20>>2]|0;f=ea((e|0)<1?1:e,c[a+16>>2]|0)|0;e=c[a+24>>2]|0;g=ea(f,(e|0)<1?1:e)|0;e=c[a+28>>2]|0;f=ea(g,(e|0)<1?1:e)|0;c[a+32>>2]=f;if((f|0)==0){i=d;return a|0}e=c[b>>2]|0;b=c[a>>2]|0;g=f;while(1){c[b>>2]=c[e>>2];g=g+ -1|0;if((g|0)==0){break}else{e=e+4|0;b=b+4|0}}i=d;return a|0}function Bk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;g=i;h=(b|0)<1;j=h?0:b;b=(d|0)<1?1:d;k=ea(b,j)|0;l=(e|0)<1?1:e;m=ea(k,l)|0;k=(f|0)<1?1:f;n=ea(m,k)|0;m=a+40|0;if((n|0)<=(c[m>>2]|0)&(h^1)){o=n}else{h=c[a>>2]|0;if((h|0)!=0){au(h)}h=(((n|0)/8|0)<<3)+8|0;n=_t(h>>>0>1073741823?-1:h<<2)|0;c[a>>2]=n;if((n|0)==0){c[470]=7;c[472]=c[468];Fl()}c[m>>2]=h;o=h}if((o|0)!=0){vu(c[a>>2]|0,0,o<<2|0)|0}do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}o=a+36|0;if((j|0)==0){c[o>>2]=0;break}else{c[o>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=j;o=ea(j,d)|0;c[a+8>>2]=o;c[a+12>>2]=ea(o,e)|0;c[a+16>>2]=j;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(j,k)|0,b)|0,l)|0;i=g;return}function Ck(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;h=(b|0)<1;j=h?0:b;b=(d|0)<1?1:d;k=ea(b,j)|0;l=(e|0)<1?1:e;m=ea(k,l)|0;k=(f|0)<1?1:f;n=ea(m,k)|0;m=a+40|0;if(!((n|0)<=(c[m>>2]|0)&(h^1))){h=c[a>>2]|0;if((h|0)!=0){au(h)}h=_t(n>>>0>1073741823?-1:n<<2)|0;c[a>>2]=h;if((h|0)==0){c[470]=7;c[472]=c[468];Fl()}c[m>>2]=n}if((n|0)!=0){n=ea(j,(f|0)>1?f:1)|0;m=ea(n,(e|0)>1?e:1)|0;vu(c[a>>2]|0,0,(ea(m,(d|0)>1?d:1)|0)<<2|0)|0}do{if((f|0)==0){if((e|0)!=0){c[a+36>>2]=3;break}if((d|0)!=0){c[a+36>>2]=2;break}m=a+36|0;if((j|0)==0){c[m>>2]=0;break}else{c[m>>2]=1;break}}else{c[a+36>>2]=4}}while(0);c[a+4>>2]=j;m=ea(j,d)|0;c[a+8>>2]=m;c[a+12>>2]=ea(m,e)|0;c[a+16>>2]=j;c[a+20>>2]=d;c[a+24>>2]=e;c[a+28>>2]=f;c[a+32>>2]=ea(ea(ea(j,k)|0,b)|0,l)|0;i=g;return}function Dk(){var a=0,b=0,d=0;a=i;i=i+16|0;b=a;c[b>>2]=2080;c[b+4>>2]=0;c[b+8>>2]=0;Ek(b);d=c[b>>2]|0;if((d|0)==2080|(d|0)==0){Fl();i=a;return}au(d);Fl();i=a;return}function Ek(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;b=i;i=i+16|0;d=b;e=c[166]|0;a:do{if((e|0)==0){f=6}else{g=c[a+8>>2]|0;h=e;j=664;while(1){k=j+8|0;l=c[j+4>>2]|0;if((g|0)==(uu(l|0)|0)){if((nu(c[a>>2]|0,l,g)|0)==0){break}}l=c[k>>2]|0;if((l|0)==0){f=6;break a}else{h=l;j=k}}c[596]=h;if((h|0)!=0){c[d>>2]=c[a>>2];tg(2400,d|0)|0;Od(2,60);i=b;return}}}while(0);if((f|0)==6){c[596]=0}Od(0,2e3);i=b;return}function Fk(){var a=0;a=i;if((c[598]|0)!=0){Xa(2848)|0;i=a;return}c[598]=1;if((c[596]|0)!=0){Kl();Ml();ci[c[596]&15]()}c[598]=0;i=a;return}function Gk(b,d,e,f){b=b|0;d=+d;e=+e;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,r=0,s=0;g=i;i=i+16|0;h=g;if((a[2464]|0)==0){if((de(2464)|0)!=0){c[612]=2080;c[2452>>2]=0;c[2456>>2]=0;oc(33,2448,q|0)|0;Lc(2464)}}c[h>>2]=~~d;lb(2416,2472,h|0)|0;if((c[2452>>2]|0)>>>0<129){c[2452>>2]=144;j=_t(144)|0;k=c[2456>>2]|0;if((k|0)==0){c[j>>2]=0;l=c[612]|0}else{m=c[612]|0;tu(j|0,m|0,k|0)|0;a[j+k|0]=0;l=m}if(!((l|0)==2080|(l|0)==0)){au(l)}c[612]=j;n=j}else{n=c[612]|0}c[h>>2]=f;lb(n|0,2416,h|0)|0;c[2456>>2]=0;h=c[612]|0;if((a[h]|0)==0){c[b>>2]=2080;c[b+4>>2]=0;c[b+8>>2]=0;i=g;return}n=c[2452>>2]|0;f=0;while(1){j=f+1|0;if(!(f>>>0<n>>>0)){o=f;break}c[2456>>2]=j;if((a[h+j|0]|0)==0){o=j;break}else{f=j}}if(o>>>0<n>>>0|(o|0)==0){p=o}else{n=o+ -1|0;c[2456>>2]=n;a[h+n|0]=0;p=c[2456>>2]|0}c[b>>2]=2080;n=b+4|0;c[n>>2]=0;h=b+8|0;c[h>>2]=0;if((p|0)==-1){r=-1;s=2080}else if((p|0)==0){i=g;return}else{o=p+17&-16;c[n>>2]=o;n=_t(o)|0;c[n>>2]=0;c[b>>2]=n;r=p;s=n}c[h>>2]=r;tu(s|0,c[612]|0,r|0)|0;a[s+r|0]=0;i=g;return}function Hk(a){a=a|0;var b=0,d=0;b=i;i=i+16|0;d=b;c[d>>2]=c[a>>2];tg(2480,d|0)|0;i=b;return}function Ik(){var b=0;b=i;if((a[2528]|0)==0){if((de(2528)|0)!=0){c[628]=2080;c[2516>>2]=0;c[2520>>2]=0;oc(33,2512,q|0)|0;Lc(2528)}}i=b;return 2512}function Jk(a){a=a|0;var b=0,d=0;b=i;d=c[r>>2]|0;uh(c[a>>2]|0,d|0)|0;Bd(d|0)|0;i=b;return}function Kk(d){d=d|0;var e=0,f=0,g=0,h=0;e=i;f=d+40|0;Vl(f)|0;g=d+38|0;h=(a[g]|0)==0;Wl(f)|0;if(!h){Vl(f)|0;a[d+37|0]=1;Wl(f)|0;Vl(f)|0;h=(a[g]|0)==0;Wl(f)|0;if(!h){do{kh(5e4)|0;Vl(f)|0;h=(a[g]|0)==0;Wl(f)|0}while(!h)}}f=d+4|0;h=c[f>>2]|0;if(!((h|0)==-1)){eo(h)|0;c[f>>2]=-1}f=d+8|0;h=c[f>>2]|0;if(!((h|0)==-1)){eo(h)|0;c[f>>2]=-1}co();a[d+37|0]=1;a[g]=0;a[d+39|0]=1;b[d>>1]=101;b[d+2>>1]=0;i=e;return}function Lk(a){a=a|0;var b=0;b=i;kn(c[464]|0,0);Jm(c[464]|0,a);i=b;return}function Mk(a){a=+a;var b=0;b=i;Pk(c[464]|0,a);i=b;return}function Nk(a,b,d,e){a=a|0;b=+b;d=+d;e=e|0;var f=0;f=i;_m(c[464]|0,c[460]|0,c[a>>2]|0,b,d,0.0,e,1);i=f;return}function Ok(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+16|0;f=e;c[470]=0;c[f>>2]=2080;g=f+4|0;c[g>>2]=0;h=f+8|0;c[h>>2]=0;j=b+8|0;k=c[j>>2]|0;if((k|0)==-1){l=-1;m=2080;n=3}else if((k|0)==0){o=2080}else{p=k+17&-16;c[g>>2]=p;g=_t(p)|0;c[g>>2]=0;c[f>>2]=g;l=k;m=g;n=3}if((n|0)==3){c[h>>2]=l;tu(m|0,c[b>>2]|0,l|0)|0;a[m+l|0]=0;o=m}cn(c[464]|0,d);do{if((c[j>>2]|0)==0){q=o}else{if((Sj(f)|0)==0){c[470]=3;c[472]=c[468];q=c[f>>2]|0;break}m=c[464]|0;l=c[f>>2]|0;if(dn(m,d,l,c[m+367628>>2]|0,0)|0){q=l}else{c[470]=3;c[472]=c[468];q=l}}}while(0);if((q|0)==2080|(q|0)==0){i=e;return}au(q);i=e;return}function Pk(a,b){a=a|0;b=+b;var d=0,e=0,f=0.0,h=0.0;d=i;e=b==0.0;do{if(e){if((c[1532]|0)!=0){Vd(3042);c[1532]=0}}else{if((c[1532]|0)!=1){Me(3042);c[1532]=1}if(b>0.0){ke(770,1);break}else{ke(770,771);break}}}while(0);f=e?1.0:b;if(f<0.0){h=-f}else{h=f}f=h>1.0?1.0:h;g[a+98472>>2]=f;if(!(+g[640]!=1.0|+g[642]!=1.0|+g[644]!=1.0|+g[646]!=f)){i=d;return}g[640]=1.0;g[642]=1.0;g[644]=1.0;g[646]=f;sc(1.0,1.0,1.0,+f);i=d;return}function Qk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=+e;f=+f;var g=0;g=i;Zm(c[464]|0,a,b,d,e,f);i=g;return}function Rk(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;Xm(c[464]|0,a,b,d);i=e;return}function Sk(a,d,e,f,g){a=a|0;d=d|0;e=e|0;f=+f;g=+g;var h=0,j=0,k=0,l=0.0,m=0.0,n=0.0;h=i;j=c[464]|0;k=c[j+98468>>2]|0;l=+(b[k+(a*28|0)+20>>1]|0);m=l*f;f=+(b[k+(a*28|0)+22>>1]|0);n=f*g;Ym(j,a,d-((~~(m-l)|0)/2|0)|0,e-((~~(n-f)|0)/2|0)|0,~~m,~~n);i=h;return}function Tk(a,b){a=a|0;b=+b;var d=0;d=i;if(a>>>0>31){c[470]=7;c[472]=c[468];i=d;return}else{c[460]=a;g[(c[464]|0)+(a<<2)+98340>>2]=b;i=d;return}}function Uk(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;i=i+16|0;f=e;c[470]=0;h=b+8|0;if((c[h>>2]|0)==0){$m(c[464]|0,d,2096)|0;i=e;return}if(d>>>0>31){c[470]=7;c[472]=c[468]}else{c[460]=d;g[(c[464]|0)+(d<<2)+98340>>2]=1.0}c[f>>2]=2080;j=f+4|0;c[j>>2]=0;k=f+8|0;c[k>>2]=0;l=c[h>>2]|0;if((l|0)==-1){m=-1;n=2080;o=8}else if((l|0)!=0){h=l+17&-16;c[j>>2]=h;p=_t(h)|0;c[p>>2]=0;c[f>>2]=p;m=l;n=p;o=8}if((o|0)==8){c[k>>2]=m;tu(n|0,c[b>>2]|0,m|0)|0;a[n+m|0]=0}if((Sj(f)|0)==0){c[470]=3;c[472]=c[468];yn(c[464]|0,d);q=c[f>>2]|0}else{m=c[f>>2]|0;if($m(c[464]|0,c[460]|0,m)|0){q=m}else{c[470]=3;c[472]=c[468];yn(c[464]|0,d);q=m}}if(!((q|0)==2080|(q|0)==0)){au(q)}c[f>>2]=2080;c[k>>2]=0;c[j>>2]=0;i=e;return}function Vk(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;i=i+32|0;h=g;j=ea(f,e)|0;k=b+16|0;if((c[k>>2]|0)!=(j|0)){l=0;i=g;return l|0}m=h+4|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;a[h]=1;n=j<<2;o=h+16|0;p=h+8|0;if((j|0)>0){c[p>>2]=0;c[m>>2]=0;a[h]=1;c[o>>2]=n;q=_t(n)|0;c[h+12>>2]=q;if((q|0)==0){r=0}else{s=q;t=4}}else{s=0;t=4}if((t|0)==4){c[m>>2]=e;c[p>>2]=f;vu(s|0,0,n|0)|0;r=c[h+12>>2]|0}n=h+12|0;s=c[b>>2]|0;if((s|0)==0){t=7}else{if((c[k>>2]|0)<1){t=7}else{u=s}}if((t|0)==7){fj(b,0,0,0,0);c[470]=9;c[472]=c[468];Fl();u=c[b>>2]|0}if((j|0)>0){b=0;t=u;u=r;while(1){r=c[t>>2]|0;a[u]=r;a[u+1|0]=r>>>8;a[u+2|0]=r>>>16;a[u+3|0]=r>>>24;b=b+1|0;if((b|0)==(j|0)){break}else{t=t+4|0;u=u+4|0}}}u=c[464]|0;t=(Am(u,d,h,c[u+367628>>2]|0,0)|0)&1;c[o>>2]=0;c[h+8>>2]=0;c[m>>2]=0;m=c[n>>2]|0;if((m|0)!=0){au(m)}c[n>>2]=0;a[h]=1;l=t;i=g;return l|0}function Wk(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+48|0;g=f+32|0;h=f;j=f+8|0;Bm(g,c[464]|0,e);k=c[g>>2]|0;Bm(h,c[464]|0,e);g=ea(c[h+4>>2]|0,k)|0;if((g|0)==0){l=0;i=f;return l|0}k=j+4|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;a[j]=1;if(Cm(c[464]|0,e,j)|0){Ck(b,g,0,0,0);e=j+12|0;h=c[e>>2]|0;m=c[b>>2]|0;if((m|0)==0){n=6}else{if((c[b+16>>2]|0)<1){n=6}else{o=m}}if((n|0)==6){fj(b,0,0,0,0);c[470]=9;c[472]=c[468];Fl();o=c[b>>2]|0}if((g|0)>0){b=0;n=o;o=h;while(1){c[n>>2]=(d[o+1|0]|0)<<8|(d[o]|0)|(d[o+2|0]|0)<<16|(d[o+3|0]|0)<<24;h=b+1|0;if((h|0)==(g|0)){p=1;q=e;break}else{b=h;n=n+4|0;o=o+4|0}}}else{p=1;q=e}}else{p=0;q=j+12|0}c[j+16>>2]=0;c[j+8>>2]=0;c[k>>2]=0;k=c[q>>2]|0;if((k|0)!=0){au(k)}c[q>>2]=0;a[j]=1;l=p;i=f;return l|0}function Xk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;rn(c[464]|0,a,b,d,e,f);i=g;return}function Yk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;sn(c[464]|0,a,b,d,e,f);i=g;return}function Zk(a,b,d){a=+a;b=b|0;d=d|0;var e=0,f=0,g=0,j=0;e=i;i=i+16|0;f=e+8|0;g=e;j=~~a;Bm(f,c[464]|0,j);h[b>>3]=+(c[f>>2]|0);Bm(g,c[464]|0,j);h[d>>3]=+(c[g+4>>2]|0);i=e;return}function _k(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0;d=i;i=i+16|0;e=d;un(e,c[464]|0,c[460]|0);f=+g[(c[464]|0)+(c[460]<<2)+98340>>2];h[a>>3]=f*+(c[e>>2]|0);h[b>>3]=f*+(c[e+4>>2]|0);i=d;return}function $k(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0;e=i;f=c[464]|0;g=c[f+99252>>2]|0;do{if((g|0)<0){j=c[f+367624>>2]|0;if((j|0)==3|(j|0)==1){k=c[f+367588>>2]|0;l=c[f+367584>>2]|0;break}else{k=c[f+367584>>2]|0;l=c[f+367588>>2]|0;break}}else{j=c[f+(g*24|0)+98504>>2]|0;m=c[f+98468>>2]|0;k=b[m+(j*28|0)+20>>1]|0;l=b[m+(j*28|0)+22>>1]|0}}while(0);h[a>>3]=+(k|0);h[d>>3]=+(l|0);i=e;return}function al(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;$n(c[464]|0,a,b,d,e)|0;i=f;return}function bl(a){a=a|0;var b=0,d=0;b=i;d=c[464]|0;if((a|0)<0){ao(d);i=b;return}else{bo(d,a);i=b;return}}function cl(a,b){a=a|0;b=b|0;var d=0;d=i;Pm(c[464]|0,a,b);i=d;return}function dl(a,b,d,e,f){a=+a;b=+b;d=+d;e=+e;f=f|0;var g=0;g=i;Sm(c[464]|0,a,b,d,e,f);i=g;return}function el(){var a=0;a=i;Tm(c[464]|0);i=a;return}function fl(){var a=0,b=0;a=i;b=tn(c[464]|0)|0;i=a;return b|0}function gl(){var a=0,b=0;a=i;b=vn(c[464]|0)|0;i=a;return b|0}function hl(a,b){a=+a;b=b|0;var d=0;d=i;Im(c[464]|0,~~a,(b|0)!=0);i=d;return}function il(){var a=0.0;a=+h[226]- +h[225];return+(a<=0.0?1.0:a)}function jl(){var a=0,b=0;a=i;if((c[634]|0)==0){c[634]=eb()|0}b=eb()|0;i=a;return+(+((b-(c[634]|0)|0)>>>0))}function kl(a){a=a|0;var b=0;b=i;kh(a*1e3|0)|0;i=b;return}function ll(){return}function ml(){var a=0,b=0,d=0,e=0;a=i;b=0;do{d=2104+(b*24|0)|0;e=c[d>>2]|0;if((e|0)!=0){ff(e|0)|0;c[d>>2]=0;d=2112+(b*24|0)|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0}d=2108+(b*24|0)|0;if((c[d>>2]|0)!=0){c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0}b=b+1|0}while((b|0)!=8);i=a;return}function nl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;e=i;i=i+16|0;f=e;if((b|0)>0){g=b+ -1|0;h=0;do{if((h|0)==0){j=5}else{k=d+(h<<2)|0;if((Dt(c[k>>2]|0,32)|0)==0){if((a[2504]|0)==0){if((de(2504)|0)!=0){c[622]=2080;c[2492>>2]=0;c[2496>>2]=0;oc(33,2488,q|0)|0;Lc(2504)}}dk(2488,c[k>>2]|0)|0}else{j=5}}if((j|0)==5){j=0;if((a[2504]|0)==0){if((de(2504)|0)!=0){c[622]=2080;c[2492>>2]=0;c[2496>>2]=0;oc(33,2488,q|0)|0;Lc(2504)}}k=c[d+(h<<2)>>2]|0;l=uu(k|0)|0;if((l|0)==0){m=0;n=2080}else if((l|0)==-1){o=2080;j=10}else{p=_t(l+17&-16)|0;c[p>>2]=0;o=p;j=10}if((j|0)==10){j=0;tu(o|0,k|0,l|0)|0;a[o+l|0]=0;m=l;n=o}l=_t(16)|0;c[l>>2]=0;a[l]=34;a[l+1|0]=0;if((m|0)==0){r=l;s=1;j=16}else{k=m+1|0;if((k|0)!=0&(m+2|0)>>>0>16){p=_t(m+18&-16)|0;a[p]=34;a[p+1|0]=0;if((l|0)==2080|(l|0)==0){t=p}else{au(l);t=p}}else{t=l}tu(t+1|0,n|0,m|0)|0;a[t+k|0]=0;if((m|0)==-1){u=0;v=0;w=2080;x=t}else if((m|0)==-2){y=0;z=2080;A=t;B=-1;j=17}else{r=t;s=k;j=16}}if((j|0)==16){j=0;k=s+17&-16;l=_t(k)|0;c[l>>2]=0;y=k;z=l;A=r;B=s;j=17}if((j|0)==17){j=0;tu(z|0,A|0,B|0)|0;a[z+B|0]=0;u=B;v=y;w=z;x=A}l=u+1|0;if((l|0)!=0&v>>>0<(u+2|0)>>>0){k=_t(u+18&-16)|0;if((u|0)==0){c[k>>2]=0}else{tu(k|0,w|0,u|0)|0;a[k+u|0]=0}if((w|0)==2080|(w|0)==0){C=k}else{au(w);C=k}}else{C=w}a[C+u|0]=34;a[C+l|0]=0;if((l|0)!=0){k=c[2496>>2]|0;p=k+l|0;if((p|0)==0){D=k}else{if((c[2492>>2]|0)>>>0<(p+1|0)>>>0){E=p+17&-16;c[2492>>2]=E;p=_t(E)|0;if((k|0)==0){c[p>>2]=0;F=c[622]|0}else{E=c[622]|0;tu(p|0,E|0,k|0)|0;a[p+k|0]=0;F=E}if((F|0)==2080|(F|0)==0){G=k}else{au(F);G=c[2496>>2]|0}c[622]=p;D=G}else{D=k}}tu((c[622]|0)+D|0,C|0,l|0)|0;k=(c[2496>>2]|0)+l|0;c[2496>>2]=k;a[(c[622]|0)+k|0]=0}if(!((C|0)==2080|(C|0)==0)){au(C)}if(!((x|0)==2080|(x|0)==0)){au(x)}if(!((n|0)==2080|(n|0)==0)){au(n)}}if((h|0)<(g|0)){if((a[2504]|0)==0){if((de(2504)|0)!=0){c[622]=2080;c[2492>>2]=0;c[2496>>2]=0;oc(33,2488,q|0)|0;Lc(2504)}}dk(2488,2088)|0}h=h+1|0}while((h|0)<(b|0))}sj();if((a[2528]|0)==0){if((de(2528)|0)!=0){c[628]=2080;c[2516>>2]=0;c[2520>>2]=0;oc(33,2512,q|0)|0;Lc(2528)}}El(0,0,c[628]|0)|0;c[472]=0;c[470]=0;c[468]=0;ij()|0;c[f+4>>2]=16;b=_t(16)|0;c[f>>2]=b;c[f+8>>2]=11;h=b+0|0;g=2544|0;n=h+11|0;do{a[h]=a[g]|0;h=h+1|0;g=g+1|0}while((h|0)<(n|0));a[b+11|0]=0;g=c[166]|0;a:do{if((g|0)==0){H=b}else{h=g;n=664;while(1){x=n+8|0;C=c[n+4>>2]|0;if((uu(C|0)|0)==11){if((nu(b,C,11)|0)==0){break}}C=c[x>>2]|0;if((C|0)==0){H=b;break a}else{h=C;n=x}}if((h|0)==0){H=b}else{Ek(f);H=c[f>>2]|0}}}while(0);if((H|0)==2080|(H|0)==0){i=e;return 0}au(H);i=e;return 0}function ol(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;f=b+8|0;if((c[f>>2]|0)>(d|0)){i=e;return 1}g=c[b+16>>2]|0;if((g|0)<(d|0)){h=c[b+12>>2]|0;j=ea(((d|0)/(h|0)|0)+1|0,h)|0}else{j=g}c[f>>2]=j;f=j*12|0;g=_t(j>>>0>357913941|f>>>0>4294967291?-1:f+4|0)|0;c[g>>2]=j;f=g+4|0;if((j|0)!=0){g=f+(j*12|0)|0;j=f;do{c[j>>2]=2080;c[j+4>>2]=0;c[j+8>>2]=0;j=j+12|0}while((j|0)!=(g|0))}g=c[b>>2]|0;do{if((g|0)!=0){j=b+4|0;if((c[j>>2]|0)>0){h=g;d=0;do{k=h+(d*12|0)|0;l=c[k>>2]|0;m=f+(d*12|0)|0;n=c[m>>2]|0;do{if((l|0)!=(n|0)){o=h+(d*12|0)+8|0;p=c[o>>2]|0;if((p|0)==0){if((n|0)!=2080){a[n]=0}c[f+(d*12|0)+8>>2]=0;break}q=f+(d*12|0)+4|0;if((c[q>>2]|0)>>>0<(p+1|0)>>>0){r=p+17&-16;c[q>>2]=r;q=_t(r)|0;c[q>>2]=0;if(!((n|0)==2080|(n|0)==0)){au(n)}c[m>>2]=q;s=c[o>>2]|0;t=q;u=c[k>>2]|0}else{s=p;t=n;u=l}c[f+(d*12|0)+8>>2]=s;tu(t|0,u|0,s+1|0)|0}}while(0);d=d+1|0;h=c[b>>2]|0}while((d|0)<(c[j>>2]|0));if((h|0)==0){break}else{v=h}}else{v=g}j=v+ -4|0;d=c[j>>2]|0;if((d|0)!=0){l=v+(d*12|0)|0;while(1){d=l+ -12|0;n=c[d>>2]|0;if(!((n|0)==2080|(n|0)==0)){au(n)}c[d>>2]=2080;c[l+ -4>>2]=0;c[l+ -8>>2]=0;if((d|0)==(v|0)){break}else{l=d}}}au(j)}}while(0);c[b>>2]=f;i=e;return 1}function pl(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;if((b|0)==0){i=d;return}e=a+8|0;if((c[e>>2]|0)==0){i=d;return}f=c[b>>2]|0;g=c[b+4>>2]|0;if((f|0)!=0){c[f+4>>2]=g}if((g|0)!=0){c[g>>2]=f}h=a+4|0;if((c[h>>2]|0)==(b|0)){c[h>>2]=f}if((c[a>>2]|0)==(b|0)){c[a>>2]=g}g=b+144|0;a=c[g>>2]|0;if((a|0)!=0){f=b+152|0;h=b+148|0;j=c[f>>2]|0;k=a;while(1){if((j|0)==0){l=k;m=0}else{a=c[k>>2]|0;n=c[k+4>>2]|0;if((a|0)!=0){c[a+4>>2]=n}if((n|0)!=0){c[n>>2]=a}if((c[h>>2]|0)==(k|0)){c[h>>2]=a}if((c[g>>2]|0)==(k|0)){c[g>>2]=n}$t(k);n=(c[f>>2]|0)+ -1|0;c[f>>2]=n;l=c[g>>2]|0;m=n}if((l|0)==0){break}else{j=m;k=l}}}$t(b);c[e>>2]=(c[e>>2]|0)+ -1;i=d;return}function ql(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;a=i;i=i+1040|0;e=a;f=a+16|0;if(rl(b,f)|0){g=Mb(f|0,d|0)|0;if((g|0)!=0){h=g;i=a;return h|0}c[e>>2]=b;c[e+4>>2]=d;c[e+8>>2]=f;c[e+12>>2]=2648;tg(2600,e|0)|0;h=0;i=a;return h|0}if((Dt(d,119)|0)==0){if((Dt(d,97)|0)==0){c[e>>2]=b;c[e+4>>2]=d;tg(2696,e|0)|0;h=0;i=a;return h|0}}f=Mb(b|0,d|0)|0;if((f|0)!=0){h=f;i=a;return h|0}c[e>>2]=b;c[e+4>>2]=d;tg(2656,e|0)|0;h=0;i=a;return h|0}function rl(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;i=i+1024|0;e=d;f=Mb(b|0,2736)|0;if((f|0)!=0){ff(f|0)|0;Cu(c|0,b|0)|0;g=1;i=d;return g|0}f=Ft(b)|0;h=Gt(f,47)|0;if((h|0)==0){a[e+0|0]=a[2744|0]|0;a[e+1|0]=a[2745|0]|0;a[e+2|0]=a[2746|0]|0;wu(e|0,b|0)|0;Yt(f);b=Ft(e)|0;a[b+1|0]=0;j=b;k=b+2|0}else{a[h]=0;j=f;k=h+1|0}h=lg(j|0)|0;do{if((h|0)!=0){do{f=vc(h|0)|0;if((f|0)==0){l=8;break}m=f+11|0}while((ou(m,k)|0)!=0);if((l|0)==8){we(h|0)|0;break}f=Ft(m)|0;we(h|0)|0;if((f|0)!=0){if((a[j]|0)==46){n=j}else{b=uu(j|0)|0;a[j+b|0]=47;n=j+(b+1)|0}Cu(n|0,f|0)|0;Cu(c|0,j|0)|0;Yt(j);Yt(f);g=1;i=d;return g|0}}}while(0);Yt(j);g=0;i=d;return g|0}function sl(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;d=a+40|0;e=c[d>>2]|0;if((e|0)!=0){au(e);c[d>>2]=0;c[a+48>>2]=0}e=a+44|0;c[e>>2]=0;f=a+4|0;g=c[a>>2]|0;if((c[f>>2]|0)>0){h=g;j=0;while(1){bc(c[h+(j<<2)>>2]|0)|0;k=j+1|0;l=c[a>>2]|0;if((k|0)<(c[f>>2]|0)){h=l;j=k}else{m=l;break}}}else{m=g}if((m|0)!=0){au(m);c[a>>2]=0;c[a+8>>2]=0}c[f>>2]=0;m=c[d>>2]|0;if((m|0)!=0){au(m);c[d>>2]=0;c[a+48>>2]=0}c[e>>2]=0;e=a+20|0;d=c[e>>2]|0;if((d|0)!=0){m=d+ -4|0;g=c[m>>2]|0;if((g|0)!=0){j=d+(g*12|0)|0;while(1){g=j+ -12|0;h=c[g>>2]|0;if(!((h|0)==2080|(h|0)==0)){au(h)}c[g>>2]=2080;c[j+ -4>>2]=0;c[j+ -8>>2]=0;if((g|0)==(d|0)){break}else{j=g}}}au(m);c[e>>2]=0;c[a+28>>2]=0}c[a+24>>2]=0;e=c[a>>2]|0;if((e|0)==0){c[f>>2]=0;i=b;return}au(e);c[a>>2]=0;c[a+8>>2]=0;c[f>>2]=0;i=b;return}function tl(){var a=0;a=i;vu(2104,0,192)|0;oc(34,0,q|0)|0;i=a;return}function ul(a){a=a|0;c[2888>>2]=a;return}function vl(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;e=a+8|0;if((c[e>>2]|0)>(b|0)){i=d;return 1}f=c[a+16>>2]|0;if((f|0)<(b|0)){g=c[a+12>>2]|0;h=ea(((b|0)/(g|0)|0)+1|0,g)|0}else{h=f}c[e>>2]=h;e=h*140|0;f=_t(h>>>0>30678337|e>>>0>4294967291?-1:e+4|0)|0;c[f>>2]=h;e=f+4|0;if((h|0)!=0){f=e+(h*140|0)|0;h=e;do{pm(h);c[h>>2]=11328;g=h+72|0;c[h+96>>2]=0;c[h+100>>2]=0;c[h+92>>2]=0;b=h+108|0;c[g+0>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[b>>2]=512;c[h+104>>2]=128;c[h+116>>2]=0;c[h+120>>2]=0;c[h+112>>2]=0;c[h+128>>2]=512;c[h+124>>2]=128;h=h+140|0}while((h|0)!=(f|0))}f=c[a>>2]|0;do{if((f|0)!=0){h=a+4|0;if((c[h>>2]|0)>0){b=f;g=0;do{wl(e+(g*140|0)|0,b+(g*140|0)|0)|0;j=b+(g*140|0)+132|0;k=c[j+4>>2]|0;l=e+(g*140|0)+132|0;c[l>>2]=c[j>>2];c[l+4>>2]=k;g=g+1|0;b=c[a>>2]|0}while((g|0)<(c[h>>2]|0));if((b|0)==0){break}else{m=b}}else{m=f}h=m+ -4|0;g=c[h>>2]|0;if((g|0)!=0){k=m+(g*140|0)|0;do{k=k+ -140|0;zl(k)}while((k|0)!=(m|0))}au(h)}}while(0);c[a>>2]=e;i=d;return 1}function wl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;xl(b,d)|0;f=b+72|0;g=d+72|0;c[f+0>>2]=c[g+0>>2];c[f+4>>2]=c[g+4>>2];c[f+8>>2]=c[g+8>>2];c[f+12>>2]=c[g+12>>2];c[f+16>>2]=c[g+16>>2];g=c[d+100>>2]|0;if((g|0)<0){h=0;j=0}else{if((g|0)>512){k=(((g|0)/128|0)<<7)+128|0}else{k=512}h=_t(k>>>0>536870911?-1:k<<3)|0;j=k}k=c[d+96>>2]|0;if((k|0)>0){g=c[d+92>>2]|0;f=0;do{l=g+(f<<3)|0;m=c[l+4>>2]|0;n=h+(f<<3)|0;c[n>>2]=c[l>>2];c[n+4>>2]=m;f=f+1|0}while((f|0)!=(k|0))}f=c[d+108>>2]|0;g=c[d+104>>2]|0;m=b+92|0;n=c[m>>2]|0;c[m>>2]=h;c[b+96>>2]=k;c[b+100>>2]=j;c[b+104>>2]=g;c[b+108>>2]=f;if((n|0)!=0){au(n)}n=c[d+120>>2]|0;if((n|0)<0){o=0;p=0}else{if((n|0)>512){q=(((n|0)/128|0)<<7)+128|0}else{q=512}o=_t((q|0)>-1?q:-1)|0;p=q}q=c[d+116>>2]|0;if((q|0)>0){n=c[d+112>>2]|0;f=0;do{a[o+f|0]=a[n+f|0]|0;f=f+1|0}while((f|0)!=(q|0))}f=c[d+128>>2]|0;n=c[d+124>>2]|0;d=b+112|0;g=c[d>>2]|0;c[d>>2]=o;c[b+116>>2]=q;c[b+120>>2]=p;c[b+124>>2]=n;c[b+128>>2]=f;if((g|0)==0){i=e;return b|0}au(g);i=e;return b|0}function xl(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;d=i;i=i+32|0;e=d;c[e>>2]=0;f=e+4|0;c[f>>2]=0;g=e+8|0;c[g>>2]=0;h=e+16|0;c[h>>2]=512;j=e+12|0;c[j>>2]=128;yl(e,c[b+12>>2]|0)|0;k=c[b+8>>2]|0;c[f>>2]=k;if((k|0)>0){l=b+4|0;m=c[e>>2]|0;n=0;while(1){um(m+(n*56|0)|0,(c[l>>2]|0)+(n*56|0)|0)|0;o=n+1|0;if((o|0)<(k|0)){n=o}else{p=m;break}}}else{p=c[e>>2]|0}m=c[b+20>>2]|0;n=c[b+16>>2]|0;l=a+4|0;o=c[l>>2]|0;c[l>>2]=p;c[e>>2]=o;p=a+8|0;l=c[p>>2]|0;c[p>>2]=k;c[f>>2]=l;l=a+12|0;k=c[l>>2]|0;c[l>>2]=c[g>>2];c[g>>2]=k;k=a+16|0;l=c[k>>2]|0;c[k>>2]=n;c[j>>2]=l;l=a+20|0;j=c[l>>2]|0;c[l>>2]=m;c[h>>2]=j;if((o|0)!=0){j=o+ -4|0;h=c[j>>2]|0;if((h|0)!=0){m=o+(h*56|0)|0;do{m=m+ -56|0;tm(m)}while((m|0)!=(o|0))}au(j);c[e>>2]=0;c[g>>2]=0}c[f>>2]=0;f=c[b+32>>2]|0;if((f|0)<0){q=0;r=0}else{if((f|0)>512){s=(((f|0)/128|0)<<7)+128|0}else{s=512}q=_t(s>>>0>46684427?-1:s*92|0)|0;r=s}s=c[b+28>>2]|0;if((s|0)>0){f=c[b+24>>2]|0;g=0;do{e=q+(g*92|0)+0|0;j=f+(g*92|0)+0|0;o=e+92|0;do{c[e>>2]=c[j>>2];e=e+4|0;j=j+4|0}while((e|0)<(o|0));g=g+1|0}while((g|0)!=(s|0))}g=c[b+40>>2]|0;f=c[b+36>>2]|0;j=a+24|0;e=c[j>>2]|0;c[j>>2]=q;c[a+28>>2]=s;c[a+32>>2]=r;c[a+36>>2]=f;c[a+40>>2]=g;if((e|0)!=0){au(e)}e=c[b+52>>2]|0;if((e|0)<0){t=0;u=0}else{if((e|0)>512){v=(((e|0)/128|0)<<7)+128|0}else{v=512}t=_t(v>>>0>1073741823?-1:v<<2)|0;u=v}v=c[b+48>>2]|0;if((v|0)>0){e=c[b+44>>2]|0;g=0;do{c[t+(g<<2)>>2]=c[e+(g<<2)>>2];g=g+1|0}while((g|0)!=(v|0))}g=c[b+60>>2]|0;e=c[b+56>>2]|0;f=a+44|0;r=c[f>>2]|0;c[f>>2]=t;c[a+48>>2]=v;c[a+52>>2]=u;c[a+56>>2]=e;c[a+60>>2]=g;if((r|0)==0){w=a+64|0;x=b+64|0;y=x;z=y;A=c[z>>2]|0;B=y+4|0;C=B;D=c[C>>2]|0;E=w;F=E;c[F>>2]=A;G=E+4|0;H=G;c[H>>2]=D;i=d;return a|0}au(r);w=a+64|0;x=b+64|0;y=x;z=y;A=c[z>>2]|0;B=y+4|0;C=B;D=c[C>>2]|0;E=w;F=E;c[F>>2]=A;G=E+4|0;H=G;c[H>>2]=D;i=d;return a|0}function yl(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=a+8|0;if((c[e>>2]|0)>(b|0)){i=d;return 1}f=c[a+16>>2]|0;if((f|0)<(b|0)){g=c[a+12>>2]|0;h=ea(((b|0)/(g|0)|0)+1|0,g)|0}else{h=f}c[e>>2]=h;e=h*56|0;f=_t(h>>>0>76695844|e>>>0>4294967291?-1:e+4|0)|0;c[f>>2]=h;e=f+4|0;if((h|0)!=0){f=e+(h*56|0)|0;h=e;do{sm(h);h=h+56|0}while((h|0)!=(f|0))}f=c[a>>2]|0;do{if((f|0)!=0){h=a+4|0;if((c[h>>2]|0)>0){g=f;b=0;do{um(e+(b*56|0)|0,g+(b*56|0)|0)|0;b=b+1|0;g=c[a>>2]|0}while((b|0)<(c[h>>2]|0));if((g|0)==0){break}else{j=g}}else{j=f}h=j+ -4|0;b=c[h>>2]|0;if((b|0)!=0){k=j+(b*56|0)|0;do{k=k+ -56|0;tm(k)}while((k|0)!=(j|0))}au(h)}}while(0);c[a>>2]=e;i=d;return 1}function zl(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;c[a>>2]=11328;En(a,1);d=a+112|0;e=c[d>>2]|0;if((e|0)!=0){au(e);c[d>>2]=0;c[a+120>>2]=0}c[a+116>>2]=0;d=a+92|0;e=c[d>>2]|0;if((e|0)==0){f=a+96|0;c[f>>2]=0;qm(a);i=b;return}au(e);c[d>>2]=0;c[a+100>>2]=0;f=a+96|0;c[f>>2]=0;qm(a);i=b;return}function Al(){var a=0,b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;a=i;b=c[4948>>2]|0;d=c[4952>>2]|0;e=(c[4956>>2]|0)+1|0;c[4956>>2]=e;f=b;b=e+d|0;d=3924|0;e=4436|0;g=2900|0;while(1){h=c[d>>2]|0;j=(c[e>>2]|0)+(f<<13^f)|0;k=j+b+(c[(h&1020)+3924>>2]|0)|0;l=d+4|0;c[d>>2]=k;m=(c[(k>>>8&1020)+3924>>2]|0)+h|0;c[g>>2]=m;h=c[l>>2]|0;k=(c[e+4>>2]|0)+(j>>>6^j)|0;j=k+m+(c[(h&1020)+3924>>2]|0)|0;m=d+8|0;c[l>>2]=j;l=(c[(j>>>8&1020)+3924>>2]|0)+h|0;c[g+4>>2]=l;h=c[m>>2]|0;j=(c[e+8>>2]|0)+(k<<2^k)|0;k=j+l+(c[(h&1020)+3924>>2]|0)|0;l=d+12|0;c[m>>2]=k;m=(c[(k>>>8&1020)+3924>>2]|0)+h|0;c[g+8>>2]=m;h=c[l>>2]|0;k=(c[e+12>>2]|0)+(j>>>16^j)|0;j=k+m+(c[(h&1020)+3924>>2]|0)|0;m=d+16|0;c[l>>2]=j;l=(c[(j>>>8&1020)+3924>>2]|0)+h|0;c[g+12>>2]=l;if(m>>>0<(4436|0)>>>0){f=k;b=l;d=m;e=e+16|0;g=g+16|0}else{n=k;o=l;p=4436|0;q=3924|0;r=3412|0;break}}while(1){g=c[p>>2]|0;e=(c[q>>2]|0)+(n<<13^n)|0;d=e+o+(c[(g&1020)+3924>>2]|0)|0;b=p+4|0;c[p>>2]=d;f=(c[(d>>>8&1020)+3924>>2]|0)+g|0;c[r>>2]=f;g=c[b>>2]|0;d=(c[q+4>>2]|0)+(e>>>6^e)|0;e=d+f+(c[(g&1020)+3924>>2]|0)|0;f=p+8|0;c[b>>2]=e;b=(c[(e>>>8&1020)+3924>>2]|0)+g|0;c[r+4>>2]=b;g=c[f>>2]|0;e=(c[q+8>>2]|0)+(d<<2^d)|0;d=e+b+(c[(g&1020)+3924>>2]|0)|0;b=p+12|0;c[f>>2]=d;f=(c[(d>>>8&1020)+3924>>2]|0)+g|0;c[r+8>>2]=f;g=c[b>>2]|0;d=q+16|0;s=(c[q+12>>2]|0)+(e>>>16^e)|0;e=s+f+(c[(g&1020)+3924>>2]|0)|0;c[b>>2]=e;t=(c[(e>>>8&1020)+3924>>2]|0)+g|0;c[r+12>>2]=t;if(d>>>0<(4436|0)>>>0){n=s;o=t;p=p+16|0;q=d;r=r+16|0}else{break}}c[4952>>2]=t;c[4948>>2]=s;i=a;return c[2900>>2]|0}function Bl(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;b=i;vu(2896,0,2064)|0;d=-1640531527;e=-1640531527;f=-1640531527;g=-1640531527;h=-1640531527;j=-1640531527;k=-1640531527;l=-1640531527;m=0;do{n=d+a^e<<11;o=n+g|0;p=f+e^f>>>2;q=h+p|0;r=o+f^o<<8;s=r+j|0;g=o+q^q>>>16;o=g+k|0;h=s+q^s<<10;q=h+l|0;j=s+o^o>>>4;s=j+n|0;k=q+o^q<<8;e=k+p|0;l=q+s^s>>>9;f=l+r|0;d=e+s|0;c[3924+(m<<2)>>2]=d;c[3924+((m|1)<<2)>>2]=e;c[3924+((m|2)<<2)>>2]=f;c[3924+((m|3)<<2)>>2]=g;c[3924+((m|4)<<2)>>2]=h;c[3924+((m|5)<<2)>>2]=j;c[3924+((m|6)<<2)>>2]=k;c[3924+((m|7)<<2)>>2]=l;m=m+8|0}while(m>>>0<256);m=d^e<<11;d=m+g|0;g=f+e^f>>>2;e=h+g|0;h=d+f^d<<8;f=h+j|0;j=d+e^e>>>16;d=j+k|0;k=f+e^f<<10;e=k+l|0;l=f+d^d>>>4;f=l+m|0;m=e+d^e<<8;d=m+g|0;g=e+f^f>>>9;e=g+h|0;h=d+f^d<<11;f=h+j|0;j=e+d^e>>>2;d=k+j|0;k=f+e^f<<8;e=k+l|0;l=f+d^d>>>16;f=l+m|0;m=e+d^e<<10;d=m+g|0;g=e+f^f>>>4;e=g+h|0;h=d+f^d<<8;f=h+j|0;j=d+e^e>>>9;d=j+k|0;k=f+e^f<<11;e=k+l|0;l=d+f^d>>>2;f=m+l|0;m=e+d^e<<8;d=m+g|0;g=e+f^f>>>16;e=g+h|0;h=d+f^d<<10;f=h+j|0;j=d+e^e>>>4;d=j+k|0;k=f+e^f<<8;e=k+l|0;l=f+d^d>>>9;f=l+m|0;m=e+d^e<<11;d=m+g|0;g=f+e^f>>>2;e=h+g|0;h=d+f^d<<8;f=h+j|0;j=d+e^e>>>16;d=j+k|0;k=f+e^f<<10;e=k+l|0;l=f+d^d>>>4;f=l+m|0;m=e+d^e<<8;d=m+g|0;g=e+f^f>>>9;e=d+f|0;f=d;d=g+h|0;h=j;j=k;k=l;l=m;m=g;g=0;while(1){a=g|1;s=(c[2900+(a<<2)>>2]|0)+f|0;r=g|2;q=(c[2900+(r<<2)>>2]|0)+d|0;p=g|3;o=g|4;n=g|5;t=g|6;u=g|7;v=s<<11^(c[2900+(g<<2)>>2]|0)+e;w=(c[2900+(p<<2)>>2]|0)+h+v|0;x=q+s^q>>>2;s=(c[2900+(o<<2)>>2]|0)+j+x|0;y=w+q^w<<8;q=(c[2900+(n<<2)>>2]|0)+k+y|0;z=s+w^s>>>16;w=(c[2900+(t<<2)>>2]|0)+l+z|0;A=q+s^q<<10;s=(c[2900+(u<<2)>>2]|0)+m+A|0;B=w+q^w>>>4;q=B+v|0;v=s+w^s<<8;w=v+x|0;x=q+s^q>>>9;s=x+y|0;y=w+q|0;c[3924+(g<<2)>>2]=y;c[3924+(a<<2)>>2]=w;c[3924+(r<<2)>>2]=s;c[3924+(p<<2)>>2]=z;c[3924+(o<<2)>>2]=A;c[3924+(n<<2)>>2]=B;c[3924+(t<<2)>>2]=v;c[3924+(u<<2)>>2]=x;u=g+8|0;if(u>>>0<256){e=y;f=w;d=s;h=z;j=A;k=B;l=v;m=x;g=u}else{C=y;D=w;E=s;F=z;G=A;H=B;I=v;J=x;K=0;break}}do{g=3924+(K<<2)|0;m=3924+((K|1)<<2)|0;l=(c[m>>2]|0)+D|0;k=3924+((K|2)<<2)|0;j=(c[k>>2]|0)+E|0;h=3924+((K|3)<<2)|0;d=3924+((K|4)<<2)|0;f=3924+((K|5)<<2)|0;e=3924+((K|6)<<2)|0;x=3924+((K|7)<<2)|0;v=l<<11^(c[g>>2]|0)+C;B=(c[h>>2]|0)+F+v|0;A=j+l^j>>>2;l=(c[d>>2]|0)+G+A|0;z=B+j^B<<8;j=(c[f>>2]|0)+H+z|0;F=l+B^l>>>16;B=(c[e>>2]|0)+I+F|0;G=j+l^j<<10;l=(c[x>>2]|0)+J+G|0;H=B+j^B>>>4;j=H+v|0;I=l+B^l<<8;D=I+A|0;J=j+l^j>>>9;E=J+z|0;C=D+j|0;c[g>>2]=C;c[m>>2]=D;c[k>>2]=E;c[h>>2]=F;c[d>>2]=G;c[f>>2]=H;c[e>>2]=I;c[x>>2]=J;K=K+8|0}while(K>>>0<256);Al()|0;c[724]=256;i=b;return}function Cl(a){a=a|0;var b=0;b=i;kh(a*1e3|0)|0;i=b;return}function Dl(){var b=0,d=0,e=0,f=0,g=0;b=i;i=i+16|0;d=b;if((c[1266]|0)==0){c[1266]=1;fk(d,5072);Qj(d)|0;ik(d)}if((c[464]|0)==0){i=b;return}Xa(5376)|0;h[660]=-1.0;if((c[1318]|0)!=0){mg()|0;qh(c[1318]|0)}c[1318]=0;ml();d=c[462]|0;if((d|0)!=0){Tl(d);$t(d)}c[462]=0;co();co();co();co();co();co();co();co();co();co();co();co();co();co();co();co();Qg(0)|0;d=c[1240]|0;if((d|0)!=0){_l(d);$t(d)}c[1240]=0;d=c[1244]|0;if((d|0)!=0){e=d+ -4|0;f=c[e>>2]|0;if((f|0)!=0){g=d+(f<<2)|0;do{g=g+ -4|0;lm(g)}while((g|0)!=(d|0))}au(e)}c[1244]=0;e=c[1242]|0;if((e|0)!=0){jm(e);$t(e)}c[1242]=0;e=c[464]|0;if((e|0)!=0){Jh[c[(c[e>>2]|0)+4>>2]&127](e)}c[464]=0;e=c[466]|0;if((e|0)!=0){Jh[c[(c[e>>2]|0)+4>>2]&127](e)}c[466]=0;e=c[428]|0;if((e|0)!=0){a[e]=1;d=e+2052|0;g=c[d>>2]|0;if((g|0)==0){f=e+1025|0;if((a[f]|0)!=0){Og(f|0)|0}}else{au(g);c[d>>2]=0}d=e+2056|0;g=c[d>>2]|0;if((g|0)!=0){f=g;do{c[d>>2]=c[f+268>>2];$t(f);f=c[d>>2]|0}while((f|0)!=0)}$t(e)}c[428]=0;e=c[426]|0;if((e|0)!=0){a[e]=1;f=e+2052|0;d=c[f>>2]|0;if((d|0)==0){g=e+1025|0;if((a[g]|0)!=0){Og(g|0)|0}}else{au(d);c[f>>2]=0}f=e+2056|0;d=c[f>>2]|0;if((d|0)!=0){g=d;do{c[f>>2]=c[g+268>>2];$t(g);g=c[f>>2]|0}while((g|0)!=0)}$t(e)}c[426]=0;Xa(5392)|0;i=b;return}function El(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0,D=0,E=0;d=i;i=i+160|0;f=d+8|0;g=d+56|0;j=d+48|0;k=d+148|0;l=d+32|0;m=d+24|0;n=d+40|0;o=d;p=d+104|0;r=d+116|0;s=d+120|0;t=d+132|0;u=d+136|0;if((_e(561)|0)==0){c[f>>2]=je()|0;tg(5088,f|0)|0}c[458]=1;ck();oc(3)|0;Xa(5416)|0;Xa(5424)|0;v=Zt(367664)|0;wm(v);c[464]=v;Xa(5432)|0;if(!(Hm(c[464]|0,b,c[430]|0,c[432]|0,0,c[442]|0,c[438]|0,(c[446]|0)!=0)|0)){i=d;return 0}Xa(5448)|0;if((a[5024]|0)==0){if((de(5024)|0)!=0){ek(5008);oc(33,5008,q|0)|0;Lc(5024)}}c[j>>2]=e;c[f+0>>2]=c[j+0>>2];gk(g,f);j=c[g>>2]|0;c[g>>2]=c[1252];c[1252]=j;j=g+8|0;b=c[j>>2]|0;c[j>>2]=c[5016>>2];c[5016>>2]=b;b=g+4|0;j=c[b>>2]|0;c[b>>2]=c[5012>>2];c[5012>>2]=j;ik(g);Bl(~~+sk());Xa(5456)|0;j=Zt(80)|0;Sl(j);c[462]=j;j=Zt(25648)|0;Fn(j,c[464]|0);c[466]=j;Xa(5464)|0;j=Zt(748)|0;Yl(j);c[1240]=j;Xa(5472)|0;j=c[464]|0;if((c[446]|0)==0){Lm(j)|0}else{Mm(j)|0}Xa(5488)|0;$l(c[1240]|0,0,0,(c[444]|0)!=0)|0;yf(e|0,5112);if((c[444]|0)!=0){Xa(5504)|0;Qg(1)|0}a[(c[1240]|0)+84|0]=(c[(c[464]|0)+367620>>2]|0)!=0|0;c[460]=0;ek(k);Xa(5664)|0;e=Uj(k,1024)|0;a[e]=0;Gl(e);j=uu(e|0)|0;a:do{if((j|0)>-1){b=j;while(1){w=e+b|0;v=a[w]|0;if(v<<24>>24==92|v<<24>>24==47){break}if((b|0)>0){b=b+ -1|0}else{break a}}a[w]=0}}while(0);Vj(k);Xa(5672)|0;$c(c[k>>2]|0)|0;c[f>>2]=c[k>>2];tg(5120,f|0)|0;w=Zt(2060)|0;c[w+2052>>2]=0;a[w+1|0]=0;a[w+1025|0]=0;c[w+2056>>2]=0;a[w]=1;c[428]=w;w=Zt(2060)|0;c[w+2052>>2]=0;a[w+1|0]=0;a[w+1025|0]=0;c[w+2056>>2]=0;a[w]=1;c[426]=w;Xa(5680)|0;Gl(Uj(k,1024)|0);Vj(k);uk(k,k);Xa(5696)|0;x=+jl();h[226]=x;h[225]=x;h[224]=x;Xa(5712)|0;Lk(0);Xa(5728)|0;Gm(c[464]|0,0)|0;Xa(5736)|0;Km(c[464]|0);yn(c[464]|0,0);$k(l,m);_k(n,o);if((c[1250]|0)!=0){x=.009999999776482582;w=0;while(1){if(x<1.0){y=x}else{y=2.1-x}Mk(y);if(x>=1.0&(w|0)==0){Mk(0.0);z=1}else{z=w}fk(p,5144);A=+h[l>>3];c[r>>2]=5144;B=+(pk(r)|0);Nk(p,(A-B*+h[n>>3])*.5,(+h[m>>3]- +h[o>>3])*.5,0);ik(p);fk(s,5160);B=+h[l>>3];c[t>>2]=5160;A=+(pk(t)|0);Nk(s,(B-A*+h[n>>3])*.5,+h[m>>3]- +h[o>>3],0);ik(s);kl(20);if((z|0)==1){kl(500);C=2}else{C=z}x=x+.039000000804662704;if(!(x<=2.0)){break}else{w=C}}Mk(0.0);Lk(0)}Xa(5744)|0;C=g+48|0;w=g;do{ek(w);w=w+12|0}while((w|0)!=(C|0));fk(f,5176);w=c[f>>2]|0;c[f>>2]=c[g>>2];c[g>>2]=w;w=f+8|0;z=g+8|0;s=c[w>>2]|0;c[w>>2]=c[z>>2];c[z>>2]=s;s=f+4|0;z=g+4|0;w=c[s>>2]|0;c[s>>2]=c[z>>2];c[z>>2]=w;ik(f);fk(f,5200);w=g+12|0;z=c[f>>2]|0;c[f>>2]=c[w>>2];c[w>>2]=z;z=f+8|0;w=g+20|0;s=c[z>>2]|0;c[z>>2]=c[w>>2];c[w>>2]=s;s=f+4|0;w=g+16|0;z=c[s>>2]|0;c[s>>2]=c[w>>2];c[w>>2]=z;ik(f);fk(f,5224);z=g+24|0;w=c[f>>2]|0;c[f>>2]=c[z>>2];c[z>>2]=w;w=f+8|0;z=g+32|0;s=c[w>>2]|0;c[w>>2]=c[z>>2];c[z>>2]=s;s=f+4|0;z=g+28|0;w=c[s>>2]|0;c[s>>2]=c[z>>2];c[z>>2]=w;ik(f);fk(f,5240);w=g+36|0;z=c[f>>2]|0;c[f>>2]=c[w>>2];c[w>>2]=z;z=f+8|0;w=g+44|0;s=c[z>>2]|0;c[z>>2]=c[w>>2];c[w>>2]=s;s=f+4|0;w=g+40|0;z=c[s>>2]|0;c[s>>2]=c[w>>2];c[w>>2]=z;ik(f);f=0;do{D=g+(f*12|0)|0;f=f+1|0;if((Sj(D)|0)!=0){E=31;break}}while((f|0)<3);if((E|0)==31){fk(u,c[D>>2]|0);Uk(u,0);ik(u)}Tk(0,1.0);c[456]=0;x=+jl();h[226]=x;h[225]=x;h[224]=x;a[(c[1240]|0)+85|0]=1;bk();u=Zt(4)|0;im(u);c[1242]=u;u=_t(16388)|0;c[u>>2]=4096;D=u+4|0;E=u+16388|0;u=D;do{km(u);u=u+4|0}while((u|0)!=(E|0));c[1244]=D;Xa(5760)|0;D=C;do{D=D+ -12|0;ik(D)}while((D|0)!=(g|0));ik(k);i=d;return 0}function Fl(){var b=0,d=0,e=0;b=i;i=i+16|0;d=b;e=b+4|0;if((a[5320]|0)!=0){i=b;return}a[5320]=1;if((c[440]|0)!=0){Xa(5560)|0;c[d>>2]=c[470];tg(5328,d|0)|0;c[d>>2]=(c[472]|0)+ -1;tg(5328,d|0)|0;c[d>>2]=c[468];tg(5328,d|0)|0;c[d>>2]=c[1246];tg(5328,d|0)|0}b=c[470]|0;if((b|0)!=0){c[d>>2]=b;tg(5336,d|0)|0}Dl();zb();Bd(c[s>>2]|0)|0;Xa(5520)|0;fk(e,5112);Ek(e);ik(e);Xa(5528)|0;xe()}function Gl(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;i=i+1104|0;e=d;f=d+72|0;g=d+8|0;a[b]=0;h=Nb()|0;j=g+0|0;k=j+64|0;do{a[j]=0;j=j+1|0}while((j|0)<(k|0));a[g]=47;a[g+1|0]=112;a[g+2|0]=114;a[g+3|0]=111;a[g+4|0]=99;a[g+5|0]=47;c[e>>2]=h;lb(g|0,5352,e|0)|0;e=gd(g|0,f|0,512)|0;if(!((e|0)==-1)){a[f+e|0]=0;Cu(b|0,f|0)|0;i=d;return}e=ef(5312)|0;if((e|0)!=0){if((zd(e|0,f|0)|0)!=0){if((a[e]|0)!=0){Cu(b|0,f|0)|0;i=d;return}}}a[b+0|0]=a[5368|0]|0;a[b+1|0]=a[5369|0]|0;a[b+2|0]=a[5370|0]|0;i=d;return}function Hl(){return}function Il(b){b=b|0;var d=0,f=0,g=0,h=0,j=0;d=i;f=(c[1316]|0)+1|0;c[1316]=f;if(f>>>0>128){c[1316]=0;cm(c[1240]|0)}f=c[1240]|0;fd();g=fc(0)|0;if((g|0)==0){h=0;j=h&1;i=d;return j|0}h=(a[g+(e[f+((b&255)<<1)+96>>1]|0)|0]|0)==1;j=h&1;i=d;return j|0}function Jl(){var a=0,b=0.0,d=0.0,e=0.0,f=0,g=0.0;a=i;if((c[1264]|0)==0){i=a;return}if(+h[662]==0.0){h[662]=+jl()+3.0e5;h[663]=+jl()}b=+jl();d=(+h[662]-b)/3.0e5;e=+yk(d*3.0e5/6.0e4*4.0*360.0);if(!(e<0.0)){i=a;return}f=~~((b- +h[663])/10.0);c[1322]=(f|0)>100?100:f;Km(c[464]|0);zn(c[464]|0,c[1322]|0,e);if(d<0.0){Mk(0.0);Yk(0,84,64,8,16777215);Yk(1,85,62,6,255);Gm(c[464]|0,c[1314]|0)|0;kl(1e3);Fl()}Mk(e);Yk(0,84,64,8,0);e=d*512.0;b=256.0-e;g=b<0.0?0.0:b;b=e<0.0?0.0:e;Yk(0,84,~~(d*64.0+1.0),8,(g>255.0?255:~~g&255)|(b>255.0?65280:~~b<<8&65280));Xk(0,84,64,84,16777215);Xk(0,84,0,92,16777215);Xk(0,92,64,92,16777215);Xk(64,84,64,92,16777215);Mk(0.0);i=a;return}function Kl(){var b=0,d=0,f=0,g=0,j=0,k=0;b=i;i=i+16|0;d=b;if((a[5032]|0)!=0){if((c[1262]&1|0)==0){c[1264]=1}}if((a[5040]|0)!=0){if((c[1262]&2|0)==0){c[1264]=1}}Jl();h[225]=+h[226];h[226]=+jl();if((c[456]|0)!=0){do{Ll()}while((c[456]|0)!=0)}c[1316]=0;cm(c[1240]|0);f=c[1240]|0;g=f+24|0;if((c[g>>2]|0)>0){j=0;do{em(f,d,1);j=j+1|0}while((j|0)<(c[g>>2]|0))}do{if((c[454]|0)==0){k=16}else{g=c[1240]|0;fd();j=fc(0)|0;if((j|0)!=0){if((a[j+(e[g+354>>1]|0)|0]|0)==1){break}}g=c[1240]|0;fd();j=fc(0)|0;if((j|0)==0){k=16}else{if((a[j+(e[g+98>>1]|0)|0]|0)!=1){k=16}}}}while(0);do{if((k|0)==16){g=c[1240]|0;fd();j=fc(0)|0;if((j|0)!=0){if((a[j+(e[g+208>>1]|0)|0]|0)==1){g=c[1240]|0;fd();j=fc(0)|0;if((j|0)!=0){if((a[j+(e[g+220>>1]|0)|0]|0)==1){break}}}}In(c[466]|0,0);zm(c[464]|0,c[1314]|0)|0;if((Gm(c[464]|0,c[1314]|0)|0)!=0){i=b;return}}}while(0);Xj(0)|0;Fl();i=b;return}function Ll(){var b=0,d=0,f=0,g=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0,J=0;b=i;i=i+176|0;d=b+96|0;f=b;g=b+8|0;h=b+88|0;Pl(d,f,g,h);j=+(c[d>>2]|0);k=+(c[f>>2]|0);l=+(c[g>>2]|0);m=+(c[h>>2]|0);n=d+4|0;o=d+4|0;p=d+4|0;q=d+4|0;r=d+8|0;s=d+8|0;t=g+32|0;u=g+32|0;v=0;a:while(1){if((zm(c[464]|0,c[1314]|0)|0)==0){Xa(5640)|0;Fl()}if((c[456]|0)!=0){w=5;break}c[1316]=0;cm(c[1240]|0);x=c[1240]|0;y=x+24|0;if((c[y>>2]|0)>0){z=0;do{em(x,d,1);z=z+1|0}while((z|0)<(c[y>>2]|0))}do{if((c[454]|0)==0){A=0}else{y=c[1240]|0;fd();z=fc(0)|0;if((z|0)==0){w=15}else{if((a[z+(e[y+354>>1]|0)|0]|0)!=1){w=15}}if((w|0)==15){w=0;y=c[1240]|0;fd();z=fc(0)|0;if((z|0)==0){A=0;break}if((a[z+(e[y+98>>1]|0)|0]|0)!=1){A=0;break}}Fl();A=0}}while(0);do{y=(c[1316]|0)+1|0;c[1316]=y;if(y>>>0>128){c[1316]=0;cm(c[1240]|0)}y=c[1240]|0;fd();z=fc(0)|0;if((z|0)!=0){if((a[z+(e[y+(A<<1)+96>>1]|0)|0]|0)==1){w=46;break a}}A=A+1|0}while((A|0)<255);Pl(d,f,g,h);if(+(c[d>>2]|0)!=j|+(c[f>>2]|0)!=k|+(c[g>>2]|0)!=l|+(c[h>>2]|0)!=m){w=46;break}y=bm(c[1240]|0)|0;while(1){z=y+ -1|0;if((y|0)>0){B=0}else{break}do{fm(c[1240]|0,d,z)|0;if((a[d+B+48|0]|0)!=0){w=46;break a}B=B+1|0}while((B|0)<32);fm(c[1240]|0,d,z)|0;xn(c[464]|0,c[d>>2]|0,c[n>>2]|0,d,n);C=+(c[d>>2]|0)/32767.0;D=C>1.0?1.0:C;fm(c[1240]|0,d,z)|0;xn(c[464]|0,c[d>>2]|0,c[o>>2]|0,d,o);C=+(c[d>>2]|0)/32767.0;E=C>1.0?1.0:C;C=E<-1.0?-1.0:E;if(D<-1.0|D<0.0){F=-C}else{F=C}if(F>.1){w=46;break a}fm(c[1240]|0,d,z)|0;xn(c[464]|0,c[d>>2]|0,c[p>>2]|0,d,p);C=+(c[p>>2]|0)/32767.0;D=C>1.0?1.0:C;fm(c[1240]|0,d,z)|0;xn(c[464]|0,c[d>>2]|0,c[q>>2]|0,d,q);C=+(c[q>>2]|0)/32767.0;E=C>1.0?1.0:C;C=E<-1.0?-1.0:E;if(D<-1.0|D<0.0){G=-C}else{G=C}if(G>.1){w=46;break a}fm(c[1240]|0,d,z)|0;C=+(c[r>>2]|0)/32767.0;D=C>1.0?1.0:C;fm(c[1240]|0,d,z)|0;C=+(c[s>>2]|0)/32767.0;E=C>1.0?1.0:C;C=E<-1.0?-1.0:E;if(D<-1.0|D<0.0){H=-C}else{H=C}if(H>.1){w=46;break a}c[d>>2]=0;c[f>>2]=0;fm(c[1240]|0,g,z)|0;x=c[t>>2]|0;if((x|0)==27e3|(x|0)==22500|(x|0)==31500){c[d>>2]=-1;I=-1}else if((x|0)==13500|(x|0)==9e3|(x|0)==4500){c[d>>2]=1;I=1}else{I=0}on(c[464]|0,I,0,d,f);if((c[d>>2]|0)!=0){w=46;break a}c[d>>2]=0;c[f>>2]=0;fm(c[1240]|0,g,z)|0;x=c[u>>2]|0;if((x|0)==0|(x|0)==4500|(x|0)==31500){c[f>>2]=-1;J=-1}else if((x|0)==18e3|(x|0)==22500|(x|0)==13500){c[f>>2]=1;J=1}else{J=0}on(c[464]|0,0,J,d,f);if((c[f>>2]|0)==0){y=z}else{w=46;break a}}kl(5);y=v+1|0;if((y|0)<15){v=y}else{w=46;break}}if((w|0)==5){Xa(5576)|0;if((c[456]|0)!=0&(c[1248]|0)==0){do{if((zm(c[464]|0,c[1314]|0)|0)==0){Xa(5640)|0;Xj(0)|0;Fl()}kl(500)}while((c[456]|0)!=0&(c[1248]|0)==0)}Xa(5616)|0;i=b;return}else if((w|0)==46){i=b;return}}function Ml(){var a=0;a=i;Em(c[464]|0);Um(c[464]|0,1.0);Pk(c[464]|0,-1.0);Km(c[464]|0);ul(0);Kn(c[466]|0,-1);i=a;return}function Nl(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0;f=i;i=i+16|0;g=f+12|0;j=f;k=f+4|0;l=f+8|0;Pl(g,j,k,l);h[a>>3]=+(c[g>>2]|0);h[b>>3]=+(c[j>>2]|0);h[d>>3]=+(c[k>>2]|0);h[e>>3]=+(c[l>>2]|0);i=f;return}function Ol(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;if(b<<24>>24==0){i=d;return}else if(b<<24>>24==13){e=10}else{f=2}if((f|0)==2){if((b+ -1<<24>>24&255)>30|(b+ -8<<24>>24&255)<3){e=b}else{i=d;return}}b=c[1240]|0;f=b+4|0;g=c[f>>2]|0;if((g|0)>=16){i=d;return}h=b+8|0;j=c[h>>2]|0;if((j|0)>(g|0)){k=g}else{l=g+1|0;if((j|0)>(l|0)){k=g}else{g=c[b+16>>2]|0;if((g|0)<(l|0)){j=c[b+12>>2]|0;m=ea(((l|0)/(j|0)|0)+1|0,j)|0}else{m=g}c[h>>2]=m;g=_t((m|0)>-1?m:-1)|0;m=c[b>>2]|0;j=(m|0)==0;if((g|0)==0){if(!j){au(m);c[b>>2]=0;c[h>>2]=0}c[f>>2]=0;i=d;return}if(!j){j=c[f>>2]|0;if((j|0)>0){h=0;do{a[g+h|0]=a[m+h|0]|0;h=h+1|0}while((h|0)!=(j|0))}au(m)}c[b>>2]=g;k=c[f>>2]|0}}c[f>>2]=k+1;a[(c[b>>2]|0)+k|0]=e;i=d;return}function Pl(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;g=i;i=i+16|0;h=g;em(c[1240]|0,h,1);c[e>>2]=(b[h>>1]|0)!=0;c[f>>2]=(b[h+2>>1]|0)!=0;h=c[1240]|0;f=c[h+40>>2]|0;e=c[h+20>>2]|0;h=e+(f*20|0)+8|0;c[a>>2]=c[h>>2];j=e+(f*20|0)+12|0;f=c[j>>2]|0;c[d>>2]=f;on(c[464]|0,c[a>>2]|0,f,a,d);f=c[464]|0;e=c[f+367624>>2]|0;if((e|0)==3|(e|0)==1){k=f+367588|0;l=f+367584|0}else{k=f+367584|0;l=f+367588|0}e=c[l>>2]|0;l=c[k>>2]|0;k=c[a>>2]|0;if((k|0)<0){c[a>>2]=0;m=0}else{m=k}k=c[d>>2]|0;if((k|0)<0){c[d>>2]=0;n=c[a>>2]|0;o=0}else{n=m;o=k}if((n|0)<(l|0)){p=o;q=n}else{c[a>>2]=l;p=c[d>>2]|0;q=l}if((p|0)<(e|0)){r=q;s=p;wn(f,r,s,h,j);i=g;return}c[d>>2]=e;r=c[a>>2]|0;s=e;wn(f,r,s,h,j);i=g;return}function Ql(b){b=+b;a[(c[1240]|0)+85|0]=1;return}function Rl(){var a=0;a=i;do{}while(dm(c[1240]|0)|0);if(!(dm(c[1240]|0)|0)){do{Ll()}while(!(dm(c[1240]|0)|0))}do{}while(dm(c[1240]|0)|0);i=a;return}function Sl(d){d=d|0;var e=0,f=0,g=0,h=0;e=i;f=d+12|0;g=d+44|0;h=d+37|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;f=g+0|0;g=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));a[h]=1;a[d+38|0]=0;a[d+39|0]=1;Ul(d+40|0)|0;c[d+4>>2]=-1;c[d+8>>2]=-1;b[d>>1]=101;b[d+2>>1]=0;i=e;return}function Tl(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;i=i+1040|0;f=e;g=d+12|0;h=c[g>>2]|0;if((h|0)!=0){j=f+5|0;k=f+3|0;l=f+1|0;m=d+8|0;n=h;do{h=b[n+12>>1]|0;if(h<<16>>16!=0&(h&65535)<65280){o=f;c[o>>2]=0;c[o+4>>2]=0;a[j]=h;a[j+1|0]=h>>8;a[k]=0;a[k+1|0]=0;a[l]=0;a[l+1|0]=0;a[f]=4;fo(c[m>>2]|0,f,7,0)|0}n=c[n+4>>2]|0}while((n|0)!=0)}Kk(d);co();Xl(d+40|0)|0;n=d+68|0;f=c[n>>2]|0;if((f|0)!=0){m=d+76|0;l=d+72|0;k=c[m>>2]|0;j=f;while(1){if((k|0)==0){p=j;q=0}else{f=c[j>>2]|0;h=c[j+4>>2]|0;if((f|0)!=0){c[f+4>>2]=h}if((h|0)!=0){c[h>>2]=f}if((c[l>>2]|0)==(j|0)){c[l>>2]=f}if((c[n>>2]|0)==(j|0)){c[n>>2]=h}$t(j);h=(c[m>>2]|0)+ -1|0;c[m>>2]=h;p=c[n>>2]|0;q=h}if((p|0)==0){break}else{k=q;j=p}}}p=d+56|0;j=c[p>>2]|0;if((j|0)!=0){q=d+64|0;k=d+60|0;n=c[q>>2]|0;m=j;while(1){if((n|0)==0){r=m;s=0}else{j=c[m>>2]|0;l=c[m+4>>2]|0;if((j|0)!=0){c[j+4>>2]=l}if((l|0)!=0){c[l>>2]=j}if((c[k>>2]|0)==(m|0)){c[k>>2]=j}if((c[p>>2]|0)==(m|0)){c[p>>2]=l}$t(m);l=(c[q>>2]|0)+ -1|0;c[q>>2]=l;r=c[p>>2]|0;s=l}if((r|0)==0){break}else{n=s;m=r}}}r=d+44|0;m=c[r>>2]|0;if((m|0)!=0){s=d+52|0;n=d+48|0;p=c[s>>2]|0;q=m;while(1){if((p|0)==0){t=q;u=0}else{m=c[q>>2]|0;k=c[q+4>>2]|0;if((m|0)!=0){c[m+4>>2]=k}if((k|0)!=0){c[k>>2]=m}if((c[n>>2]|0)==(q|0)){c[n>>2]=m}if((c[r>>2]|0)==(q|0)){c[r>>2]=k}$t(q);k=(c[s>>2]|0)+ -1|0;c[s>>2]=k;t=c[r>>2]|0;u=k}if((t|0)==0){break}else{p=u;q=t}}}t=d+24|0;d=c[t>>2]|0;if((d|0)!=0){q=d;do{pl(t,q);q=c[t>>2]|0}while((q|0)!=0)}q=c[g>>2]|0;if((q|0)==0){i=e;return}else{v=q}do{pl(g,v);v=c[g>>2]|0}while((v|0)!=0);i=e;return}function Ul(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;i=i+16|0;d=b;if((a|0)==0){e=22}else{f=Xt(24)|0;if((f|0)==0){e=12}else{Ch(d|0)|0;qe(d|0,2)|0;g=jc(f|0,d|0)|0;rf(d|0)|0;if((g|0)==0){c[a>>2]=f;e=0}else{e=g}}}i=b;return e|0}function Vl(a){a=a|0;var b=0,d=0,e=0;b=i;if((a|0)==0){d=22}else{e=c[a>>2]|0;if((e|0)==0){d=22}else{d=tb(e|0)|0}}i=b;return d|0}function Wl(a){a=a|0;var b=0,d=0,e=0;b=i;if((a|0)==0){d=22}else{e=c[a>>2]|0;if((e|0)==0){d=22}else{d=Kd(e|0)|0}}i=b;return d|0}function Xl(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;if((a|0)==0){d=22}else{e=c[a>>2]|0;if((e|0)==0){d=22}else{f=Ug(e|0)|0;Yt(c[a>>2]|0);c[a>>2]=0;d=f}}i=b;return d|0}function Yl(b){b=b|0;var d=0,e=0,f=0;d=i;c[b+4>>2]=0;c[b+8>>2]=0;c[b>>2]=0;c[b+16>>2]=512;c[b+12>>2]=128;e=b+20|0;f=b+24|0;c[f>>2]=0;c[b+28>>2]=0;c[e>>2]=0;c[b+40>>2]=0;c[b+32>>2]=1;c[b+36>>2]=4;gm(e,1)|0;c[f>>2]=1;a[b+85|0]=0;c[b+92>>2]=0;me();i=d;return}function Zl(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){au(d);c[a>>2]=0;c[a+8>>2]=0}c[a+4>>2]=0;i=b;return}function _l(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;a[b+85|0]=1;e=0;while(1){if((Gb()|0)>10){f=10}else{f=Gb()|0}if((e|0)>=(f|0)){break}if((Qb(e|0)|0)!=0){g=c[b+(e<<2)+44>>2]|0;if((g|0)!=0){Vf(g|0)}}e=e+1|0}e=b+20|0;f=c[e>>2]|0;if((f|0)!=0){au(f);c[e>>2]=0;c[b+28>>2]=0}c[b+24>>2]=0;e=c[b>>2]|0;if((e|0)==0){h=b+4|0;c[h>>2]=0;i=d;return}au(e);c[b>>2]=0;c[b+8>>2]=0;h=b+4|0;c[h>>2]=0;i=d;return}function $l(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;f=i;c[b+40>>2]=0;am(b,0);a[b+85|0]=0;Ue(0)|0;if((Gb()|0)>10){e=b+92|0;c[e>>2]=10;g=e}else{e=Gb()|0;d=b+92|0;c[d>>2]=e;if((e|0)>0){g=d}else{i=f;return 0}}d=0;do{c[b+(d<<2)+44>>2]=Dc(d|0)|0;d=d+1|0}while((d|0)<(c[g>>2]|0));i=f;return 0}function am(a,c){a=a|0;c=c|0;var d=0;c=i;d=0;do{b[a+(d<<1)+96>>1]=255;d=d+1|0}while((d|0)!=325);b[a+98>>1]=27;b[a+100>>1]=49;b[a+102>>1]=50;b[a+104>>1]=51;b[a+106>>1]=52;b[a+108>>1]=53;b[a+110>>1]=54;b[a+112>>1]=55;b[a+114>>1]=56;b[a+116>>1]=57;b[a+118>>1]=48;b[a+120>>1]=45;b[a+122>>1]=61;b[a+124>>1]=8;b[a+126>>1]=9;b[a+128>>1]=113;b[a+130>>1]=119;b[a+132>>1]=101;b[a+134>>1]=114;b[a+136>>1]=116;b[a+138>>1]=121;b[a+140>>1]=117;b[a+142>>1]=105;b[a+144>>1]=111;b[a+146>>1]=112;b[a+148>>1]=91;b[a+150>>1]=93;b[a+152>>1]=13;b[a+154>>1]=306;b[a+156>>1]=97;b[a+158>>1]=115;b[a+160>>1]=100;b[a+162>>1]=102;b[a+164>>1]=103;b[a+166>>1]=104;b[a+168>>1]=106;b[a+170>>1]=107;b[a+172>>1]=108;b[a+174>>1]=59;b[a+176>>1]=39;b[a+178>>1]=96;b[a+180>>1]=304;b[a+182>>1]=92;b[a+268>>1]=92;b[a+184>>1]=122;b[a+186>>1]=120;b[a+188>>1]=99;b[a+190>>1]=118;b[a+192>>1]=98;b[a+194>>1]=110;b[a+196>>1]=109;b[a+198>>1]=44;b[a+200>>1]=46;b[a+202>>1]=47;b[a+204>>1]=303;b[a+206>>1]=268;b[a+208>>1]=308;b[a+210>>1]=32;b[a+212>>1]=301;b[a+214>>1]=282;b[a+216>>1]=283;b[a+218>>1]=284;b[a+220>>1]=285;b[a+222>>1]=286;b[a+224>>1]=287;b[a+226>>1]=288;b[a+228>>1]=289;b[a+230>>1]=290;b[a+232>>1]=291;b[a+234>>1]=300;b[a+236>>1]=302;b[a+238>>1]=263;b[a+240>>1]=264;b[a+242>>1]=265;b[a+244>>1]=269;b[a+246>>1]=260;b[a+248>>1]=261;b[a+250>>1]=262;b[a+252>>1]=270;b[a+254>>1]=257;b[a+256>>1]=258;b[a+258>>1]=259;b[a+260>>1]=256;b[a+262>>1]=266;b[a+270>>1]=292;b[a+272>>1]=293;b[a+296>>1]=294;b[a+298>>1]=295;b[a+300>>1]=296;b[a+378>>1]=272;b[a+408>>1]=271;b[a+410>>1]=305;b[a+458>>1]=267;b[a+462>>1]=317;b[a+464>>1]=307;b[a+490>>1]=19;b[a+494>>1]=278;b[a+496>>1]=273;b[a+498>>1]=280;b[a+502>>1]=276;b[a+506>>1]=275;b[a+510>>1]=279;b[a+512>>1]=274;b[a+514>>1]=281;b[a+516>>1]=277;b[a+518>>1]=127;b[a+534>>1]=310;b[a+536>>1]=309;b[a+538>>1]=319;i=c;return}function bm(a){a=a|0;c[a+92>>2]=1;return 1}function cm(a){a=a|0;a=i;fd();i=a;return}function dm(a){a=a|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;i=i+32|0;e=d+12|0;f=d;g=a+24|0;if((c[g>>2]|0)>0){h=0;do{em(a,e,1);h=h+1|0}while((h|0)<(c[g>>2]|0))}em(a,f,0);if((b[f>>1]|0)!=0){j=1;i=d;return j|0}if((b[f+2>>1]|0)!=0){j=1;i=d;return j|0}j=(b[f+4>>1]|0)!=0;i=d;return j|0}function em(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;g=i;i=i+16|0;h=g;j=d+40|0;k=c[j>>2]|0;l=c[d+20>>2]|0;m=l+(k*20|0)|0;n=l+(k*20|0)+8|0;o=l+(k*20|0)+12|0;p=d+85|0;if((a[p]|0)==0){d=c[m>>2]|0;q=l+(k*20|0)+4|0;r=c[q>>2]|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;s=lh(k|0,h|0)|0;if((s|0)>(c[j>>2]|0)){t=c[h+8>>2]|0;u=c[h>>2]|0;v=c[h+4>>2]|0}else{t=0;u=d;v=r}c[m>>2]=u;c[q>>2]=v;b[e+6>>1]=u-(c[n>>2]|0);b[e+8>>1]=v-(c[o>>2]|0);w=u;x=v;y=t}else{t=c[n>>2]|0;v=c[o>>2]|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;u=lh(k|0,h|0)|0;if((u|0)>(c[j>>2]|0)){z=c[h+8>>2]|0;A=c[h>>2]|0;B=c[h+4>>2]|0}else{z=0;A=t;B=v}b[e+6>>1]=A-(c[n>>2]|0);b[e+8>>1]=B-(c[o>>2]|0);w=A;x=B;y=z}z=l+(k*20|0)+16|0;b[e+10>>1]=c[z>>2];b[e>>1]=y&1;b[e+2>>1]=y>>>1&1;b[e+4>>1]=y>>>2&1;if(!f){i=g;return}if((a[p]|0)==0){c[n>>2]=c[m>>2];C=c[l+(k*20|0)+4>>2]|0}else{c[m>>2]=w;c[n>>2]=w;c[l+(k*20|0)+4>>2]=x;C=x}c[o>>2]=C;c[z>>2]=0;i=g;return}function fm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;d=i;i=i+16|0;a=d;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;if((Nf(a|0)|0)==0){e=0;i=d;return e|0}c[b>>2]=~~(+g[a>>2]*32767.0);c[b+4>>2]=~~(+g[a+4>>2]*32767.0);c[b+8>>2]=~~(+g[a+8>>2]*32767.0);e=1;i=d;return e|0}function gm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=a+8|0;if((c[e>>2]|0)>(b|0)){f=1;i=d;return f|0}g=c[a+16>>2]|0;if((g|0)<(b|0)){h=c[a+12>>2]|0;j=ea(((b|0)/(h|0)|0)+1|0,h)|0}else{j=g}c[e>>2]=j;g=_t(j>>>0>214748364?-1:j*20|0)|0;if((j|0)!=0){h=g+(j*20|0)|0;j=g;do{c[j+4>>2]=0;c[j>>2]=0;c[j+12>>2]=100;c[j+8>>2]=100;c[j+16>>2]=0;j=j+20|0}while((j|0)!=(h|0))}h=c[a>>2]|0;j=(h|0)==0;if((g|0)==0){if(!j){au(h);c[a>>2]=0;c[e>>2]=0}c[a+4>>2]=0;f=0;i=d;return f|0}if(!j){j=c[a+4>>2]|0;if((j|0)>0){e=0;do{b=g+(e*20|0)|0;k=h+(e*20|0)|0;c[b+0>>2]=c[k+0>>2];c[b+4>>2]=c[k+4>>2];c[b+8>>2]=c[k+8>>2];c[b+12>>2]=c[k+12>>2];c[b+16>>2]=c[k+16>>2];e=e+1|0}while((e|0)<(j|0))}au(h)}c[a>>2]=g;f=1;i=d;return f|0}function hm(){var a=0;a=i;c[5780>>2]=0;c[5784>>2]=0;c[1444]=0;c[5792>>2]=512;c[5788>>2]=128;oc(35,5776,q|0)|0;i=a;return}function im(a){a=a|0;var b=0,d=0;b=i;i=i+16|0;d=b;c[a>>2]=0;if((Ed(44100,-32752,2,4096)|0)==0){Lb(64)|0;ie(16)|0;c[a>>2]=1;c[d>>2]=44100;c[d+4>>2]=2;c[d+8>>2]=4096;c[d+12>>2]=-32752;tg(5800,d|0)|0;i=b;return}else{Xa(5856)|0;i=b;return}}function jm(a){a=a|0;a=i;jh();i=a;return}function km(a){a=a|0;c[a>>2]=0;return}function lm(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){qh(d|0)}c[a>>2]=0;i=b;return}function mm(a){a=a|0;var d=0,e=0,f=0;d=i;e=a+4|0;f=c[e>>2]|0;if((f|0)!=0){au(f)}c[e>>2]=0;c[a+8>>2]=0;b[a+2060>>1]=0;i=d;return}function nm(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;j=i;i=i+16|0;k=j;l=f+4|0;m=c[l>>2]|0;if((m|0)!=0){au(m)}c[l>>2]=0;m=f+8|0;c[m>>2]=0;n=f+2060|0;b[n>>1]=0;if((c[f+2064>>2]|0)==1){o=d[g]|d[g+1|0]<<8|d[g+2|0]<<16|d[g+3|0]<<24;c[k>>2]=o;p=_t(o)|0;c[l>>2]=p;if((om(g+4|0,h+ -4|0,p,k,0)|0)!=0){q=0;i=j;return q|0}p=c[k>>2]|0;c[m>>2]=p;q=p;i=j;return q|0}else{r=g;s=0}a:while(1){g=r+1|0;p=s;k=0;h=d[r]|0;while(1){o=h<<16;t=g+1|0;u=a[g]|0;if((h&128|0)==0){v=c[m>>2]|0;if((v&1023|0)==0){w=(((v|0)/1024|0)<<10)+1032|0;x=_t((w|0)>-1?w:-1)|0;w=c[l>>2]|0;if((w|0)==0){y=v}else{tu(x|0,w|0,v|0)|0;au(w);y=c[m>>2]|0}c[l>>2]=x;z=y;A=x}else{z=v;A=c[l>>2]|0}c[m>>2]=z+1;a[A+z|0]=u;a[f+(b[n>>1]|0)+12|0]=u;v=(e[n>>1]|0)+1&2047;b[n>>1]=v;B=t;C=v}else{v=u&255;if(u<<24>>24==0){break a}u=g+2|0;x=(v&15)+2&65535;if(x<<16>>16==0){B=u;C=p}else{w=2048-(v<<3&1920)-(d[t]|0)|0;t=p;v=x;while(1){x=a[f+(w+(t&65535)&2047)+12|0]|0;D=c[m>>2]|0;if((D&1023|0)==0){E=(((D|0)/1024|0)<<10)+1032|0;F=_t((E|0)>-1?E:-1)|0;E=c[l>>2]|0;if((E|0)==0){G=D}else{tu(F|0,E|0,D|0)|0;au(E);G=c[m>>2]|0}c[l>>2]=F;H=G;I=F}else{H=D;I=c[l>>2]|0}c[m>>2]=H+1;a[I+H|0]=x;a[f+(b[n>>1]|0)+12|0]=x;x=(e[n>>1]|0)+1&2047;b[n>>1]=x;D=v+ -1<<16>>16;if(D<<16>>16==0){B=u;C=x;break}else{t=x;v=D}}}}v=k+1|0;if((v|0)==8){r=B;s=C;continue a}else{g=B;p=C;k=v;h=o>>15}}}q=c[m>>2]|0;i=j;return q|0}function om(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0;h=i;j=b+e|0;e=c[g>>2]|0;k=f+e|0;c[g>>2]=0;l=a[b]|0;if((l&255)>17){m=l&255;l=b+1|0;n=m+ -17|0;if(n>>>0<4){o=l;p=f;q=n;r=50}else{if(e>>>0<n>>>0){s=f;r=59}else{e=m+ -16|0;if((j-l|0)>>>0<e>>>0){t=f;r=58}else{m=l;l=f;u=n;while(1){a[l]=a[m]|0;u=u+ -1|0;if((u|0)==0){break}else{m=m+1|0;l=l+1|0}}v=b+e|0;w=f+n|0;r=19}}}}else{x=b;y=f;r=6}a:while(1){if((r|0)==6){r=0;if(!(x>>>0<j>>>0)){r=55;break}b=x+1|0;n=a[x]|0;e=n&255;if((n&255)>15){z=b;A=y;B=e;r=23}else{if(n<<24>>24==0){if((j|0)==(b|0)){t=y;r=58;continue}else{C=b;D=e}while(1){E=a[C]|0;if(!(E<<24>>24==0)){break}n=C+1|0;if((j|0)==(n|0)){t=y;r=58;continue a}else{C=n;D=D+255|0}}F=C+1|0;G=D+15+(E&255)|0}else{F=b;G=e}n=G+3|0;if((k-y|0)>>>0<n>>>0){s=y;r=59;continue}if((j-F|0)>>>0<(G+4|0)>>>0){t=y;r=58;continue}a[y]=a[F]|0;a[y+1|0]=a[F+1|0]|0;a[y+2|0]=a[F+2|0]|0;l=y+n|0;m=F+3|0;u=y+3|0;H=G;while(1){a[u]=a[m]|0;H=H+ -1|0;if((H|0)==0){break}else{m=m+1|0;u=u+1|0}}v=F+n|0;w=l;r=19;continue}}else if((r|0)==19){r=0;u=v+1|0;m=a[v]|0;H=m&255;if((m&255)>15){z=u;A=w;B=H;r=23}else{m=-2049-(H>>>2)-((d[u]|0)<<2)|0;u=w+m|0;if(u>>>0<f>>>0){I=w;r=60;break}if((k-w|0)>>>0<3){s=w;r=59;continue}a[w]=a[u]|0;a[w+1|0]=a[w+(m+1)|0]|0;a[w+2|0]=a[w+(m+2)|0]|0;J=v+2|0;K=w+3|0}}else if((r|0)==50){r=0;if((k-p|0)>>>0<q>>>0){s=p;r=59;continue}if((j-o|0)>>>0<(q+1|0)>>>0){t=p;r=58;continue}m=p+q|0;u=o;H=p;e=q;while(1){a[H]=a[u]|0;e=e+ -1|0;if((e|0)==0){break}else{u=u+1|0;H=H+1|0}}H=o+(q+1)|0;if(H>>>0<j>>>0){z=H;A=m;B=d[o+q|0]|0;r=23}else{x=H;y=m;r=6;continue}}else if((r|0)==58){r=0;c[g>>2]=t-f;L=-4;r=61;break}else if((r|0)==59){r=0;c[g>>2]=s-f;L=-5;r=61;break}do{if((r|0)==23){r=0;if(B>>>0>63){H=A+(((B>>>2|-8)^7)-((d[z]|0)<<3))|0;u=B>>>5;if(H>>>0<f>>>0){I=A;r=60;break a}if((k-A|0)>>>0<(u+1|0)>>>0){s=A;r=59;continue a}else{M=z+1|0;N=H;O=u+ -1|0}}else{if(B>>>0>31){u=B&31;if((u|0)==0){if((j|0)==(z|0)){t=A;r=58;continue a}else{P=z;Q=0}while(1){R=a[P]|0;if(!(R<<24>>24==0)){break}H=P+1|0;if((j|0)==(H|0)){t=A;r=58;continue a}else{P=H;Q=Q+255|0}}S=P+1|0;T=Q+31+(R&255)|0}else{S=z;T=u}U=~((d[S+1|0]|0)<<6|(d[S]|0)>>>2);V=S+2|0;W=T}else{if(!(B>>>0>15)){H=~(B>>>2)-((d[z]|0)<<2)|0;e=A+H|0;if(e>>>0<f>>>0){I=A;r=60;break a}if((k-A|0)>>>0<2){s=A;r=59;continue a}a[A]=a[e]|0;a[A+1|0]=a[A+(H+1)|0]|0;J=z+1|0;K=A+2|0;break}H=B<<11&16384;e=B&7;if((e|0)==0){if((j|0)==(z|0)){t=A;r=58;continue a}else{X=z;Y=0}while(1){Z=a[X]|0;if(!(Z<<24>>24==0)){break}l=X+1|0;if((j|0)==(l|0)){t=A;r=58;continue a}else{X=l;Y=Y+255|0}}_=X+1|0;$=Y+7+(Z&255)|0}else{_=z;$=e}u=(d[_]|0)>>>2|H|(d[_+1|0]|0)<<6;aa=_+2|0;if((u|0)==0){r=56;break a}U=-16384-u|0;V=aa;W=$}u=A+U|0;if(u>>>0<f>>>0){I=A;r=60;break a}if((k-A|0)>>>0<(W+2|0)>>>0){s=A;r=59;continue a}else{M=V;N=u;O=W}}a[A]=a[N]|0;a[A+1|0]=a[N+1|0]|0;u=O+2|0;l=N+2|0;n=A+2|0;b=O;while(1){a[n]=a[l]|0;b=b+ -1|0;if((b|0)==0){break}else{l=l+1|0;n=n+1|0}}J=M;K=A+u|0}}while(0);m=a[J+ -2|0]&3;if((m|0)==0){x=J;y=K;r=6}else{o=J;p=K;q=m;r=50}}if((r|0)==55){c[g>>2]=y-f;L=-7;i=h;return L|0}else if((r|0)==56){c[g>>2]=A-f;if((aa|0)==(j|0)){L=0;i=h;return L|0}L=aa>>>0<j>>>0?-8:-4;i=h;return L|0}else if((r|0)==60){c[g>>2]=I-f;L=-6;i=h;return L|0}else if((r|0)==61){i=h;return L|0}return 0}function pm(a){a=a|0;c[a>>2]=5888;c[a+8>>2]=0;c[a+12>>2]=0;c[a+4>>2]=0;c[a+20>>2]=512;c[a+16>>2]=128;c[a+28>>2]=0;c[a+32>>2]=0;c[a+24>>2]=0;c[a+40>>2]=512;c[a+36>>2]=128;c[a+48>>2]=0;c[a+52>>2]=0;c[a+44>>2]=0;c[a+60>>2]=512;c[a+56>>2]=128;c[a+64>>2]=0;c[a+68>>2]=0;return}function qm(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;b=i;c[a>>2]=5888;rm(a,1);d=a+44|0;e=c[d>>2]|0;if((e|0)!=0){au(e);c[d>>2]=0;c[a+52>>2]=0}c[a+48>>2]=0;d=a+24|0;e=c[d>>2]|0;if((e|0)!=0){au(e);c[d>>2]=0;c[a+32>>2]=0}c[a+28>>2]=0;d=a+4|0;e=c[d>>2]|0;if((e|0)==0){f=a+8|0;c[f>>2]=0;i=b;return}g=e+ -4|0;h=c[g>>2]|0;if((h|0)!=0){j=e+(h*56|0)|0;while(1){h=j+ -56|0;k=j+ -36|0;l=c[k>>2]|0;if((l|0)!=0){au(l);c[k>>2]=0;c[j+ -28>>2]=0}c[j+ -32>>2]=0;k=c[h>>2]|0;if((k|0)!=0){au(k);c[h>>2]=0;c[j+ -48>>2]=0}c[j+ -52>>2]=0;if((h|0)==(e|0)){break}else{j=h}}}au(g);c[d>>2]=0;c[a+12>>2]=0;f=a+8|0;c[f>>2]=0;i=b;return}function rm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;if(b){e=a+44|0;f=c[e>>2]|0;if((f|0)!=0){au(f);c[e>>2]=0;c[a+52>>2]=0}c[a+48>>2]=0;e=a+24|0;f=c[e>>2]|0;if((f|0)==0){g=e}else{au(f);c[e>>2]=0;c[a+32>>2]=0;g=e}}else{c[a+48>>2]=0;g=a+24|0}c[g+4>>2]=0;g=a+4|0;e=a+8|0;a:do{if((c[e>>2]|0)>0){if(b){h=0}else{f=0;while(1){j=c[g>>2]|0;c[j+(f*56|0)+4>>2]=0;c[j+(f*56|0)+24>>2]=0;f=f+1|0;if((f|0)>=(c[e>>2]|0)){break a}}}do{f=c[g>>2]|0;j=f+(h*56|0)|0;k=c[j>>2]|0;if((k|0)==0){l=f}else{au(k);c[j>>2]=0;c[f+(h*56|0)+8>>2]=0;l=c[g>>2]|0}c[f+(h*56|0)+4>>2]=0;f=l+(h*56|0)+20|0;j=c[f>>2]|0;if((j|0)!=0){au(j);c[f>>2]=0;c[l+(h*56|0)+28>>2]=0}c[l+(h*56|0)+24>>2]=0;h=h+1|0}while((h|0)<(c[e>>2]|0))}}while(0);if(!b){c[e>>2]=0;m=a+64|0;c[m>>2]=0;n=a+68|0;c[n>>2]=0;i=d;return}b=c[g>>2]|0;if((b|0)==0){c[e>>2]=0;m=a+64|0;c[m>>2]=0;n=a+68|0;c[n>>2]=0;i=d;return}h=b+ -4|0;l=c[h>>2]|0;if((l|0)!=0){f=b+(l*56|0)|0;while(1){l=f+ -56|0;j=f+ -36|0;k=c[j>>2]|0;if((k|0)!=0){au(k);c[j>>2]=0;c[f+ -28>>2]=0}c[f+ -32>>2]=0;j=c[l>>2]|0;if((j|0)!=0){au(j);c[l>>2]=0;c[f+ -48>>2]=0}c[f+ -52>>2]=0;if((l|0)==(b|0)){break}else{f=l}}}au(h);c[g>>2]=0;c[a+12>>2]=0;c[e>>2]=0;m=a+64|0;c[m>>2]=0;n=a+68|0;c[n>>2]=0;i=d;return}function sm(a){a=a|0;c[a+4>>2]=0;c[a+8>>2]=0;c[a>>2]=0;c[a+16>>2]=512;c[a+12>>2]=128;c[a+24>>2]=0;c[a+28>>2]=0;c[a+20>>2]=0;c[a+36>>2]=512;c[a+32>>2]=128;return}function tm(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=a+20|0;e=c[d>>2]|0;if((e|0)!=0){au(e);c[d>>2]=0;c[a+28>>2]=0}c[a+24>>2]=0;d=c[a>>2]|0;if((d|0)==0){f=a+4|0;c[f>>2]=0;i=b;return}au(d);c[a>>2]=0;c[a+8>>2]=0;f=a+4|0;c[f>>2]=0;i=b;return}function um(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;d=i;if((a|0)==(b|0)){i=d;return a|0}e=a+4|0;c[e>>2]=0;f=a+20|0;h=a+24|0;c[h>>2]=0;c[a+12>>2]=1;c[a+16>>2]=1;j=a+32|0;c[j>>2]=1;k=a+36|0;c[k>>2]=1;l=b+4|0;m=c[l>>2]|0;n=a+8|0;do{if((c[n>>2]|0)<=(m|0)){o=(m|0)>1?m+1|0:1;c[n>>2]=o;p=_t(o>>>0>46684427?-1:o*92|0)|0;o=c[a>>2]|0;q=(o|0)==0;if((p|0)==0){if(!q){au(o);c[a>>2]=0;c[n>>2]=0}c[e>>2]=0;break}else{if(!q){au(o)}c[a>>2]=p;break}}}while(0);c[e>>2]=m;m=b+24|0;e=c[m>>2]|0;n=a+28|0;do{if((c[n>>2]|0)<=(e|0)){p=c[k>>2]|0;if((p|0)<(e|0)){o=c[j>>2]|0;r=ea(((e|0)/(o|0)|0)+1|0,o)|0}else{r=p}c[n>>2]=r;p=_t(r>>>0>46684427?-1:r*92|0)|0;o=c[f>>2]|0;q=(o|0)==0;if((p|0)==0){if(!q){au(o);c[f>>2]=0;c[n>>2]=0}c[h>>2]=0;break}if(!q){q=c[h>>2]|0;if((q|0)>0){s=0;do{t=p+(s*92|0)+0|0;u=o+(s*92|0)+0|0;v=t+92|0;do{c[t>>2]=c[u>>2];t=t+4|0;u=u+4|0}while((t|0)<(v|0));s=s+1|0}while((s|0)!=(q|0))}au(o)}c[f>>2]=p}}while(0);c[h>>2]=e;if((c[l>>2]|0)>0){e=0;h=c[a>>2]|0;n=c[b>>2]|0;while(1){r=h+92|0;j=n+92|0;t=h+0|0;u=n+0|0;v=t+92|0;do{c[t>>2]=c[u>>2];t=t+4|0;u=u+4|0}while((t|0)<(v|0));p=e+1|0;if((p|0)<(c[l>>2]|0)){e=p;h=r;n=j}else{break}}}if((c[m>>2]|0)>0){n=0;h=c[f>>2]|0;f=c[b+20>>2]|0;while(1){e=h+92|0;l=f+92|0;t=h+0|0;u=f+0|0;v=t+92|0;do{c[t>>2]=c[u>>2];t=t+4|0;u=u+4|0}while((t|0)<(v|0));j=n+1|0;if((j|0)<(c[m>>2]|0)){n=j;h=e;f=l}else{break}}}g[a+40>>2]=+g[b+40>>2];g[a+44>>2]=+g[b+44>>2];g[a+48>>2]=+g[b+48>>2];g[a+52>>2]=+g[b+52>>2];i=d;return a|0}function vm(a){a=a|0;return}function wm(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0;d=i;i=i+1040|0;e=d;f=d+8|0;c[b>>2]=6224;c[b+8>>2]=0;c[b+12>>2]=0;c[b+4>>2]=0;c[b+20>>2]=512;c[b+16>>2]=128;h=b+98340|0;j=b+36|0;do{a[j]=0;a[j+1|0]=0;g[j+4>>2]=0.0;g[j+8>>2]=0.0;j=j+12|0}while((j|0)!=(h|0));h=b+99252|0;j=b+98484|0;do{c[j>>2]=0;c[j+4>>2]=0;c[j+8>>2]=-1;c[j+12>>2]=0;c[j+16>>2]=0;c[j+20>>2]=-1;j=j+24|0}while((j|0)!=(h|0));vu(b+361404|0,0,6176)|0;c[b+367620>>2]=0;c[b+367624>>2]=0;c[b+367628>>2]=8388863;c[b+367632>>2]=0;h=_t(1835036)|0;j=h+1835036|0;k=h;do{c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;c[k+20>>2]=0;c[k+24>>2]=0;k=k+28|0}while((k|0)!=(j|0));c[b+98468>>2]=h;vu(b+99256|0,0,262148)|0;a[b+367580|0]=1;g[b+98472>>2]=0.0;c[b+99252>>2]=-1;a[b+98480|0]=1;a[b+98481|0]=1;a[b+98482|0]=0;c[b+367636>>2]=0;if((a[6240]|0)==0){if((de(6240)|0)!=0){c[1558]=(Eu()|0)+b;Lc(6240)}}vu(f|0,0,1024)|0;a[f+0|0]=a[10712|0]|0;a[f+1|0]=a[10713|0]|0;a[f+2|0]=a[10714|0]|0;a[f+3|0]=a[10715|0]|0;a[f+4|0]=a[10716|0]|0;a[f+5|0]=a[10717|0]|0;b=c[1558]|0;c[e>>2]=f;c[e+4>>2]=b;lb(6248,7272,e|0)|0;Og(6248)|0;i=d;return}function xm(a){a=a|0;var b=0;b=i;ym(a);$t(a);i=b;return}



function ym(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;d=i;i=i+1040|0;e=d;f=d+8|0;c[b>>2]=6224;if((a[6240]|0)==0){if((de(6240)|0)!=0){c[1558]=(Eu()|0)+b;Lc(6240)}}vu(f|0,0,1024)|0;a[f+0|0]=a[10712|0]|0;a[f+1|0]=a[10713|0]|0;a[f+2|0]=a[10714|0]|0;a[f+3|0]=a[10715|0]|0;a[f+4|0]=a[10716|0]|0;a[f+5|0]=a[10717|0]|0;g=c[1558]|0;c[e>>2]=f;c[e+4>>2]=g;lb(6248,7272,e|0)|0;Og(6248)|0;ao(b);e=0;while(1){Yn(b+(e*24|0)+98484|0);g=e+1|0;if((g|0)<32){e=g}else{h=0;break}}while(1){cn(b,h);e=h+1|0;if((e|0)==65536){j=0;break}else{h=e}}do{h=b+(j*772|0)+362172|0;e=a[h]|0;if(e<<24>>24>0){g=b+(j*772|0)+362173|0;f=a[g]|0;k=e;e=0;while(1){if(f<<24>>24>0){l=f;m=0;while(1){n=b+(j*772|0)+(e<<5)+(m<<2)+361404|0;if((c[n>>2]|0)==0){o=l}else{Ge(1,n|0);o=a[g]|0}m=m+1|0;if((m|0)>=(o<<24>>24|0)){break}else{l=o}}p=a[h]|0;q=o}else{p=k;q=f}e=e+1|0;if((e|0)>=(p<<24>>24|0)){break}else{f=q;k=p}}}vu(b+(j*772|0)+361404|0,0,772)|0;j=j+1|0}while((j|0)!=8);j=b+98468|0;p=c[j>>2]|0;if((p|0)!=0){au(p)}c[j>>2]=0;j=b+98484|0;p=b+99252|0;do{p=p+ -24|0;Yn(p)}while((p|0)!=(j|0));j=b+4|0;p=c[j>>2]|0;if((p|0)==0){r=b+8|0;c[r>>2]=0;i=d;return}au(p);c[j>>2]=0;c[b+12>>2]=0;r=b+8|0;c[r>>2]=0;i=d;return}function zm(a,e){a=a|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;i=i+32|0;a=e;if((Dd(a|0)|0)==0){f=1;i=e;return f|0}g=a+8|0;h=a+16|0;j=0;a:while(1){k=j+1|0;if((k|0)>=256){f=1;l=11;break}m=d[a]|0;b:do{if((m|0)==12){l=10;break a}else if((m|0)==2){switch(c[g>>2]|0){case 8:{Ol(8);break b;break};case 211:case 14:case 281:case 280:case 279:case 278:case 277:case 276:case 275:case 274:case 273:{break b;break};default:{}}n=b[h>>1]|0;if((n&65535)<256){Ol(n&255)}}}while(0);if((Dd(a|0)|0)==0){f=1;l=11;break}else{j=k}}if((l|0)==10){Xa(10720)|0;f=0;i=e;return f|0}else if((l|0)==11){i=e;return f|0}return 0}function Am(a,d,e,f,h){a=a|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;f=i;j=0;while(1){k=j+1|0;if((c[a+(j*24|0)+98504>>2]|0)==(d|0)){l=j;break}if((k|0)<32){j=k}else{l=-1;break}}cn(a,d);j=e+4|0;k=c[j>>2]|0;if((k|0)==0){m=0;i=f;return m|0}n=e+8|0;o=c[n>>2]|0;if((o|0)==0){m=0;i=f;return m|0}else{p=8}while(1){q=p<<1;if((q|0)<(k|0)){p=q}else{r=8;break}}while(1){s=r<<1;if((s|0)<(o|0)){r=s}else{break}}o=a+98468|0;k=c[o>>2]|0;t=k+(d*28|0)|0;if((d|0)>65503){u=gn(e,0,0,0,0,t,0,0,1)|0}else{u=gn(e,0,0,0,0,t,k+(d*28|0)+4|0,h,0)|0}h=q&65535;q=c[o>>2]|0;b[q+(d*28|0)+16>>1]=h;o=s&65535;b[q+(d*28|0)+18>>1]=o;s=c[j>>2]&65535;b[q+(d*28|0)+20>>1]=s;j=c[n>>2]&65535;b[q+(d*28|0)+22>>1]=j;g[q+(d*28|0)+8>>2]=+(s<<16>>16)/+(h<<16>>16);g[q+(d*28|0)+12>>2]=+(j<<16>>16)/+(o<<16>>16);if(!u){cn(a,d);m=0;i=f;return m|0}if(!((l|0)>-1)){m=1;i=f;return m|0}if(!(Xn(a+(l*24|0)+98484|0,p<<17>>16,r<<17>>16,c[q+(d*28|0)>>2]|0,1)|0)){m=1;i=f;return m|0}c[a+(l*24|0)+98504>>2]=d;m=1;i=f;return m|0}function Bm(a,d,e){a=a|0;d=d|0;e=e|0;var f=0;f=c[d+98468>>2]|0;c[a>>2]=b[f+(e*28|0)+20>>1]|0;c[a+4>>2]=b[f+(e*28|0)+22>>1]|0;return}function Cm(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;g=i;i=i+32|0;h=g;j=d+98468|0;k=c[j>>2]|0;l=b[k+(e*28|0)+20>>1]|0;m=l<<16>>16;n=b[k+(e*28|0)+22>>1]|0;k=n<<16>>16;if(l<<16>>16==0|n<<16>>16==0){o=0;i=g;return o|0}p=ea(k,m)|0;q=p<<2;r=f+16|0;if((q|0)>(c[r>>2]|0)){c[r>>2]=0;s=f+8|0;c[s>>2]=0;t=f+4|0;c[t>>2]=0;u=f+12|0;v=c[u>>2]|0;if((v|0)!=0){au(v)}a[f]=1;c[r>>2]=q;r=_t((p|0)<0?-1:q)|0;c[u>>2]=r;if((r|0)!=0){w=t;x=s;y=r;z=7}}else{w=f+4|0;x=f+8|0;y=c[f+12>>2]|0;z=7}if((z|0)==7){c[w>>2]=m;c[x>>2]=k;vu(y|0,0,q|0)|0}if((c[d+99252>>2]|0)>-1){ao(d)}c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=-1;c[h+12>>2]=0;c[h+16>>2]=0;c[h+20>>2]=-1;d=c[j>>2]|0;if(Xn(h,b[d+(e*28|0)+16>>1]|0,b[d+(e*28|0)+18>>1]|0,c[d+(e*28|0)>>2]|0,0)|0){Zn(h)|0;e=f+12|0;ld(0,0,m|0,k|0,6408,5121,c[e>>2]|0);_n(h)|0;d=f+4|0;j=c[d>>2]|0;if((j|0)==(m|0)){q=c[f+8>>2]|0;if((q|0)==(k|0)){A=m}else{B=q;z=15}}else{if((j|0)<(m|0)){A=j}else{B=c[f+8>>2]|0;z=15}}if((z|0)==15){z=f+8|0;if((B|0)<(k|0)){A=j}else{B=c[e>>2]|0;q=j-m|0;if(n<<16>>16>0){n=l<<16>>16>0;l=B;j=B;B=0;while(1){if(n){y=l;x=j;w=0;while(1){c[y>>2]=c[x>>2];w=w+1|0;if((w|0)==(m|0)){break}else{y=y+4|0;x=x+4|0}}C=l+(m<<2)|0;D=j+(m<<2)|0}else{C=l;D=j}B=B+1|0;if((B|0)==(k|0)){break}else{l=C;j=D+(q<<2)|0}}}c[d>>2]=m;c[z>>2]=k;A=m}}if((A|0)>=1){m=A<<2;A=_t(m)|0;k=f+8|0;f=c[k>>2]|0;a:do{if((f|0)>1){z=f;d=-1;q=0;while(1){D=ea(q,m)|0;j=c[e>>2]|0;C=j+D|0;tu(A|0,C|0,m|0)|0;tu(C|0,j+(ea(d+z|0,m)|0)|0,m|0)|0;j=ea((c[k>>2]|0)+d|0,m)|0;tu((c[e>>2]|0)+j|0,A|0,m|0)|0;j=q+1|0;C=c[k>>2]|0;if((j|0)>=((C|0)/2|0|0)){break a}z=C;d=-2-q|0;q=j}}}while(0);if((A|0)!=0){au(A)}}}Yn(h);o=1;i=g;return o|0}function Dm(b){b=b|0;var d=0,e=0,f=0;d=i;c[b+16>>2]=0;c[b+8>>2]=0;c[b+4>>2]=0;e=b+12|0;f=c[e>>2]|0;if((f|0)!=0){au(f)}c[e>>2]=0;a[b]=1;i=d;return}function Em(b){b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;c=i;if((a[b+362172|0]|0)>0){d=b+98481|0;if((a[d]|0)!=0){a[d]=0;wf(256)}Fm(b,0);i=c;return}d=(a[b+98480|0]|0)==0;e=(a[b+98481|0]|0)==0;do{if(d){if(e){i=c;return}else{f=d?256:16640;g=9;break}}else{if(e){h=16384}else{f=16640;g=9}}}while(0);if((g|0)==9){a[b+98481|0]=0;h=f}wf(h|0);i=c;return}function Fm(d,e){d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0.0,F=0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0,N=0,O=0,P=0;f=i;i=i+64|0;h=f;j=d+(e*772|0)+362172|0;if((a[j]|0)==0){i=f;return}Pk(d,0.0);if((c[6132>>2]|0)!=0){Vd(3008);c[6132>>2]=0}g[d+98476>>2]=1.0;if((c[1532]|0)!=0){Vd(3042);c[1532]=0}k=c[1480]|0;if((k|0)!=0){Jh[k&127](33985);Vd(3553);Jh[c[1480]&127](33984)}Me(3553);c[2138]=0;k=a[j]|0;if(k<<24>>24>0){l=d+(e*772|0)+362173|0;m=h+4|0;n=h+8|0;o=h+12|0;p=h+16|0;q=h+20|0;r=h+24|0;s=h+28|0;t=h+32|0;u=h+36|0;v=h+40|0;w=h+44|0;x=h+48|0;y=h+52|0;z=h+56|0;A=h+60|0;B=a[l]|0;C=k;D=0.0;k=0;while(1){if(B<<24>>24>0){E=0.0;F=0;while(1){hd(3553,c[d+(e*772|0)+(k<<5)+(F<<2)+361404>>2]|0);Jf(3553,10240,9728);Jf(3553,10241,9728);G=+(b[d+(e*772|0)+(k<<4)+(F<<1)+361916>>1]|0);H=G/+(b[d+(e*772|0)+(k<<4)+(F<<1)+361660>>1]|0);I=+(b[d+(e*772|0)+(k<<4)+(F<<1)+362044>>1]|0);J=I/+(b[d+(e*772|0)+(k<<4)+(F<<1)+361788>>1]|0);g[h>>2]=D;K=E+I;g[m>>2]=K;g[n>>2]=0.0;g[o>>2]=0.0;I=D+G;g[p>>2]=I;g[q>>2]=K;g[r>>2]=H;g[s>>2]=0.0;g[t>>2]=I;g[u>>2]=E;g[v>>2]=H;g[w>>2]=J;g[x>>2]=D;g[y>>2]=E;g[z>>2]=0.0;g[A>>2]=J;Vm(h);L=F+1|0;M=a[l]|0;if((L|0)<(M<<24>>24|0)){E=E+ +(b[d+(e*772|0)+(k<<4)+(L<<1)+361788>>1]|0);F=L}else{break}}N=a[j]|0;O=M;P=F}else{N=C;O=B;P=-1}L=k+1|0;if((L|0)<(N<<24>>24|0)){B=O;C=N;D=D+ +(b[d+(e*772|0)+(k<<4)+(P<<1)+361660>>1]|0);k=L}else{break}}}c[2138]=-1;c[d+24>>2]=-1;c[d+28>>2]=-1;c[d+32>>2]=0;k=c[1480]|0;if((k|0)==0){Vd(3553);if((c[6152>>2]|0)!=1){Me(2903);c[6152>>2]=1}}else{Jh[k&127](33985);Vd(3553);Jh[c[1480]&127](33984);Vd(3553)}if((a[d+367580|0]|0)==0){Jf(3553,10240,9728);Jf(3553,10241,9728)}else{Jf(3553,10240,9729);Jf(3553,10241,9729)}Pk(d,0.0);i=f;return}function Gm(e,f){e=e|0;f=f|0;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0;f=i;i=i+32|0;g=f;ao(e);Dh();do{if((a[e+362172|0]|0)>0){j=e+98481|0;if((a[j]|0)!=0){a[j]=0;wf(256)}Fm(e,0)}else{j=e+98481|0;k=(a[j]|0)==0;if((a[e+98480|0]|0)==0){if(k){break}else{l=256;m=8}}else{if(k){n=16384}else{l=16640;m=8}}if((m|0)==8){a[j]=0;n=l}wf(n|0)}}while(0);n=e+367648|0;l=g+8|0;j=g+16|0;a:do{b:do{if((Dd(g|0)|0)!=0){k=0;do{k=k+1|0;if((k|0)>=256){break b}o=d[g]|0;c:do{if((o|0)==2){switch(c[l>>2]|0){case 8:{Ol(8);break c;break};case 211:case 14:case 281:case 280:case 279:case 278:case 277:case 276:case 275:case 274:case 273:{break c;break};default:{}}p=b[j>>1]|0;if((p&65535)<256){Ol(p&255)}}else if((o|0)==12){m=19;break a}}while(0)}while((Dd(g|0)|0)!=0)}}while(0);q=+jl();r=+h[n>>3]-q;if(r>7.0){s=r+-3.0;Cl(~~s>>>0);t=q+s;u=s}else{t=q;u=r}}while(u>1.0);if((m|0)==19){Xa(10720)|0;v=0;i=f;return v|0}u=+h[e+367656>>3];if(!(u>0.0)){v=1;i=f;return v|0}r=u+ +h[n>>3];h[n>>3]=r;if(!(r<t)){v=1;i=f;return v|0}q=r+u;h[n>>3]=q;if(!(q<t)){v=1;i=f;return v|0}h[n>>3]=t+u;v=1;i=f;return v|0}function Hm(b,e,f,g,j,k,l,m){b=b|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0;m=i;i=i+32|0;j=m;e=m+20|0;c[b+367640>>2]=0;if((k|0)<1){h[b+367656>>3]=2.0}else{h[b+367656>>3]=1.0e3/+(k|0)}c[b+367600>>2]=l;Xa(10736)|0;k=Cd()|0;n=c[k+12>>2]|0;c[434]=n;o=c[k+16>>2]|0;c[436]=o;p=d[(c[k+8>>2]|0)+4|0]|0;c[b+367620>>2]=(n|0)>(o|0);o=c[436]|0;n=c[430]|0;k=c[432]|0;c[j>>2]=c[434];c[j+4>>2]=o;c[j+8>>2]=p;c[j+12>>2]=n;c[j+16>>2]=k;tg(7288,j|0)|0;Xa(10752)|0;c[j>>2]=2;tg(7344,j|0)|0;Xa(10768)|0;Ic(5,1)|0;Xa(10792)|0;Xa(10824)|0;c[j>>2]=8;c[j+4>>2]=8;c[j+8>>2]=8;c[j+12>>2]=8;tg(7376,j|0)|0;Ic(0,8)|0;Ic(1,8)|0;Ic(2,8)|0;Ic(3,8)|0;Ic(6,24)|0;Ic(7,8)|0;Ic(5,1)|0;k=(l|0)!=0;if(k){c[j>>2]=l;tg(7464,j|0)|0;Ic(13,1)|0;Ic(14,l|0)|0}c[j>>2]=f;c[j+4>>2]=g;c[j+8>>2]=32;c[j+12>>2]=67108866;tg(7488,j|0)|0;do{if((Pb(f|0,g|0,32,67108866)|0)==0){c[j>>2]=je()|0;tg(7536,j|0)|0;if(k){Xa(11200)|0;Ic(13,0)|0;Ic(14,0)|0;if((Pb(f|0,g|0,32,67108866)|0)!=0){q=32;break}}Xa(10920)|0;l=Pb(f|0,g|0,32,335544322)|0;Xa(10872)|0;if((Pb(f|0,g|0,16,67108866)|0)==0){Xa(10920)|0;if((l|0)!=0|(Pb(f|0,g|0,16,335544322)|0)!=0){q=16}else{c[j>>2]=je()|0;tg(7568,j|0)|0;r=0;i=m;return r|0}}else{q=16}}else{q=32}}while(0);c[j>>2]=1;tg(7600,j|0)|0;Xa(11016)|0;Me(3553);Vd(3553);Xa(11040)|0;c[j>>2]=d[(c[(od()|0)+4>>2]|0)+4|0]|0;tg(7640,j|0)|0;Sc(10)|0;c[j>>2]=Ne(7936)|0;tg(7656,j|0)|0;c[j>>2]=Ne(7937)|0;tg(7680,j|0)|0;c[j>>2]=Ne(7938)|0;tg(7704,j|0)|0;c[j>>2]=Ne(7939)|0;tg(7728,j|0)|0;Sc(10)|0;Xa(11064)|0;a[b+98480|0]=1;yb(0.0,0.0,0.0,1.0);wf(16384);k=b+98481|0;a[k]=1;Gm(b,0)|0;a[k]=1;Gm(b,0)|0;Km(b);c[b+367592>>2]=q;c[b+367588>>2]=g;c[b+367584>>2]=f;a[b+367596|0]=0;Xa(11088)|0;h[b+367648>>3]=+jl();Xa(11120)|0;Gm(b,0)|0;f=Ne(7939)|0;if((f|0)!=0){do{if((Ht(f,7752)|0)!=0){g=qd(7776)|0;if((g|0)==0){c[j>>2]=7776;tg(10688,j|0)|0;c[1486]=0;break}else{c[1486]=g;break}}}while(0);if((Ht(f,7800)|0)!=0){g=qd(7824)|0;if((g|0)==0){c[j>>2]=7824;tg(10688,j|0)|0}c[1480]=g;g=qd(7848)|0;if((g|0)==0){c[j>>2]=7848;tg(10688,j|0)|0}c[1482]=g;g=qd(7872)|0;if((g|0)==0){c[j>>2]=7872;tg(10688,j|0)|0}c[1484]=g;g=qd(7904)|0;if((g|0)==0){c[j>>2]=7904;tg(10688,j|0)|0}c[1488]=g;g=qd(7920)|0;if((g|0)==0){c[j>>2]=7920;tg(10688,j|0)|0}c[1490]=g;g=qd(7936)|0;if((g|0)==0){c[j>>2]=7936;tg(10688,j|0)|0}c[1492]=g;g=qd(7952)|0;if((g|0)==0){c[j>>2]=7952;tg(10688,j|0)|0}c[1494]=g;g=qd(7976)|0;if((g|0)==0){c[j>>2]=7976;tg(10688,j|0)|0}c[1496]=g;g=qd(7992)|0;if((g|0)==0){c[j>>2]=7992;tg(10688,j|0)|0}c[1498]=g;g=qd(8016)|0;if((g|0)==0){c[j>>2]=8016;tg(10688,j|0)|0}c[1500]=g}if((Ht(f,8048)|0)!=0){f=qd(8072)|0;if((f|0)==0){c[j>>2]=8072;tg(10688,j|0)|0}c[1502]=f;f=qd(8104)|0;if((f|0)==0){c[j>>2]=8104;tg(10688,j|0)|0}c[1504]=f;f=qd(8128)|0;if((f|0)==0){c[j>>2]=8128;tg(10688,j|0)|0}c[1506]=f;f=qd(8152)|0;if((f|0)==0){c[j>>2]=8152;tg(10688,j|0)|0}c[1508]=f;f=qd(8176)|0;if((f|0)==0){c[j>>2]=8176;tg(10688,j|0)|0}c[1510]=f;f=qd(8200)|0;if((f|0)==0){c[j>>2]=8200;tg(10688,j|0)|0}c[1512]=f;f=qd(8232)|0;if((f|0)==0){c[j>>2]=8232;tg(10688,j|0)|0}c[1514]=f;f=qd(8256)|0;if((f|0)==0){c[j>>2]=8256;tg(10688,j|0)|0}c[1516]=f;f=qd(8272)|0;if((f|0)==0){c[j>>2]=8272;tg(10688,j|0)|0}c[1518]=f;f=qd(8296)|0;if((f|0)==0){c[j>>2]=8296;tg(10688,j|0)|0}c[1520]=f;f=qd(8320)|0;if((f|0)==0){c[j>>2]=8320;tg(10688,j|0)|0}c[1522]=f;f=qd(8344)|0;if((f|0)==0){c[j>>2]=8344;tg(10688,j|0)|0}c[1524]=f;f=qd(8360)|0;if((f|0)==0){c[j>>2]=8360;tg(10688,j|0)|0}c[1526]=f;f=qd(8376)|0;if((f|0)==0){c[j>>2]=8376;tg(10688,j|0)|0}c[1528]=f;f=qd(8400)|0;if((f|0)==0){c[j>>2]=8400;tg(10688,j|0)|0}c[1530]=f}}f=Ne(7939)|0;g=b+98482|0;a[g]=0;do{if((f|0)==0){s=78}else{if((Ht(f,8424)|0)==0){t=0}else{a[g]=1;t=1}if((Ht(f,8456)|0)==0){if(t<<24>>24==0){s=78;break}}else{a[g]=1}Xa(11176)|0}}while(0);if((s|0)==78){c[j>>2]=f;tg(8472,j|0)|0}Vc(3379,e|0);c[j>>2]=c[e>>2];tg(8504,j|0)|0;Xa(11136)|0;Wn();Xa(11152)|0;Km(b);Xa(11160)|0;r=1;i=m;return r|0}function Im(a,b,c){a=a|0;b=b|0;c=c|0;c=i;if((b|0)<1){h[a+367656>>3]=2.0;i=c;return}else{h[a+367656>>3]=1.0e3/+(b|0);i=c;return}}function Jm(b,c){b=b|0;c=c|0;var d=0,e=0;d=i;e=b+98480|0;if((c|0)==-1){a[e]=0;i=d;return}else{a[e]=1;yb(+(+(c&255|0)/255.0),+(+(c>>>8&255|0)/255.0),+(+(c>>>16&255|0)/255.0),1.0);wf(16384);i=d;return}}function Km(b){b=b|0;var d=0,e=0,f=0,h=0;d=i;Nm(b,0,0,0,0);e=6128|0;f=e+88|0;do{c[e>>2]=2139062143;e=e+4|0}while((e|0)<(f|0));Vd(2929);c[6168>>2]=0;if((c[6156>>2]|0)!=0){Vd(2884);c[6156>>2]=0}sd(2305);if(+g[2664]!=1.0|+g[2666]!=1.0|+g[2668]!=1.0|+g[2670]!=1.0){g[2664]=1.0;g[2666]=1.0;g[2668]=1.0;g[2670]=1.0;sc(1.0,1.0,1.0,1.0)}if((c[6172>>2]|0)!=0){Vd(2912);c[6172>>2]=0}if((c[6180>>2]|0)!=0){Vd(2848);c[6180>>2]=0}if((c[6184>>2]|0)!=0){Vd(2832);c[6184>>2]=0}if((c[6164>>2]|0)!=0){Vd(2960);c[6164>>2]=0}if((c[6188>>2]|0)!=0){Vd(2977);c[6188>>2]=0}if((c[6160>>2]|0)!=0){Vd(2896);c[6160>>2]=0}wh(7424);if((c[6152>>2]|0)!=0){Vd(2903);c[6152>>2]=0}if((c[6176>>2]|0)!=0){Vd(3024);c[6176>>2]=0}a[b+367580|0]=1;c[2138]=-1;c[b+24>>2]=-1;c[b+28>>2]=-1;c[b+32>>2]=0;e=c[1480]|0;if((e|0)==0){Vd(3553);if((c[6152>>2]|0)!=1){Me(2903);c[6152>>2]=1}}else{Jh[e&127](33985);Vd(3553);Jh[c[1480]&127](33984);Vd(3553)}if((c[6132>>2]|0)==0){h=b+98476|0;g[h>>2]=1.0;Pk(b,-1.0);i=d;return}Vd(3008);c[6132>>2]=0;h=b+98476|0;g[h>>2]=1.0;Pk(b,-1.0);i=d;return}function Lm(b){b=b|0;var d=0,e=0;d=i;e=od()|0;if((c[e>>2]|0)<0){Zd(e|0)|0}a[b+367596|0]=0;i=d;return 1}function Mm(b){b=b|0;var d=0,e=0;d=i;e=od()|0;if((c[e>>2]|0)>=0){Zd(e|0)|0}a[b+367596|0]=1;i=d;return 1}function Nm(a,d,e,f,h){a=a|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0.0,S=0.0;j=i;i=i+64|0;k=j;l=c[a+99252>>2]|0;m=(l|0)==-1;do{if((f|0)<1|(h|0)<1){if(!m){n=0;o=0;p=c[a+(l*24|0)+98500>>2]|0;q=c[a+(l*24|0)+98496>>2]|0;r=27;break}s=c[a+367624>>2]|0;if((s|0)==3|(s|0)==1){t=a+367588|0;u=a+367584|0}else{t=a+367584|0;u=a+367588|0}v=0;w=0;x=c[u>>2]|0;y=c[t>>2]|0}else{if(m){v=e;w=d;x=h;y=f}else{n=e;o=d;p=h;q=f;r=27}}}while(0);if((r|0)==27){jb(o|0,(b[(c[a+98468>>2]|0)+((c[a+(l*24|0)+98504>>2]|0)*28|0)+22>>1]|0)-(n+p)|0,q|0,p|0);Yb(5889);xc();_a(0.0,+(+(q|0)),+(+(p|0)),0.0,-1.0,1.0);z=n;A=o;B=q;C=p;D=a+367604|0;c[D>>2]=A;E=a+367608|0;c[E>>2]=z;F=a+367612|0;c[F>>2]=B;G=a+367616|0;c[G>>2]=C;Yb(5888);xc();i=j;return}p=0-x|0;Yb(5889);q=a+367624|0;o=c[q>>2]|0;if((o|0)==3){H=k+0|0;I=H+60|0;do{c[H>>2]=0;H=H+4|0}while((H|0)<(I|0));g[k+4>>2]=1.0;g[k+16>>2]=-1.0;g[k+40>>2]=1.0;g[k+60>>2]=1.0;Ig(k|0)}else if((o|0)==2){H=k+0|0;I=H+60|0;do{c[H>>2]=0;H=H+4|0}while((H|0)<(I|0));g[k>>2]=-1.0;g[k+20>>2]=-1.0;g[k+40>>2]=1.0;g[k+60>>2]=1.0;Ig(k|0)}else if((o|0)==1){H=k+0|0;I=H+60|0;do{c[H>>2]=0;H=H+4|0}while((H|0)<(I|0));g[k+4>>2]=-1.0;g[k+16>>2]=1.0;g[k+40>>2]=1.0;g[k+60>>2]=1.0;Ig(k|0)}else{xc()}H=c[q>>2]|0;if((H|0)==1){J=w;K=(c[a+367584>>2]|0)+~v|0;L=p;M=y}else if((H|0)==2){J=(c[a+367588>>2]|0)+~v|0;K=(c[a+367584>>2]|0)+~w|0;L=0-y|0;M=p}else if((H|0)==3){J=(c[a+367588>>2]|0)+~w|0;K=v;L=x;M=0-y|0}else{J=v;K=w;L=y;M=x}if((L|0)<0){N=K+1+L|0;O=0-L|0}else{N=K;O=L}if((M|0)<0){P=J+1+M|0;Q=0-M|0}else{P=J;Q=M}Yb(5889);M=c[q>>2]|0;if((M|0)==3|(M|0)==1){jb(N|0,(c[a+367588>>2]|0)-(P+Q)|0,O|0,Q|0);R=+(Q|0);S=+(O|0);g[k>>2]=2.0/R;g[k+16>>2]=0.0;g[k+32>>2]=0.0;g[k+48>>2]=-R/R;g[k+4>>2]=0.0;R=0.0-S;g[k+20>>2]=2.0/R;g[k+36>>2]=0.0;g[k+52>>2]=-S/R;g[k+8>>2]=0.0;g[k+24>>2]=0.0;g[k+40>>2]=-1.0;g[k+56>>2]=-0.0;g[k+12>>2]=0.0;g[k+28>>2]=0.0;g[k+44>>2]=0.0;g[k+60>>2]=1.0;Ud(k|0)}else{jb(N|0,(c[a+367588>>2]|0)-(P+Q)|0,O|0,Q|0);R=+(O|0);S=+(Q|0);g[k>>2]=2.0/R;g[k+16>>2]=0.0;g[k+32>>2]=0.0;g[k+48>>2]=-R/R;g[k+4>>2]=0.0;R=0.0-S;g[k+20>>2]=2.0/R;g[k+36>>2]=0.0;g[k+52>>2]=-S/R;g[k+8>>2]=0.0;g[k+24>>2]=0.0;g[k+40>>2]=-1.0;g[k+56>>2]=-0.0;g[k+12>>2]=0.0;g[k+28>>2]=0.0;g[k+44>>2]=0.0;g[k+60>>2]=1.0;Ud(k|0)}k=c[q>>2]|0;if(!((k|0)==3|(k|0)==1)){z=v;A=w;B=O;C=Q;D=a+367604|0;c[D>>2]=A;E=a+367608|0;c[E>>2]=z;F=a+367612|0;c[F>>2]=B;G=a+367616|0;c[G>>2]=C;Yb(5888);xc();i=j;return}z=v;A=w;B=Q;C=O;D=a+367604|0;c[D>>2]=A;E=a+367608|0;c[E>>2]=z;F=a+367612|0;c[F>>2]=B;G=a+367616|0;c[G>>2]=C;Yb(5888);xc();i=j;return}function Om(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){au(d);c[a>>2]=0;c[a+8>>2]=0}c[a+4>>2]=0;i=b;return}function Pm(a,d,e){a=a|0;d=d|0;e=e|0;var f=0;f=i;Qm(a,d,-1,0,0);c[8532>>2]=0;Rm(8528,2)|0;c[2140]=e;c[2142]=0;if(!((d|0)>-1)){c[2148]=0;i=f;return}e=c[a+98468>>2]|0;g[2144]=1.0/+(b[e+(d*28|0)+16>>1]|0);g[2146]=1.0/+(b[e+(d*28|0)+18>>1]|0);c[2148]=0;i=f;return}function Qm(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;c[2138]=b;h=(e|0)!=0|0;c[a+24>>2]=b;c[a+28>>2]=d;c[a+32>>2]=h;e=c[1480]|0;if((e|0)==0){if(!((b|0)>-1)){Vd(3553);if((c[6152>>2]|0)==1){i=g;return}Me(2903);c[6152>>2]=1;i=g;return}if((f|0)==0){hd(3553,c[(c[a+98468>>2]|0)+(b*28|0)+(h<<2)>>2]|0)}else{hd(3553,c[f+(b<<2)>>2]|0)}Me(3553);Lf(3553,10242,10497.0);Lf(3553,10243,10497.0);i=g;return}Jh[e&127](33985);e=(d|0)>-1;j=(b|0)>-1;if((d|b|0)>-1){if((f|0)==0){hd(3553,c[(c[a+98468>>2]|0)+(b*28|0)+(h<<2)>>2]|0)}else{hd(3553,c[f+(b<<2)>>2]|0)}Me(3553);Lf(3553,10242,10497.0);Lf(3553,10243,10497.0)}else{Vd(3553)}Jh[c[1480]&127](33984);if(!j){Vd(3553);i=g;return}j=(f|0)!=0;do{if(e){if(j){hd(3553,c[f+(d<<2)>>2]|0);break}else{hd(3553,c[(c[a+98468>>2]|0)+(d*28|0)+(h<<2)>>2]|0);break}}else{if(j){hd(3553,c[f+(b<<2)>>2]|0);break}else{hd(3553,c[(c[a+98468>>2]|0)+(b*28|0)+(h<<2)>>2]|0);break}}}while(0);Me(3553);Lf(3553,10242,10497.0);Lf(3553,10243,10497.0);i=g;return}function Rm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=a+8|0;if((c[e>>2]|0)>(b|0)){f=1;i=d;return f|0}g=c[a+16>>2]|0;if((g|0)<(b|0)){h=c[a+12>>2]|0;j=ea(((b|0)/(h|0)|0)+1|0,h)|0}else{j=g}c[e>>2]=j;g=_t(j>>>0>214748364?-1:j*20|0)|0;j=c[a>>2]|0;h=(j|0)==0;if((g|0)==0){if(!h){au(j);c[a>>2]=0;c[e>>2]=0}c[a+4>>2]=0;f=0;i=d;return f|0}if(!h){h=c[a+4>>2]|0;if((h|0)>0){e=0;do{c[g+(e*20|0)>>2]=c[j+(e*20|0)>>2];c[g+(e*20|0)+4>>2]=c[j+(e*20|0)+4>>2];c[g+(e*20|0)+8>>2]=c[j+(e*20|0)+8>>2];c[g+(e*20|0)+12>>2]=c[j+(e*20|0)+12>>2];c[g+(e*20|0)+16>>2]=c[j+(e*20|0)+16>>2];e=e+1|0}while((e|0)<(h|0))}au(j)}c[a>>2]=g;f=1;i=d;return f|0}function Sm(d,e,f,h,j,k){d=d|0;e=+e;f=+f;h=+h;j=+j;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0;l=i;m=c[8532>>2]|0;n=m+1|0;o=n+(c[2148]|0)|0;Rm(8528,o)|0;c[8532>>2]=o;o=c[2132]|0;p=o+(m*20|0)|0;g[p>>2]=e;q=o+(m*20|0)+4|0;g[q>>2]=f;r=c[2138]|0;if((r|0)>-1){g[o+(m*20|0)+8>>2]=+g[2144]*h;g[o+(m*20|0)+12>>2]=+g[2146]*(+(b[(c[d+98468>>2]|0)+(r*28|0)+22>>1]|0)-j)}if((k|0)==16777215){a[o+(m*20|0)+18|0]=-1;a[o+(m*20|0)+17|0]=-1;a[o+(m*20|0)+16|0]=-1}else{c[2142]=1;a[o+(m*20|0)+16|0]=k;a[o+(m*20|0)+17|0]=k>>>8;a[o+(m*20|0)+18|0]=k>>>16}do{if((c[d+367628>>2]|0)==(k|0)){a[o+(m*20|0)+19|0]=0}else{j=+g[d+98472>>2];if(j==1.0){a[o+(m*20|0)+19|0]=-1;break}else{a[o+(m*20|0)+19|0]=~~(j*255.0);break}}}while(0);if((c[2148]|0)==0){i=l;return}d=c[2132]|0;c[d+(n*20|0)>>2]=c[p>>2];c[d+(n*20|0)+4>>2]=c[q>>2];c[d+(n*20|0)+8>>2]=c[o+(m*20|0)+8>>2];c[d+(n*20|0)+12>>2]=c[o+(m*20|0)+12>>2];c[d+(n*20|0)+16>>2]=c[o+(m*20|0)+16>>2];c[2148]=0;i=l;return}function Tm(b){b=b|0;var d=0,e=0,f=0.0;d=i;Ye(32884);ue(2,5126,20,c[2132]|0);if((c[2138]|0)>-1){Ye(32888);gf(2,5126,20,(c[2132]|0)+8|0)}if((c[2142]|0)==0){if(+g[b+98472>>2]!=1.0){e=5}}else{e=5}if((e|0)==5){c[2142]=1;if((c[6176>>2]|0)!=1){Me(3024);c[6176>>2]=1}wh(7425);Ye(32886);nh(4,5121,20,(c[2132]|0)+16|0)}if((a[b+367580|0]|0)==0){Jf(3553,10240,9728);Jf(3553,10241,9728)}else{Jf(3553,10240,9729);Jf(3553,10241,9729)}e=c[2140]|0;if((e|0)==2){Bb(5,0,c[8532>>2]|0)}else if((e|0)==1){Bb(4,0,c[8532>>2]|0)}else if((e|0)==0){Bb(6,0,c[8532>>2]|0)}fh(32884);fh(32888);if((c[2142]|0)==0){i=d;return}f=+g[b+98472>>2];if(+g[2664]!=1.0|+g[2666]!=1.0|+g[2668]!=1.0|+g[2670]!=f){g[2664]=1.0;g[2666]=1.0;g[2668]=1.0;g[2670]=f;sc(1.0,1.0,1.0,+f)}fh(32886);wh(7424);if((c[6176>>2]|0)==0){i=d;return}Vd(3024);c[6176>>2]=0;i=d;return}function Um(a,b){a=a|0;b=+b;var d=0;d=i;if(!(b>=1.0)){Pk(a,-1.0);g[a+98476>>2]=1.0;i=d;return}if((c[6132>>2]|0)!=0){Vd(3008);c[6132>>2]=0}g[a+98476>>2]=1.0;i=d;return}function Vm(a){a=a|0;var b=0;b=i;Ye(32884);ue(2,5126,16,a|0);if((c[2138]|0)>-1){Ye(32888);gf(2,5126,16,a+8|0)}Lf(3553,10242,33071.0);Lf(3553,10243,33071.0);Bb(6,0,4);fh(32884);if(!((c[2138]|0)>-1)){i=b;return}fh(32888);i=b;return}function Wm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=a+8|0;if((c[e>>2]|0)==0){i=d;return}Ye(32884);f=a+4|0;ue(3,5126,20,c[f>>2]|0);if((c[2138]|0)>-1){Ye(32888);gf(2,5126,20,(c[f>>2]|0)+12|0)}Bb(b|0,0,c[e>>2]|0);fh(32884);fh(32888);i=d;return}function Xm(d,e,f,h){d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0.0,o=0.0;j=i;k=c[d+98468>>2]|0;Qm(d,e,-1,0,0);if((a[d+367580|0]|0)==0){Jf(3553,10240,9728);Jf(3553,10241,9728)}else{Jf(3553,10240,9729);Jf(3553,10241,9729)}fg(7);d=k+(e*28|0)+8|0;l=k+(e*28|0)+12|0;pe(+(+g[d>>2]),+(+g[l>>2]));m=k+(e*28|0)+20|0;n=+(h|0);$b(+(+((b[m>>1]|0)+f|0)),+n,0.0);pe(0.0,+(+g[l>>2]));o=+(f|0);$b(+o,+n,0.0);pe(0.0,0.0);l=k+(e*28|0)+22|0;$b(+o,+(+((b[l>>1]|0)+h|0)),0.0);pe(+(+g[d>>2]),0.0);$b(+(+((b[m>>1]|0)+f|0)),+(+((b[l>>1]|0)+h|0)),0.0);Nd();i=j;return}function Ym(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0.0,o=0.0,p=0.0;k=i;i=i+64|0;l=k;m=c[b+98468>>2]|0;Qm(b,d,-1,0,0);n=+(e|0);g[l>>2]=n;o=+(j+f|0);g[l+4>>2]=o;g[l+8>>2]=0.0;g[l+12>>2]=0.0;p=+(h+e|0);g[l+16>>2]=p;g[l+20>>2]=o;e=m+(d*28|0)+8|0;g[l+24>>2]=+g[e>>2];g[l+28>>2]=0.0;g[l+32>>2]=p;p=+(f|0);g[l+36>>2]=p;g[l+40>>2]=+g[e>>2];e=m+(d*28|0)+12|0;g[l+44>>2]=+g[e>>2];g[l+48>>2]=n;g[l+52>>2]=p;g[l+56>>2]=0.0;g[l+60>>2]=+g[e>>2];if((a[b+367580|0]|0)==0){Jf(3553,10240,9728);Jf(3553,10241,9728);Vm(l);i=k;return}else{Jf(3553,10240,9729);Jf(3553,10241,9729);Vm(l);i=k;return}}function Zm(d,e,f,h,j,k){d=d|0;e=e|0;f=f|0;h=h|0;j=+j;k=+k;var l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0;l=i;i=i+64|0;m=l;n=d+98468|0;o=c[n>>2]|0;p=+(b[o+(e*28|0)+20>>1]|0);q=+(b[o+(e*28|0)+16>>1]|0);r=(p+-.5)/q;s=+(b[o+(e*28|0)+22>>1]|0);t=+(b[o+(e*28|0)+18>>1]|0);u=(s+-.5)/t;v=.5/q;q=.5/t;g[2150]=p*k*.5;g[2152]=s*k*.5;Qm(d,e,-1,0,0);qc();o=c[n>>2]|0;Ra(+(+((b[o+(e*28|0)+20>>1]>>1)+f|0)),+(+((b[o+(e*28|0)+22>>1]>>1)+h|0)),0.0);bh(+j,0.0,0.0,-1.0);j=+g[2150];k=-j;g[m>>2]=k;s=+g[2152];g[m+4>>2]=s;g[m+8>>2]=v;g[m+12>>2]=q;g[m+16>>2]=j;g[m+20>>2]=s;g[m+24>>2]=r;g[m+28>>2]=q;g[m+32>>2]=j;j=-s;g[m+36>>2]=j;g[m+40>>2]=r;g[m+44>>2]=u;g[m+48>>2]=k;g[m+52>>2]=j;g[m+56>>2]=v;g[m+60>>2]=u;if((a[d+367580|0]|0)==0){Jf(3553,10240,9728);Jf(3553,10241,9728);Vm(m);xf();i=l;return}else{Jf(3553,10240,9729);Jf(3553,10241,9729);Vm(m);xf();i=l;return}}function _m(e,f,h,j,k,l,m,n){e=e|0;f=f|0;h=h|0;j=+j;k=+k;l=+l;m=m|0;n=n|0;var o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0.0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0;o=i;p=uu(h|0)|0;if((p|0)==0){i=o;return}q=e+4|0;r=p<<2;p=e+12|0;do{if((c[p>>2]|0)>(r|0)){s=c[q>>2]|0}else{t=c[e+20>>2]|0;if((t|0)<(r|0)){u=c[e+16>>2]|0;v=ea(((r|0)/(u|0)|0)+1|0,u)|0}else{v=t}c[p>>2]=v;t=_t(v>>>0>214748364?-1:v*20|0)|0;u=c[q>>2]|0;w=(u|0)==0;if((t|0)==0){if(!w){au(u);c[q>>2]=0;c[p>>2]=0}c[e+8>>2]=0;s=0;break}if(!w){w=c[e+8>>2]|0;if((w|0)>0){x=0;do{y=t+(x*20|0)|0;z=u+(x*20|0)|0;c[y+0>>2]=c[z+0>>2];c[y+4>>2]=c[z+4>>2];c[y+8>>2]=c[z+8>>2];c[y+12>>2]=c[z+12>>2];c[y+16>>2]=c[z+16>>2];x=x+1|0}while((x|0)!=(w|0))}au(u)}c[q>>2]=t;s=t}}while(0);c[e+8>>2]=r;r=f+65504|0;Qm(e,r,-1,0,0);q=c[e+98468>>2]|0;A=+g[q+(r*28|0)+8>>2]*.0625;p=b[q+(r*28|0)+20>>1]|0;B=+(p<<16>>16>>4|0);v=b[q+(r*28|0)+22>>1]|0;w=v<<16>>16;C=+g[q+(r*28|0)+12>>2];if(p<<16>>16<v<<16>>16){D=256;E=w>>4;F=C*.0625;G=15}else{D=128;E=w>>3;F=C*.125;G=7}C=+(E|0);H=+da(+j);j=+da(+k);if((n|0)==0){I=B;J=C;K=1.0}else{k=+g[e+(f<<2)+98340>>2];I=B*k;J=C*k;K=k}n=((a[h]|0)>>>0)%(D>>>0)|0;E=(n|0)==0;if((m|0)==0){if(!E){k=j+J;C=H;m=n;w=0;v=s;while(1){B=A*+((m&15)>>>0);L=F*+((G-(m>>>4)|0)>>>0);g[v>>2]=C;g[v+4>>2]=k;g[v+8>>2]=l;g[v+12>>2]=B;g[v+16>>2]=L;M=F+L;g[v+20>>2]=C;g[v+24>>2]=j;g[v+28>>2]=l;g[v+32>>2]=B;g[v+36>>2]=M;C=I+C;N=A+B;g[v+40>>2]=C;g[v+44>>2]=k;g[v+48>>2]=l;g[v+52>>2]=N;g[v+56>>2]=L;g[v+60>>2]=C;g[v+64>>2]=j;g[v+68>>2]=l;g[v+72>>2]=N;g[v+76>>2]=M;w=w+1|0;m=((a[h+w|0]|0)>>>0)%(D>>>0)|0;if((m|0)==0){break}else{v=v+80|0}}}}else{if(!E){C=j+J;J=H;E=n;n=0;v=s;while(1){H=F*+((G-(E>>>4)|0)>>>0);k=K*+(d[e+(f*3072|0)+(E*12|0)+37|0]|0);s=e+(f*3072|0)+(E*12|0)+40|0;A=+g[s>>2];g[v>>2]=J;g[v+4>>2]=C;g[v+8>>2]=l;g[v+12>>2]=A;g[v+16>>2]=H;A=+g[s>>2];I=F+H;g[v+20>>2]=J;g[v+24>>2]=j;g[v+28>>2]=l;g[v+32>>2]=A;g[v+36>>2]=I;J=J+k;s=e+(f*3072|0)+(E*12|0)+44|0;k=+g[s>>2];g[v+40>>2]=J;g[v+44>>2]=C;g[v+48>>2]=l;g[v+52>>2]=k;g[v+56>>2]=H;H=+g[s>>2];g[v+60>>2]=J;g[v+64>>2]=j;g[v+68>>2]=l;g[v+72>>2]=H;g[v+76>>2]=I;n=n+1|0;E=((a[h+n|0]|0)>>>0)%(D>>>0)|0;if((E|0)==0){break}else{v=v+80|0}}}}Wm(e,5);i=o;return}function $m(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;f=i;i=i+32|0;h=f;g[b+(d<<2)+98340>>2]=1.0;j=h+4|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;a[h]=1;k=b+367632|0;if(an(h,e,c[k>>2]|0)|0){l=2}else{if(bn(h,e,c[k>>2]|0)|0){l=2}else{cn(b,d+65504|0);m=0;n=h+8|0;o=h+12|0}}if((l|0)==2){l=c[j>>2]|0;k=8;do{k=k<<1}while((k|0)<(l|0));e=h+8|0;p=c[e>>2]|0;q=8;do{q=q<<1}while((q|0)<(p|0));r=+(k|0);k=l>>4;q=(l|0)<(p|0);s=p>>(q?4:3);p=q?256:128;t=(k|0)>0;u=b+(d*3072|0)+421|0;v=b+(d*3072|0)+424|0;w=b+(d*3072|0)+428|0;x=(s|0)>0;y=h+12|0;z=0;do{A=(z|0)%16|0;B=(z|0)/16|0;C=b+(d*3072|0)+(z*12|0)+37|0;a[C]=0;D=b+(d*3072|0)+(z*12|0)+36|0;a[D]=0;a:do{if(t){E=ea(A,k)|0;F=ea(B,s)|0;G=c[y>>2]|0;H=0;while(1){if(x){I=H+E|0;J=0;while(1){K=J+1|0;if((a[G+(I+(ea(l,J+F|0)|0)<<2|3)|0]|0)!=0){L=H;break a}if((K|0)<(s|0)){J=K}else{break}}}J=H+1|0;if((J|0)<(k|0)){H=J}else{L=0;break}}}else{L=0}}while(0);H=ea(A,k)|0;b:do{if((k|0)>(L|0)){F=ea(B,s)|0;G=c[y>>2]|0;E=k;c:while(1){M=E+ -1|0;if(x){J=M+H|0;I=0;while(1){K=I+1|0;if((a[G+(J+(ea(l,I+F|0)|0)<<2|3)|0]|0)!=0){break c}if((K|0)<(s|0)){I=K}else{break}}}if((M|0)>(L|0)){E=M}else{N=k;O=0;P=0;break b}}F=M-L|0;G=F+1|0;if((F|0)<0){N=k;O=0;P=G}else{I=(E|0)<(k|0)?F+2|0:G;N=I;O=L&255;P=I}}else{N=k;O=0;P=0}}while(0);a[D]=O;B=N&255;a[C]=B;A=L+H|0;I=b+(d*3072|0)+(z*12|0)+40|0;g[I>>2]=+(A|0)/r;G=b+(d*3072|0)+(z*12|0)+44|0;g[G>>2]=+(A+P|0)/r;if((z|0)==106){a[u]=B;g[v>>2]=0.0;g[w>>2]=+g[G>>2]- +g[I>>2]}if(!q){I=b+(d*3072|0)+((z+128|0)*12|0)+36|0;c[I+0>>2]=c[D+0>>2];c[I+4>>2]=c[D+4>>2];c[I+8>>2]=c[D+8>>2]}z=z+1|0}while((z|0)<(p|0));m=Am(b,d+65504|0,h,0,0)|0;n=e;o=y}c[h+16>>2]=0;c[n>>2]=0;c[j>>2]=0;j=c[o>>2]|0;if((j|0)==0){i=f;return m|0}au(j);i=f;return m|0}function an(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0;j=i;i=i+96|0;k=j+32|0;l=j+52|0;m=j+64|0;n=j+56|0;o=j+60|0;p=j+36|0;q=j+80|0;r=j+82|0;s=j+44|0;t=j+40|0;u=j+78|0;v=j+68|0;w=j+76|0;x=j+74|0;y=j+28|0;z=j+24|0;A=j+70|0;B=j+72|0;C=j+48|0;D=j+85|0;E=j+84|0;F=j;a[D]=120;a[E]=120;c[F+0>>2]=0;c[F+4>>2]=0;c[F+8>>2]=0;c[F+12>>2]=0;c[F+16>>2]=0;c[F+20>>2]=0;a:do{if(qk(F,g)|0){G=c[F>>2]|0;if((G|0)==0){H=4}else{J=F+16|0;K=J;L=yu(c[K>>2]|0,c[K+4>>2]|0,1,0)|0;K=J;c[K>>2]=L;c[K+4>>2]=I;if((lc(D|0,1,1,G|0)|0)!=1){H=4}}if((H|0)==4){G=c[F+4>>2]|0;if((G|0)==0){H=209;break}K=F+16|0;L=K;J=c[L>>2]|0;M=c[L+4>>2]|0;L=F+8|0;N=c[L>>2]|0;O=c[L+4>>2]|0;if((M|0)<(O|0)|(M|0)==(O|0)&J>>>0<N>>>0){P=1}else{L=xu(N|0,O|0,J|0,M|0)|0;if((L|0)<0){H=209;break}else{P=L}}tu(D|0,G+J|0,P|0)|0;G=yu(J|0,M|0,P|0,((P|0)<0)<<31>>31|0)|0;M=K;c[M>>2]=G;c[M+4>>2]=I}M=c[F>>2]|0;if((M|0)==0){H=10}else{G=F+16|0;K=G;J=yu(c[K>>2]|0,c[K+4>>2]|0,1,0)|0;K=G;c[K>>2]=J;c[K+4>>2]=I;if((lc(E|0,1,1,M|0)|0)!=1){H=10}}if((H|0)==10){M=c[F+4>>2]|0;if((M|0)==0){H=209;break}K=F+16|0;J=K;G=c[J>>2]|0;L=c[J+4>>2]|0;J=F+8|0;O=c[J>>2]|0;N=c[J+4>>2]|0;if((L|0)<(N|0)|(L|0)==(N|0)&G>>>0<O>>>0){Q=1}else{J=xu(O|0,N|0,G|0,L|0)|0;if((J|0)<0){H=209;break}else{Q=J}}tu(E|0,M+G|0,Q|0)|0;M=yu(G|0,L|0,Q|0,((Q|0)<0)<<31>>31|0)|0;L=K;c[L>>2]=M;c[L+4>>2]=I}if((a[D]|0)==66){if((a[E]|0)==77){L=c[F>>2]|0;if((L|0)==0){H=18}else{M=F+16|0;K=M;G=yu(c[K>>2]|0,c[K+4>>2]|0,4,0)|0;K=M;c[K>>2]=G;c[K+4>>2]=I;if((lc(C|0,4,1,L|0)|0)!=1){H=18}}if((H|0)==18){L=c[F+4>>2]|0;if((L|0)==0){H=209;break}K=F+16|0;G=K;M=c[G>>2]|0;J=c[G+4>>2]|0;G=yu(M|0,J|0,4,0)|0;N=I;O=F+8|0;R=c[O>>2]|0;S=c[O+4>>2]|0;if((N|0)>(S|0)|(N|0)==(S|0)&G>>>0>R>>>0){G=xu(R|0,S|0,M|0,J|0)|0;if((G|0)<0){H=209;break}else{U=G}}else{U=4}tu(C|0,L+M|0,U|0)|0;L=yu(U|0,((U|0)<0)<<31>>31|0,M|0,J|0)|0;J=K;c[J>>2]=L;c[J+4>>2]=I}J=c[F>>2]|0;if((J|0)==0){H=24}else{L=F+16|0;K=L;M=yu(c[K>>2]|0,c[K+4>>2]|0,2,0)|0;K=L;c[K>>2]=M;c[K+4>>2]=I;if((lc(B|0,2,1,J|0)|0)!=1){H=24}}if((H|0)==24){J=c[F+4>>2]|0;if((J|0)==0){H=209;break}K=F+16|0;M=K;L=c[M>>2]|0;G=c[M+4>>2]|0;M=yu(L|0,G|0,2,0)|0;S=I;R=F+8|0;N=c[R>>2]|0;O=c[R+4>>2]|0;if((S|0)>(O|0)|(S|0)==(O|0)&M>>>0>N>>>0){M=xu(N|0,O|0,L|0,G|0)|0;if((M|0)<0){H=209;break}else{V=M}}else{V=2}tu(B|0,J+L|0,V|0)|0;J=yu(V|0,((V|0)<0)<<31>>31|0,L|0,G|0)|0;G=K;c[G>>2]=J;c[G+4>>2]=I}G=c[F>>2]|0;if((G|0)==0){H=30}else{J=F+16|0;K=J;L=yu(c[K>>2]|0,c[K+4>>2]|0,2,0)|0;K=J;c[K>>2]=L;c[K+4>>2]=I;if((lc(A|0,2,1,G|0)|0)!=1){H=30}}if((H|0)==30){G=c[F+4>>2]|0;if((G|0)==0){H=209;break}K=F+16|0;L=K;J=c[L>>2]|0;M=c[L+4>>2]|0;L=yu(J|0,M|0,2,0)|0;O=I;N=F+8|0;S=c[N>>2]|0;R=c[N+4>>2]|0;if((O|0)>(R|0)|(O|0)==(R|0)&L>>>0>S>>>0){L=xu(S|0,R|0,J|0,M|0)|0;if((L|0)<0){H=209;break}else{W=L}}else{W=2}tu(A|0,G+J|0,W|0)|0;G=yu(W|0,((W|0)<0)<<31>>31|0,J|0,M|0)|0;M=K;c[M>>2]=G;c[M+4>>2]=I}M=c[F>>2]|0;if((M|0)==0){H=36}else{G=F+16|0;K=G;J=yu(c[K>>2]|0,c[K+4>>2]|0,4,0)|0;K=G;c[K>>2]=J;c[K+4>>2]=I;if((lc(z|0,4,1,M|0)|0)!=1){H=36}}if((H|0)==36){M=c[F+4>>2]|0;if((M|0)==0){H=209;break}K=F+16|0;J=K;G=c[J>>2]|0;L=c[J+4>>2]|0;J=yu(G|0,L|0,4,0)|0;R=I;S=F+8|0;O=c[S>>2]|0;N=c[S+4>>2]|0;if((R|0)>(N|0)|(R|0)==(N|0)&J>>>0>O>>>0){J=xu(O|0,N|0,G|0,L|0)|0;if((J|0)<0){H=209;break}else{X=J}}else{X=4}tu(z|0,M+G|0,X|0)|0;M=yu(X|0,((X|0)<0)<<31>>31|0,G|0,L|0)|0;L=K;c[L>>2]=M;c[L+4>>2]=I}L=c[z>>2]|0;M=L+ -14|0;K=_t(M)|0;vu(K|0,0,M|0)|0;G=c[F>>2]|0;if((G|0)==0){H=42}else{J=F+16|0;N=J;O=yu(c[N>>2]|0,c[N+4>>2]|0,4,0)|0;N=J;c[N>>2]=O;c[N+4>>2]=I;if((lc(y|0,4,1,G|0)|0)==1){H=46}else{H=42}}do{if((H|0)==42){G=c[F+4>>2]|0;if((G|0)==0){Y=0}else{N=F+16|0;O=N;J=c[O>>2]|0;R=c[O+4>>2]|0;O=yu(J|0,R|0,4,0)|0;S=I;Z=F+8|0;_=c[Z>>2]|0;$=c[Z+4>>2]|0;if((S|0)>($|0)|(S|0)==($|0)&O>>>0>_>>>0){O=xu(_|0,$|0,J|0,R|0)|0;if((O|0)<0){Y=0;break}else{aa=O}}else{aa=4}tu(y|0,G+J|0,aa|0)|0;G=yu(aa|0,((aa|0)<0)<<31>>31|0,J|0,R|0)|0;R=N;c[R>>2]=G;c[R+4>>2]=I;H=46}}}while(0);do{if((H|0)==46){R=c[y>>2]|0;c[K>>2]=R;if((R|0)==40){G=K+4|0;N=c[F>>2]|0;if((N|0)==0){H=74}else{J=F+16|0;O=J;$=yu(c[O>>2]|0,c[O+4>>2]|0,4,0)|0;O=J;c[O>>2]=$;c[O+4>>2]=I;if((lc(t|0,4,1,N|0)|0)!=1){H=74}}if((H|0)==74){N=c[F+4>>2]|0;if((N|0)==0){Y=0;break}O=F+16|0;$=O;J=c[$>>2]|0;_=c[$+4>>2]|0;$=yu(J|0,_|0,4,0)|0;S=I;Z=F+8|0;ba=c[Z>>2]|0;ca=c[Z+4>>2]|0;if((S|0)>(ca|0)|(S|0)==(ca|0)&$>>>0>ba>>>0){$=xu(ba|0,ca|0,J|0,_|0)|0;if(($|0)<0){Y=0;break}else{da=$}}else{da=4}tu(t|0,N+J|0,da|0)|0;N=yu(da|0,((da|0)<0)<<31>>31|0,J|0,_|0)|0;_=O;c[_>>2]=N;c[_+4>>2]=I}c[G>>2]=c[t>>2];G=K+8|0;_=c[F>>2]|0;if((_|0)==0){H=80}else{N=F+16|0;O=N;J=yu(c[O>>2]|0,c[O+4>>2]|0,4,0)|0;O=N;c[O>>2]=J;c[O+4>>2]=I;if((lc(s|0,4,1,_|0)|0)!=1){H=80}}if((H|0)==80){_=c[F+4>>2]|0;if((_|0)==0){Y=0;break}O=F+16|0;J=O;N=c[J>>2]|0;$=c[J+4>>2]|0;J=yu(N|0,$|0,4,0)|0;ca=I;ba=F+8|0;S=c[ba>>2]|0;Z=c[ba+4>>2]|0;if((ca|0)>(Z|0)|(ca|0)==(Z|0)&J>>>0>S>>>0){J=xu(S|0,Z|0,N|0,$|0)|0;if((J|0)<0){Y=0;break}else{fa=J}}else{fa=4}tu(s|0,_+N|0,fa|0)|0;_=yu(fa|0,((fa|0)<0)<<31>>31|0,N|0,$|0)|0;$=O;c[$>>2]=_;c[$+4>>2]=I}c[G>>2]=c[s>>2];G=K+12|0;$=c[F>>2]|0;if(($|0)==0){H=86}else{_=F+16|0;O=_;N=yu(c[O>>2]|0,c[O+4>>2]|0,2,0)|0;O=_;c[O>>2]=N;c[O+4>>2]=I;if((lc(r|0,2,1,$|0)|0)!=1){H=86}}if((H|0)==86){$=c[F+4>>2]|0;if(($|0)==0){Y=0;break}O=F+16|0;N=O;_=c[N>>2]|0;J=c[N+4>>2]|0;N=yu(_|0,J|0,2,0)|0;Z=I;S=F+8|0;ca=c[S>>2]|0;ba=c[S+4>>2]|0;if((Z|0)>(ba|0)|(Z|0)==(ba|0)&N>>>0>ca>>>0){N=xu(ca|0,ba|0,_|0,J|0)|0;if((N|0)<0){Y=0;break}else{ga=N}}else{ga=2}tu(r|0,$+_|0,ga|0)|0;$=yu(ga|0,((ga|0)<0)<<31>>31|0,_|0,J|0)|0;J=O;c[J>>2]=$;c[J+4>>2]=I}b[G>>1]=b[r>>1]|0;G=K+14|0;J=c[F>>2]|0;if((J|0)==0){H=92}else{$=F+16|0;O=$;_=yu(c[O>>2]|0,c[O+4>>2]|0,2,0)|0;O=$;c[O>>2]=_;c[O+4>>2]=I;if((lc(q|0,2,1,J|0)|0)!=1){H=92}}if((H|0)==92){J=c[F+4>>2]|0;if((J|0)==0){Y=0;break}O=F+16|0;_=O;$=c[_>>2]|0;N=c[_+4>>2]|0;_=yu($|0,N|0,2,0)|0;ba=I;ca=F+8|0;Z=c[ca>>2]|0;S=c[ca+4>>2]|0;if((ba|0)>(S|0)|(ba|0)==(S|0)&_>>>0>Z>>>0){_=xu(Z|0,S|0,$|0,N|0)|0;if((_|0)<0){Y=0;break}else{ha=_}}else{ha=2}tu(q|0,J+$|0,ha|0)|0;J=yu(ha|0,((ha|0)<0)<<31>>31|0,$|0,N|0)|0;N=O;c[N>>2]=J;c[N+4>>2]=I}b[G>>1]=b[q>>1]|0;G=K+16|0;N=c[F>>2]|0;if((N|0)==0){H=98}else{J=F+16|0;O=J;$=yu(c[O>>2]|0,c[O+4>>2]|0,4,0)|0;O=J;c[O>>2]=$;c[O+4>>2]=I;if((lc(p|0,4,1,N|0)|0)!=1){H=98}}if((H|0)==98){N=c[F+4>>2]|0;if((N|0)==0){Y=0;break}O=F+16|0;$=O;J=c[$>>2]|0;_=c[$+4>>2]|0;$=yu(J|0,_|0,4,0)|0;S=I;Z=F+8|0;ba=c[Z>>2]|0;ca=c[Z+4>>2]|0;if((S|0)>(ca|0)|(S|0)==(ca|0)&$>>>0>ba>>>0){$=xu(ba|0,ca|0,J|0,_|0)|0;if(($|0)<0){Y=0;break}else{ia=$}}else{ia=4}tu(p|0,N+J|0,ia|0)|0;N=yu(ia|0,((ia|0)<0)<<31>>31|0,J|0,_|0)|0;_=O;c[_>>2]=N;c[_+4>>2]=I}c[G>>2]=c[p>>2];G=K+20|0;_=c[F>>2]|0;if((_|0)==0){H=104}else{N=F+16|0;O=N;J=yu(c[O>>2]|0,c[O+4>>2]|0,4,0)|0;O=N;c[O>>2]=J;c[O+4>>2]=I;if((lc(o|0,4,1,_|0)|0)!=1){H=104}}if((H|0)==104){_=c[F+4>>2]|0;if((_|0)==0){Y=0;break}O=F+16|0;J=O;N=c[J>>2]|0;$=c[J+4>>2]|0;J=yu(N|0,$|0,4,0)|0;ca=I;ba=F+8|0;S=c[ba>>2]|0;Z=c[ba+4>>2]|0;if((ca|0)>(Z|0)|(ca|0)==(Z|0)&J>>>0>S>>>0){J=xu(S|0,Z|0,N|0,$|0)|0;if((J|0)<0){Y=0;break}else{ja=J}}else{ja=4}tu(o|0,_+N|0,ja|0)|0;_=yu(ja|0,((ja|0)<0)<<31>>31|0,N|0,$|0)|0;$=O;c[$>>2]=_;c[$+4>>2]=I}c[G>>2]=c[o>>2];G=K+24|0;$=c[F>>2]|0;if(($|0)==0){H=110}else{_=F+16|0;O=_;N=yu(c[O>>2]|0,c[O+4>>2]|0,4,0)|0;O=_;c[O>>2]=N;c[O+4>>2]=I;if((lc(n|0,4,1,$|0)|0)!=1){H=110}}if((H|0)==110){$=c[F+4>>2]|0;if(($|0)==0){Y=0;break}O=F+16|0;N=O;_=c[N>>2]|0;J=c[N+4>>2]|0;N=yu(_|0,J|0,4,0)|0;Z=I;S=F+8|0;ca=c[S>>2]|0;ba=c[S+4>>2]|0;if((Z|0)>(ba|0)|(Z|0)==(ba|0)&N>>>0>ca>>>0){N=xu(ca|0,ba|0,_|0,J|0)|0;if((N|0)<0){Y=0;break}else{ka=N}}else{ka=4}tu(n|0,$+_|0,ka|0)|0;$=yu(ka|0,((ka|0)<0)<<31>>31|0,_|0,J|0)|0;J=O;c[J>>2]=$;c[J+4>>2]=I}c[G>>2]=c[n>>2];G=K+28|0;J=c[F>>2]|0;if((J|0)==0){H=116}else{$=F+16|0;O=$;_=yu(c[O>>2]|0,c[O+4>>2]|0,4,0)|0;O=$;c[O>>2]=_;c[O+4>>2]=I;if((lc(m|0,4,1,J|0)|0)!=1){H=116}}if((H|0)==116){J=c[F+4>>2]|0;if((J|0)==0){Y=0;break}O=F+16|0;_=O;$=c[_>>2]|0;N=c[_+4>>2]|0;_=yu($|0,N|0,4,0)|0;ba=I;ca=F+8|0;Z=c[ca>>2]|0;S=c[ca+4>>2]|0;if((ba|0)>(S|0)|(ba|0)==(S|0)&_>>>0>Z>>>0){_=xu(Z|0,S|0,$|0,N|0)|0;if((_|0)<0){Y=0;break}else{la=_}}else{la=4}tu(m|0,J+$|0,la|0)|0;J=yu(la|0,((la|0)<0)<<31>>31|0,$|0,N|0)|0;N=O;c[N>>2]=J;c[N+4>>2]=I}c[G>>2]=c[m>>2];G=K+32|0;N=c[F>>2]|0;if((N|0)==0){H=122}else{J=F+16|0;O=J;$=yu(c[O>>2]|0,c[O+4>>2]|0,4,0)|0;O=J;c[O>>2]=$;c[O+4>>2]=I;if((lc(l|0,4,1,N|0)|0)!=1){H=122}}if((H|0)==122){N=c[F+4>>2]|0;if((N|0)==0){Y=0;break}O=F+16|0;$=O;J=c[$>>2]|0;_=c[$+4>>2]|0;$=yu(J|0,_|0,4,0)|0;S=I;Z=F+8|0;ba=c[Z>>2]|0;ca=c[Z+4>>2]|0;if((S|0)>(ca|0)|(S|0)==(ca|0)&$>>>0>ba>>>0){$=xu(ba|0,ca|0,J|0,_|0)|0;if(($|0)<0){Y=0;break}else{ma=$}}else{ma=4}tu(l|0,N+J|0,ma|0)|0;N=yu(ma|0,((ma|0)<0)<<31>>31|0,J|0,_|0)|0;_=O;c[_>>2]=N;c[_+4>>2]=I}c[G>>2]=c[l>>2];G=K+36|0;_=c[F>>2]|0;if((_|0)==0){H=128}else{N=F+16|0;O=N;J=yu(c[O>>2]|0,c[O+4>>2]|0,4,0)|0;O=N;c[O>>2]=J;c[O+4>>2]=I;if((lc(k|0,4,1,_|0)|0)!=1){H=128}}if((H|0)==128){_=c[F+4>>2]|0;if((_|0)==0){Y=0;break}O=F+16|0;J=O;N=c[J>>2]|0;$=c[J+4>>2]|0;J=yu(N|0,$|0,4,0)|0;ca=I;ba=F+8|0;S=c[ba>>2]|0;Z=c[ba+4>>2]|0;if((ca|0)>(Z|0)|(ca|0)==(Z|0)&J>>>0>S>>>0){J=xu(S|0,Z|0,N|0,$|0)|0;if((J|0)<0){Y=0;break}else{na=J}}else{na=4}tu(k|0,_+N|0,na|0)|0;_=yu(na|0,((na|0)<0)<<31>>31|0,N|0,$|0)|0;$=O;c[$>>2]=_;c[$+4>>2]=I}c[G>>2]=c[k>>2]}else if((R|0)==12){R=K+4|0;G=c[F>>2]|0;if((G|0)==0){H=49}else{$=F+16|0;_=$;O=yu(c[_>>2]|0,c[_+4>>2]|0,2,0)|0;_=$;c[_>>2]=O;c[_+4>>2]=I;if((lc(x|0,2,1,G|0)|0)!=1){H=49}}if((H|0)==49){G=c[F+4>>2]|0;if((G|0)==0){Y=0;break}_=F+16|0;O=_;$=c[O>>2]|0;N=c[O+4>>2]|0;O=yu($|0,N|0,2,0)|0;J=I;Z=F+8|0;S=c[Z>>2]|0;ca=c[Z+4>>2]|0;if((J|0)>(ca|0)|(J|0)==(ca|0)&O>>>0>S>>>0){O=xu(S|0,ca|0,$|0,N|0)|0;if((O|0)<0){Y=0;break}else{oa=O}}else{oa=2}tu(x|0,G+$|0,oa|0)|0;G=yu(oa|0,((oa|0)<0)<<31>>31|0,$|0,N|0)|0;N=_;c[N>>2]=G;c[N+4>>2]=I}c[R>>2]=e[x>>1]|0;R=K+8|0;N=c[F>>2]|0;if((N|0)==0){H=55}else{G=F+16|0;_=G;$=yu(c[_>>2]|0,c[_+4>>2]|0,2,0)|0;_=G;c[_>>2]=$;c[_+4>>2]=I;if((lc(w|0,2,1,N|0)|0)!=1){H=55}}if((H|0)==55){N=c[F+4>>2]|0;if((N|0)==0){Y=0;break}_=F+16|0;$=_;G=c[$>>2]|0;O=c[$+4>>2]|0;$=yu(G|0,O|0,2,0)|0;ca=I;S=F+8|0;J=c[S>>2]|0;Z=c[S+4>>2]|0;if((ca|0)>(Z|0)|(ca|0)==(Z|0)&$>>>0>J>>>0){$=xu(J|0,Z|0,G|0,O|0)|0;if(($|0)<0){Y=0;break}else{pa=$}}else{pa=2}tu(w|0,N+G|0,pa|0)|0;N=yu(pa|0,((pa|0)<0)<<31>>31|0,G|0,O|0)|0;O=_;c[O>>2]=N;c[O+4>>2]=I}c[R>>2]=e[w>>1]|0;R=K+12|0;O=c[F>>2]|0;if((O|0)==0){H=61}else{N=F+16|0;_=N;G=yu(c[_>>2]|0,c[_+4>>2]|0,2,0)|0;_=N;c[_>>2]=G;c[_+4>>2]=I;if((lc(v|0,2,1,O|0)|0)!=1){H=61}}if((H|0)==61){O=c[F+4>>2]|0;if((O|0)==0){Y=0;break}_=F+16|0;G=_;N=c[G>>2]|0;$=c[G+4>>2]|0;G=yu(N|0,$|0,2,0)|0;Z=I;J=F+8|0;ca=c[J>>2]|0;S=c[J+4>>2]|0;if((Z|0)>(S|0)|(Z|0)==(S|0)&G>>>0>ca>>>0){G=xu(ca|0,S|0,N|0,$|0)|0;if((G|0)<0){Y=0;break}else{qa=G}}else{qa=2}tu(v|0,O+N|0,qa|0)|0;O=yu(qa|0,((qa|0)<0)<<31>>31|0,N|0,$|0)|0;$=_;c[$>>2]=O;c[$+4>>2]=I}b[R>>1]=b[v>>1]|0;R=K+14|0;$=c[F>>2]|0;if(($|0)==0){H=67}else{O=F+16|0;_=O;N=yu(c[_>>2]|0,c[_+4>>2]|0,2,0)|0;_=O;c[_>>2]=N;c[_+4>>2]=I;if((lc(u|0,2,1,$|0)|0)!=1){H=67}}if((H|0)==67){$=c[F+4>>2]|0;if(($|0)==0){Y=0;break}_=F+16|0;N=_;O=c[N>>2]|0;G=c[N+4>>2]|0;N=yu(O|0,G|0,2,0)|0;S=I;ca=F+8|0;Z=c[ca>>2]|0;J=c[ca+4>>2]|0;if((S|0)>(J|0)|(S|0)==(J|0)&N>>>0>Z>>>0){N=xu(Z|0,J|0,O|0,G|0)|0;if((N|0)<0){Y=0;break}else{ra=N}}else{ra=2}tu(u|0,$+O|0,ra|0)|0;$=yu(ra|0,((ra|0)<0)<<31>>31|0,O|0,G|0)|0;G=_;c[G>>2]=$;c[G+4>>2]=I}b[R>>1]=b[u>>1]|0}else{Y=0;break}R=K+8|0;G=c[R>>2]|0;if((G|0)<0){c[R>>2]=0-G;sa=0}else{sa=1}do{if(M>>>0>40){if((c[K>>2]|0)!=12){G=L+ -54|0;$=(G>>>2)+1|0;_=_t($>>>0>1073741823?-1:$<<2)|0;$=c[F>>2]|0;if(($|0)!=0){O=F+16|0;N=O;J=yu(c[N>>2]|0,c[N+4>>2]|0,G|0,((G|0)<0)<<31>>31|0)|0;N=O;c[N>>2]=J;c[N+4>>2]=I;if((lc(_|0,G|0,1,$|0)|0)==1){ta=_;H=153;break}}$=c[F+4>>2]|0;if(($|0)==0){ua=0;va=_;break}N=F+16|0;J=N;O=c[J>>2]|0;Z=c[J+4>>2]|0;J=yu(O|0,Z|0,G|0,((G|0)<0)<<31>>31|0)|0;S=I;ca=F+8|0;ba=c[ca>>2]|0;wa=c[ca+4>>2]|0;if((S|0)>(wa|0)|(S|0)==(wa|0)&J>>>0>ba>>>0){J=xu(ba|0,wa|0,O|0,Z|0)|0;if((J|0)<0){ua=0;va=_;break}else{xa=J}}else{xa=G}tu(_|0,$+O|0,xa|0)|0;$=yu(O|0,Z|0,xa|0,((xa|0)<0)<<31>>31|0)|0;Z=N;c[Z>>2]=$;c[Z+4>>2]=I;ta=_;H=153;break}_=e[K+14>>1]|0;Z=1<<_;$=_t(Z>>>0>1073741823?-1:Z<<2)|0;N=3<<_;_=_t((N|0)>-1?N:-1)|0;O=c[F>>2]|0;if((O|0)==0){H=139}else{G=F+16|0;J=G;wa=yu(c[J>>2]|0,c[J+4>>2]|0,N|0,((N|0)<0)<<31>>31|0)|0;J=G;c[J>>2]=wa;c[J+4>>2]=I;if((lc(_|0,N|0,1,O|0)|0)!=1){H=139}}if((H|0)==139){O=c[F+4>>2]|0;if((O|0)==0){ua=0;va=$;break}J=F+16|0;wa=J;G=c[wa>>2]|0;ba=c[wa+4>>2]|0;wa=yu(G|0,ba|0,N|0,((N|0)<0)<<31>>31|0)|0;S=I;ca=F+8|0;ya=c[ca>>2]|0;za=c[ca+4>>2]|0;if((S|0)>(za|0)|(S|0)==(za|0)&wa>>>0>ya>>>0){wa=xu(ya|0,za|0,G|0,ba|0)|0;if((wa|0)<0){ua=0;va=$;break}else{Aa=wa}}else{Aa=N}tu(_|0,O+G|0,Aa|0)|0;O=yu(G|0,ba|0,Aa|0,((Aa|0)<0)<<31>>31|0)|0;ba=J;c[ba>>2]=O;c[ba+4>>2]=I}if((Z|0)>0){ba=0;O=$;while(1){J=ba*3|0;a[O]=a[_+J|0]|0;a[O+1|0]=a[_+(J+1)|0]|0;a[O+2|0]=a[_+(J+2)|0]|0;a[O+3|0]=0;ba=ba+1|0;if((ba|0)==(Z|0)){break}else{O=O+4|0}}}if((_|0)==0){ta=$;H=153}else{au(_);ta=$;H=153}}else{ta=0;H=153}}while(0);b:do{if((H|0)==153){O=T(c[R>>2]|0)|0;c[R>>2]=O;Z=K+14|0;ba=b[Z>>1]|0;switch(ba<<16>>16){case 32:case 16:case 24:case 8:case 4:case 1:{break};default:{ua=0;va=ta;break b}}J=K+4|0;G=c[J>>2]|0;N=(ea(G,ba&65535)|0)/8|0;if((G&3|0)==0){Ba=N}else{G=(N|0)%4|0;if((G|0)==0){Ba=N}else{Ba=N+4-G|0}}G=ea(O,Ba)|0;O=_t(G)|0;if((O|0)==0){ua=0;va=ta}else{N=c[F>>2]|0;if((N|0)==0){H=160}else{ba=F+16|0;wa=ba;za=yu(c[wa>>2]|0,c[wa+4>>2]|0,G|0,((G|0)<0)<<31>>31|0)|0;wa=ba;c[wa>>2]=za;c[wa+4>>2]=I;if((lc(O|0,G|0,1,N|0)|0)!=1){H=160}}if((H|0)==160){N=c[F+4>>2]|0;if((N|0)==0){ua=O;va=ta;break}wa=F+16|0;za=wa;ba=c[za>>2]|0;ya=c[za+4>>2]|0;za=yu(ba|0,ya|0,G|0,((G|0)<0)<<31>>31|0)|0;S=I;ca=F+8|0;Ca=c[ca>>2]|0;Da=c[ca+4>>2]|0;if((S|0)>(Da|0)|(S|0)==(Da|0)&za>>>0>Ca>>>0){za=xu(Ca|0,Da|0,ba|0,ya|0)|0;if((za|0)<0){ua=O;va=ta;break}else{Ea=za}}else{Ea=G}tu(O|0,N+ba|0,Ea|0)|0;N=yu(ba|0,ya|0,Ea|0,((Ea|0)<0)<<31>>31|0)|0;ya=wa;c[ya>>2]=N;c[ya+4>>2]=I}ya=c[F>>2]|0;if((ya|0)!=0){ff(ya|0)|0;c[F>>2]=0;ya=F+8|0;c[ya+0>>2]=0;c[ya+4>>2]=0;c[ya+8>>2]=0;c[ya+12>>2]=0}ya=F+4|0;if((c[ya>>2]|0)!=0){c[ya+0>>2]=0;c[ya+4>>2]=0;c[ya+8>>2]=0;c[ya+12>>2]=0;c[ya+16>>2]=0}ya=c[J>>2]|0;J=c[R>>2]|0;N=ea(J,ya)|0;wa=N<<2;ba=f+16|0;if((wa|0)>(c[ba>>2]|0)){c[ba>>2]=0;G=f+8|0;c[G>>2]=0;za=f+4|0;c[za>>2]=0;Da=f+12|0;Ca=c[Da>>2]|0;if((Ca|0)!=0){au(Ca)}a[f]=1;c[ba>>2]=wa;ba=_t((N|0)<0?-1:wa)|0;c[Da>>2]=ba;if((ba|0)==0){ua=O;va=ta;break}else{Fa=za;Ga=G;Ha=ba}}else{Fa=f+4|0;Ga=f+8|0;Ha=c[f+12>>2]|0}c[Fa>>2]=ya;c[Ga>>2]=J;vu(Ha|0,0,wa|0)|0;wa=(e[Z>>1]|0)>>>3;J=f+8|0;ya=c[J>>2]|0;if((ya|0)>0){ba=f+4|0;G=f+12|0;za=(h|0)==-1;Da=c[ba>>2]|0;N=ya;Ca=0;while(1){if((Da|0)>0){S=ea(Ca<<2,Da)|0;ca=ea((c[R>>2]|0)+~Ca|0,Ba)|0;Ia=0;while(1){Ja=S|3;a[(c[G>>2]|0)+Ja|0]=-1;switch(e[Z>>1]|0){case 32:case 24:{a[(c[G>>2]|0)+S|0]=a[O+(ca+2)|0]|0;a[(c[G>>2]|0)+(S|1)|0]=a[O+(ca+1)|0]|0;a[(c[G>>2]|0)+(S|2)|0]=a[O+ca|0]|0;break};case 16:{Ka=e[O+ca>>1]|0;a[(c[G>>2]|0)+S|0]=(((Ka>>>10&31)*255|0)>>>0)/31|0;a[(c[G>>2]|0)+(S|1)|0]=(((Ka>>>5&31)*255|0)>>>0)/31|0;a[(c[G>>2]|0)+(S|2)|0]=(((Ka&31)*255|0)>>>0)/31|0;break};case 8:{Ka=d[O+ca|0]|0;a[(c[G>>2]|0)+S|0]=a[ta+(Ka<<2)+2|0]|0;a[(c[G>>2]|0)+(S|1)|0]=a[ta+(Ka<<2)+1|0]|0;a[(c[G>>2]|0)+(S|2)|0]=a[ta+(Ka<<2)|0]|0;break};case 4:{Ka=d[O+(((Ia|0)/2|0)+ca)|0]|0;La=(Ia&1|0)==0?Ka>>>4:Ka&15;a[(c[G>>2]|0)+S|0]=a[ta+(La<<2)+2|0]|0;a[(c[G>>2]|0)+(S|1)|0]=a[ta+(La<<2)+1|0]|0;a[(c[G>>2]|0)+(S|2)|0]=a[ta+(La<<2)|0]|0;break};case 1:{La=(1<<7-((Ia|0)%8|0)&d[O+(((Ia|0)/8|0)+ca)|0]|0)!=0|0;a[(c[G>>2]|0)+S|0]=a[ta+(La<<2)+2|0]|0;a[(c[G>>2]|0)+(S|1)|0]=a[ta+(La<<2)+1|0]|0;a[(c[G>>2]|0)+(S|2)|0]=a[ta+(La<<2)|0]|0;break};default:{}}if(!za){La=c[G>>2]|0;Ka=La+S|0;Ma=S|1;Na=S|2;if((d[La+Ma|0]<<8|d[Ka]|d[La+Na|0]<<16|0)==(h|0)){a[Ka]=0;a[(c[G>>2]|0)+Ma|0]=0;a[(c[G>>2]|0)+Na|0]=0;a[(c[G>>2]|0)+Ja|0]=0}}Ja=Ia+1|0;Oa=c[ba>>2]|0;if((Ja|0)>=(Oa|0)){break}S=S+4|0;ca=ca+wa|0;Ia=Ja}Pa=c[J>>2]|0;Qa=Oa}else{Pa=N;Qa=Da}Ia=Ca+1|0;if((Ia|0)<(Pa|0)){Da=Qa;N=Pa;Ca=Ia}else{Ra=Pa;break}}}else{Ra=ya}if(!sa){Ca=c[f+4>>2]|0;if((Ca|0)>=1){N=Ca<<2;Ca=_t(N)|0;c:do{if((Ra|0)>1){Da=f+12|0;wa=Ra;ba=-1;G=0;while(1){za=ea(G,N)|0;Z=c[Da>>2]|0;$=Z+za|0;tu(Ca|0,$|0,N|0)|0;tu($|0,Z+(ea(ba+wa|0,N)|0)|0,N|0)|0;Z=ea((c[J>>2]|0)+ba|0,N)|0;tu((c[Da>>2]|0)+Z|0,Ca|0,N|0)|0;Z=G+1|0;$=c[J>>2]|0;if((Z|0)>=(($|0)/2|0|0)){break c}wa=$;ba=-2-G|0;G=Z}}}while(0);if((Ca|0)!=0){au(Ca)}}}if((ta|0)!=0){au(ta)}if((K|0)!=0){au(K)}au(O);a[f]=0;Sa=1;Ta=F;break a}}}while(0);if((va|0)==0){Y=ua}else{au(va);Y=ua}}}while(0);if((K|0)!=0){au(K)}if((Y|0)==0){H=209}else{au(Y);H=209}}else{H=209}}else{H=209}}else{H=209}}while(0);if((H|0)==209){c[f+16>>2]=0;c[f+8>>2]=0;c[f+4>>2]=0;H=f+12|0;Y=c[H>>2]|0;if((Y|0)!=0){au(Y)}c[H>>2]=0;a[f]=1;Sa=0;Ta=F}f=c[Ta>>2]|0;if((f|0)!=0){ff(f|0)|0;c[Ta>>2]=0;Ta=F+8|0;c[Ta+0>>2]=0;c[Ta+4>>2]=0;c[Ta+8>>2]=0;c[Ta+12>>2]=0}Ta=F+4|0;if((c[Ta>>2]|0)==0){i=j;return Sa|0}c[Ta+0>>2]=0;c[Ta+4>>2]=0;c[Ta+8>>2]=0;c[Ta+12>>2]=0;c[Ta+16>>2]=0;i=j;return Sa|0}function bn(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;f=i;i=i+16|0;g=f+12|0;h=f;j=f+4|0;k=f+8|0;if((jo(d,g,h,j,k)|0)==0){l=0;i=f;return l|0}if((c[k>>2]|0)!=4){a[b]=0}d=c[h>>2]|0;m=_t(d>>>0>1073741823?-1:d<<2)|0;n=(ea(c[j>>2]|0,d)|0)+72|0;d=_t((n|0)>-1?n:-1)|0;n=(d|0)==0;j=(m|0)==0;if(n|j){if(!j){au(m)}if(n){l=0;i=f;return l|0}au(d);l=0;i=f;return l|0}no(d,m);n=c[g>>2]|0;j=c[h>>2]|0;o=ea(j,n)|0;p=o<<2;q=b+16|0;if((p|0)>(c[q>>2]|0)){c[q>>2]=0;r=b+8|0;c[r>>2]=0;s=b+4|0;c[s>>2]=0;t=b+12|0;u=c[t>>2]|0;if((u|0)!=0){au(u)}a[b]=1;c[q>>2]=p;q=_t((o|0)<0?-1:p)|0;c[t>>2]=q;if((q|0)!=0){v=s;w=r;x=q;y=10}}else{v=b+4|0;w=b+8|0;x=c[b+12>>2]|0;y=10}if((y|0)==10){c[v>>2]=n;c[w>>2]=j;vu(x|0,0,p|0)|0}p=c[h>>2]|0;if((p|0)>0){x=b+4|0;j=b+12|0;b=(e|0)==-1;w=c[g>>2]|0;n=p;p=-1;v=0;y=0;q=0;r=0;while(1){if((w|0)>0){s=(c[j>>2]|0)+(ea(r<<2,c[x>>2]|0)|0)|0;t=c[k>>2]|0;o=p;u=v;z=y;A=q;B=s;s=c[m+(r<<2)>>2]|0;C=0;while(1){if((t|0)==1){D=a[s]|0;E=-1;F=D;G=D;H=D}else if((t|0)==3){D=a[s]|0;I=a[s+1|0]|0;J=a[s+2|0]|0;if(b){E=-1;F=J;G=I;H=D}else{K=((I&255)<<8|D&255|(J&255)<<16|0)==(e|0);E=(K^1)<<31>>31;F=K?0:J;G=K?0:I;H=K?0:D}}else if((t|0)==4){E=a[s+3|0]|0;F=a[s+2|0]|0;G=a[s+1|0]|0;H=a[s]|0}else{E=o;F=u;G=z;H=A}a[B]=H;a[B+1|0]=G;a[B+2|0]=F;a[B+3|0]=E;D=c[k>>2]|0;C=C+1|0;L=c[g>>2]|0;if((C|0)>=(L|0)){break}else{t=D;o=E;u=F;z=G;A=H;B=B+4|0;s=s+D|0}}M=c[h>>2]|0;N=L;O=E;P=F;Q=G;R=H}else{M=n;N=w;O=p;P=v;Q=y;R=q}r=r+1|0;if((r|0)>=(M|0)){break}else{w=N;n=M;p=O;v=P;y=Q;q=R}}}au(m);au(d);ko();l=1;i=f;return l|0}function cn(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0,k=0;e=i;if((d|0)<0){i=e;return}f=a+(d<<2)+99256|0;h=c[f>>2]|0;if((h|0)!=0){au(h)}c[f>>2]=0;c[2138]=-1;c[a+24>>2]=-1;c[a+28>>2]=-1;c[a+32>>2]=0;f=c[1480]|0;if((f|0)==0){Vd(3553);if((c[6152>>2]|0)!=1){Me(2903);c[6152>>2]=1}}else{Jh[f&127](33985);Vd(3553);Jh[c[1480]&127](33984);Vd(3553)}f=a+98468|0;a=c[f>>2]|0;h=a+(d*28|0)|0;if((c[h>>2]|0)==0){j=a}else{Ge(1,h|0);j=c[f>>2]|0}h=j+(d*28|0)+4|0;if((c[h>>2]|0)==0){k=j}else{Ge(1,h|0);k=c[f>>2]|0}c[k+(d*28|0)>>2]=0;c[k+(d*28|0)+4>>2]=0;b[k+(d*28|0)+16>>1]=-1;b[k+(d*28|0)+18>>1]=-1;b[k+(d*28|0)+20>>1]=0;b[k+(d*28|0)+22>>1]=0;g[k+(d*28|0)+8>>2]=1.0;g[k+(d*28|0)+12>>2]=1.0;i=e;return}function dn(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;j=i;i=i+32|0;k=j;l=0;while(1){m=l+1|0;if((c[d+(l*24|0)+98504>>2]|0)==(e|0)){n=l;break}if((m|0)<32){l=m}else{n=-1;break}}cn(d,e);if((f|0)==0){o=0;i=j;return o|0}if((a[f]|0)==0){o=0;i=j;return o|0}l=k+4|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;a[k]=1;if(an(k,f,g)|0){p=9}else{if(bn(k,f,g)|0){p=9}else{if(en(k,f)|0){p=9}else{q=0}}}if((p|0)==9){if((a[k]|0)==0){fn(k)}p=Am(d,e,k,0,h)|0;if(p&(n|0)>-1){h=c[d+98468>>2]|0;if(Xn(d+(n*24|0)+98484|0,b[h+(e*28|0)+16>>1]|0,b[h+(e*28|0)+18>>1]|0,c[h+(e*28|0)>>2]|0,1)|0){c[d+(n*24|0)+98504>>2]=e;q=1}else{q=1}}else{q=p}}c[k+16>>2]=0;c[k+8>>2]=0;c[l>>2]=0;l=k+12|0;p=c[l>>2]|0;if((p|0)!=0){au(p)}c[l>>2]=0;a[k]=1;o=q;i=j;return o|0}function en(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0;e=i;i=i+32|0;f=e;g=e+16|0;h=e+4|0;j=e+8|0;k=e+12|0;c[g>>2]=0;if((ho(d,h,j,k,g)|0)==0){d=c[g>>2]|0;if((d|0)==0){l=0;i=e;return l|0}au(d);l=0;i=e;return l|0}d=c[k>>2]|0;if(!((d|0)==1|(d|0)==3|(d|0)==4)){c[f>>2]=d;tg(9e3,f|0)|0;f=c[g>>2]|0;if((f|0)==0){l=0;i=e;return l|0}au(f);l=0;i=e;return l|0}f=c[h>>2]|0;d=c[j>>2]|0;m=ea(d,f)|0;n=m<<2;o=b+16|0;if((n|0)>(c[o>>2]|0)){c[o>>2]=0;p=b+8|0;c[p>>2]=0;q=b+4|0;c[q>>2]=0;r=b+12|0;s=c[r>>2]|0;if((s|0)!=0){au(s)}a[b]=1;c[o>>2]=n;o=_t((m|0)<0?-1:n)|0;c[r>>2]=o;if((o|0)!=0){t=q;u=p;v=o;w=12}}else{t=b+4|0;u=b+8|0;v=c[b+12>>2]|0;w=12}if((w|0)==12){c[t>>2]=f;c[u>>2]=d;vu(v|0,0,n|0)|0}n=c[k>>2]|0;if((n|0)!=4){a[b]=0}v=c[j>>2]|0;d=c[g>>2]|0;if((v|0)>0){u=b+4|0;f=b+12|0;b=c[h>>2]|0;t=n;n=d;w=v;v=-1;o=0;p=0;q=0;r=0;while(1){if((b|0)>0){m=ea(b,r)|0;s=t;x=v;y=o;z=p;A=q;B=(c[f>>2]|0)+(ea(r<<2,c[u>>2]|0)|0)|0;C=n+(ea(m,t)|0)|0;m=0;while(1){if((s|0)==3){D=-1;E=a[C+2|0]|0;F=a[C+1|0]|0;G=a[C]|0}else if((s|0)==4){D=a[C+3|0]|0;E=a[C+2|0]|0;F=a[C+1|0]|0;G=a[C]|0}else if((s|0)==1){H=a[C]|0;D=-1;E=H;F=H;G=H}else{D=x;E=y;F=z;G=A}a[B]=G;a[B+1|0]=F;a[B+2|0]=E;a[B+3|0]=D;I=c[k>>2]|0;m=m+1|0;J=c[h>>2]|0;if((m|0)>=(J|0)){break}else{s=I;x=D;y=E;z=F;A=G;B=B+4|0;C=C+I|0}}K=c[j>>2]|0;L=I;M=c[g>>2]|0;N=J;O=D;P=E;Q=F;R=G}else{K=w;L=t;M=n;N=b;O=v;P=o;Q=p;R=q}C=r+1|0;if((C|0)<(K|0)){b=N;t=L;n=M;w=K;v=O;o=P;p=Q;q=R;r=C}else{S=M;break}}}else{S=d}if((S|0)==0){l=1;i=e;return l|0}au(S);l=1;i=e;return l|0}function fn(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0,B=0,C=0.0,D=0.0,E=0.0,F=0,G=0.0,H=0.0,I=0.0,J=0,K=0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0,ca=0,da=0,fa=0;e=i;f=b+8|0;g=c[f>>2]|0;if((g|0)<=0){i=e;return}h=b+4|0;j=b+12|0;b=g;g=c[h>>2]|0;k=0;while(1){if((g|0)>0){l=k+ -1|0;m=(l|0)>0;n=(k|0)>0;o=k+1|0;p=g;q=0;while(1){r=ea(p,k)|0;s=r+q<<2;t=c[j>>2]|0;u=t+s|0;do{if((a[t+(s|3)|0]|0)==0){v=q+ -1|0;w=(v|0)>0;if(w&m){if((q|0)>(p+ -1|0)){x=0.0;y=0.0;z=0.0}else{if((k|0)>((c[f>>2]|0)+ -1|0)){x=0.0;y=0.0;z=0.0}else{A=(ea(p,l)|0)+v<<2;if((a[t+(A|3)|0]|0)==0){x=0.0;y=0.0;z=0.0}else{x=+(d[t+(A|2)|0]|0);y=1.0;z=+(d[t+A|0]|0)}}}}else{x=0.0;y=0.0;z=0.0}A=(q|0)>0;do{if(A){if(!m){B=q+1|0;C=x;D=y;E=z;break}if((q|0)<(p+ -1|0)){if((k|0)<=((c[f>>2]|0)+ -1|0)){F=(ea(p,l)|0)+q<<2;if((a[t+(F|3)|0]|0)==0){G=x;H=y;I=z;J=21;break}G=x+ +(d[t+(F|2)|0]|0);H=y+1.0;I=z+ +(d[t+F|0]|0);J=21;break}}K=q+1|0;L=x;M=y;N=z;J=22}else{G=x;H=y;I=z;J=21}}while(0);if((J|0)==21){J=0;F=q+1|0;if(m){K=F;L=G;M=H;N=I;J=22}else{B=F;C=G;D=H;E=I}}if((J|0)==22){J=0;if((K|0)<(p+ -1|0)){if((k|0)>((c[f>>2]|0)+ -1|0)){B=K;C=L;D=M;E=N}else{F=(ea(p,l)|0)+K<<2;if((a[t+(F|3)|0]|0)==0){B=K;C=L;D=M;E=N}else{B=K;C=L+ +(d[t+(F|2)|0]|0);D=M+1.0;E=N+ +(d[t+F|0]|0)}}}else{B=K;C=L;D=M;E=N}}if(w&n){if((q|0)>(p+ -1|0)){O=C;P=D;Q=E}else{if((k|0)<((c[f>>2]|0)+ -1|0)){F=r+v<<2;if((a[t+(F|3)|0]|0)==0){O=C;P=D;Q=E}else{O=C+ +(d[t+(F|2)|0]|0);P=D+1.0;Q=E+ +(d[t+F|0]|0)}}else{O=C;P=D;Q=E}}}else{O=C;P=D;Q=E}if(n){if((B|0)<(p+ -1|0)){if((k|0)<((c[f>>2]|0)+ -1|0)){F=r+B<<2;if((a[t+(F|3)|0]|0)==0){R=O;S=P;T=Q}else{R=O+ +(d[t+(F|2)|0]|0);S=P+1.0;T=Q+ +(d[t+F|0]|0)}}else{R=O;S=P;T=Q}}else{R=O;S=P;T=Q}}else{R=O;S=P;T=Q}if(w){if((q|0)>(p+ -1|0)){U=R;V=S;W=T}else{if((o|0)<((c[f>>2]|0)+ -1|0)){F=(ea(p,o)|0)+v<<2;if((a[t+(F|3)|0]|0)==0){U=R;V=S;W=T}else{U=R+ +(d[t+(F|2)|0]|0);V=S+1.0;W=T+ +(d[t+F|0]|0)}}else{U=R;V=S;W=T}}}else{U=R;V=S;W=T}if(A){if((q|0)<(p+ -1|0)){if((o|0)<((c[f>>2]|0)+ -1|0)){F=(ea(p,o)|0)+q<<2;if((a[t+(F|3)|0]|0)==0){X=U;Y=V;Z=W}else{X=U+ +(d[t+(F|2)|0]|0);Y=V+1.0;Z=W+ +(d[t+F|0]|0)}}else{X=U;Y=V;Z=W}}else{X=U;Y=V;Z=W}}else{X=U;Y=V;Z=W}if((B|0)<(p+ -1|0)){if((o|0)<((c[f>>2]|0)+ -1|0)){F=(ea(p,o)|0)+B<<2;if((a[t+(F|3)|0]|0)==0){_=X;$=Y;aa=Z}else{_=X+ +(d[t+(F|2)|0]|0);$=Y+1.0;aa=Z+ +(d[t+F|0]|0)}}else{_=X;$=Y;aa=Z}}else{_=X;$=Y;aa=Z}if($!=0.0){a[u]=~~(aa/$);a[t+(s|1)|0]=~~(_/$);ba=B;break}else{a[u]=0;a[t+(s|1)|0]=0;a[t+(s|2)|0]=0;ba=B;break}}else{ba=q+1|0}}while(0);p=c[h>>2]|0;if((ba|0)>=(p|0)){break}else{q=ba}}ca=o;da=c[f>>2]|0;fa=p}else{ca=k+1|0;da=b;fa=g}if((ca|0)<(da|0)){b=da;g=fa;k=ca}else{break}}i=e;return}function gn(b,e,f,g,h,j,k,l,m){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;n=i;i=i+48|0;o=n+40|0;p=n;q=n+24|0;Vc(3379,o|0);if((g|0)==0){r=(c[b+4>>2]|0)-e|0}else{r=g}if((h|0)==0){s=(c[b+8>>2]|0)-f|0}else{s=h}if((r|0)<1|(s|0)<1){t=0;i=n;return t|0}h=c[o>>2]|0;o=(r|0)<(h|0)?r:h;r=(s|0)<(h|0);g=8;do{g=g<<1}while((g|0)<(o|0));u=r?s:h;h=8;do{h=h<<1}while((h|0)<(u|0));s=p+4|0;c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;c[s+12>>2]=0;a[p]=1;r=ea(h,g)|0;v=r<<2;w=p+16|0;x=p+8|0;if((r|0)>0){c[x>>2]=0;c[s>>2]=0;a[p]=1;c[w>>2]=v;r=_t(v)|0;c[p+12>>2]=r;if((r|0)==0){c[w>>2]=0;c[p+8>>2]=0;c[s>>2]=0;y=0;z=p+12|0}else{A=r;B=13}}else{A=0;B=13}if((B|0)==13){c[s>>2]=g;c[x>>2]=h;vu(A|0,0,v|0)|0;v=(e|0)<0?0:e;A=g+e|0;x=b+4|0;B=c[x>>2]|0;if((v|0)<(((A|0)<(B|0)?A:B)|0)){r=(f|0)<0?0:f;C=h+f|0;h=b+8|0;D=u+ -1|0;E=b+12|0;b=c[p+12>>2]|0;F=B;B=c[h>>2]|0;G=v;while(1){if((r|0)<(((C|0)<(B|0)?C:B)|0)){v=G-e|0;H=(v|0)<(o|0);I=B;J=r;while(1){if(H){K=J-f|0;if((K|0)<(u|0)){L=(ea(D-K|0,g)|0)+v<<2;K=(ea(c[x>>2]|0,J)|0)+G<<2;M=K|1;N=L|1;a[b+L|0]=a[(c[E>>2]|0)+K|0]|0;a[b+N|0]=a[(c[E>>2]|0)+M|0]|0;a[b+(N+1)|0]=a[(c[E>>2]|0)+(M+1)|0]|0;a[b+(L|3)|0]=a[(c[E>>2]|0)+(K|3)|0]|0;O=c[h>>2]|0}else{O=I}}else{O=I}J=J+1|0;if((J|0)>=(((C|0)<(O|0)?C:O)|0)){break}else{I=O}}P=O;Q=c[x>>2]|0}else{P=B;Q=F}G=G+1|0;if((G|0)>=(((A|0)<(Q|0)?A:Q)|0)){break}else{F=Q;B=P}}}ye(3317,4);if((c[j>>2]|0)==0){qb(1,j|0)}else{Ge(1,j|0)}hd(3553,c[j>>2]|0);Lf(3553,10242,10497.0);Lf(3553,10243,10497.0);if(m){Lf(3553,10240,9728.0);Jf(3553,10241,9728)}else{Lf(3553,10240,9729.0);Jf(3553,10241,9729)}if(l){hn(p)}l=c[s>>2]|0;m=c[p+8>>2]|0;j=c[p+12>>2]|0;dh(3553,0,6408,l|0,m|0,0,6408,5121,j|0);a:do{if((k|0)!=0){ye(3317,4);qb(1,k|0);hd(3553,c[k>>2]|0);Lf(3553,10242,10497.0);Lf(3553,10243,10497.0);Lf(3553,10240,9729.0);Jf(3553,10241,9987);if((l|0)>(m|0)){P=(m|0)>0;B=l;while(1){Q=B>>1;if(P){F=(Q|0)>0;A=0;do{if(F){G=ea(A,Q)|0;x=G<<3;O=0;do{C=O<<3;h=C+x|0;E=(C|4)+x|0;C=O+G<<2;a[j+C|0]=((d[j+E|0]|0)+(d[j+h|0]|0)|0)>>>1;a[j+(C|1)|0]=((d[j+(E|1)|0]|0)+(d[j+(h|1)|0]|0)|0)>>>1;a[j+(C|2)|0]=((d[j+(E|2)|0]|0)+(d[j+(h|2)|0]|0)|0)>>>1;a[j+(C|3)|0]=((d[j+(E|3)|0]|0)+(d[j+(h|3)|0]|0)|0)>>>1;O=O+1|0}while((O|0)!=(Q|0))}A=A+1|0}while((A|0)!=(m|0))}if((Q|0)>(m|0)){B=Q}else{R=Q;break}}}else{R=l}if((m|0)>(R|0)){B=(R|0)>0;P=R<<2;A=m;while(1){F=A>>1;if((F|0)>0){O=0;do{if(B){G=ea(O,R)|0;x=G<<3;h=G<<2;G=0;do{E=G<<2;C=E+x|0;b=C+P|0;g=E+h|0;a[j+g|0]=((d[j+b|0]|0)+(d[j+C|0]|0)|0)>>>1;a[j+(g|1)|0]=((d[j+(b|1)|0]|0)+(d[j+(C|1)|0]|0)|0)>>>1;a[j+(g|2)|0]=((d[j+(b|2)|0]|0)+(d[j+(C|2)|0]|0)|0)>>>1;a[j+(g|3)|0]=((d[j+(b|3)|0]|0)+(d[j+(C|3)|0]|0)|0)>>>1;G=G+1|0}while((G|0)!=(R|0))}O=O+1|0}while((O|0)!=(F|0))}if((F|0)>(R|0)){A=F}else{S=F;break}}}else{S=m}A=q+4|0;P=q+8|0;B=0;O=R;Q=S;b:while(1){G=B+1|0;dh(3553,B|0,6408,O|0,Q|0,0,6408,5121,j|0);h=(O|0)/2|0;x=(Q|0)/2|0;if((O|0)<2&(Q|0)<2){break a}C=(x|0)>1?x:1;if((C|0)<=0){B=G;O=h;Q=x;continue}b=(h|0)>1?h:1;g=(b|0)>0;E=h+ -1|0;D=x+ -1|0;u=h<<4;f=0;while(1){if(g){r=ea(f,h)|0;o=r<<4;e=(f|0)<(D|0);I=f+1|0;J=ea(u,I)|0;v=0;while(1){H=v<<3;K=H+o|0;L=H|4;M=L+o|0;N=L+J|0;L=H+J|0;H=v+r<<2;if((v|0)<(E|0)){T=0;do{c[q>>2]=d[j+(K+T)|0]|0;c[A>>2]=d[j+(M+T)|0]|0;if(e){c[P>>2]=d[j+(N+T)|0]|0;U=d[j+(L+T)|0]|0;c[q+12>>2]=U;V=(U+(c[q>>2]<<2)+((c[P>>2]|0)+(c[A>>2]|0)<<1)|0)/9|0}else{V=((c[q>>2]<<1)+(c[A>>2]|0)|0)/3|0}a[j+(H+T)|0]=V;T=T+1|0}while((T|0)!=4)}else{if(e){T=0;do{c[q>>2]=d[j+(K+T)|0]|0;N=d[j+(L+T)|0]|0;c[q+4>>2]=N;a[j+(H+T)|0]=((c[q>>2]<<1)+N|0)/3|0;T=T+1|0}while((T|0)!=4)}else{T=0;do{L=a[j+(K+T)|0]|0;c[q>>2]=L&255;a[j+(H+T)|0]=L;T=T+1|0}while((T|0)!=4)}}T=v+1|0;if((T|0)<(b|0)){v=T}else{W=I;break}}}else{W=f+1|0}if((W|0)<(C|0)){f=W}else{B=G;O=h;Q=x;continue b}}}}}while(0);c[w>>2]=0;c[p+8>>2]=0;c[s>>2]=0;s=p+12|0;if((j|0)==0){y=1;z=s}else{au(j);y=1;z=s}}c[z>>2]=0;a[p]=1;t=y;i=n;return t|0}function hn(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0,u=0,v=0,w=0,x=0.0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0;e=i;f=b+4|0;g=b+8|0;h=c[g>>2]|0;j=ea(h,c[f>>2]|0)|0;k=j<<2;if((j|0)>0){j=_t(k)|0;if((j|0)==0){l=0}else{m=j;n=3}}else{m=0;n=3}if((n|0)==3){vu(m|0,0,k|0)|0;l=m}m=b+12|0;if((h|0)>0){b=h;h=0;while(1){k=h+1|0;if((b|0)>0){n=h+ -1|0;j=b;o=0;while(1){p=c[f>>2]|0;q=ea(p,(k|0)%(j|0)|0)|0;r=(o+ -1+p|0)%(p|0)|0;s=c[m>>2]|0;t=+(d[s+(q+r<<2|2)|0]|0)/255.0*-1.0;u=(o|0)%(p|0)|0;v=o+1|0;w=(v|0)%(p|0)|0;x=+(d[s+(w+q<<2|2)|0]|0)/255.0;y=ea((n+j|0)%(j|0)|0,p)|0;z=+(d[s+(y+r<<2|2)|0]|0)/255.0;A=+(d[s+(y+w<<2|2)|0]|0)/255.0;B=t+ +(d[s+(u+q<<2|2)|0]|0)/255.0*-2.0+x*-1.0+z+ +(d[s+(y+u<<2|2)|0]|0)/255.0*2.0+A;u=ea((h|0)%(j|0)|0,p)|0;C=x+(+(d[s+(u+w<<2|2)|0]|0)/255.0*2.0+(A+(t+(z*-1.0+ +(d[s+(u+r<<2|2)|0]|0)/255.0*-2.0))));z=1.0/+U(+(B*B+C*C+1.0));r=(ea(p,h)|0)+o<<2|3;a[l+r|0]=a[s+r|0]|0;a[l+((ea(c[f>>2]|0,h)|0)+o<<2)|0]=~~((1.0-z*C)*.5*255.0);a[l+((ea(c[f>>2]|0,h)|0)+o<<2|1)|0]=~~((1.0-B*z)*.5*255.0);a[l+((ea(c[f>>2]|0,h)|0)+o<<2|2)|0]=~~((z+1.0)*.5*255.0);r=c[g>>2]|0;if((v|0)<(r|0)){j=r;o=v}else{D=r;break}}}else{D=b}if((k|0)<(D|0)){b=D;h=k}else{break}}}h=c[m>>2]|0;c[m>>2]=l;if((h|0)==0){i=e;return}au(h);i=e;return}function jn(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;e=b+16|0;if((c[e>>2]|0)<32768){c[e>>2]=0;f=b+8|0;c[f>>2]=0;g=b+4|0;c[g>>2]=0;h=b+12|0;j=c[h>>2]|0;if((j|0)!=0){au(j)}a[b]=1;c[e>>2]=32768;e=_t(32768)|0;c[h>>2]=e;if((e|0)==0){k=h}else{l=g;m=f;n=e;o=6}}else{l=b+4|0;m=b+8|0;n=c[b+12>>2]|0;o=6}if((o|0)==6){c[l>>2]=128;c[m>>2]=64;vu(n|0,0,32768)|0;k=b+12|0}b=0;do{n=b<<3;m=0;do{l=8616+(m<<6)+(b<<2)|0;e=(m<<3)+16|0;f=1;g=0;while(1){h=(g|0)==0;j=h|g>>>0>5;p=g+1|0;q=p>>>0>5;r=g+ -5|0;s=g+n|0;t=g+ -6|0;u=g+ -1|0;v=(u|0)==0|u>>>0>5;u=g+ -7|0;w=0;do{if(j){o=15}else{if((w|0)==0|w>>>0>6){o=15}else{if((c[l>>2]&1<<t+(w*5|0)|0)==0){o=15}else{x=s+(e+w<<7)<<2;y=x|1;a[(c[k>>2]|0)+x|0]=-1;a[(c[k>>2]|0)+y|0]=-1;a[(c[k>>2]|0)+(y+1)|0]=-1;a[(c[k>>2]|0)+(x|3)|0]=-1}}}do{if((o|0)==15){o=0;if(!(q|f^1)){if(!((w|0)==0|w>>>0>6)){if((c[l>>2]&1<<r+(w*5|0)|0)!=0){x=s+(e+w<<7)<<2;y=x|1;a[(c[k>>2]|0)+x|0]=8;a[(c[k>>2]|0)+y|0]=8;a[(c[k>>2]|0)+(y+1)|0]=8;a[(c[k>>2]|0)+(x|3)|0]=-1;break}}}if(!(h|v)){if(!((w|0)==0|w>>>0>6)){if((c[l>>2]&1<<u+(w*5|0)|0)!=0){x=s+(e+w<<7)<<2;y=x|1;a[(c[k>>2]|0)+x|0]=8;a[(c[k>>2]|0)+y|0]=8;a[(c[k>>2]|0)+(y+1)|0]=8;a[(c[k>>2]|0)+(x|3)|0]=-1;break}}}if(!((w|0)==0|j)){x=w+ -1|0;if(!((x|0)==0|x>>>0>6)){if((c[l>>2]&1<<t+(x*5|0)|0)!=0){x=s+(e+w<<7)<<2;y=x|1;a[(c[k>>2]|0)+x|0]=8;a[(c[k>>2]|0)+y|0]=8;a[(c[k>>2]|0)+(y+1)|0]=8;a[(c[k>>2]|0)+(x|3)|0]=-1;break}}}if(!(w>>>0>6|j)){x=w+1|0;if(!(x>>>0>6)){if((c[l>>2]&1<<t+(x*5|0)|0)!=0){x=s+(e+w<<7)<<2;y=x|1;a[(c[k>>2]|0)+x|0]=8;a[(c[k>>2]|0)+y|0]=8;a[(c[k>>2]|0)+(y+1)|0]=8;a[(c[k>>2]|0)+(x|3)|0]=-1}}}}}while(0);w=w+1|0}while((w|0)!=8);if((p|0)==7){break}else{f=p>>>0<7;g=p}}m=m+1|0}while((m|0)!=6);b=b+1|0}while((b|0)!=16);i=d;return}function kn(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;e=i;if((d|0)<0){i=e;return}f=b+(d*772|0)+362172|0;g=a[f]|0;if(g<<24>>24>0){h=b+(d*772|0)+362173|0;j=g;g=a[h]|0;k=0;while(1){if(g<<24>>24>0){l=g;m=0;while(1){n=b+(d*772|0)+(k<<5)+(m<<2)+361404|0;if((c[n>>2]|0)==0){o=l}else{Ge(1,n|0);o=a[h]|0}m=m+1|0;if((m|0)>=(o<<24>>24|0)){break}else{l=o}}p=a[f]|0;q=o}else{p=j;q=g}k=k+1|0;if((k|0)>=(p<<24>>24|0)){break}else{j=p;g=q}}}vu(b+(d*772|0)+361404|0,0,772)|0;i=e;return}function ln(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;h=i;i=i+16|0;j=h;k=c[e+367624>>2]|0;if((k|0)==3){l=(c[e+367588>>2]|0)+~g|0;m=f}else if((k|0)==2){l=(c[e+367584>>2]|0)+~f|0;m=(c[e+367588>>2]|0)+~g|0}else if((k|0)==1){l=g;m=(c[e+367584>>2]|0)+~f|0}else{l=f;m=g}c[j>>2]=-16777216;g=e+98482|0;f=(a[g]|0)!=0?32993:6408;k=c[e+99252>>2]|0;if((k|0)>-1){ld(l|0,(b[(c[e+98468>>2]|0)+((c[e+(k*24|0)+98504>>2]|0)*28|0)+22>>1]|0)+~m|0,1,1,f|0,5121,j|0)}else{ld(l|0,(c[e+367588>>2]|0)+~m|0,1,1,f|0,5121,j|0)}if((a[g]|0)==0){n=c[j>>2]&16777215;i=h;return n|0}else{n=d[j+1|0]<<8|d[j+2|0]|d[j]<<16;i=h;return n|0}return 0}function mn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0;f=i;h=+(e&255)*.003921568859368563;j=+(e>>>8&255)*.003921568859368563;k=+(e>>>16&255)*.003921568859368563;if((c[a+367628>>2]|0)==(e|0)){l=0.0}else{l=+g[a+98472>>2]}if(+g[2664]!=h|+g[2666]!=j|+g[2668]!=k|+g[2670]!=l){g[2664]=h;g[2666]=j;g[2668]=k;g[2670]=l;sc(+h,+j,+k,+l)}c[2138]=-1;c[a+24>>2]=-1;c[a+28>>2]=-1;c[a+32>>2]=0;e=c[1480]|0;if((e|0)==0){Vd(3553);if((c[6152>>2]|0)!=1){Me(2903);c[6152>>2]=1}}else{Jh[e&127](33985);Vd(3553);Jh[c[1480]&127](33984);Vd(3553)}Yb(5889);qc();Ra(.375,.375,0.0);Yb(5888);fg(0);$b(+(+(b|0)),+(+(d|0)),0.0);Nd();Yb(5889);xf();Yb(5888);l=+g[a+98472>>2];if(!(+g[2664]!=1.0|+g[2666]!=1.0|+g[2668]!=1.0|+g[2670]!=l)){i=f;return}g[2664]=1.0;g[2666]=1.0;g[2668]=1.0;g[2670]=l;sc(1.0,1.0,1.0,+l);i=f;return}function nn(d,e,f,h,j,k){d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;l=i;m=d+98468|0;n=c[m>>2]|0;b[n+(e*28|0)+24>>1]=0;b[n+(e*28|0)+26>>1]=0;n=d+(e<<2)+99256|0;o=c[n>>2]|0;if((o|0)!=0){au(o)}c[n>>2]=0;if((j|0)==0|(k|0)==0){cn(d,e);i=l;return 1}else{p=8}while(1){r=p<<1;if((r|0)<(j|0)){p=r}else{s=8;break}}do{s=s<<1}while((s|0)<(k|0));p=c[m>>2]|0;if((b[p+(e*28|0)+16>>1]|0)==(r|0)){if((b[p+(e*28|0)+18>>1]|0)==(s|0)){hd(3553,c[p+(e*28|0)>>2]|0)}else{t=9}}else{t=9}if((t|0)==9){n=p+(e*28|0)|0;if((c[n>>2]|0)==0){u=p}else{Ge(1,n|0);u=c[m>>2]|0}n=u+(e*28|0)+4|0;if((c[n>>2]|0)==0){v=u}else{Ge(1,n|0);v=c[m>>2]|0}c[v+(e*28|0)>>2]=0;c[v+(e*28|0)+4>>2]=0;ye(3317,4);qb(1,(c[m>>2]|0)+(e*28|0)|0);hd(3553,c[(c[m>>2]|0)+(e*28|0)>>2]|0);Lf(3553,10242,10497.0);Lf(3553,10243,10497.0);Lf(3553,10240,9729.0);Lf(3553,10241,9729.0);dh(3553,0,6408,r|0,s|0,0,((a[d+98482|0]|0)==0?6408:32993)|0,5121,0)}v=r&65535;n=c[m>>2]|0;b[n+(e*28|0)+16>>1]=v;u=s&65535;b[n+(e*28|0)+18>>1]=u;p=j&65535;b[n+(e*28|0)+20>>1]=p;o=k&65535;b[n+(e*28|0)+22>>1]=o;g[n+(e*28|0)+8>>2]=+(p<<16>>16)/+(v<<16>>16);g[n+(e*28|0)+12>>2]=+(o<<16>>16)/+(u<<16>>16);u=c[2260]|0;if((u|0)==-1){Vc(3413,9040);w=c[2260]|0}else{w=u}if((w|0)!=0){if((c[d+367624>>2]|0)==0){Hf(3553,0,0,0,f|0,(c[d+367588>>2]|0)-(k+h)|0,j|0,k|0);i=l;return 1}}if((a[9072]|0)==0){if((de(9072)|0)!=0){c[9052>>2]=0;c[9056>>2]=0;c[9060>>2]=0;c[9064>>2]=0;a[9048]=1;oc(36,9048,q|0)|0;Lc(9072)}}w=c[d+367588>>2]|0;u=w-h-k|0;o=d+367624|0;n=c[o>>2]|0;if((n|0)==1){x=k;y=j;z=(c[d+367584>>2]|0)-(k+h)|0;A=w-(r+f)|0;B=s;C=r}else if((n|0)==0){x=j;y=k;z=f;A=u;B=r;C=s}else{k=r+f|0;r=k+ -1|0;j=u+s|0;s=j+ -1|0;if((n|0)==2){h=c[d+367584>>2]|0;D=h+~f|0;E=w-j|0;F=w+~u|0;G=h-k|0}else if((n|0)==3){D=w+~u|0;E=r;F=f;G=w-j|0}else{D=f;E=s;F=u;G=r}r=(G|0)<(D|0);u=r?G:D;s=(E|0)<(F|0);f=s?E:F;j=(r?D:G)-u+1|0;G=(s?F:E)-f|0;E=8;do{E=E<<1}while((E|0)<(j|0));F=G+1|0;G=8;while(1){s=G<<1;if((s|0)<(F|0)){G=s}else{x=j;y=F;z=u;A=f;B=E;C=s;break}}}E=ea(x,y)|0;f=E<<2;if((f|0)>(c[9064>>2]|0)){c[9064>>2]=0;c[9056>>2]=0;c[9052>>2]=0;u=c[9060>>2]|0;if((u|0)!=0){au(u)}a[9048]=1;c[9064>>2]=f;u=_t((E|0)<0?-1:f)|0;c[9060>>2]=u;if((u|0)==0){H=0}else{I=u;t=37}}else{I=c[9060>>2]|0;t=37}if((t|0)==37){c[9052>>2]=x;c[9056>>2]=y;vu(I|0,0,f|0)|0;H=c[9060>>2]|0}f=d+98482|0;if((a[f]|0)==0){ld(z|0,A|0,x|0,y|0,6408,5121,H|0)}else{ld(z|0,A|0,x|0,y|0,32993,5121,H|0)}pn(9048,B,C)|0;if((c[2260]|0)==0){H=d+367628|0;if((c[H>>2]|0)==0){J=0}else{y=ln(d,4,4)|0;mn(d,4,4,c[H>>2]|0);H=wg(ln(d,4,4)|0)|0;mn(d,4,4,y);J=H}hd(3553,c[(c[m>>2]|0)+(e*28|0)>>2]|0);e=c[9060>>2]|0;m=e+((ea(B,C)|0)<<2)|0;if((a[f]|0)==0){H=J>>>8;y=e;do{if((c[y>>2]&16777215|0)==(H|0)){c[y>>2]=H}y=y+4|0}while(y>>>0<m>>>0)}else{y=wg(J|0)|0;J=e;do{if((c[J>>2]&16777215|0)==(y|0)){c[J>>2]=y}J=J+4|0}while(J>>>0<m>>>0)}}m=c[o>>2]|0;if((m|0)==0){K=B;L=C}else{if((m|0)>0){J=0;while(1){qn(9048);y=J+1|0;e=c[o>>2]|0;if((y|0)<(e|0)){J=y}else{M=e;break}}}else{M=m}if((M|0)==3|(M|0)==1){K=C;L=B}else{K=B;L=C}}dh(3553,0,6408,K|0,L|0,0,((a[f]|0)==0?6408:32993)|0,5121,c[9060>>2]|0);i=l;return 1}function on(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;h=c[a+367624>>2]|0;if((h|0)==1){c[e>>2]=d;c[f>>2]=(c[a+367584>>2]|0)+~b;i=g;return}else if((h|0)==2){c[e>>2]=(c[a+367584>>2]|0)+~b;c[f>>2]=(c[a+367588>>2]|0)+~d;i=g;return}else if((h|0)==3){c[e>>2]=(c[a+367588>>2]|0)+~d;c[f>>2]=b;i=g;return}else{c[e>>2]=b;c[f>>2]=d;i=g;return}}function pn(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;f=i;i=i+16|0;g=f+4|0;h=f;j=b+4|0;k=c[j>>2]|0;if((k|0)==(d|0)){if((c[b+8>>2]|0)==(e|0)){i=f;return 1}}c[g>>2]=0;c[h>>2]=0;l=ea(e,d)|0;m=l<<2;if((l|0)>0){c[h>>2]=0;c[g>>2]=0;l=_t(m)|0;if((l|0)==0){n=0;o=m;p=0;q=0}else{r=l;s=m;t=5}}else{r=0;s=0;t=5}if((t|0)==5){c[g>>2]=d;c[h>>2]=e;vu(r|0,0,m|0)|0;n=r;o=s;p=e;q=d}s=b+8|0;r=c[s>>2]|0;m=((k|0)>(d|0)?d:k)<<2;k=b+12|0;if((((r|0)>(e|0)?e:r)|0)>0){d=~r;r=~e;e=~((d|0)>(r|0)?d:r);r=n;d=c[k>>2]|0;t=0;while(1){tu(r|0,d|0,m|0)|0;u=c[g>>2]|0;t=t+1|0;if((t|0)==(e|0)){break}else{r=r+(u<<2)|0;d=d+(c[j>>2]<<2)|0}}v=u;w=c[h>>2]|0}else{v=q;w=p}c[j>>2]=v;c[s>>2]=w;w=c[k>>2]|0;c[k>>2]=n;c[b+16>>2]=o;a[b]=1;c[h>>2]=0;c[g>>2]=0;if((w|0)==0){i=f;return 1}au(w);i=f;return 1}function qn(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;d=i;i=i+16|0;e=d+4|0;f=d;c[e>>2]=0;c[f>>2]=0;g=b+8|0;h=c[g>>2]|0;j=b+4|0;k=c[j>>2]|0;l=ea(k,h)|0;m=l<<2;if((l|0)>0){c[f>>2]=0;c[e>>2]=0;l=_t(m)|0;if((l|0)==0){n=0;o=0;p=0}else{q=l;r=3}}else{q=0;r=3}if((r|0)==3){c[e>>2]=h;c[f>>2]=k;vu(q|0,0,m|0)|0;n=q;o=k;p=h}q=b+12|0;if((h|0)>0){m=k;k=h;l=n+(h+ -1<<2)|0;h=c[q>>2]|0;s=0;while(1){t=l+ -4|0;if((m|0)>0){u=l;v=h;w=0;while(1){x=v+4|0;c[u>>2]=c[v>>2];y=c[g>>2]|0;z=w+1|0;A=c[j>>2]|0;if((z|0)<(A|0)){u=u+(y<<2)|0;v=x;w=z}else{B=y;C=A;D=x;break}}}else{B=k;C=m;D=h}w=s+1|0;if((w|0)<(B|0)){m=C;k=B;l=t;h=D;s=w}else{break}}E=c[f>>2]|0;F=c[e>>2]|0}else{E=o;F=p}p=ea(E,F)|0;o=p<<2;s=b+16|0;if((o|0)>(c[s>>2]|0)){c[s>>2]=0;c[g>>2]=0;c[j>>2]=0;D=c[q>>2]|0;if((D|0)!=0){au(D)}a[b]=1;c[s>>2]=o;s=_t((p|0)<0?-1:o)|0;c[q>>2]=s;if((s|0)==0){G=0}else{H=s;r=15}}else{H=c[q>>2]|0;r=15}if((r|0)==15){c[j>>2]=F;c[g>>2]=E;vu(H|0,0,o|0)|0;G=c[q>>2]|0}tu(G|0,n|0,ea(c[j>>2]<<2,c[g>>2]|0)|0)|0;c[f>>2]=0;c[e>>2]=0;if((n|0)==0){i=d;return}au(n);i=d;return}function rn(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0.0,l=0.0,m=0.0,n=0.0;j=i;k=+(h&255)*.003921568859368563;l=+(h>>>8&255)*.003921568859368563;m=+(h>>>16&255)*.003921568859368563;if((c[a+367628>>2]|0)==(h|0)){n=0.0}else{n=+g[a+98472>>2]}if(+g[2664]!=k|+g[2666]!=l|+g[2668]!=m|+g[2670]!=n){g[2664]=k;g[2666]=l;g[2668]=m;g[2670]=n;sc(+k,+l,+m,+n)}c[2138]=-1;c[a+24>>2]=-1;c[a+28>>2]=-1;c[a+32>>2]=0;h=c[1480]|0;if((h|0)==0){Vd(3553);if((c[6152>>2]|0)!=1){Me(2903);c[6152>>2]=1}}else{Jh[h&127](33985);Vd(3553);Jh[c[1480]&127](33984);Vd(3553)}Yb(5889);qc();Ra(.375,.375,0.0);Yb(5888);fg(1);$b(+(+(b|0)),+(+(d|0)),0.0);n=+(e|0);m=+(f|0);$b(+n,+m,0.0);Nd();fg(0);$b(+n,+m,0.0);Nd();Yb(5889);xf();Yb(5888);m=+g[a+98472>>2];if(!(+g[2664]!=1.0|+g[2666]!=1.0|+g[2668]!=1.0|+g[2670]!=m)){i=j;return}g[2664]=1.0;g[2666]=1.0;g[2668]=1.0;g[2670]=m;sc(1.0,1.0,1.0,+m);i=j;return}function sn(a,b,d,e,f,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0;j=i;i=i+64|0;k=j;if((e|0)<0){l=b+1+e|0;m=0-e|0}else{l=b;m=e}if((f|0)<0){n=d+1+f|0;o=0-f|0}else{n=d;o=f}p=+(h&255)*.003921568859368563;q=+(h>>>8&255)*.003921568859368563;r=+(h>>>16&255)*.003921568859368563;if((c[a+367628>>2]|0)==(h|0)){s=0.0}else{s=+g[a+98472>>2]}if(+g[2664]!=p|+g[2666]!=q|+g[2668]!=r|+g[2670]!=s){g[2664]=p;g[2666]=q;g[2668]=r;g[2670]=s;sc(+p,+q,+r,+s)}c[2138]=-1;c[a+24>>2]=-1;c[a+28>>2]=-1;c[a+32>>2]=0;h=c[1480]|0;if((h|0)==0){Vd(3553);if((c[6152>>2]|0)!=1){Me(2903);c[6152>>2]=1}}else{Jh[h&127](33985);Vd(3553);Jh[c[1480]&127](33984);Vd(3553)}s=+(l|0);r=+(n|0);q=+(l+m|0);p=+(n+o|0);g[k>>2]=s;g[k+4>>2]=p;g[k+8>>2]=0.0;g[k+12>>2]=0.0;g[k+16>>2]=q;g[k+20>>2]=p;g[k+24>>2]=0.0;g[k+28>>2]=0.0;g[k+32>>2]=q;g[k+36>>2]=r;g[k+40>>2]=0.0;g[k+44>>2]=0.0;g[k+48>>2]=s;g[k+52>>2]=r;g[k+56>>2]=0.0;g[k+60>>2]=0.0;Vm(k);r=+g[a+98472>>2];if(!(+g[2664]!=1.0|+g[2666]!=1.0|+g[2668]!=1.0|+g[2670]!=r)){i=j;return}g[2664]=1.0;g[2666]=1.0;g[2668]=1.0;g[2670]=r;sc(1.0,1.0,1.0,+r);i=j;return}function tn(a){a=a|0;var d=0,e=0,f=0,g=0;d=i;e=c[a+98468>>2]|0;a=65503;while(1){if((b[e+(a*28|0)+20>>1]|0)==0){f=a;g=4;break}if((a|0)>0){a=a+ -1|0}else{f=-1;g=4;break}}if((g|0)==4){i=d;return f|0}return 0}function un(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;g=e+65504|0;e=c[d+98468>>2]|0;d=b[e+(g*28|0)+20>>1]|0;c[a>>2]=(d<<16>>16|0)/16|0;h=b[e+(g*28|0)+22>>1]|0;g=h<<16>>16;e=a+4|0;if(!(d<<16>>16<h<<16>>16)){j=(g|0)/8|0;c[e>>2]=j;i=f;return}j=(g|0)/16|0;c[e>>2]=j;i=f;return}function vn(a){a=a|0;var b=0,d=0,e=0;b=i;d=31;while(1){if((c[a+(d*24|0)+98496>>2]|0)==0){e=d;break}if((c[a+(d*24|0)+98504>>2]|0)<0){e=d;break}if((d|0)>0){d=d+ -1|0}else{e=-1;break}}i=b;return e|0}function wn(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;h=c[a+367624>>2]|0;if((h|0)==1){c[e>>2]=(c[a+367584>>2]|0)+~d;c[f>>2]=b;i=g;return}else if((h|0)==2){c[e>>2]=(c[a+367584>>2]|0)+~b;c[f>>2]=(c[a+367588>>2]|0)+~d;i=g;return}else if((h|0)==3){c[e>>2]=d;c[f>>2]=(c[a+367588>>2]|0)+~b;i=g;return}else{c[e>>2]=b;c[f>>2]=d;i=g;return}}function xn(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;h=c[a+367624>>2]|0;if((h|0)==3){c[e>>2]=d;c[f>>2]=0-b}else if((h|0)==2){c[e>>2]=0-b;c[f>>2]=0-d}else if((h|0)==1){c[e>>2]=0-d;c[f>>2]=b}else{c[e>>2]=b;c[f>>2]=d}i=g;return}function yn(d,e){d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0;f=i;i=i+32|0;h=f;g[d+(e<<2)+98340>>2]=4.0;j=h+4|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;a[h]=1;jn(h);k=e+65504|0;l=c[d+98468>>2]|0;gn(h,0,0,0,0,l+(k*28|0)|0,0,0,1)|0;m=c[j>>2]|0;n=m&65535;o=l+(k*28|0)+16|0;b[o>>1]=n;p=h+8|0;q=c[p>>2]&65535;b[l+(k*28|0)+18>>1]=q;r=l+(k*28|0)+20|0;b[r>>1]=n;b[l+(k*28|0)+22>>1]=q;s=+(n<<16>>16);g[l+(k*28|0)+8>>2]=s/s;s=+(q<<16>>16);g[l+(k*28|0)+12>>2]=s/s;k=(m|0)/16|0;m=k&255;l=0;do{a[d+(e*3072|0)+(l*12|0)+36|0]=0;a[d+(e*3072|0)+(l*12|0)+37|0]=m;q=(ea(b[r>>1]|0,(l|0)%16|0)|0)/16|0;s=+(b[o>>1]|0);g[d+(e*3072|0)+(l*12|0)+40>>2]=+(q|0)/s;g[d+(e*3072|0)+(l*12|0)+44>>2]=+((k&255)+q|0)/s;l=l+1|0}while((l|0)!=256);c[h+16>>2]=0;c[p>>2]=0;c[j>>2]=0;j=c[h+12>>2]|0;if((j|0)==0){i=f;return}au(j);i=f;return}function zn(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0,h=0,j=0.0,k=0.0;e=i;i=i+64|0;f=e;if((c[2654]|0)==0){qb(1,10616);hd(3553,c[2654]|0);Lf(3553,10242,33071.0);Lf(3553,10243,33071.0);Lf(3553,10240,9729.0);Lf(3553,10241,9729.0);dh(3553,0,6408,16,32,0,6407,5121,9080)}Qm(a,0,-1,0,0);Me(3553);hd(3553,c[2654]|0);if(+g[2664]!=1.0|+g[2666]!=1.0|+g[2668]!=1.0|+g[2670]!=1.0){g[2664]=1.0;g[2666]=1.0;g[2668]=1.0;g[2670]=1.0;sc(1.0,1.0,1.0,1.0)}Pk(a,d);h=(c[a+367584>>2]|0)>500;d=h?80.0:40.0;j=+(b+ -100|0);k=j+(h?160.0:80.0);g[f>>2]=k;g[f+4>>2]=d;g[f+8>>2]=1.0;g[f+12>>2]=1.0;g[f+16>>2]=k;g[f+20>>2]=0.0;g[f+24>>2]=0.0;g[f+28>>2]=1.0;g[f+32>>2]=j;g[f+36>>2]=0.0;g[f+40>>2]=0.0;g[f+44>>2]=0.0;g[f+48>>2]=j;g[f+52>>2]=d;g[f+56>>2]=1.0;g[f+60>>2]=0.0;Vm(f);Pk(a,0.0);i=e;return}function An(){var a=0,b=0,d=0;a=i;b=6128|0;d=b+88|0;do{c[b>>2]=2139062143;b=b+4|0}while((b|0)<(d|0));c[8532>>2]=0;c[8536>>2]=0;c[2132]=0;c[8544>>2]=512;c[8540>>2]=128;oc(37,8528,q|0)|0;i=a;return}function Bn(a){a=a|0;var b=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;b=i;i=i+16|0;e=b;f=a+8|0;g=c[f>>2]|0;if((g|0)==0){i=b;return}h=a+4|0;j=c[h>>2]|0;if((g|0)>0){g=a+44|0;k=e+4|0;l=e+8|0;m=j;n=0;while(1){o=m+(n*56|0)+24|0;c[o>>2]=0;p=(c[m+(n*56|0)+4>>2]|0)/3|0;q=m+(n*56|0)+28|0;do{if((c[q>>2]|0)<=(p|0)){r=c[m+(n*56|0)+36>>2]|0;if((r|0)<(p|0)){s=c[m+(n*56|0)+32>>2]|0;t=ea(((p|0)/(s|0)|0)+1|0,s)|0}else{t=r}c[q>>2]=t;r=_t(t>>>0>46684427?-1:t*92|0)|0;s=m+(n*56|0)+20|0;u=c[s>>2]|0;v=(u|0)==0;if((r|0)==0){if(!v){au(u);c[s>>2]=0;c[q>>2]=0}c[o>>2]=0;break}if(!v){v=c[o>>2]|0;if((v|0)>0){w=0;do{x=r+(w*92|0)+0|0;y=u+(w*92|0)+0|0;z=x+92|0;do{c[x>>2]=c[y>>2];x=x+4|0;y=y+4|0}while((x|0)<(z|0));w=w+1|0}while((w|0)!=(v|0))}au(u)}c[s>>2]=r}}while(0);o=c[h>>2]|0;if((c[o+(n*56|0)+4>>2]|0)>0){q=o;p=0;v=-1;w=0;A=0;while(1){B=c[q+(n*56|0)>>2]|0;C=c[(c[g>>2]|0)+((d[B+(p*92|0)+72|0]|0)<<2)>>2]|0;do{if((C|0)==-2){D=-2;E=0;F=0}else if((C|0)==-3|(C|0)==-1){D=C;E=0;F=A}else{c[e+(w<<2)>>2]=B+(p*92|0);G=w+1|0;if((w|0)>1){Cn(q+(n*56|0)+20|0,c[e>>2]|0)|0;Cn((c[h>>2]|0)+(n*56|0)+20|0,c[k>>2]|0)|0;H=c[l>>2]|0;Cn((c[h>>2]|0)+(n*56|0)+20|0,H)|0;if((v|0)==-3){c[k>>2]=H;D=-3;E=2;F=A;break}else if((v|0)==-2){I=1-A|0;if((A|0)==1){c[k>>2]=H;D=-2;E=2;F=I;break}else{c[e>>2]=H;D=-2;E=2;F=I;break}}else if((v|0)==-1){D=-1;E=0;F=A;break}else{D=v;E=G;F=A;break}}else{D=v;E=G;F=A}}}while(0);B=p+1|0;C=c[h>>2]|0;if((B|0)<(c[C+(n*56|0)+4>>2]|0)){q=C;p=B;v=D;w=E;A=F}else{J=C;break}}}else{J=o}A=n+1|0;if((A|0)<(c[f>>2]|0)){m=J;n=A}else{K=J;break}}}else{K=j}j=c[K+28>>2]|0;if((j|0)<0){L=0;M=0}else{if((j|0)>512){N=(((j|0)/128|0)<<7)+128|0}else{N=512}L=_t(N>>>0>46684427?-1:N*92|0)|0;M=N}N=c[K+24>>2]|0;if((N|0)>0){j=K+20|0;J=0;do{x=L+(J*92|0)+0|0;y=(c[j>>2]|0)+(J*92|0)+0|0;z=x+92|0;do{c[x>>2]=c[y>>2];x=x+4|0;y=y+4|0}while((x|0)<(z|0));J=J+1|0}while((J|0)!=(N|0))}J=c[K+36>>2]|0;y=c[K+32>>2]|0;K=a+24|0;x=c[K>>2]|0;c[K>>2]=L;c[a+28>>2]=N;c[a+32>>2]=M;c[a+36>>2]=y;c[a+40>>2]=J;if((x|0)!=0){au(x)}x=a+72|0;c[x>>2]=0;J=c[a+48>>2]|0;if((J|0)<=0){i=b;return}y=c[a+44>>2]|0;a=0;while(1){M=c[y+(a<<2)>>2]|0;if(!((M|0)==16777215|(M|0)==-4|(M|0)==-3|(M|0)==-2|(M|0)==-1)){break}M=a+1|0;if((M|0)<(J|0)){a=M}else{O=42;break}}if((O|0)==42){i=b;return}c[x>>2]=1;i=b;return}function Cn(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;d=i;e=a+8|0;f=c[e>>2]|0;g=a+4|0;h=c[g>>2]|0;if((f|0)>(h|0)){j=h}else{k=h+1|0;if((f|0)>(k|0)){j=h}else{f=c[a+16>>2]|0;if((f|0)<(k|0)){l=c[a+12>>2]|0;m=ea(((k|0)/(l|0)|0)+1|0,l)|0}else{m=f}c[e>>2]=m;f=_t(m>>>0>46684427?-1:m*92|0)|0;m=c[a>>2]|0;l=(m|0)==0;if((f|0)==0){if(!l){au(m);c[a>>2]=0;c[e>>2]=0}c[g>>2]=0;n=0;i=d;return n|0}if(l){o=h}else{if((h|0)>0){l=0;do{p=f+(l*92|0)+0|0;q=m+(l*92|0)+0|0;r=p+92|0;do{c[p>>2]=c[q>>2];p=p+4|0;q=q+4|0}while((p|0)<(r|0));l=l+1|0}while((l|0)!=(h|0))}au(m);o=c[g>>2]|0}c[a>>2]=f;j=o}}c[g>>2]=j+1;p=(c[a>>2]|0)+(j*92|0)+0|0;q=b+0|0;r=p+92|0;do{c[p>>2]=c[q>>2];p=p+4|0;q=q+4|0}while((p|0)<(r|0));n=1;i=d;return n|0}function Dn(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){au(d);c[a>>2]=0;c[a+8>>2]=0}c[a+4>>2]=0;i=b;return}function En(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;rm(a,b);if(b){b=a+92|0;e=c[b>>2]|0;if((e|0)!=0){au(e);c[b>>2]=0;c[a+100>>2]=0}c[a+96>>2]=0;b=a+112|0;e=c[b>>2]|0;if((e|0)==0){f=b}else{au(e);c[b>>2]=0;c[a+120>>2]=0;f=b}}else{c[a+96>>2]=0;f=a+112|0}c[f+4>>2]=0;c[a+104>>2]=64;c[a+108>>2]=64;c[f+12>>2]=64;c[f+16>>2]=64;f=a+76|0;b=c[1490]|0;if((c[f>>2]|0)==0|(b|0)==0){g=b}else{Kh[c[1494]&63](1,f);g=c[1490]|0}b=a+80|0;if(!((c[b>>2]|0)==0|(g|0)==0)){Kh[c[1494]&63](1,b)}g=a+84|0;if((c[g>>2]|0)==0){c[f>>2]=0;c[b>>2]=0;i=d;return}Ge(1,g|0);c[g>>2]=0;c[f>>2]=0;c[b>>2]=0;i=d;return}function Fn(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;c[b>>2]=11312;f=b+4|0;g=b+8|0;c[g>>2]=0;c[b+12>>2]=0;c[f>>2]=0;c[b+20>>2]=512;c[b+16>>2]=128;c[b+24>>2]=0;a[b+25568|0]=0;c[b+25644>>2]=2;c[b+25572>>2]=d;c[b+25364>>2]=0;a[b+3280|0]=0;Nn(f,4096)|0;c[g>>2]=4096;vu(b+124|0,0,3060)|0;c[d+367636>>2]=b;i=e;return}function Gn(a){a=a|0;var b=0;b=i;Hn(a);$t(a);i=b;return}function Hn(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0;b=i;c[a>>2]=11312;d=a+4|0;e=c[d>>2]|0;if((e|0)!=0){f=e+ -4|0;g=c[f>>2]|0;if((g|0)!=0){h=e+(g*44|0)|0;do{h=h+ -44|0;Mn(h)}while((h|0)!=(e|0))}au(f);c[d>>2]=0;c[a+12>>2]=0}f=a+8|0;c[f>>2]=0;e=0;do{h=c[1504]|0;if((h|0)!=0){g=a+(e*12|0)+124|0;j=c[g>>2]|0;if((j|0)!=0){Jh[h&127](j)}j=a+(e*12|0)+128|0;h=c[j>>2]|0;if((h|0)!=0){Jh[c[1504]&127](h)}h=a+(e*12|0)+132|0;k=c[h>>2]|0;if((k|0)!=0){Jh[c[1504]&127](k)}c[h>>2]=0;c[j>>2]=0;c[g>>2]=0}e=e+1|0}while((e|0)<255);e=c[d>>2]|0;if((e|0)==0){c[f>>2]=0;i=b;return}g=e+ -4|0;j=c[g>>2]|0;if((j|0)!=0){h=e+(j*44|0)|0;do{h=h+ -44|0;Mn(h)}while((h|0)!=(e|0))}au(g);c[d>>2]=0;c[a+12>>2]=0;c[f>>2]=0;i=b;return}function In(b,e){b=b|0;e=e|0;var f=0,g=0;f=i;g=b+3280|0;if((e&1|0)==(d[g]|0)){i=f;return}a[g]=e&1;if(e){wh(7424);Ff(0,0,0,0);if((c[6164>>2]|0)!=1){Me(2960);c[6164>>2]=1}hb(0);Ua(519,0,0);Xf(7680,7680,5386);i=f;return}vb(1029);hb(1);og(515);Ff(1,1,1,1);Yb(5889);qc();Yb(5888);qc();e=b+25572|0;Km(c[e>>2]|0);Pk(c[e>>2]|0,-.5);if((c[6164>>2]|0)!=1){Me(2960);c[6164>>2]=1}Ua(517,0,-1);Xf(7680,7680,7680);g=c[e>>2]|0;sn(g,0,0,c[g+367612>>2]|0,c[g+367616>>2]|0,c[b+25592>>2]|0);Pk(c[e>>2]|0,0.0);Yb(5889);xf();Yb(5888);xf();wh(7425);if((c[6168>>2]|0)!=1){Me(2929);c[6168>>2]=1}og(513);if((c[6164>>2]|0)!=0){Vd(2960);c[6164>>2]=0}wf(1024);if((c[6156>>2]|0)!=1){Me(2884);c[6156>>2]=1}vb(1029);e=a[b+3281|0]|0;if((e|0)==1){sd(2304);if((c[6156>>2]|0)==1){i=f;return}Me(2884);c[6156>>2]=1;i=f;return}else if((e|0)==-1){if((c[6156>>2]|0)!=1){Me(2884);c[6156>>2]=1}sd(2305);i=f;return}else if((e|0)==0){if((c[6156>>2]|0)==0){i=f;return}Vd(2884);c[6156>>2]=0;i=f;return}else{i=f;return}}function Jn(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;f=b+4|0;g=b+8|0;if((c[g>>2]|0)>0){h=0;do{En((c[f>>2]|0)+(h*140|0)|0,d);h=h+1|0}while((h|0)<(c[g>>2]|0))}Ln(f,d);a[b]=0;a[b+1|0]=0;f=b+24|0;g=b+28|0;h=c[g>>2]|0;if((h|0)!=0){Ge(h|0,c[f>>2]|0)}if(d){d=c[f>>2]|0;if((d|0)!=0){au(d);c[f>>2]=0;c[b+32>>2]=0}}c[g>>2]=0;c[b+16>>2]=1;c[b+20>>2]=1;c[b+36>>2]=1;c[b+40>>2]=1;i=e;return}function Kn(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=c[1520]|0;if((e|0)==0){i=d;return}if(b>>>0>254){Jh[e&127](0);c[a+3184>>2]=-1;i=d;return}else{c[a+3184>>2]=b;Jh[e&127](c[a+(b*12|0)+124>>2]|0);i=d;return}}function Ln(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;if(b){b=c[a>>2]|0;if((b|0)!=0){e=b+ -4|0;f=c[e>>2]|0;if((f|0)!=0){g=b+(f*140|0)|0;do{g=g+ -140|0;zl(g)}while((g|0)!=(b|0))}au(e);c[a>>2]=0;c[a+8>>2]=0}}c[a+4>>2]=0;i=d;return}function Mn(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;Jn(a,1);d=a+24|0;e=c[d>>2]|0;if((e|0)!=0){au(e);c[d>>2]=0;c[a+32>>2]=0}c[a+28>>2]=0;d=a+4|0;e=c[d>>2]|0;if((e|0)==0){f=a+8|0;c[f>>2]=0;i=b;return}g=e+ -4|0;h=c[g>>2]|0;if((h|0)!=0){j=e+(h*140|0)|0;do{j=j+ -140|0;zl(j)}while((j|0)!=(e|0))}au(g);c[d>>2]=0;c[a+12>>2]=0;f=a+8|0;c[f>>2]=0;i=b;return}function Nn(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=a+8|0;if((c[e>>2]|0)>(b|0)){i=d;return 1}f=c[a+16>>2]|0;if((f|0)<(b|0)){g=c[a+12>>2]|0;h=ea(((b|0)/(g|0)|0)+1|0,g)|0}else{h=f}c[e>>2]=h;e=h*44|0;f=_t(h>>>0>97612893|e>>>0>4294967291?-1:e+4|0)|0;c[f>>2]=h;e=f+4|0;if((h|0)!=0){f=e+(h*44|0)|0;h=e;do{c[h+8>>2]=0;c[h+12>>2]=0;c[h+4>>2]=0;c[h+20>>2]=512;c[h+16>>2]=128;c[h+28>>2]=0;c[h+32>>2]=0;c[h+24>>2]=0;c[h+40>>2]=512;c[h+36>>2]=128;Jn(h,1);h=h+44|0}while((h|0)!=(f|0))}f=c[a>>2]|0;do{if((f|0)!=0){h=a+4|0;if((c[h>>2]|0)>0){g=f;b=0;do{On(e+(b*44|0)|0,g+(b*44|0)|0)|0;b=b+1|0;g=c[a>>2]|0}while((b|0)<(c[h>>2]|0));if((g|0)==0){break}else{j=g}}else{j=f}h=j+ -4|0;b=c[h>>2]|0;if((b|0)!=0){k=j+(b*44|0)|0;do{k=k+ -44|0;Mn(k)}while((k|0)!=(j|0))}au(h)}}while(0);c[a>>2]=e;i=d;return 1}function On(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;f=i;i=i+32|0;g=f;h=d[e]|d[e+1|0]<<8;a[b]=h;a[b+1|0]=h>>8;c[g>>2]=0;h=g+4|0;c[h>>2]=0;j=g+8|0;c[j>>2]=0;k=g+16|0;c[k>>2]=512;l=g+12|0;c[l>>2]=128;vl(g,c[e+12>>2]|0)|0;m=c[e+8>>2]|0;c[h>>2]=m;if((m|0)>0){n=e+4|0;o=c[g>>2]|0;p=0;while(1){q=c[n>>2]|0;wl(o+(p*140|0)|0,q+(p*140|0)|0)|0;r=q+(p*140|0)+132|0;q=c[r+4>>2]|0;s=o+(p*140|0)+132|0;c[s>>2]=c[r>>2];c[s+4>>2]=q;q=p+1|0;if((q|0)<(m|0)){p=q}else{t=o;break}}}else{t=c[g>>2]|0}o=c[e+20>>2]|0;p=c[e+16>>2]|0;n=b+4|0;q=c[n>>2]|0;c[n>>2]=t;c[g>>2]=q;t=b+8|0;n=c[t>>2]|0;c[t>>2]=m;c[h>>2]=n;n=b+12|0;m=c[n>>2]|0;c[n>>2]=c[j>>2];c[j>>2]=m;m=b+16|0;n=c[m>>2]|0;c[m>>2]=p;c[l>>2]=n;n=b+20|0;l=c[n>>2]|0;c[n>>2]=o;c[k>>2]=l;if((q|0)!=0){l=q+ -4|0;k=c[l>>2]|0;if((k|0)!=0){o=q+(k*140|0)|0;do{o=o+ -140|0;zl(o)}while((o|0)!=(q|0))}au(l);c[g>>2]=0;c[j>>2]=0}c[h>>2]=0;h=c[e+32>>2]|0;if((h|0)<0){u=0;v=0}else{if((h|0)>512){w=(((h|0)/128|0)<<7)+128|0}else{w=512}u=_t(w>>>0>1073741823?-1:w<<2)|0;v=w}w=c[e+28>>2]|0;if((w|0)>0){h=c[e+24>>2]|0;j=0;do{c[u+(j<<2)>>2]=c[h+(j<<2)>>2];j=j+1|0}while((j|0)!=(w|0))}j=c[e+40>>2]|0;h=c[e+36>>2]|0;e=b+24|0;g=c[e>>2]|0;c[e>>2]=u;c[b+28>>2]=w;c[b+32>>2]=v;c[b+36>>2]=h;c[b+40>>2]=j;if((g|0)==0){i=f;return b|0}au(g);i=f;return b|0}function Pn(){var a=0;a=i;c[11284>>2]=0;c[11288>>2]=0;c[2820]=0;c[11296>>2]=512;c[11292>>2]=128;oc(38,11280,q|0)|0;i=a;return}function Qn(a){a=a|0;var b=0;b=i;c[a>>2]=_t(72)|0;c[a+4>>2]=_t(4096)|0;i=b;return}function Rn(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;if((d|0)!=0){$t(d)}d=c[a+4>>2]|0;if((d|0)==0){i=b;return}au(d);i=b;return}function Sn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=c[a>>2]|0;f=c[e>>2]^c[b>>2];g=c[a+4>>2]|0;a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^c[d>>2]^c[e+4>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+8>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+12>>2];a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+16>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+20>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+24>>2];a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+28>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+32>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+36>>2];a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+40>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+44>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+48>>2];a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+52>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+56>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+60>>2];a=c[e+68>>2]^f;c[d>>2]=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+64>>2];c[b>>2]=a;return}function Tn(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=c[a>>2]|0;f=c[e+68>>2]^c[b>>2];g=c[a+4>>2]|0;a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^c[d>>2]^c[e+64>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+60>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+56>>2];a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+52>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+48>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+44>>2];a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+40>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+36>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+32>>2];a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+28>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+24>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+20>>2];a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+16>>2];h=((c[g+((a>>>16&255)<<2)+1024>>2]|0)+(c[g+(a>>>24<<2)>>2]|0)^c[g+((a>>>8&255)<<2)+2048>>2])+(c[g+((a&255)<<2)+3072>>2]|0)^f^c[e+12>>2];f=((c[g+((h>>>16&255)<<2)+1024>>2]|0)+(c[g+(h>>>24<<2)>>2]|0)^c[g+((h>>>8&255)<<2)+2048>>2])+(c[g+((h&255)<<2)+3072>>2]|0)^a^c[e+8>>2];a=((c[g+((f>>>16&255)<<2)+1024>>2]|0)+(c[g+(f>>>24<<2)>>2]|0)^c[g+((f>>>8&255)<<2)+2048>>2])+(c[g+((f&255)<<2)+3072>>2]|0)^h^c[e+4>>2];c[b>>2]=c[e>>2]^f;c[d>>2]=a;return}function Un(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;f=i;i=i+16|0;g=f+4|0;h=f;j=c[a>>2]|0;c[j>>2]=608135816;c[j+4>>2]=-2052912941;c[j+8>>2]=320440878;c[j+12>>2]=57701188;c[j+16>>2]=-1542899678;c[j+20>>2]=698298832;c[j+24>>2]=137296536;c[j+28>>2]=-330404727;c[j+32>>2]=1160258022;c[j+36>>2]=953160567;c[j+40>>2]=-1101764913;c[j+44>>2]=887688300;c[j+48>>2]=-1062458953;c[j+52>>2]=-914599715;c[j+56>>2]=1065670069;c[j+60>>2]=-1253635817;c[j+64>>2]=-1843997223;c[j+68>>2]=-1988494565;k=a+4|0;l=c[k>>2]|0;m=0;while(1){c[l+(m<<2)>>2]=c[11392+(m<<2)>>2];n=m+1|0;if((n|0)==256){o=0;break}else{m=n}}while(1){c[l+(o<<2)+1024>>2]=c[12416+(o<<2)>>2];m=o+1|0;if((m|0)==256){p=0;break}else{o=m}}while(1){c[l+(p<<2)+2048>>2]=c[13440+(p<<2)>>2];o=p+1|0;if((o|0)==256){q=0;break}else{p=o}}while(1){c[l+(q<<2)+3072>>2]=c[14464+(q<<2)>>2];p=q+1|0;if((p|0)==256){r=0;s=0;break}else{q=p}}while(1){q=j+(r<<2)|0;c[q>>2]=c[q>>2]^((d[b+((s+1|0)%(e|0)|0)|0]|0)<<16|(d[b+s|0]|0)<<24|(d[b+((s+2|0)%(e|0)|0)|0]|0)<<8|(d[b+((s+3|0)%(e|0)|0)|0]|0));r=r+1|0;if((r|0)==18){break}else{s=(s+4|0)%(e|0)|0}}c[g>>2]=0;c[h>>2]=0;Sn(a,g,h);e=c[a>>2]|0;c[e>>2]=c[g>>2];c[e+4>>2]=c[h>>2];Sn(a,g,h);e=c[a>>2]|0;c[e+8>>2]=c[g>>2];c[e+12>>2]=c[h>>2];Sn(a,g,h);e=c[a>>2]|0;c[e+16>>2]=c[g>>2];c[e+20>>2]=c[h>>2];Sn(a,g,h);e=c[a>>2]|0;c[e+24>>2]=c[g>>2];c[e+28>>2]=c[h>>2];Sn(a,g,h);e=c[a>>2]|0;c[e+32>>2]=c[g>>2];c[e+36>>2]=c[h>>2];Sn(a,g,h);e=c[a>>2]|0;c[e+40>>2]=c[g>>2];c[e+44>>2]=c[h>>2];Sn(a,g,h);e=c[a>>2]|0;c[e+48>>2]=c[g>>2];c[e+52>>2]=c[h>>2];Sn(a,g,h);e=c[a>>2]|0;c[e+56>>2]=c[g>>2];c[e+60>>2]=c[h>>2];Sn(a,g,h);e=c[a>>2]|0;c[e+64>>2]=c[g>>2];c[e+68>>2]=c[h>>2];e=0;while(1){Sn(a,g,h);s=c[k>>2]|0;c[s+(e<<2)>>2]=c[g>>2];c[s+((e|1)<<2)>>2]=c[h>>2];s=e+2|0;if((s|0)<256){e=s}else{t=0;break}}while(1){Sn(a,g,h);e=c[k>>2]|0;c[e+(t<<2)+1024>>2]=c[g>>2];c[e+((t|1)<<2)+1024>>2]=c[h>>2];e=t+2|0;if((e|0)<256){t=e}else{u=0;break}}while(1){Sn(a,g,h);t=c[k>>2]|0;c[t+(u<<2)+2048>>2]=c[g>>2];c[t+((u|1)<<2)+2048>>2]=c[h>>2];t=u+2|0;if((t|0)<256){u=t}else{v=0;break}}do{Sn(a,g,h);u=c[k>>2]|0;c[u+(v<<2)+3072>>2]=c[g>>2];c[u+((v|1)<<2)+3072>>2]=c[h>>2];v=v+2|0}while((v|0)<256);i=f;return}function Vn(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;if((e|0)==0){i=f;return}if((c|0)==(d|0)){g=c;h=0;while(1){Tn(b,g,g+4|0);h=h+8|0;if(!(h>>>0<e>>>0)){break}else{g=g+8|0}}i=f;return}else{g=d;d=c;c=0;while(1){a[g]=a[d]|0;a[g+1|0]=a[d+1|0]|0;a[g+2|0]=a[d+2|0]|0;a[g+3|0]=a[d+3|0]|0;a[g+4|0]=a[d+4|0]|0;a[g+5|0]=a[d+5|0]|0;a[g+6|0]=a[d+6|0]|0;a[g+7|0]=a[d+7|0]|0;Tn(b,g,g+4|0);c=c+8|0;if(!(c>>>0<e>>>0)){break}else{g=g+8|0;d=d+8|0}}i=f;return}}function Wn(){var a=0,b=0,d=0;a=i;i=i+16|0;b=a;d=qd(15584)|0;if((d|0)==0){c[b>>2]=15584;tg(16048,b|0)|0}c[3872]=d;d=qd(15608)|0;if((d|0)==0){c[b>>2]=15608;tg(16048,b|0)|0}c[3874]=d;d=qd(15640)|0;if((d|0)==0){c[b>>2]=15640;tg(16048,b|0)|0}c[3876]=d;d=qd(15664)|0;if((d|0)==0){c[b>>2]=15664;tg(16048,b|0)|0}c[3878]=d;d=qd(15696)|0;if((d|0)==0){c[b>>2]=15696;tg(16048,b|0)|0}c[3880]=d;d=qd(15720)|0;if((d|0)==0){c[b>>2]=15720;tg(16048,b|0)|0}c[3882]=d;d=qd(15744)|0;if((d|0)==0){c[b>>2]=15744;tg(16048,b|0)|0}c[3884]=d;d=qd(15768)|0;if((d|0)==0){c[b>>2]=15768;tg(16048,b|0)|0}c[3886]=d;d=qd(15800)|0;if((d|0)==0){c[b>>2]=15800;tg(16048,b|0)|0}c[3888]=d;d=qd(15832)|0;if((d|0)==0){c[b>>2]=15832;tg(16048,b|0)|0}c[3890]=d;d=qd(15864)|0;if((d|0)==0){c[b>>2]=15864;tg(16048,b|0)|0}c[3892]=d;d=(c[3884]|0)!=0;c[3894]=d&1;if(d){i=a;return}Xa(16072)|0;i=a;return}function Xn(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;g=i;i=i+16|0;h=g;j=a+4|0;k=a+8|0;l=a+20|0;m=a+16|0;n=a+12|0;o=(b|0)<1|(d|0)<1;p=f;while(1){if((c[3894]|0)!=0){f=c[k>>2]|0;if(!((f|0)==-1)){Kh[c[3880]&63](36160,f);c[k>>2]=-1}}if((c[a>>2]|0)!=0){Kh[c[3882]&63](1,a);if((c[j>>2]|0)!=0){Kh[c[3874]&63](1,j)}}c[a>>2]=0;c[j>>2]=0;c[k>>2]=-1;c[l>>2]=-1;c[m>>2]=0;c[n>>2]=0;if(o){q=9;break}f=c[3884]|0;if(!((f|0)!=0&(c[3876]|0)!=0&(c[3872]|0)!=0&(c[3878]|0)!=0&(c[3886]|0)!=0)){r=0;q=49;break}Kh[f&63](1,a);if((c[a>>2]|0)==0){q=12;break}do{if((c[3894]|0)!=0){if((c[k>>2]|0)==-1){c[k>>2]=0;Vc(36006,k|0);Kh[c[3880]&63](36160,c[a>>2]|0);break}else{Xa(16304)|0;break}}}while(0);hd(3553,e|0);Gh[c[3888]&31](36160,36064,3553,e,0);if(p){Kh[c[3876]&63](1,j);f=c[j>>2]|0;if((f|0)==0){q=19;break}Kh[c[3872]&63](36161,f);do{}while((Cb()|0)!=0);ei[c[3878]&63](36161,33191,b,d);if((Cb()|0)==1280){Xa(16280)|0;ei[c[3878]&63](36161,33190,b,d)}if((Cb()|0)==1280){Xa(16256)|0;ei[c[3878]&63](36161,33189,b,d)}ei[c[3890]&63](36160,36096,36161,c[j>>2]|0)}f=Mh[c[3886]&31](36160)|0;if((f|0)==0){c[h>>2]=Cb()|0;tg(15952,h|0)|0}if((c[3894]|0)!=0){s=c[k>>2]|0;if(!((s|0)==-1)){Kh[c[3880]&63](36160,s);c[k>>2]=-1}}if((f|0)==36053){q=48;break}c[h>>2]=f;tg(16e3,h|0)|0;if((c[3894]|0)!=0){f=c[k>>2]|0;if(!((f|0)==-1)){Kh[c[3880]&63](36160,f);c[k>>2]=-1}}if((c[a>>2]|0)!=0){Kh[c[3882]&63](1,a);if((c[j>>2]|0)!=0){Kh[c[3874]&63](1,j)}}c[a>>2]=0;c[j>>2]=0;c[k>>2]=-1;c[l>>2]=-1;c[m>>2]=0;c[n>>2]=0;if(!p){q=47;break}Xa(16176)|0;p=0}if((q|0)==9){c[h>>2]=b;c[h+4>>2]=d;tg(15912,h|0)|0;r=0;i=g;return r|0}else if((q|0)==12){Xa(16104)|0;r=0;i=g;return r|0}else if((q|0)==19){Xa(16224)|0;if((c[3894]|0)!=0){h=c[k>>2]|0;if(!((h|0)==-1)){Kh[c[3880]&63](36160,h);c[k>>2]=-1}}if((c[a>>2]|0)!=0){Kh[c[3882]&63](1,a);if((c[j>>2]|0)!=0){Kh[c[3874]&63](1,j)}}c[a>>2]=0;c[j>>2]=0;c[k>>2]=-1;c[l>>2]=-1;c[m>>2]=0;c[n>>2]=0;r=0;i=g;return r|0}else if((q|0)==47){Xa(16136)|0;r=0;i=g;return r|0}else if((q|0)==48){c[n>>2]=b;c[m>>2]=d;r=1;i=g;return r|0}else if((q|0)==49){i=g;return r|0}return 0}function Yn(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;if((c[3894]|0)!=0){d=a+8|0;e=c[d>>2]|0;if(!((e|0)==-1)){Kh[c[3880]&63](36160,e);c[d>>2]=-1}}if((c[a>>2]|0)==0){f=a+4|0}else{Kh[c[3882]&63](1,a);d=a+4|0;if((c[d>>2]|0)==0){f=d}else{Kh[c[3874]&63](1,d);f=d}}c[a>>2]=0;c[f>>2]=0;c[a+8>>2]=-1;c[a+20>>2]=-1;c[a+16>>2]=0;c[a+12>>2]=0;i=b;return}function Zn(a){a=a|0;var b=0,d=0,e=0;b=i;if((c[3894]|0)==0){d=0;i=b;return d|0}e=a+8|0;if((c[e>>2]|0)==-1){c[e>>2]=0;Vc(36006,e|0);Kh[c[3880]&63](36160,c[a>>2]|0);d=1;i=b;return d|0}else{Xa(16304)|0;d=0;i=b;return d|0}return 0}function _n(a){a=a|0;var b=0,d=0,e=0;b=i;if((c[3894]|0)==0){d=0}else{e=a+8|0;a=c[e>>2]|0;if((a|0)==-1){d=0}else{Kh[c[3880]&63](36160,a);c[e>>2]=-1;d=1}}i=b;return d|0}function $n(d,e,f,h,j){d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;k=i;i=i+32|0;l=k;if(e>>>0>31){m=0;i=k;return m|0}ao(d);n=d+(e*24|0)+98484|0;if((c[3894]|0)!=0){o=d+(e*24|0)+98492|0;p=c[o>>2]|0;if(!((p|0)==-1)){Kh[c[3880]&63](36160,p);c[o>>2]=-1}}if((c[n>>2]|0)==0){q=d+(e*24|0)+98488|0}else{Kh[c[3882]&63](1,n);o=d+(e*24|0)+98488|0;if((c[o>>2]|0)==0){q=o}else{Kh[c[3874]&63](1,o);q=o}}c[n>>2]=0;c[q>>2]=0;q=d+(e*24|0)+98492|0;c[q>>2]=-1;o=d+(e*24|0)+98504|0;c[o>>2]=-1;p=d+(e*24|0)+98500|0;c[p>>2]=0;r=d+(e*24|0)+98496|0;c[r>>2]=0;if(!((f|0)>-1)){m=0;i=k;return m|0}cn(d,f);if((h|0)<1|(j|0)<1){m=0;i=k;return m|0}s=l+4|0;c[s+0>>2]=0;c[s+4>>2]=0;c[s+8>>2]=0;c[s+12>>2]=0;a[l]=1;t=1;while(1){u=t<<1;if((u|0)<(h|0)){t=u}else{v=1;break}}do{v=v<<1}while((v|0)<(j|0));t=ea(v,u)|0;w=t<<2;x=l+16|0;y=l+8|0;if((t|0)>0){c[y>>2]=0;c[s>>2]=0;a[l]=1;c[x>>2]=w;t=_t(w)|0;c[l+12>>2]=t;if((t|0)==0){if((c[3894]|0)!=0){z=c[q>>2]|0;if(!((z|0)==-1)){Kh[c[3880]&63](36160,z);c[q>>2]=-1}}if((c[n>>2]|0)==0){A=d+(e*24|0)+98488|0}else{Kh[c[3882]&63](1,n);z=d+(e*24|0)+98488|0;if((c[z>>2]|0)==0){A=z}else{Kh[c[3874]&63](1,z);A=z}}c[n>>2]=0;c[A>>2]=0;c[q>>2]=-1;c[o>>2]=-1;c[p>>2]=0;c[r>>2]=0;B=0}else{C=t;D=24}}else{C=0;D=24}if((D|0)==24){c[s>>2]=u;c[y>>2]=v;vu(C|0,0,w|0)|0;w=d+98468|0;if(gn(l,0,0,u,v,(c[w>>2]|0)+(f*28|0)|0,0,0,0)|0){C=u&65535;y=c[w>>2]|0;b[y+(f*28|0)+16>>1]=C;w=v&65535;b[y+(f*28|0)+18>>1]=w;D=h&65535;b[y+(f*28|0)+20>>1]=D;h=j&65535;b[y+(f*28|0)+22>>1]=h;g[y+(f*28|0)+8>>2]=+(D<<16>>16)/+(C<<16>>16);g[y+(f*28|0)+12>>2]=+(h<<16>>16)/+(w<<16>>16);if(Xn(n,u,v,c[y+(f*28|0)>>2]|0,1)|0){c[o>>2]=f;ao(d);B=1}else{B=0}}else{B=0}}c[x>>2]=0;c[l+8>>2]=0;c[s>>2]=0;s=l+12|0;x=c[s>>2]|0;if((x|0)!=0){au(x)}c[s>>2]=0;a[l]=1;m=B;i=k;return m|0}function ao(a){a=a|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=a+99252|0;f=c[e>>2]|0;if(!((f|0)>-1)){c[e>>2]=-1;Nm(a,0,0,0,0);i=d;return}if((c[3894]|0)!=0){g=a+(f*24|0)+98492|0;h=c[g>>2]|0;if(!((h|0)==-1)){Kh[c[3880]&63](36160,h);c[g>>2]=-1;c[e>>2]=-1;Nm(a,0,0,0,0);i=d;return}}g=c[a+(f*24|0)+98504>>2]|0;f=a+98468|0;h=c[f>>2]|0;nn(a,g,0,0,b[h+(g*28|0)+20>>1]|0,b[h+(g*28|0)+22>>1]|0)|0;h=c[f>>2]|0;sn(a,0,0,b[h+(g*28|0)+16>>1]|0,b[h+(g*28|0)+18>>1]|0,0);Xm(a,65503,0,0);c[a+367624>>2]=c[4010];c[e>>2]=-1;Nm(a,0,0,0,0);i=d;return}function bo(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;f=a+99252|0;if((c[f>>2]|0)>-1){ao(a)}c[f>>2]=d;if(d>>>0>31){i=e;return}g=c[a+(d*24|0)+98504>>2]|0;h=c[a+98468>>2]|0;j=b[h+(g*28|0)+20>>1]|0;k=b[h+(g*28|0)+22>>1]|0;do{if((c[3894]|0)==0){l=8}else{h=a+(d*24|0)+98492|0;if((c[h>>2]|0)==-1){c[h>>2]=0;Vc(36006,h|0);Kh[c[3880]&63](36160,c[a+(d*24|0)+98484>>2]|0);Nm(a,0,0,j,k);jb(0,0,j|0,k|0);break}else{Xa(16304)|0;l=8;break}}}while(0);if((l|0)==8){c[f>>2]=-1;l=a+367624|0;c[4010]=c[l>>2];c[l>>2]=0;Nm(a,0,0,j,k);l=a+367628|0;h=c[l>>2]|0;c[l>>2]=-1;nn(a,65503,0,0,j,k)|0;c[l>>2]=h;sn(a,0,0,j,k,h);Xm(a,g,0,0);c[f>>2]=d}d=a+(g<<2)+99256|0;g=c[d>>2]|0;if((g|0)!=0){au(g)}c[d>>2]=0;i=e;return}function co(){var a=0,b=0,d=0,e=0,f=0,g=0;a=i;i=i+16|0;b=a;d=c[10236]|0;c[10236]=d+ -1;if((d|0)>=2){i=a;return}d=b+4|0;e=0;do{f=16368+(e*24|0)|0;g=c[f>>2]|0;if(!((g|0)==-1)){c[f>>2]=-1;c[d>>2]=0;c[b>>2]=0;vg(g|0,1,13,b|0,8)|0;ah(g|0,2)|0;Wf(g|0)|0;c[4090]=c[(Pd()|0)>>2]}e=e+1|0}while((e|0)!=1024);c[10236]=0;c[4090]=c[(Pd()|0)>>2];i=a;return}function eo(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+16|0;d=b;e=16368+(a*24|0)|0;a=c[e>>2]|0;c[e>>2]=-1;c[d+4>>2]=0;c[d>>2]=0;vg(a|0,1,13,d|0,8)|0;ah(a|0,2)|0;d=Wf(a|0)|0;c[4090]=c[(Pd()|0)>>2];i=b;return d|0}function fo(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;h=i;i=i+16|0;j=h;k=16388+(d*24|0)|0;do{if((a[k]|0)!=0){if((g|0)==0){l=-1;i=h;return l|0}m=c[g>>2]|0;n=b[g+4>>1]|0;if((m|0)==0&n<<16>>16==0){l=-1;i=h;return l|0}else{o=16372+(d*24|0)|0;c[j+0>>2]=c[o+0>>2];c[j+4>>2]=c[o+4>>2];c[j+8>>2]=c[o+8>>2];c[j+12>>2]=c[o+12>>2];c[j+4>>2]=m;b[j+2>>1]=n;break}}}while(0);g=16368+(d*24|0)|0;d=f;n=0;a:while(1){m=e+n|0;if((n|0)>=(f|0)){l=n;p=13;break}while(1){o=c[g>>2]|0;if((a[k]|0)==0){q=ud(o|0,m|0,d|0,0)|0}else{q=ce(o|0,m|0,d|0,0,j|0,16)|0}o=Pd()|0;c[4090]=c[o>>2];if((q|0)>=0){break}if((c[o>>2]|0)!=11){l=-1;p=13;break a}}d=d-q|0;n=q+n|0}if((p|0)==13){i=h;return l|0}return 0}function go(){var a=0,b=0;a=i;b=16368;do{c[b>>2]=-1;b=b+24|0}while((b|0)!=(40944|0));i=a;return}function ho(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;i=i+1600|0;j=h+568|0;k=h;l=h+564|0;if(!(rl(b,j)|0)){m=0;i=h;return m|0}so(k,62,432);c[k>>2]=wp(h+432|0)|0;b=Mb(j|0,40952)|0;if((b|0)==0){m=0;i=h;return m|0}zo(k,b);to(k,1)|0;a[k+72|0]=0;wo(k)|0;j=c[k+36>>2]|0;n=k+92|0;o=c[n>>2]|0;c[d>>2]=o;d=k+96|0;p=c[d>>2]|0;c[e>>2]=p;c[f>>2]=j;f=_t(ea(ea(o,j)|0,p)|0)|0;c[g>>2]=f;c[l>>2]=f;f=k+120|0;if((c[f>>2]|0)>>>0<p>>>0){do{p=(yo(k,l,1)|0)*3|0;g=ea(p,c[n>>2]|0)|0;c[l>>2]=(c[l>>2]|0)+g}while((c[f>>2]|0)>>>0<(c[d>>2]|0)>>>0)}vo(k)|0;ff(b|0)|0;m=1;i=h;return m|0}function io(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;if((d|0)==0){i=e;return}if((Cq(a)|0)==0){i=e;return}f=Cq(a)|0;a=c[f>>2]|0;if((a|0)!=0){g=f+16|0;h=g;j=yu(c[h>>2]|0,c[h+4>>2]|0,d|0,((d|0)<0)<<31>>31|0)|0;h=g;c[h>>2]=j;c[h+4>>2]=I;if((lc(b|0,d|0,1,a|0)|0)==1){i=e;return}}a=c[f+4>>2]|0;if((a|0)==0){i=e;return}h=f+16|0;j=h;g=c[j>>2]|0;k=c[j+4>>2]|0;j=yu(g|0,k|0,d|0,((d|0)<0)<<31>>31|0)|0;l=I;m=f+8|0;f=c[m>>2]|0;n=c[m+4>>2]|0;if((l|0)>(n|0)|(l|0)==(n|0)&j>>>0>f>>>0){j=xu(f|0,n|0,g|0,k|0)|0;if((j|0)<0){i=e;return}else{o=j}}else{o=d}tu(b|0,a+g|0,o|0)|0;g=h;a=yu(c[g>>2]|0,c[g+4>>2]|0,o|0,((o|0)<0)<<31>>31|0)|0;o=h;c[o>>2]=a;c[o+4>>2]=I;i=e;return}function jo(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;j=i;i=i+16|0;k=j;l=j+8|0;c[10246]=0;ko();m=Zt(24)|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[m+16>>2]=0;c[m+20>>2]=0;c[10244]=m;do{if(qk(m,b)|0){n=c[10244]|0;o=c[n>>2]|0;if((o|0)==0){p=4}else{q=n+16|0;r=q;s=yu(c[r>>2]|0,c[r+4>>2]|0,4,0)|0;r=q;c[r>>2]=s;c[r+4>>2]=I;if((lc(l|0,4,1,o|0)|0)!=1){p=4}}do{if((p|0)==4){o=c[n+4>>2]|0;if((o|0)!=0){r=n+16|0;s=r;q=c[s>>2]|0;t=c[s+4>>2]|0;s=yu(q|0,t|0,4,0)|0;u=I;v=n+8|0;w=c[v>>2]|0;x=c[v+4>>2]|0;if((u|0)>(x|0)|(u|0)==(x|0)&s>>>0>w>>>0){s=xu(w|0,x|0,q|0,t|0)|0;if((s|0)<0){break}else{y=s}}else{y=4}tu(l|0,o+q|0,y|0)|0;o=yu(q|0,t|0,y|0,((y|0)<0)<<31>>31|0)|0;t=r;c[t>>2]=o;c[t+4>>2]=I}}}while(0);n=c[10244]|0;t=c[n>>2]|0;if((t|0)==0){if((c[n+4>>2]|0)!=0){o=n+16|0;c[o>>2]=0;c[o+4>>2]=0}}else{o=n+16|0;c[o>>2]=0;c[o+4>>2]=0;Fd(t|0,0,0)|0}if((a[l+1|0]|0)==80){if((a[l+2|0]|0)==78){if((a[l+3|0]|0)==71){t=ar(40992,0,0,0)|0;c[10240]=t;if((t|0)==0){z=0;break}Nq(t,0,1,2);t=zq(c[10240]|0)|0;c[10242]=t;if((t|0)==0){z=0;break}lr(c[10240]|0,c[10244]|0,1);cr(c[10240]|0,c[10242]|0);if((c[10246]|0)!=0){z=0;break}if((Tq(c[10240]|0,c[10242]|0)|0)<<24>>24==3){nr(c[10240]|0)}if((Tq(c[10240]|0,c[10242]|0)|0)<<24>>24==0){if(((Sq(c[10240]|0,c[10242]|0)|0)&255)<8){nr(c[10240]|0)}}if((Oq(c[10240]|0,c[10242]|0,16)|0)!=0){nr(c[10240]|0)}if((c[10246]|0)!=0){z=0;break}if((Sq(c[10240]|0,c[10242]|0)|0)<<24>>24==16){mr(c[10240]|0)}if(((Sq(c[10240]|0,c[10242]|0)|0)&255)<8){Cs(c[10240]|0)}dr(c[10240]|0,c[10242]|0);if((c[10246]|0)!=0){z=0;break}t=Uq(c[10240]|0,c[10242]|0)|0;o=t&255;if(!(t<<24>>24==1|t<<24>>24==3|t<<24>>24==4)){z=0;break}if(!((Sq(c[10240]|0,c[10242]|0)|0)<<24>>24==8)){t=d[(c[10242]|0)+24|0]|0;c[k>>2]=b;c[k+4>>2]=t;tg(41e3,k|0)|0;Xa(41120)|0;z=0;break}if(!((Tq(c[10240]|0,c[10242]|0)|0)<<24>>24==2)){if(!((Tq(c[10240]|0,c[10242]|0)|0)<<24>>24==0)){if(!((Tq(c[10240]|0,c[10242]|0)|0)<<24>>24==6)){c[k>>2]=b;tg(41032,k|0)|0;Xa(41072)|0;z=0;break}}}if((c[10246]|0)!=0){z=0;break}if((Rq(c[10240]|0,c[10242]|0)|0)==0){z=0;break}c[g>>2]=Pq(c[10240]|0,c[10242]|0)|0;c[e>>2]=Qq(c[10240]|0,c[10242]|0)|0;c[f>>2]=Rq(c[10240]|0,c[10242]|0)|0;c[h>>2]=o;z=1;break}}}o=c[10244]|0;t=c[o>>2]|0;if((t|0)!=0){ff(t|0)|0;c[o>>2]=0;t=o+8|0;c[t+0>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0}t=o+4|0;if((c[t>>2]|0)!=0){c[t+0>>2]=0;c[t+4>>2]=0;c[t+8>>2]=0;c[t+12>>2]=0;c[t+16>>2]=0}t=c[10244]|0;if((t|0)!=0){o=c[t>>2]|0;if((o|0)!=0){ff(o|0)|0;c[t>>2]=0;o=t+8|0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0}$t(t)}c[10244]=0;A=0;i=j;return A|0}else{z=0}}while(0);A=(c[10246]|0)==0?z:0;i=j;return A|0}function ko(){var a=0,b=0,d=0;a=i;if((c[10240]|0)!=0){hr(40960,40968,0);c[10240]=0;c[10242]=0}b=c[10244]|0;if((b|0)==0){i=a;return}d=c[b>>2]|0;if((d|0)!=0){ff(d|0)|0;c[b>>2]=0;d=b+8|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0}d=b+4|0;if((c[d>>2]|0)!=0){c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0}d=c[10244]|0;if((d|0)!=0){b=c[d>>2]|0;if((b|0)!=0){ff(b|0)|0;c[d>>2]=0;b=d+8|0;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0}$t(d)}c[10244]=0;i=a;return}function lo(a,b){a=a|0;b=b|0;c[10246]=1;return}function mo(a,b){a=a|0;b=b|0;return}function no(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=c[10242]|0;if((c[e+4>>2]|0)!=0){f=e;e=0;do{c[b+(e<<2)>>2]=a+(ea(c[f+12>>2]|0,e)|0);e=e+1|0;f=c[10242]|0}while(e>>>0<(c[f+4>>2]|0)>>>0)}fr(c[10240]|0,b);if((c[10246]|0)==0){i=d;return}gr(c[10240]|0,c[10242]|0);i=d;return}function oo(b){b=b|0;var d=0,e=0;d=i;e=c[b+4>>2]|0;if((e|0)==0){i=d;return}Kh[c[e+36>>2]&63](b,1);e=b+20|0;if((a[b+16|0]|0)==0){c[e>>2]=100;i=d;return}else{c[e>>2]=200;c[b+268>>2]=0;i=d;return}}function po(a){a=a|0;var b=0,d=0,e=0;b=i;d=a+4|0;e=c[d>>2]|0;if((e|0)!=0){Jh[c[e+40>>2]&127](a)}c[d>>2]=0;c[a+20>>2]=0;i=b;return}function qo(b){b=b|0;var d=0,e=0;d=i;e=Qh[c[c[b+4>>2]>>2]&15](b,0,130)|0;a[e+128|0]=0;i=d;return e|0}function ro(b){b=b|0;var d=0,e=0;d=i;e=Qh[c[c[b+4>>2]>>2]&15](b,0,274)|0;a[e+273|0]=0;i=d;return e|0}function so(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;c[b+4>>2]=0;if((d|0)!=62){g=c[b>>2]|0;c[g+20>>2]=12;c[g+24>>2]=62;c[g+28>>2]=d;Jh[c[g>>2]&127](b)}if((e|0)==432){h=b}else{g=c[b>>2]|0;c[g+20>>2]=21;c[g+24>>2]=432;c[g+28>>2]=e;Jh[c[g>>2]&127](b);h=b}g=c[b>>2]|0;e=b+12|0;d=c[e>>2]|0;vu(b|0,0,432)|0;c[b>>2]=g;c[e>>2]=d;a[b+16|0]=1;Cp(h);c[b+8>>2]=0;c[b+24>>2]=0;c[b+268>>2]=0;h=b+144|0;d=h+48|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(d|0));Lo(b);Eo(b);c[b+20>>2]=200;i=f;return}function to(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=a+20|0;if(!(((c[e>>2]|0)+ -200|0)>>>0<2)){f=c[a>>2]|0;c[f+20>>2]=20;c[f+24>>2]=c[e>>2];Jh[c[f>>2]&127](a)}f=uo(a)|0;if((f|0)==2){if(b<<24>>24==0){g=a}else{b=c[a>>2]|0;c[b+20>>2]=51;Jh[c[b>>2]&127](a);g=a}oo(g);h=2;i=d;return h|0}else if((f|0)==1){h=1;i=d;return h|0}else{h=f;i=d;return h|0}return 0}function uo(b){b=b|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0;e=i;f=b+20|0;switch(c[f>>2]|0){case 200:{g=b+400|0;Jh[c[(c[g>>2]|0)+4>>2]&127](b);Jh[c[(c[b+24>>2]|0)+8>>2]&127](b);c[f>>2]=201;j=g;break};case 201:{j=b+400|0;break};case 202:{k=1;i=e;return k|0};case 210:case 208:case 207:case 206:case 205:case 204:case 203:{k=Mh[c[c[b+400>>2]>>2]&31](b)|0;i=e;return k|0};default:{g=c[b>>2]|0;c[g+20>>2]=20;c[g+24>>2]=c[f>>2];Jh[c[g>>2]&127](b);k=0;i=e;return k|0}}g=Mh[c[c[j>>2]>>2]&31](b)|0;if((g|0)!=1){k=g;i=e;return k|0}g=c[b+36>>2]|0;if((g|0)==1){c[b+40>>2]=1;c[b+44>>2]=1}else if((g|0)==3){do{if((a[b+256|0]|0)==0){if((a[b+264|0]|0)!=0){j=b+265|0;l=d[j]|0;if((l|0)==0){c[b+40>>2]=2;break}else if((l|0)==1){c[b+40>>2]=3;break}else{l=c[b>>2]|0;c[l+20>>2]=114;c[l+24>>2]=d[j]|0;Kh[c[l+4>>2]&63](b,-1);c[b+40>>2]=3;break}}l=c[b+196>>2]|0;j=c[l>>2]|0;m=c[l+84>>2]|0;n=c[l+168>>2]|0;if((j|0)==1&(m|0)==2&(n|0)==3){c[b+40>>2]=3;break}if((j|0)==82&(m|0)==71&(n|0)==66){c[b+40>>2]=2;break}else{l=c[b>>2]|0;c[l+24>>2]=j;c[l+28>>2]=m;c[l+32>>2]=n;c[l+20>>2]=111;Kh[c[l+4>>2]&63](b,1);c[b+40>>2]=3;break}}else{c[b+40>>2]=3}}while(0);c[b+44>>2]=2}else if((g|0)==4){do{if((a[b+264|0]|0)==0){c[b+40>>2]=4}else{g=b+265|0;l=d[g]|0;if((l|0)==0){c[b+40>>2]=4;break}else if((l|0)==2){c[b+40>>2]=5;break}else{l=c[b>>2]|0;c[l+20>>2]=114;c[l+24>>2]=d[g]|0;Kh[c[l+4>>2]&63](b,-1);c[b+40>>2]=5;break}}}while(0);c[b+44>>2]=4}else{c[b+40>>2]=0;c[b+44>>2]=0}c[b+48>>2]=1;c[b+52>>2]=1;h[b+56>>3]=1.0;a[b+64|0]=0;a[b+65|0]=0;c[b+68>>2]=0;a[b+72|0]=1;a[b+73|0]=1;a[b+74|0]=0;c[b+76>>2]=2;a[b+80|0]=1;c[b+84>>2]=256;c[b+116>>2]=0;a[b+88|0]=0;a[b+89|0]=0;a[b+90|0]=0;c[f>>2]=202;k=1;i=e;return k|0}function vo(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=b+20|0;f=c[e>>2]|0;if((f+ -205|0)>>>0<2){if((a[b+64|0]|0)==0){if((c[b+120>>2]|0)>>>0<(c[b+96>>2]|0)>>>0){g=c[b>>2]|0;c[g+20>>2]=67;Jh[c[g>>2]&127](b)}Jh[c[(c[b+384>>2]|0)+4>>2]&127](b);c[e>>2]=210}else{h=6}}else{h=6}do{if((h|0)==6){if((f|0)==207){c[e>>2]=210;break}else if((f|0)==210){break}else{g=c[b>>2]|0;c[g+20>>2]=20;c[g+24>>2]=c[e>>2];Jh[c[g>>2]&127](b);break}}}while(0);e=b+400|0;while(1){f=c[e>>2]|0;if((a[f+17|0]|0)!=0){break}if((Mh[c[f>>2]&31](b)|0)==0){j=0;h=13;break}}if((h|0)==13){i=d;return j|0}Jh[c[(c[b+24>>2]|0)+24>>2]&127](b);oo(b);j=1;i=d;return j|0}function wo(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;e=b+20|0;f=c[e>>2]|0;do{if((f|0)==202){Uo(b);if((a[b+64|0]|0)==0){c[e>>2]=203;g=5;break}c[e>>2]=207;h=1;i=d;return h|0}else if((f|0)==203){g=5}else if((f|0)!=204){j=c[b>>2]|0;c[j+20>>2]=20;c[j+24>>2]=c[e>>2];Jh[c[j>>2]&127](b)}}while(0);if((g|0)==5){g=b+400|0;a:do{if((a[(c[g>>2]|0)+16|0]|0)!=0){e=b+8|0;f=b+284|0;j=c[e>>2]|0;while(1){if((j|0)!=0){Jh[c[j>>2]&127](b)}k=Mh[c[c[g>>2]>>2]&31](b)|0;if((k|0)==2){break a}else if((k|0)==0){h=0;break}l=c[e>>2]|0;if((l|0)==0){j=0;continue}if((k&-3|0)!=1){j=l;continue}k=l+4|0;m=(c[k>>2]|0)+1|0;c[k>>2]=m;k=l+8|0;n=c[k>>2]|0;if((m|0)<(n|0)){j=l;continue}c[k>>2]=(c[f>>2]|0)+n;j=l}i=d;return h|0}}while(0);c[b+132>>2]=c[b+124>>2]}h=xo(b)|0;i=d;return h|0}function xo(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;d=i;e=b+20|0;f=b+384|0;if((c[e>>2]|0)!=204){Jh[c[c[f>>2]>>2]&127](b);c[b+120>>2]=0;c[e>>2]=204}a:do{if((a[(c[f>>2]|0)+8|0]|0)!=0){g=b+120|0;h=b+96|0;j=b+8|0;k=b+388|0;l=c[g>>2]|0;while(1){m=c[h>>2]|0;if(!(l>>>0<m>>>0)){Jh[c[(c[f>>2]|0)+4>>2]&127](b);Jh[c[c[f>>2]>>2]&127](b);c[g>>2]=0;if((a[(c[f>>2]|0)+8|0]|0)==0){break a}else{l=0;continue}}n=c[j>>2]|0;if((n|0)==0){o=l}else{c[n+4>>2]=l;c[n+8>>2]=m;Jh[c[n>>2]&127](b);o=c[g>>2]|0}ei[c[(c[k>>2]|0)+4>>2]&63](b,0,g,0);n=c[g>>2]|0;if((n|0)==(o|0)){p=0;break}else{l=n}}i=d;return p|0}}while(0);c[e>>2]=(a[b+65|0]|0)!=0?206:205;p=1;i=d;return p|0}function yo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;i=i+16|0;f=e;g=a+20|0;if((c[g>>2]|0)!=205){h=c[a>>2]|0;c[h+20>>2]=20;c[h+24>>2]=c[g>>2];Jh[c[h>>2]&127](a)}h=a+120|0;g=c[h>>2]|0;j=c[a+96>>2]|0;if(!(g>>>0<j>>>0)){k=c[a>>2]|0;c[k+20>>2]=123;Kh[c[k+4>>2]&63](a,-1);l=0;i=e;return l|0}k=c[a+8>>2]|0;if((k|0)!=0){c[k+4>>2]=g;c[k+8>>2]=j;Jh[c[k>>2]&127](a)}c[f>>2]=0;ei[c[(c[a+388>>2]|0)+4>>2]&63](a,b,f,d);d=c[f>>2]|0;c[h>>2]=(c[h>>2]|0)+d;l=d;i=e;return l|0}function zo(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=a+24|0;f=c[e>>2]|0;if((f|0)==0){g=a+4|0;h=Qh[c[c[g>>2]>>2]&15](a,0,40)|0;c[e>>2]=h;c[h+32>>2]=Qh[c[c[g>>2]>>2]&15](a,0,4096)|0;j=c[e>>2]|0}else{j=f}c[j+8>>2]=39;c[j+12>>2]=2;c[j+16>>2]=3;c[j+20>>2]=1;c[j+24>>2]=40;c[j+28>>2]=b;c[j+4>>2]=0;c[j>>2]=0;i=d;return}function Ao(b){b=b|0;a[(c[b+24>>2]|0)+36|0]=1;return}function Bo(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;d=i;e=c[b+24>>2]|0;f=e+32|0;g=lc(c[f>>2]|0,1,4096,c[e+28>>2]|0)|0;h=e+36|0;if((g|0)!=0){j=g;k=c[f>>2]|0;c[e>>2]=k;l=e+4|0;c[l>>2]=j;a[h]=0;i=d;return 1}if((a[h]|0)==0){m=b}else{g=c[b>>2]|0;c[g+20>>2]=42;Jh[c[g>>2]&127](b);m=b}g=c[b>>2]|0;c[g+20>>2]=120;Kh[c[g+4>>2]&63](m,-1);a[c[f>>2]|0]=-1;a[(c[f>>2]|0)+1|0]=-39;j=2;k=c[f>>2]|0;c[e>>2]=k;l=e+4|0;c[l>>2]=j;a[h]=0;i=d;return 1}function Co(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;e=i;f=b+24|0;g=c[f>>2]|0;if((d|0)<=0){i=e;return}h=g+4|0;j=c[h>>2]|0;a:do{if((j|0)<(d|0)){k=d;l=j;m=g;while(1){n=k-l|0;o=m+32|0;p=lc(c[o>>2]|0,1,4096,c[m+28>>2]|0)|0;q=m+36|0;if((p|0)==0){if((a[q]|0)!=0){r=c[b>>2]|0;c[r+20>>2]=42;Jh[c[r>>2]&127](b)}r=c[b>>2]|0;c[r+20>>2]=120;Kh[c[r+4>>2]&63](b,-1);a[c[o>>2]|0]=-1;a[(c[o>>2]|0)+1|0]=-39;s=2}else{s=p}c[m>>2]=c[o>>2];c[m+4>>2]=s;a[q]=0;q=c[h>>2]|0;if((n|0)<=(q|0)){t=n;u=q;break a}k=n;l=q;m=c[f>>2]|0}}else{t=d;u=j}}while(0);c[g>>2]=(c[g>>2]|0)+t;c[h>>2]=u-t;i=e;return}function Do(a){a=a|0;return}function Eo(b){b=b|0;var d=0,e=0;d=i;e=Qh[c[c[b+4>>2]>>2]&15](b,0,24)|0;c[b+400>>2]=e;c[e>>2]=3;c[e+4>>2]=41;c[e+8>>2]=42;c[e+12>>2]=43;a[e+16|0]=0;a[e+17|0]=0;a[e+20|0]=1;i=d;return}function Fo(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;d=i;e=b+400|0;f=c[e>>2]|0;g=f+17|0;if((a[g]|0)!=0){h=2;i=d;return h|0}j=b+404|0;k=Mh[c[(c[j>>2]|0)+4>>2]&31](b)|0;if((k|0)==2){a[g]=1;if((a[f+20|0]|0)==0){g=b+132|0;l=c[b+124>>2]|0;if((c[g>>2]|0)<=(l|0)){h=2;i=d;return h|0}c[g>>2]=l;h=2;i=d;return h|0}else{if((a[(c[j>>2]|0)+13|0]|0)==0){h=2;i=d;return h|0}j=c[b>>2]|0;c[j+20>>2]=59;Jh[c[j>>2]&127](b);h=2;i=d;return h|0}}else if((k|0)==1){j=f+20|0;if((a[j]|0)==0){if((a[f+16|0]|0)==0){f=c[b>>2]|0;c[f+20>>2]=35;Jh[c[f>>2]&127](b)}Ho(b);h=1;i=d;return h|0}f=b+32|0;if((c[f>>2]|0)>65500){m=6}else{if((c[b+28>>2]|0)>65500){m=6}}if((m|0)==6){l=c[b>>2]|0;c[l+20>>2]=41;c[l+24>>2]=65500;Jh[c[l>>2]&127](b)}l=b+192|0;if((c[l>>2]|0)!=8){g=c[b>>2]|0;c[g+20>>2]=15;c[g+24>>2]=c[l>>2];Jh[c[g>>2]&127](b)}g=b+36|0;l=c[g>>2]|0;if((l|0)>10){n=c[b>>2]|0;c[n+20>>2]=26;c[n+24>>2]=c[g>>2];c[n+28>>2]=10;Jh[c[n>>2]&127](b);o=c[g>>2]|0}else{o=l}l=b+272|0;c[l>>2]=1;n=b+276|0;c[n>>2]=1;p=b+196|0;if((o|0)>0){q=o;o=1;r=1;s=0;t=c[p>>2]|0;while(1){u=t+8|0;v=c[u>>2]|0;w=t+12|0;if((v+ -1|0)>>>0>3){m=16}else{if(((c[w>>2]|0)+ -1|0)>>>0>3){m=16}else{x=r;y=v;z=o;A=q}}if((m|0)==16){m=0;v=c[b>>2]|0;c[v+20>>2]=18;Jh[c[v>>2]&127](b);x=c[l>>2]|0;y=c[u>>2]|0;z=c[n>>2]|0;A=c[g>>2]|0}r=(x|0)>(y|0)?x:y;c[l>>2]=r;u=c[w>>2]|0;o=(z|0)>(u|0)?z:u;c[n>>2]=o;s=s+1|0;if((s|0)>=(A|0)){break}else{q=A;t=t+84|0}}c[b+280>>2]=8;if((A|0)>0){A=b+28|0;t=0;q=c[p>>2]|0;while(1){c[q+36>>2]=8;p=q+8|0;s=ea(c[p>>2]|0,c[A>>2]|0)|0;c[q+28>>2]=pq(s,c[l>>2]<<3)|0;s=q+12|0;z=ea(c[s>>2]|0,c[f>>2]|0)|0;c[q+32>>2]=pq(z,c[n>>2]<<3)|0;z=ea(c[p>>2]|0,c[A>>2]|0)|0;c[q+40>>2]=pq(z,c[l>>2]|0)|0;z=ea(c[s>>2]|0,c[f>>2]|0)|0;c[q+44>>2]=pq(z,c[n>>2]|0)|0;a[q+48|0]=1;c[q+76>>2]=0;t=t+1|0;if((t|0)>=(c[g>>2]|0)){break}else{q=q+84|0}}B=c[n>>2]|0}else{B=o}}else{c[b+280>>2]=8;B=1}c[b+284>>2]=pq(c[f>>2]|0,B<<3)|0;if((c[b+292>>2]|0)<(c[g>>2]|0)){m=24}else{if((a[b+200|0]|0)==0){a[(c[e>>2]|0)+16|0]=0}else{m=24}}if((m|0)==24){a[(c[e>>2]|0)+16|0]=1}a[j]=0;h=1;i=d;return h|0}else{h=k;i=d;return h|0}return 0}function Go(b){b=b|0;var d=0,e=0;d=i;e=c[b+400>>2]|0;c[e>>2]=3;a[e+16|0]=0;a[e+17|0]=0;a[e+20|0]=1;Jh[c[(c[b>>2]|0)+16>>2]&127](b);Jh[c[c[b+404>>2]>>2]&127](b);c[b+140>>2]=0;i=d;return}function Ho(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;b=i;d=a+292|0;e=c[d>>2]|0;if((e|0)==1){f=c[a+296>>2]|0;c[a+312>>2]=c[f+28>>2];g=f+32|0;c[a+316>>2]=c[g>>2];c[f+52>>2]=1;c[f+56>>2]=1;c[f+60>>2]=1;c[f+64>>2]=c[f+36>>2];c[f+68>>2]=1;h=c[f+12>>2]|0;j=((c[g>>2]|0)>>>0)%(h>>>0)|0;c[f+72>>2]=(j|0)==0?h:j;c[a+320>>2]=1;c[a+324>>2]=0;k=c[d>>2]|0;l=12}else{if((e+ -1|0)>>>0>3){e=c[a>>2]|0;c[e+20>>2]=26;c[e+24>>2]=c[d>>2];c[e+28>>2]=4;Jh[c[e>>2]&127](a)}c[a+312>>2]=pq(c[a+28>>2]|0,c[a+272>>2]<<3)|0;c[a+316>>2]=pq(c[a+32>>2]|0,c[a+276>>2]<<3)|0;e=a+320|0;c[e>>2]=0;if((c[d>>2]|0)>0){j=0;while(1){h=c[a+(j<<2)+296>>2]|0;f=c[h+8>>2]|0;c[h+52>>2]=f;g=c[h+12>>2]|0;c[h+56>>2]=g;m=ea(g,f)|0;c[h+60>>2]=m;c[h+64>>2]=ea(c[h+36>>2]|0,f)|0;n=((c[h+28>>2]|0)>>>0)%(f>>>0)|0;c[h+68>>2]=(n|0)==0?f:n;n=((c[h+32>>2]|0)>>>0)%(g>>>0)|0;c[h+72>>2]=(n|0)==0?g:n;if(((c[e>>2]|0)+m|0)>10){n=c[a>>2]|0;c[n+20>>2]=13;Jh[c[n>>2]&127](a)}if((m|0)>0){n=m;do{n=n+ -1|0;m=c[e>>2]|0;c[e>>2]=m+1;c[a+(m<<2)+324>>2]=j}while((n|0)>0)}n=j+1|0;m=c[d>>2]|0;if((n|0)<(m|0)){j=n}else{k=m;l=12;break}}}}if((l|0)==12){if((k|0)>0){j=a+4|0;e=k;k=0;while(1){m=c[a+(k<<2)+296>>2]|0;n=m+76|0;if((c[n>>2]|0)==0){g=c[m+16>>2]|0;m=a+(g<<2)+144|0;if(g>>>0>3){l=17}else{if((c[m>>2]|0)==0){l=17}}if((l|0)==17){l=0;h=c[a>>2]|0;c[h+20>>2]=52;c[h+24>>2]=g;Jh[c[h>>2]&127](a)}h=Qh[c[c[j>>2]>>2]&15](a,1,130)|0;tu(h|0,c[m>>2]|0,130)|0;c[n>>2]=h;o=c[d>>2]|0}else{o=e}k=k+1|0;if((k|0)>=(o|0)){break}else{e=o}}}}Jh[c[c[a+408>>2]>>2]&127](a);o=a+392|0;Jh[c[c[o>>2]>>2]&127](a);c[c[a+400>>2]>>2]=c[(c[o>>2]|0)+4>>2];i=b;return}function Io(a){a=a|0;c[c[a+400>>2]>>2]=3;return}function Jo(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;d=i;e=a+380|0;f=c[e>>2]|0;g=c[a>>2]|0;c[g+20>>2]=121;c[g+24>>2]=f;c[g+28>>2]=b;Kh[c[g+4>>2]&63](a,-1);g=b+1&7|208;h=b+2&7|208;j=b+7&7|208;k=b+6&7|208;b=f;a:while(1){f=(b+ -208|0)>>>0>7;l=(b|0)==(g|0);m=(b|0)==(h|0);n=(b|0)==(j|0);o=(b|0)==(k|0)?2:1;do{if((b|0)<192){p=c[a>>2]|0;c[p+20>>2]=97;q=p+24|0;if(f){c[q>>2]=b;c[p+28>>2]=2;Kh[c[p+4>>2]&63](a,4);break}if(l){c[q>>2]=g;c[p+28>>2]=2;Kh[c[p+4>>2]&63](a,4);break}else{c[q>>2]=b;c[p+28>>2]=2;Kh[c[p+4>>2]&63](a,4);break}}else{if(f){r=10;break a}if(l){r=11;break a}while(1){if(m){s=3}else{s=n?2:o}p=c[a>>2]|0;c[p+20>>2]=97;c[p+24>>2]=b;c[p+28>>2]=s;Kh[c[p+4>>2]&63](a,4);if((s|0)==2){break}else if((s|0)==1){r=15;break a}else if((s|0)==3){t=1;r=18;break a}}}}while(0);if((Ko(a)|0)<<24>>24==0){t=0;r=18;break}b=c[e>>2]|0}if((r|0)==10){s=c[a>>2]|0;c[s+20>>2]=97;c[s+24>>2]=b;c[s+28>>2]=3;Kh[c[s+4>>2]&63](a,4);t=1;i=d;return t|0}else if((r|0)==11){s=c[a>>2]|0;c[s+20>>2]=97;c[s+24>>2]=g;c[s+28>>2]=3;Kh[c[s+4>>2]&63](a,4);t=1;i=d;return t|0}else if((r|0)==15){c[e>>2]=0;t=1;i=d;return t|0}else if((r|0)==18){i=d;return t|0}return 0}function Ko(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;d=i;e=c[b+24>>2]|0;f=e+4|0;g=e+12|0;h=b+404|0;j=c[f>>2]|0;k=c[e>>2]|0;a:while(1){if((j|0)==0){if((Mh[c[g>>2]&31](b)|0)<<24>>24==0){l=0;m=19;break}n=c[e>>2]|0;o=c[f>>2]|0}else{n=k;o=j}p=o+ -1|0;q=n+1|0;if((a[n]|0)==-1){r=p;s=q}else{t=p;p=q;while(1){q=(c[h>>2]|0)+20|0;c[q>>2]=(c[q>>2]|0)+1;c[e>>2]=p;c[f>>2]=t;if((t|0)==0){if((Mh[c[g>>2]&31](b)|0)<<24>>24==0){l=0;m=19;break a}u=c[e>>2]|0;v=c[f>>2]|0}else{u=p;v=t}q=v+ -1|0;w=u+1|0;if((a[u]|0)==-1){r=q;s=w;break}else{t=q;p=w}}}do{if((r|0)==0){if((Mh[c[g>>2]&31](b)|0)<<24>>24==0){l=0;m=19;break a}x=c[f>>2]|0;y=c[e>>2]|0}else{x=r;y=s}r=x+ -1|0;s=y+1|0;z=a[y]|0}while(z<<24>>24==-1);A=z&255;B=(c[h>>2]|0)+20|0;C=c[B>>2]|0;if(!(z<<24>>24==0)){m=16;break}c[B>>2]=C+2;c[e>>2]=s;c[f>>2]=r;j=r;k=s}if((m|0)==16){if((C|0)!=0){C=c[b>>2]|0;c[C+20>>2]=116;c[C+24>>2]=c[B>>2];c[C+28>>2]=A;Kh[c[C+4>>2]&63](b,-1);c[(c[h>>2]|0)+20>>2]=0}c[b+380>>2]=A;c[e>>2]=s;c[f>>2]=r;l=1;i=d;return l|0}else if((m|0)==19){i=d;return l|0}return 0}function Lo(b){b=b|0;var d=0,e=0,f=0;d=i;e=Qh[c[c[b+4>>2]>>2]&15](b,0,168)|0;f=b+404|0;c[f>>2]=e;c[e>>2]=44;c[e+4>>2]=4;c[e+8>>2]=5;c[e+24>>2]=6;c[e+92>>2]=0;c[e+96>>2]=0;c[e+32>>2]=6;c[e+100>>2]=0;c[e+36>>2]=6;c[e+104>>2]=0;c[e+40>>2]=6;c[e+108>>2]=0;c[e+44>>2]=6;c[e+112>>2]=0;c[e+48>>2]=6;c[e+116>>2]=0;c[e+52>>2]=6;c[e+120>>2]=0;c[e+56>>2]=6;c[e+124>>2]=0;c[e+60>>2]=6;c[e+128>>2]=0;c[e+64>>2]=6;c[e+132>>2]=0;c[e+68>>2]=6;c[e+136>>2]=0;c[e+72>>2]=6;c[e+140>>2]=0;c[e+76>>2]=6;c[e+144>>2]=0;c[e+80>>2]=6;c[e+148>>2]=0;c[e+152>>2]=0;c[e+88>>2]=6;c[e+156>>2]=0;c[e+28>>2]=7;c[e+84>>2]=7;e=c[f>>2]|0;c[b+196>>2]=0;c[b+124>>2]=0;c[b+380>>2]=0;a[e+12|0]=0;a[e+13|0]=0;c[e+20>>2]=0;c[e+160>>2]=0;i=d;return}function Mo(b){b=b|0;var d=0;d=c[b+404>>2]|0;c[b+196>>2]=0;c[b+124>>2]=0;c[b+380>>2]=0;a[d+12|0]=0;a[d+13|0]=0;c[d+20>>2]=0;c[d+160>>2]=0;return}function No(f){f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0;g=i;i=i+288|0;h=g+256|0;j=g;k=f+380|0;l=f+404|0;m=f+24|0;n=f+202|0;o=f+218|0;p=f+234|0;q=f+203|0;r=f+219|0;s=f+235|0;t=f+204|0;u=f+220|0;v=f+236|0;w=f+205|0;x=f+221|0;y=f+237|0;z=f+206|0;A=f+222|0;B=f+238|0;C=f+207|0;D=f+223|0;E=f+239|0;F=f+208|0;G=f+224|0;H=f+240|0;I=f+209|0;J=f+225|0;K=f+241|0;L=f+210|0;M=f+226|0;N=f+242|0;O=f+211|0;P=f+227|0;Q=f+243|0;R=f+212|0;S=f+228|0;T=f+244|0;U=f+213|0;V=f+229|0;W=f+245|0;X=f+214|0;Y=f+230|0;Z=f+246|0;_=f+215|0;$=f+231|0;aa=f+247|0;ba=f+216|0;ca=f+232|0;da=f+248|0;ea=f+217|0;fa=f+233|0;ga=f+249|0;ha=f+252|0;ia=f+40|0;ja=f+266|0;ka=f+256|0;la=f+257|0;ma=f+258|0;na=f+259|0;oa=f+260|0;pa=f+262|0;qa=f+264|0;ra=f+265|0;sa=f+20|0;ta=h+1|0;ua=h+2|0;va=h+3|0;wa=h+4|0;xa=h+5|0;ya=h+6|0;za=h+7|0;Aa=h+8|0;Ba=h+9|0;Ca=h+10|0;Da=h+11|0;Ea=h+12|0;Fa=h+13|0;Ga=h+14|0;Ha=h+15|0;Ia=h+16|0;Ja=c[k>>2]|0;a:while(1){if((Ja|0)==0){if((a[(c[l>>2]|0)+12|0]|0)==0){Ka=c[m>>2]|0;La=Ka+4|0;Ma=c[La>>2]|0;if((Ma|0)==0){if((Mh[c[Ka+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break}Pa=c[La>>2]|0}else{Pa=Ma}Ma=c[Ka>>2]|0;Qa=Pa+ -1|0;Ra=Ma+1|0;Sa=a[Ma]|0;Ma=Sa&255;if((Qa|0)==0){if((Mh[c[Ka+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break}Ta=c[La>>2]|0;Ua=c[Ka>>2]|0}else{Ta=Qa;Ua=Ra}Ra=a[Ua]|0;Qa=Ra&255;if(!(Sa<<24>>24==-1&Ra<<24>>24==-40)){Ra=c[f>>2]|0;c[Ra+20>>2]=53;c[Ra+24>>2]=Ma;c[Ra+28>>2]=Qa;Jh[c[Ra>>2]&127](f)}c[k>>2]=Qa;c[Ka>>2]=Ua+1;c[La>>2]=Ta+ -1}else{if((Ko(f)|0)<<24>>24==0){Na=0;Oa=169;break}}Va=c[k>>2]|0}else{Va=Ja}switch(Va|0){case 1:case 215:case 214:case 213:case 212:case 211:case 210:case 209:case 208:{La=c[f>>2]|0;c[La+20>>2]=92;c[La+24>>2]=c[k>>2];Kh[c[La+4>>2]&63](f,1);break};case 254:{if((Mh[c[(c[l>>2]|0)+24>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}break};case 219:{La=c[m>>2]|0;Ka=La+4|0;Qa=c[Ka>>2]|0;if((Qa|0)==0){if((Mh[c[La+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Wa=c[Ka>>2]|0}else{Wa=Qa}Qa=c[La>>2]|0;Ra=Wa+ -1|0;Ma=Qa+1|0;Sa=d[Qa]<<8;if((Ra|0)==0){if((Mh[c[La+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Xa=c[Ka>>2]|0;Ya=c[La>>2]|0}else{Xa=Ra;Ya=Ma}Ma=Xa+ -1|0;Ra=Ya+1|0;Qa=(d[Ya]|Sa)+ -2|0;if((Qa|0)>0){Sa=La+12|0;Za=Ma;_a=Qa;$a=Ra;while(1){if((Za|0)==0){if((Mh[c[Sa>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}ab=c[Ka>>2]|0;bb=c[La>>2]|0}else{ab=Za;bb=$a}cb=d[bb]|0;db=cb>>>4;eb=cb&15;cb=c[f>>2]|0;c[cb+20>>2]=81;c[cb+24>>2]=eb;c[cb+28>>2]=db;Kh[c[cb+4>>2]&63](f,1);if(eb>>>0>3){cb=c[f>>2]|0;c[cb+20>>2]=31;c[cb+24>>2]=eb;Jh[c[cb>>2]&127](f)}cb=f+(eb<<2)+144|0;eb=c[cb>>2]|0;if((eb|0)==0){fb=qo(f)|0;c[cb>>2]=fb;gb=fb}else{gb=eb}eb=(db|0)==0;db=ab+ -1|0;fb=0;cb=bb+1|0;do{hb=(db|0)==0;if(eb){if(hb){if((Mh[c[Sa>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}ib=c[Ka>>2]|0;jb=c[La>>2]|0}else{ib=db;jb=cb}kb=ib;lb=jb;mb=d[jb]|0}else{if(hb){if((Mh[c[Sa>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}nb=c[Ka>>2]|0;ob=c[La>>2]|0}else{nb=db;ob=cb}hb=nb+ -1|0;pb=ob+1|0;qb=d[ob]<<8;if((hb|0)==0){if((Mh[c[Sa>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}rb=c[Ka>>2]|0;sb=c[La>>2]|0}else{rb=hb;sb=pb}kb=rb;lb=sb;mb=d[sb]|qb}b[gb+(c[47080+(fb<<2)>>2]<<1)>>1]=mb;fb=fb+1|0;db=kb+ -1|0;cb=lb+1|0}while((fb|0)<64);fb=c[f>>2]|0;b:do{if((c[fb+104>>2]|0)>1){qb=fb;pb=0;while(1){c[qb+24>>2]=e[gb+(pb<<1)>>1]|0;c[qb+28>>2]=e[gb+((pb|1)<<1)>>1]|0;c[qb+32>>2]=e[gb+((pb|2)<<1)>>1]|0;c[qb+36>>2]=e[gb+((pb|3)<<1)>>1]|0;c[qb+40>>2]=e[gb+((pb|4)<<1)>>1]|0;c[qb+44>>2]=e[gb+((pb|5)<<1)>>1]|0;c[qb+48>>2]=e[gb+((pb|6)<<1)>>1]|0;c[qb+52>>2]=e[gb+((pb|7)<<1)>>1]|0;c[qb+20>>2]=93;Kh[c[qb+4>>2]&63](f,2);hb=pb+8|0;if((hb|0)>=64){break b}qb=c[f>>2]|0;pb=hb}}}while(0);fb=(eb?-65:-129)+_a|0;if((fb|0)>0){Za=db;_a=fb;$a=cb}else{tb=db;ub=fb;vb=cb;break}}}else{tb=Ma;ub=Qa;vb=Ra}if((ub|0)!=0){$a=c[f>>2]|0;c[$a+20>>2]=11;Jh[c[$a>>2]&127](f)}c[La>>2]=vb;c[Ka>>2]=tb;break};case 220:{$a=c[m>>2]|0;_a=$a+4|0;Za=c[_a>>2]|0;if((Za|0)==0){if((Mh[c[$a+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}wb=c[_a>>2]|0}else{wb=Za}Za=c[$a>>2]|0;Sa=wb+ -1|0;fb=Za+1|0;pb=d[Za]<<8;if((Sa|0)==0){if((Mh[c[$a+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}xb=c[_a>>2]|0;yb=c[$a>>2]|0}else{xb=Sa;yb=fb}fb=(d[yb]|pb)+ -2|0;pb=c[f>>2]|0;c[pb+20>>2]=91;c[pb+24>>2]=c[k>>2];c[pb+28>>2]=fb;Kh[c[pb+4>>2]&63](f,1);c[$a>>2]=yb+1;c[_a>>2]=xb+ -1;if((fb|0)>0){Kh[c[(c[m>>2]|0)+16>>2]&63](f,fb)}break};case 239:case 238:case 237:case 236:case 235:case 234:case 233:case 232:case 231:case 230:case 229:case 228:case 227:case 226:case 225:case 224:{if((Mh[c[(c[l>>2]|0)+28+(Va+ -224<<2)>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}break};case 221:{fb=c[m>>2]|0;_a=fb+4|0;$a=c[_a>>2]|0;if(($a|0)==0){if((Mh[c[fb+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}zb=c[_a>>2]|0}else{zb=$a}$a=c[fb>>2]|0;pb=zb+ -1|0;Sa=$a+1|0;Za=d[$a]<<8;if((pb|0)==0){if((Mh[c[fb+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Ab=c[_a>>2]|0;Bb=c[fb>>2]|0}else{Ab=pb;Bb=Sa}Sa=Ab+ -1|0;pb=Bb+1|0;if((d[Bb]|Za|0)!=4){Za=c[f>>2]|0;c[Za+20>>2]=11;Jh[c[Za>>2]&127](f)}if((Sa|0)==0){if((Mh[c[fb+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Cb=c[_a>>2]|0;Db=c[fb>>2]|0}else{Cb=Sa;Db=pb}pb=Cb+ -1|0;Sa=Db+1|0;Za=d[Db]<<8;if((pb|0)==0){if((Mh[c[fb+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Eb=c[_a>>2]|0;Fb=c[fb>>2]|0}else{Eb=pb;Fb=Sa}Sa=d[Fb]|Za;Za=c[f>>2]|0;c[Za+20>>2]=82;c[Za+24>>2]=Sa;Kh[c[Za+4>>2]&63](f,1);c[ha>>2]=Sa;c[fb>>2]=Fb+1;c[_a>>2]=Eb+ -1;break};case 196:{_a=c[m>>2]|0;fb=_a+4|0;Sa=c[fb>>2]|0;if((Sa|0)==0){if((Mh[c[_a+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Gb=c[fb>>2]|0}else{Gb=Sa}Sa=c[_a>>2]|0;Za=Gb+ -1|0;pb=Sa+1|0;$a=d[Sa]<<8;if((Za|0)==0){if((Mh[c[_a+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Hb=c[fb>>2]|0;Ib=c[_a>>2]|0}else{Hb=Za;Ib=pb}pb=Hb+ -1|0;Za=Ib+1|0;Sa=(d[Ib]|$a)+ -2|0;if((Sa|0)>16){$a=_a+12|0;qb=pb;hb=Sa;Jb=Za;while(1){if((qb|0)==0){if((Mh[c[$a>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Kb=c[fb>>2]|0;Lb=c[_a>>2]|0}else{Kb=qb;Lb=Jb}Mb=d[Lb]|0;Nb=c[f>>2]|0;c[Nb+20>>2]=80;c[Nb+24>>2]=Mb;Kh[c[Nb+4>>2]&63](f,1);a[h]=0;Nb=Kb+ -1|0;Ob=0;Pb=1;Qb=Lb+1|0;do{if((Nb|0)==0){if((Mh[c[$a>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Rb=c[fb>>2]|0;Sb=c[_a>>2]|0}else{Rb=Nb;Sb=Qb}Tb=a[Sb]|0;a[h+Pb|0]=Tb;Ob=(Tb&255)+Ob|0;Pb=Pb+1|0;Nb=Rb+ -1|0;Qb=Sb+1|0}while((Pb|0)<17);Pb=hb+ -17|0;cb=c[f>>2]|0;c[cb+24>>2]=d[ta]|0;c[cb+28>>2]=d[ua]|0;c[cb+32>>2]=d[va]|0;c[cb+36>>2]=d[wa]|0;c[cb+40>>2]=d[xa]|0;c[cb+44>>2]=d[ya]|0;c[cb+48>>2]=d[za]|0;c[cb+52>>2]=d[Aa]|0;c[cb+20>>2]=86;Kh[c[cb+4>>2]&63](f,2);cb=c[f>>2]|0;c[cb+24>>2]=d[Ba]|0;c[cb+28>>2]=d[Ca]|0;c[cb+32>>2]=d[Da]|0;c[cb+36>>2]=d[Ea]|0;c[cb+40>>2]=d[Fa]|0;c[cb+44>>2]=d[Ga]|0;c[cb+48>>2]=d[Ha]|0;c[cb+52>>2]=d[Ia]|0;c[cb+20>>2]=86;Kh[c[cb+4>>2]&63](f,2);if((Ob|0)>256|(Ob|0)>(Pb|0)){cb=c[f>>2]|0;c[cb+20>>2]=8;Jh[c[cb>>2]&127](f)}if((Ob|0)>0){cb=Nb;db=0;eb=Qb;while(1){if((cb|0)==0){if((Mh[c[$a>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}Ub=c[fb>>2]|0;Vb=c[_a>>2]|0}else{Ub=cb;Vb=eb}Tb=Ub+ -1|0;Wb=Vb+1|0;a[j+db|0]=a[Vb]|0;Xb=db+1|0;if((Xb|0)<(Ob|0)){cb=Tb;db=Xb;eb=Wb}else{Yb=Tb;Zb=Wb;break}}}else{Yb=Nb;Zb=Qb}eb=Pb-Ob|0;if((Mb&16|0)==0){_b=f+(Mb<<2)+160|0;$b=Mb}else{db=Mb+ -16|0;_b=f+(db<<2)+176|0;$b=db}if($b>>>0>3){db=c[f>>2]|0;c[db+20>>2]=30;c[db+24>>2]=$b;Jh[c[db>>2]&127](f)}db=c[_b>>2]|0;if((db|0)==0){cb=ro(f)|0;c[_b>>2]=cb;ac=cb}else{ac=db}db=ac+0|0;cb=h+0|0;Wb=db+17|0;do{a[db]=a[cb]|0;db=db+1|0;cb=cb+1|0}while((db|0)<(Wb|0));tu((c[_b>>2]|0)+17|0,j|0,256)|0;if((eb|0)>16){qb=Yb;hb=eb;Jb=Zb}else{bc=Yb;cc=eb;dc=Zb;break}}}else{bc=pb;cc=Sa;dc=Za}if((cc|0)!=0){Jb=c[f>>2]|0;c[Jb+20>>2]=11;Jh[c[Jb>>2]&127](f)}c[_a>>2]=dc;c[fb>>2]=bc;break};case 204:{Jb=c[m>>2]|0;hb=Jb+4|0;qb=c[hb>>2]|0;if((qb|0)==0){if((Mh[c[Jb+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}ec=c[hb>>2]|0}else{ec=qb}qb=c[Jb>>2]|0;$a=ec+ -1|0;Ka=qb+1|0;La=d[qb]<<8;if(($a|0)==0){if((Mh[c[Jb+12>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break a}fc=c[hb>>2]|0;gc=c[Jb>>2]|0}else{fc=$a;gc=Ka}Ka=(d[gc]|La)+ -2|0;La=c[f>>2]|0;c[La+20>>2]=91;c[La+24>>2]=c[k>>2];c[La+28>>2]=Ka;Kh[c[La+4>>2]&63](f,1);c[Jb>>2]=gc+1;c[hb>>2]=fc+ -1;if((Ka|0)>0){Kh[c[(c[m>>2]|0)+16>>2]&63](f,Ka)}break};case 193:case 192:{if((So(f,0,0)|0)<<24>>24==0){Na=0;Oa=169;break a}break};case 216:{Ka=c[f>>2]|0;c[Ka+20>>2]=102;Kh[c[Ka+4>>2]&63](f,1);Ka=c[l>>2]|0;if((a[Ka+12|0]|0)==0){hc=Ka}else{if((c[sa>>2]|0)==201){hc=Ka}else{Ka=c[f>>2]|0;c[Ka+20>>2]=61;Jh[c[Ka>>2]&127](f);hc=c[l>>2]|0}}a[n]=0;a[o]=1;a[p]=5;a[q]=0;a[r]=1;a[s]=5;a[t]=0;a[u]=1;a[v]=5;a[w]=0;a[x]=1;a[y]=5;a[z]=0;a[A]=1;a[B]=5;a[C]=0;a[D]=1;a[E]=5;a[F]=0;a[G]=1;a[H]=5;a[I]=0;a[J]=1;a[K]=5;a[L]=0;a[M]=1;a[N]=5;a[O]=0;a[P]=1;a[Q]=5;a[R]=0;a[S]=1;a[T]=5;a[U]=0;a[V]=1;a[W]=5;a[X]=0;a[Y]=1;a[Z]=5;a[_]=0;a[$]=1;a[aa]=5;a[ba]=0;a[ca]=1;a[da]=5;a[ea]=0;a[fa]=1;a[ga]=5;c[ha>>2]=0;c[ia>>2]=0;a[ja]=0;a[ka]=0;a[la]=1;a[ma]=1;a[na]=0;b[oa>>1]=1;b[pa>>1]=1;a[qa]=0;a[ra]=0;a[hc+12|0]=1;break};case 218:{Oa=25;break a;break};case 207:case 206:case 205:case 203:case 200:case 199:case 198:case 197:case 195:{Ka=c[f>>2]|0;c[Ka+20>>2]=60;c[Ka+24>>2]=c[k>>2];Jh[c[Ka>>2]&127](f);break};case 217:{Oa=63;break a;break};case 202:{if((So(f,1,1)|0)<<24>>24==0){Na=0;Oa=169;break a}break};case 201:{if((So(f,0,1)|0)<<24>>24==0){Na=0;Oa=169;break a}break};case 194:{if((So(f,1,0)|0)<<24>>24==0){Na=0;Oa=169;break a}break};default:{}}c[k>>2]=0;Ja=0}if((Oa|0)==25){Ja=c[m>>2]|0;m=c[Ja>>2]|0;hc=Ja+4|0;ra=c[hc>>2]|0;if((a[(c[l>>2]|0)+13|0]|0)==0){qa=c[f>>2]|0;c[qa+20>>2]=62;Jh[c[qa>>2]&127](f)}do{if((ra|0)==0){if((Mh[c[Ja+12>>2]&31](f)|0)<<24>>24==0){Na=0;i=g;return Na|0}else{ic=c[hc>>2]|0;jc=c[Ja>>2]|0;break}}else{ic=ra;jc=m}}while(0);m=ic+ -1|0;ic=jc+1|0;ra=d[jc]<<8;do{if((m|0)==0){if((Mh[c[Ja+12>>2]&31](f)|0)<<24>>24==0){Na=0;i=g;return Na|0}else{kc=c[hc>>2]|0;lc=c[Ja>>2]|0;break}}else{kc=m;lc=ic}}while(0);ic=kc+ -1|0;kc=lc+1|0;m=d[lc]|ra;do{if((ic|0)==0){if((Mh[c[Ja+12>>2]&31](f)|0)<<24>>24==0){Na=0;i=g;return Na|0}else{mc=c[hc>>2]|0;nc=c[Ja>>2]|0;break}}else{mc=ic;nc=kc}}while(0);kc=a[nc]|0;ic=kc&255;ra=c[f>>2]|0;c[ra+20>>2]=103;c[ra+24>>2]=ic;Kh[c[ra+4>>2]&63](f,1);if((m|0)==((ic<<1)+6|0)){if(kc<<24>>24==0|(kc&255)>4){Oa=38}}else{Oa=38}if((Oa|0)==38){m=c[f>>2]|0;c[m+20>>2]=11;Jh[c[m>>2]&127](f)}c[f+292>>2]=ic;m=mc+ -1|0;mc=nc+1|0;nc=(m|0)==0;c:do{if(kc<<24>>24==0){oc=nc;pc=m;qc=mc}else{ra=Ja+12|0;lc=f+196|0;jc=f+36|0;qa=nc;pa=m;oa=0;na=mc;while(1){if(qa){if((Mh[c[ra>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break}rc=c[hc>>2]|0;sc=c[Ja>>2]|0}else{rc=pa;sc=na}ma=rc+ -1|0;la=sc+1|0;ka=d[sc]|0;if((ma|0)==0){if((Mh[c[ra>>2]&31](f)|0)<<24>>24==0){Na=0;Oa=169;break}tc=c[hc>>2]|0;uc=c[Ja>>2]|0}else{tc=ma;uc=la}la=d[uc]|0;ma=c[lc>>2]|0;ja=c[jc>>2]|0;d:do{if((ja|0)>0){ia=0;ha=ma;while(1){if((ka|0)==(c[ha>>2]|0)){vc=ha;break d}ga=ia+1|0;fa=ha+84|0;if((ga|0)<(ja|0)){ia=ga;ha=fa}else{wc=fa;Oa=50;break}}}else{wc=ma;Oa=50}}while(0);if((Oa|0)==50){Oa=0;ma=c[f>>2]|0;c[ma+20>>2]=5;c[ma+24>>2]=ka;Jh[c[ma>>2]&127](f);vc=wc}c[f+(oa<<2)+296>>2]=vc;ma=vc+20|0;c[ma>>2]=la>>>4;ja=vc+24|0;c[ja>>2]=la&15;eb=c[f>>2]|0;c[eb+24>>2]=ka;c[eb+28>>2]=c[ma>>2];c[eb+32>>2]=c[ja>>2];c[eb+20>>2]=104;Kh[c[eb+4>>2]&63](f,1);eb=oa+1|0;ja=tc+ -1|0;ma=uc+1|0;ha=(ja|0)==0;if((eb|0)<(ic|0)){qa=ha;pa=ja;oa=eb;na=ma}else{oc=ha;pc=ja;qc=ma;break c}}if((Oa|0)==169){i=g;return Na|0}}}while(0);do{if(oc){if((Mh[c[Ja+12>>2]&31](f)|0)<<24>>24==0){Na=0;i=g;return Na|0}else{xc=c[hc>>2]|0;yc=c[Ja>>2]|0;break}}else{xc=pc;yc=qc}}while(0);qc=xc+ -1|0;xc=yc+1|0;pc=f+364|0;c[pc>>2]=d[yc]|0;do{if((qc|0)==0){if((Mh[c[Ja+12>>2]&31](f)|0)<<24>>24==0){Na=0;i=g;return Na|0}else{zc=c[hc>>2]|0;Ac=c[Ja>>2]|0;break}}else{zc=qc;Ac=xc}}while(0);xc=zc+ -1|0;zc=f+368|0;c[zc>>2]=d[Ac]|0;do{if((xc|0)==0){if((Mh[c[Ja+12>>2]&31](f)|0)<<24>>24==0){Na=0;i=g;return Na|0}else{Bc=c[hc>>2]|0;Cc=c[Ja>>2]|0;break}}else{Bc=xc;Cc=Ac+1|0}}while(0);Ac=d[Cc]|0;xc=f+372|0;c[xc>>2]=Ac>>>4;qc=f+376|0;c[qc>>2]=Ac&15;Ac=c[f>>2]|0;c[Ac+24>>2]=c[pc>>2];c[Ac+28>>2]=c[zc>>2];c[Ac+32>>2]=c[xc>>2];c[Ac+36>>2]=c[qc>>2];c[Ac+20>>2]=105;Kh[c[Ac+4>>2]&63](f,1);c[(c[l>>2]|0)+16>>2]=0;l=f+124|0;c[l>>2]=(c[l>>2]|0)+1;c[Ja>>2]=Cc+1;c[hc>>2]=Bc+ -1;c[k>>2]=0;Na=1;i=g;return Na|0}else if((Oa|0)==63){Bc=c[f>>2]|0;c[Bc+20>>2]=85;Kh[c[Bc+4>>2]&63](f,1);c[k>>2]=0;Na=2;i=g;return Na|0}else if((Oa|0)==169){i=g;return Na|0}return 0}function Oo(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=a+380|0;e=c[d>>2]|0;do{if((e|0)==0){if((Ko(a)|0)<<24>>24==0){f=0;i=b;return f|0}else{g=c[d>>2]|0;break}}else{g=e}}while(0);e=a+404|0;h=(c[e>>2]|0)+16|0;j=c[h>>2]|0;if((g|0)==(j+208|0)){g=c[a>>2]|0;c[g+20>>2]=98;c[g+24>>2]=c[h>>2];Kh[c[g+4>>2]&63](a,3);c[d>>2]=0}else{if((Yh[c[(c[a+24>>2]|0)+20>>2]&15](a,j)|0)<<24>>24==0){f=0;i=b;return f|0}}j=(c[e>>2]|0)+16|0;c[j>>2]=(c[j>>2]|0)+1&7;f=1;i=b;return f|0}



function ur(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0;j=i;k=c[g>>2]|0;l=g+8|0;m=a[l]|0;if((m&2)==0){n=0;i=j;return n|0}o=e[f+650>>1]|0;p=e[f+652>>1]|0;q=e[f+654>>1]|0;a:do{if(m<<24>>24==2){if((a[g+9|0]|0)!=8){r=f+472|0;if((c[r>>2]|0)!=0){s=f+468|0;if((c[s>>2]|0)!=0){if((k|0)==0){t=0;break}u=f+440|0;v=h;w=0;x=0;y=h;while(1){z=a[y]|0;A=z&255;B=a[y+1|0]|0;C=B&255;D=A<<8|C;E=d[y+2|0]|0;F=d[y+3|0]|0;G=d[y+4|0]|0;H=d[y+5|0]|0;I=y+6|0;if((D|0)==(E<<8|F|0)){if((D|0)==(G<<8|H|0)){J=x;K=B;L=z}else{M=22}}else{M=22}if((M|0)==22){M=0;z=c[u>>2]|0;B=c[r>>2]|0;D=(ea(e[(c[B+(F>>>z<<2)>>2]|0)+(E<<1)>>1]|0,p)|0)+(ea(e[(c[B+(C>>>z<<2)>>2]|0)+(A<<1)>>1]|0,o)|0)+(ea(e[(c[B+(H>>>z<<2)>>2]|0)+(G<<1)>>1]|0,q)|0)|0;G=b[(c[(c[s>>2]|0)+((D>>>15&255)>>>z<<2)>>2]|0)+((D>>>23&255)<<1)>>1]|0;J=x|1;K=G&255;L=(G&65535)>>>8&255}a[v]=L;a[v+1|0]=K;G=w+1|0;if((G|0)==(k|0)){t=J;break a}else{v=v+2|0;w=G;x=J;y=I}}}}if((k|0)==0){t=0;break}else{N=h;O=0;P=0;Q=h}while(1){y=d[Q]<<8|d[Q+1|0];x=d[Q+2|0]<<8|d[Q+3|0];w=d[Q+4|0]<<8|d[Q+5|0];v=(y|0)==(x|0)&(y|0)==(w|0)&1^1|P;s=(ea(x,p)|0)+(ea(y,o)|0)+(ea(w,q)|0)|0;a[N]=s>>>23;a[N+1|0]=s>>>15;s=O+1|0;if((s|0)==(k|0)){t=v;break a}else{N=N+2|0;O=s;P=v;Q=Q+6|0}}}v=f+456|0;if((c[v>>2]|0)!=0){s=f+460|0;w=c[s>>2]|0;if((w|0)!=0){if((k|0)==0){t=0;break}else{R=w;S=h;T=1;U=0;V=h}while(1){w=a[R+(d[V]|0)|0]|0;y=a[R+(d[V+1|0]|0)|0]|0;x=a[V+2|0]|0;r=a[R+(x&255)|0]|0;if(w<<24>>24==y<<24>>24&w<<24>>24==r<<24>>24){W=U;X=x}else{x=((ea(y&255,p)|0)+(ea(w&255,o)|0)+(ea(r&255,q)|0)|0)>>>15;W=U|1;X=a[(c[v>>2]|0)+x|0]|0}a[S]=X;if((T|0)==(k|0)){t=W;break a}R=c[s>>2]|0;S=S+1|0;T=T+1|0;U=W;V=V+3|0}}}if((k|0)==0){t=0}else{s=h;v=0;x=0;r=h;while(1){w=a[r]|0;y=a[r+1|0]|0;u=a[r+2|0]|0;if(w<<24>>24==y<<24>>24&w<<24>>24==u<<24>>24){Y=x;Z=w}else{Y=x|1;Z=((ea(y&255,p)|0)+(ea(w&255,o)|0)+(ea(u&255,q)|0)|0)>>>15&255}a[s]=Z;u=v+1|0;if((u|0)==(k|0)){t=Y;break}else{s=s+1|0;v=u;x=Y;r=r+3|0}}}}else{t=0}}while(0);Y=g+9|0;b:do{if((a[l]|0)==6){if((a[Y]|0)==8){Z=f+456|0;V=c[Z>>2]|0;if((V|0)!=0){W=f+460|0;U=c[W>>2]|0;if((U|0)!=0){if((k|0)==0){_=t;break}else{$=U;aa=V;ba=h;ca=1;da=t;fa=h}while(1){V=a[$+(d[fa]|0)|0]|0;U=a[$+(d[fa+1|0]|0)|0]|0;T=a[$+(d[fa+2|0]|0)|0]|0;S=V<<24>>24==U<<24>>24&V<<24>>24==T<<24>>24&1^1|da;a[ba]=a[aa+(((ea(U&255,p)|0)+(ea(V&255,o)|0)+(ea(T&255,q)|0)|0)>>>15)|0]|0;a[ba+1|0]=a[fa+3|0]|0;if((ca|0)==(k|0)){_=S;break b}$=c[W>>2]|0;aa=c[Z>>2]|0;ba=ba+2|0;ca=ca+1|0;da=S;fa=fa+4|0}}}if((k|0)==0){_=t;break}else{ga=h;ha=0;ia=t;ja=h}while(1){Z=a[ja]|0;W=a[ja+1|0]|0;S=a[ja+2|0]|0;T=Z<<24>>24==W<<24>>24&Z<<24>>24==S<<24>>24&1^1|ia;a[ga]=((ea(W&255,p)|0)+(ea(Z&255,o)|0)+(ea(S&255,q)|0)|0)>>>15;a[ga+1|0]=a[ja+3|0]|0;S=ha+1|0;if((S|0)==(k|0)){_=T;break b}else{ga=ga+2|0;ha=S;ia=T;ja=ja+4|0}}}T=f+472|0;if((c[T>>2]|0)!=0){S=f+468|0;if((c[S>>2]|0)!=0){if((k|0)==0){_=t;break}Z=f+440|0;W=h;V=0;U=t;R=h;while(1){X=a[R]|0;Q=X&255;P=a[R+1|0]|0;O=P&255;N=Q<<8|O;J=d[R+2|0]|0;K=d[R+3|0]|0;L=d[R+4|0]|0;m=d[R+5|0]|0;r=R+6|0;if((N|0)==(J<<8|K|0)){if((N|0)==(L<<8|m|0)){ka=U;la=P;ma=X}else{M=41}}else{M=41}if((M|0)==41){M=0;X=c[Z>>2]|0;P=c[T>>2]|0;N=(ea(e[(c[P+(K>>>X<<2)>>2]|0)+(J<<1)>>1]|0,p)|0)+(ea(e[(c[P+(O>>>X<<2)>>2]|0)+(Q<<1)>>1]|0,o)|0)+(ea(e[(c[P+(m>>>X<<2)>>2]|0)+(L<<1)>>1]|0,q)|0)|0;L=b[(c[(c[S>>2]|0)+((N>>>15&255)>>>X<<2)>>2]|0)+((N>>>23&255)<<1)>>1]|0;ka=U|1;la=L&255;ma=(L&65535)>>>8&255}a[W]=ma;a[W+1|0]=la;a[W+2|0]=a[r]|0;a[W+3|0]=a[R+7|0]|0;r=V+1|0;if((r|0)==(k|0)){_=ka;break b}else{W=W+4|0;V=r;U=ka;R=R+8|0}}}}if((k|0)==0){_=t}else{R=h;U=0;V=t;W=h;while(1){S=d[W]<<8|d[W+1|0];T=d[W+2|0]<<8|d[W+3|0];Z=d[W+4|0]<<8|d[W+5|0];r=(S|0)==(T|0)&(S|0)==(Z|0)&1^1|V;L=(ea(T,p)|0)+(ea(S,o)|0)+(ea(Z,q)|0)|0;a[R]=L>>>23;a[R+1|0]=L>>>15;a[R+2|0]=a[W+6|0]|0;a[R+3|0]=a[W+7|0]|0;L=U+1|0;if((L|0)==(k|0)){_=r;break}else{R=R+4|0;U=L;V=r;W=W+8|0}}}}else{_=t}}while(0);t=g+10|0;q=(d[t]|0)+254|0;a[t]=q;a[l]=a[l]&253;l=ea(d[Y]|0,q&255)|0;a[g+11|0]=l;q=l&255;if(q>>>0>7){na=ea(q>>>3,k)|0}else{na=((ea(q,k)|0)+7|0)>>>3}c[g+4>>2]=na;n=_;i=j;return n|0}function vr(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;g=c[b>>2]|0;h=b+9|0;j=a[h]|0;if(!((j&255)>7)){i=f;return}k=b+8|0;l=a[k]|0;if(!((l&2)==0)){i=f;return}do{if(l<<24>>24==4){if(j<<24>>24==8){m=g<<1;n=m+ -1|0;if((g|0)==0){break}o=e+(n+m)|0;m=0;p=e+n|0;while(1){n=p+ -1|0;a[o]=a[p]|0;a[o+ -1|0]=a[n]|0;a[o+ -2|0]=a[n]|0;a[o+ -3|0]=a[n]|0;m=m+1|0;if((m|0)==(g|0)){break}else{o=o+ -4|0;p=p+ -2|0}}}else{p=g<<2;o=p+ -1|0;if((g|0)==0){break}m=e+(o+p)|0;p=0;n=e+o|0;while(1){a[m]=a[n]|0;o=n+ -2|0;a[m+ -1|0]=a[n+ -1|0]|0;a[m+ -2|0]=a[o]|0;q=n+ -3|0;a[m+ -3|0]=a[q]|0;a[m+ -4|0]=a[o]|0;a[m+ -5|0]=a[q]|0;a[m+ -6|0]=a[o]|0;a[m+ -7|0]=a[q]|0;p=p+1|0;if((p|0)==(g|0)){break}else{m=m+ -8|0;n=n+ -4|0}}}}else if(l<<24>>24==0){if(j<<24>>24==8){n=g+ -1|0;if((g|0)==0){break}m=e+(n+(g<<1))|0;p=0;q=e+n|0;while(1){a[m]=a[q]|0;a[m+ -1|0]=a[q]|0;a[m+ -2|0]=a[q]|0;p=p+1|0;if((p|0)==(g|0)){break}else{m=m+ -3|0;q=q+ -1|0}}}else{q=(g<<1)+ -1|0;if((g|0)==0){break}m=e+(q+(g<<2))|0;p=0;n=e+q|0;while(1){a[m]=a[n]|0;q=n+ -1|0;a[m+ -1|0]=a[q]|0;a[m+ -2|0]=a[n]|0;a[m+ -3|0]=a[q]|0;a[m+ -4|0]=a[n]|0;a[m+ -5|0]=a[q]|0;p=p+1|0;if((p|0)==(g|0)){break}else{m=m+ -6|0;n=n+ -2|0}}}}}while(0);e=b+10|0;j=(d[e]|0)+2|0;a[e]=j;a[k]=d[k]|0|2;k=ea(d[h]|0,j&255)|0;a[b+11|0]=k;j=k&255;if(j>>>0>7){r=ea(j>>>3,g)|0}else{r=((ea(j,g)|0)+7|0)>>>3}c[b+4>>2]=r;i=f;return}function wr(f,g,h,j,k,l,m,n,o,p,q,r){f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;q=q|0;r=r|0;var s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;s=i;t=c[f>>2]|0;if((j|0)==0){i=s;return}u=f+8|0;v=a[u]|0;if(!((v&4)==0)){if(v<<24>>24==3|(h|0)==0){i=s;return}}w=v&255;a:do{if((w|0)==0){switch(d[f+9|0]|0){case 4:{v=(t|0)==0;if((l|0)==0){if(v){break a}x=h+8|0;y=j+8|0;z=1;A=4;B=g;while(1){C=d[B]|0;if((C>>>A&15|0)==(e[x>>1]|0)){D=C&3855>>>(4-A|0);a[B]=D;a[B]=e[y>>1]<<A|D}D=(A|0)==0;if((z|0)==(t|0)){break a}z=z+1|0;A=D?4:A+ -4|0;B=D?B+1|0:B}}else{if(v){break a}B=h+8|0;A=j+8|0;z=0;y=4;x=g;while(1){D=d[x]|0;C=D>>>y&15;if((C|0)==(e[B>>1]|0)){E=D&3855>>>(4-y|0);a[x]=E;F=e[A>>1]<<y&255|E}else{F=((d[l+(C<<4|C)|0]|0)>>>4&255)<<y|D&3855>>>(4-y|0)}a[x]=F;D=(y|0)==0;z=z+1|0;if((z|0)==(t|0)){break}else{y=D?4:y+ -4|0;x=D?x+1|0:x}}}break};case 2:{x=(t|0)==0;if((l|0)==0){if(x){break a}y=h+8|0;z=j+8|0;A=1;B=6;v=g;while(1){D=d[v]|0;if((D>>>B&3|0)==(e[y>>1]|0)){C=D&16191>>>(6-B|0);a[v]=C;a[v]=e[z>>1]<<B|C}C=(B|0)==0;if((A|0)==(t|0)){break a}A=A+1|0;B=C?6:B+ -2|0;v=C?v+1|0:v}}else{if(x){break a}v=h+8|0;B=j+8|0;A=0;z=6;y=g;while(1){C=d[y]|0;D=C>>>z&3;if((D|0)==(e[v>>1]|0)){E=C&16191>>>(6-z|0);a[y]=E;G=e[B>>1]<<z&255|E}else{G=((d[l+(D<<2|D|D<<4|D<<6)|0]|0)>>>6&255)<<z|C&16191>>>(6-z|0)}a[y]=G;C=(z|0)==0;A=A+1|0;if((A|0)==(t|0)){break}else{z=C?6:z+ -2|0;y=C?y+1|0:y}}}break};case 8:{y=(t|0)==0;if((l|0)==0){if(y){break a}z=h+8|0;A=j+8|0;B=1;v=g;while(1){if((d[v]|0)==(e[z>>1]|0)){a[v]=b[A>>1]}if((B|0)==(t|0)){break a}B=B+1|0;v=v+1|0}}else{if(y){break a}v=h+8|0;B=j+8|0;A=0;z=g;while(1){x=d[z]|0;if((x|0)==(e[v>>1]|0)){H=b[B>>1]&255}else{H=a[l+x|0]|0}a[z]=H;A=A+1|0;if((A|0)==(t|0)){break}else{z=z+1|0}}}break};case 1:{if((t|0)==0){break a}z=h+8|0;A=j+8|0;B=1;v=7;y=g;while(1){x=d[y]|0;if((x>>>v&1|0)==(e[z>>1]|0)){C=x&32639>>>(7-v|0);a[y]=C;a[y]=e[A>>1]<<v|C}C=(v|0)==0;if((B|0)==(t|0)){break a}B=B+1|0;v=C?7:v+ -1|0;y=C?y+1|0:y}break};case 16:{y=(t|0)==0;if((o|0)==0){if(y){break a}v=h+8|0;B=j+8|0;A=1;z=g;while(1){C=z+1|0;if((d[z]<<8|d[C]|0)==(e[v>>1]|0)){a[z]=(e[B>>1]|0)>>>8;a[C]=b[B>>1]}if((A|0)==(t|0)){break a}A=A+1|0;z=z+2|0}}else{if(y){break a}z=h+8|0;A=j+8|0;B=0;v=g;while(1){C=d[v]|0;x=v+1|0;D=d[x]|0;if((C<<8|D|0)==(e[z>>1]|0)){a[v]=(e[A>>1]|0)>>>8;I=b[A>>1]|0}else{E=b[(c[o+(D>>>r<<2)>>2]|0)+(C<<1)>>1]|0;a[v]=(E&65535)>>>8;I=E}a[x]=I;B=B+1|0;if((B|0)==(t|0)){break}else{v=v+2|0}}}break};default:{break a}}}else if((w|0)==2){if((a[f+9|0]|0)==8){v=(t|0)==0;if((l|0)==0){if(v){break}B=h+2|0;A=h+4|0;z=h+6|0;y=j+2|0;x=j+4|0;E=j+6|0;C=1;D=g;while(1){if((d[D]|0)==(e[B>>1]|0)){J=D+1|0;if((d[J]|0)==(e[A>>1]|0)){K=D+2|0;if((d[K]|0)==(e[z>>1]|0)){a[D]=b[y>>1];a[J]=b[x>>1];a[K]=b[E>>1]}}}if((C|0)==(t|0)){break a}C=C+1|0;D=D+3|0}}else{if(v){break}D=h+2|0;C=h+4|0;E=h+6|0;x=j+2|0;y=j+4|0;z=j+6|0;A=0;B=g;while(1){K=d[B]|0;J=B+1|0;L=a[J]|0;if((K|0)==(e[D>>1]|0)){if((L&255|0)==(e[C>>1]|0)){M=B+2|0;if((d[M]|0)==(e[E>>1]|0)){a[B]=b[x>>1];a[J]=b[y>>1];a[M]=b[z>>1]}else{N=74}}else{N=74}}else{N=74}if((N|0)==74){N=0;a[B]=a[l+K|0]|0;a[B+1|0]=a[l+(L&255)|0]|0;L=B+2|0;a[L]=a[l+(d[L]|0)|0]|0}A=A+1|0;if((A|0)==(t|0)){break}else{B=B+3|0}}}}else{B=(t|0)==0;if((o|0)==0){if(B){break}A=h+2|0;z=h+4|0;y=h+6|0;x=j+2|0;E=j+4|0;C=j+6|0;D=1;v=g;while(1){L=v+1|0;K=v+2|0;M=v+3|0;J=v+4|0;O=v+5|0;P=d[J]<<8|d[O];if((d[v]<<8|d[L]|0)==(e[A>>1]|0)){if((d[K]<<8|d[M]|0)==(e[z>>1]|0)){if((P|0)==(e[y>>1]|0)){a[v]=(e[x>>1]|0)>>>8;a[L]=b[x>>1];a[K]=(e[E>>1]|0)>>>8;a[M]=b[E>>1];a[J]=(e[C>>1]|0)>>>8;a[O]=b[C>>1]}}}if((D|0)==(t|0)){break a}D=D+1|0;v=v+6|0}}else{if(B){break}v=h+2|0;D=h+4|0;C=h+6|0;E=j+2|0;x=j+4|0;y=j+6|0;z=0;A=g;while(1){O=d[A]|0;J=A+1|0;M=d[J]|0;K=A+2|0;L=A+3|0;P=A+4|0;Q=d[P]|0;R=A+5|0;S=d[R]|0;T=Q<<8|S;U=a[K]|0;V=a[L]|0;if((O<<8|M|0)==(e[v>>1]|0)){if(((U&255)<<8|V&255|0)==(e[D>>1]|0)){if((T|0)==(e[C>>1]|0)){a[A]=(e[E>>1]|0)>>>8;a[J]=b[E>>1];a[K]=(e[x>>1]|0)>>>8;a[L]=b[x>>1];a[P]=(e[y>>1]|0)>>>8;W=b[y>>1]|0}else{N=91}}else{N=91}}else{N=91}if((N|0)==91){N=0;T=b[(c[o+(M>>>r<<2)>>2]|0)+(O<<1)>>1]|0;a[A]=(T&65535)>>>8;a[J]=T;T=b[(c[o+((V&255)>>>r<<2)>>2]|0)+((U&255)<<1)>>1]|0;a[K]=(T&65535)>>>8;a[L]=T;T=b[(c[o+(S>>>r<<2)>>2]|0)+(Q<<1)>>1]|0;a[P]=(T&65535)>>>8;W=T}a[R]=W;z=z+1|0;if((z|0)==(t|0)){break}else{A=A+6|0}}}}}else if((w|0)==4){if((a[f+9|0]|0)==8){A=(t|0)==0;if((n|0)==0|(m|0)==0|(l|0)==0){if(A){break}z=k+8|0;y=j+8|0;x=g;E=0;C=g;while(1){D=a[C+1|0]|0;if(D<<24>>24==-1){a[x]=a[C]|0}else if(D<<24>>24==0){a[x]=b[y>>1]}else{v=D&255;D=ea(d[C]|0,v)|0;B=D+128+(ea(e[z>>1]|0,v^255)|0)|0;a[x]=((B>>>8&255)+B|0)>>>8}E=E+1|0;if((E|0)==(t|0)){break}else{x=x+1|0;C=C+2|0}}}else{if(A){break}C=k+8|0;x=j+8|0;E=g;z=0;y=g;while(1){B=a[y+1|0]|0;v=B&255;if(B<<24>>24==0){a[E]=b[x>>1]}else if(B<<24>>24==-1){a[E]=a[l+(d[y]|0)|0]|0}else{B=ea(d[n+(d[y]|0)|0]|0,v)|0;D=B+128+(ea(e[C>>1]|0,v^255)|0)|0;a[E]=a[m+(((D>>>8&255)+D|0)>>>8&255)|0]|0}z=z+1|0;if((z|0)==(t|0)){break}else{E=E+1|0;y=y+2|0}}}}else{y=(t|0)==0;if((o|0)==0|(p|0)==0|(q|0)==0){if(y){break}E=k+8|0;z=j+8|0;C=g;x=0;A=g;while(1){D=d[A+2|0]<<8|d[A+3|0];if((D|0)==65535){v=d[A]|d[A+1|0]<<8;a[C]=v;a[C+1|0]=v>>8}else if((D|0)==0){a[C]=(e[z>>1]|0)>>>8;a[C+1|0]=b[z>>1]}else{v=ea(d[A]<<8|d[A+1|0],D)|0;B=(ea(e[E>>1]|0,D^65535)|0)+32768+v|0;v=(B>>>16)+B|0;a[C]=v>>>24;a[C+1|0]=v>>>16}x=x+1|0;if((x|0)==(t|0)){break}else{C=C+2|0;A=A+4|0}}}else{if(y){break}A=k+8|0;C=j+8|0;x=g;E=0;z=g;while(1){v=d[z+2|0]<<8|d[z+3|0];if((v|0)==65535){B=b[(c[o+((d[z+1|0]|0)>>>r<<2)>>2]|0)+(d[z]<<1)>>1]|0;a[x]=(B&65535)>>>8;a[x+1|0]=B}else if((v|0)==0){a[x]=(e[C>>1]|0)>>>8;a[x+1|0]=b[C>>1]}else{B=ea(e[(c[q+((d[z+1|0]|0)>>>r<<2)>>2]|0)+(d[z]<<1)>>1]|0,v)|0;D=B+32768+(ea(e[A>>1]|0,v^65535)|0)|0;v=(D>>>16)+D|0;D=b[(c[p+((v>>>16&255)>>>r<<2)>>2]|0)+(v>>>24<<1)>>1]|0;a[x]=(D&65535)>>>8;a[x+1|0]=D}E=E+1|0;if((E|0)==(t|0)){break}else{x=x+2|0;z=z+4|0}}}}}else if((w|0)==6){if((a[f+9|0]|0)==8){z=(t|0)==0;if((n|0)==0|(m|0)==0|(l|0)==0){if(z){break}x=j+2|0;E=j+4|0;A=j+6|0;C=g;y=0;D=g;while(1){v=a[D+3|0]|0;if(v<<24>>24==-1){a[C]=a[D]|0;a[C+1|0]=a[D+1|0]|0;a[C+2|0]=a[D+2|0]|0}else if(v<<24>>24==0){a[C]=b[x>>1];a[C+1|0]=b[E>>1];a[C+2|0]=b[A>>1]}else{B=v&255;v=ea(d[D]|0,B)|0;R=B^255;T=v+128+(ea(e[x>>1]|0,R)|0)|0;a[C]=((T>>>8&255)+T|0)>>>8;T=ea(d[D+1|0]|0,B)|0;v=T+128+(ea(e[E>>1]|0,R)|0)|0;a[C+1|0]=((v>>>8&255)+v|0)>>>8;v=ea(d[D+2|0]|0,B)|0;B=v+128+(ea(e[A>>1]|0,R)|0)|0;a[C+2|0]=((B>>>8&255)+B|0)>>>8}y=y+1|0;if((y|0)==(t|0)){break}else{C=C+3|0;D=D+4|0}}}else{if(z){break}D=k+2|0;C=k+4|0;y=k+6|0;A=j+2|0;E=j+4|0;x=j+6|0;B=g;R=0;v=g;while(1){T=a[v+3|0]|0;if(T<<24>>24==-1){a[B]=a[l+(d[v]|0)|0]|0;a[B+1|0]=a[l+(d[v+1|0]|0)|0]|0;a[B+2|0]=a[l+(d[v+2|0]|0)|0]|0}else if(T<<24>>24==0){a[B]=b[A>>1];a[B+1|0]=b[E>>1];a[B+2|0]=b[x>>1]}else{P=T&255;T=ea(d[n+(d[v]|0)|0]|0,P)|0;Q=P^255;S=T+128+(ea(e[D>>1]|0,Q)|0)|0;a[B]=a[m+(((S>>>8&255)+S|0)>>>8&255)|0]|0;S=ea(d[n+(d[v+1|0]|0)|0]|0,P)|0;T=S+128+(ea(e[C>>1]|0,Q)|0)|0;a[B+1|0]=a[m+(((T>>>8&255)+T|0)>>>8&255)|0]|0;T=ea(d[n+(d[v+2|0]|0)|0]|0,P)|0;P=T+128+(ea(e[y>>1]|0,Q)|0)|0;a[B+2|0]=a[m+(((P>>>8&255)+P|0)>>>8&255)|0]|0}R=R+1|0;if((R|0)==(t|0)){break}else{B=B+3|0;v=v+4|0}}}}else{v=(t|0)==0;if((o|0)==0|(p|0)==0|(q|0)==0){if(v){break}B=j+2|0;R=j+4|0;y=j+6|0;C=g;D=0;x=g;while(1){E=d[x+6|0]<<8|d[x+7|0];if((E|0)==65535){a[C+0|0]=a[x+0|0]|0;a[C+1|0]=a[x+1|0]|0;a[C+2|0]=a[x+2|0]|0;a[C+3|0]=a[x+3|0]|0;a[C+4|0]=a[x+4|0]|0;a[C+5|0]=a[x+5|0]|0}else if((E|0)==0){a[C]=(e[B>>1]|0)>>>8;a[C+1|0]=b[B>>1];a[C+2|0]=(e[R>>1]|0)>>>8;a[C+3|0]=b[R>>1];a[C+4|0]=(e[y>>1]|0)>>>8;a[C+5|0]=b[y>>1]}else{A=d[x+2|0]<<8|d[x+3|0];z=d[x+4|0]<<8|d[x+5|0];P=ea(d[x]<<8|d[x+1|0],E)|0;Q=E^65535;T=P+32768+(ea(e[B>>1]|0,Q)|0)|0;P=(T>>>16)+T|0;a[C]=P>>>24;a[C+1|0]=P>>>16;P=ea(A,E)|0;A=P+32768+(ea(e[R>>1]|0,Q)|0)|0;P=(A>>>16)+A|0;a[C+2|0]=P>>>24;a[C+3|0]=P>>>16;P=ea(z,E)|0;E=P+32768+(ea(e[y>>1]|0,Q)|0)|0;Q=(E>>>16)+E|0;a[C+4|0]=Q>>>24;a[C+5|0]=Q>>>16}D=D+1|0;if((D|0)==(t|0)){break}else{C=C+6|0;x=x+8|0}}}else{if(v){break}x=k+2|0;C=k+4|0;D=k+6|0;y=j+2|0;R=j+4|0;B=j+6|0;Q=g;E=0;P=g;while(1){z=d[P+6|0]<<8|d[P+7|0];if((z|0)==0){a[Q]=(e[y>>1]|0)>>>8;a[Q+1|0]=b[y>>1];a[Q+2|0]=(e[R>>1]|0)>>>8;a[Q+3|0]=b[R>>1];a[Q+4|0]=(e[B>>1]|0)>>>8;a[Q+5|0]=b[B>>1]}else if((z|0)==65535){A=b[(c[o+((d[P+1|0]|0)>>>r<<2)>>2]|0)+(d[P]<<1)>>1]|0;a[Q]=(A&65535)>>>8;a[Q+1|0]=A;A=b[(c[o+((d[P+3|0]|0)>>>r<<2)>>2]|0)+(d[P+2|0]<<1)>>1]|0;a[Q+2|0]=(A&65535)>>>8;a[Q+3|0]=A;A=b[(c[o+((d[P+5|0]|0)>>>r<<2)>>2]|0)+(d[P+4|0]<<1)>>1]|0;a[Q+4|0]=(A&65535)>>>8;a[Q+5|0]=A}else{A=ea(e[(c[q+((d[P+1|0]|0)>>>r<<2)>>2]|0)+(d[P]<<1)>>1]|0,z)|0;T=z^65535;S=A+32768+(ea(e[x>>1]|0,T)|0)|0;A=(S>>>16)+S|0;S=b[(c[p+((A>>>16&255)>>>r<<2)>>2]|0)+(A>>>24<<1)>>1]|0;a[Q]=(S&65535)>>>8;a[Q+1|0]=S;S=ea(e[(c[q+((d[P+3|0]|0)>>>r<<2)>>2]|0)+(d[P+2|0]<<1)>>1]|0,z)|0;A=S+32768+(ea(e[C>>1]|0,T)|0)|0;S=(A>>>16)+A|0;A=b[(c[p+((S>>>16&255)>>>r<<2)>>2]|0)+(S>>>24<<1)>>1]|0;a[Q+2|0]=(A&65535)>>>8;a[Q+3|0]=A;A=ea(e[(c[q+((d[P+5|0]|0)>>>r<<2)>>2]|0)+(d[P+4|0]<<1)>>1]|0,z)|0;z=A+32768+(ea(e[D>>1]|0,T)|0)|0;T=(z>>>16)+z|0;z=b[(c[p+((T>>>16&255)>>>r<<2)>>2]|0)+(T>>>24<<1)>>1]|0;a[Q+4|0]=(z&65535)>>>8;a[Q+5|0]=z}E=E+1|0;if((E|0)==(t|0)){break}else{Q=Q+6|0;P=P+8|0}}}}}}while(0);r=d[u]|0;if((r&4|0)==0){i=s;return}a[u]=r&251;r=f+10|0;u=(a[r]|0)+ -1<<24>>24;a[r]=u;r=ea(u&255,d[f+9|0]|0)|0;a[f+11|0]=r;u=r&255;if(u>>>0>7){X=ea(u>>>3,t)|0}else{X=((ea(u,t)|0)+7|0)>>>3}c[f+4>>2]=X;i=s;return}function xr(e,f,g,h,j){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;k=i;l=c[e>>2]|0;m=e+9|0;n=a[m]|0;if((n&255)>8|(g|0)==0){if(n<<24>>24!=16|(h|0)==0){i=k;return}}o=d[e+8|0]|0;if((o|0)==6){e=(l|0)==0;if(n<<24>>24==8){if(e){i=k;return}else{p=0;q=f}while(1){a[q]=a[g+(d[q]|0)|0]|0;r=q+1|0;a[r]=a[g+(d[r]|0)|0]|0;r=q+2|0;a[r]=a[g+(d[r]|0)|0]|0;p=p+1|0;if((p|0)==(l|0)){break}else{q=q+4|0}}i=k;return}else{if(e){i=k;return}else{s=0;t=f}while(1){e=t+1|0;q=b[(c[h+((d[e]|0)>>>j<<2)>>2]|0)+((d[t]|0)<<1)>>1]|0;a[t]=(q&65535)>>>8;a[e]=q;q=t+2|0;e=t+3|0;p=b[(c[h+((d[e]|0)>>>j<<2)>>2]|0)+((d[q]|0)<<1)>>1]|0;a[q]=(p&65535)>>>8;a[e]=p;p=t+4|0;e=t+5|0;q=b[(c[h+((d[e]|0)>>>j<<2)>>2]|0)+((d[p]|0)<<1)>>1]|0;a[p]=(q&65535)>>>8;a[e]=q;s=s+1|0;if((s|0)==(l|0)){break}else{t=t+8|0}}i=k;return}}else if((o|0)==2){t=(l|0)==0;if(n<<24>>24==8){if(t){i=k;return}else{u=0;v=f}while(1){a[v]=a[g+(d[v]|0)|0]|0;s=v+1|0;a[s]=a[g+(d[s]|0)|0]|0;s=v+2|0;a[s]=a[g+(d[s]|0)|0]|0;u=u+1|0;if((u|0)==(l|0)){break}else{v=v+3|0}}i=k;return}else{if(t){i=k;return}else{w=0;x=f}while(1){t=x+1|0;v=b[(c[h+((d[t]|0)>>>j<<2)>>2]|0)+((d[x]|0)<<1)>>1]|0;a[x]=(v&65535)>>>8;a[t]=v;v=x+2|0;t=x+3|0;u=b[(c[h+((d[t]|0)>>>j<<2)>>2]|0)+((d[v]|0)<<1)>>1]|0;a[v]=(u&65535)>>>8;a[t]=u;u=x+4|0;t=x+5|0;v=b[(c[h+((d[t]|0)>>>j<<2)>>2]|0)+((d[u]|0)<<1)>>1]|0;a[u]=(v&65535)>>>8;a[t]=v;w=w+1|0;if((w|0)==(l|0)){break}else{x=x+6|0}}i=k;return}}else if((o|0)==4){x=(l|0)==0;if(n<<24>>24==8){if(x){i=k;return}else{y=0;z=f}while(1){a[z]=a[g+(d[z]|0)|0]|0;y=y+1|0;if((y|0)==(l|0)){break}else{z=z+2|0}}i=k;return}else{if(x){i=k;return}else{A=0;B=f}while(1){x=B+1|0;z=b[(c[h+((d[x]|0)>>>j<<2)>>2]|0)+((d[B]|0)<<1)>>1]|0;a[B]=(z&65535)>>>8;a[x]=z;A=A+1|0;if((A|0)==(l|0)){break}else{B=B+4|0}}i=k;return}}else if((o|0)==0){if(n<<24>>24==2){if((l|0)==0){i=k;return}else{C=0;D=f}while(1){o=d[D]|0;B=o&192;A=o&48;z=o&12;x=o&3;a[D]=(d[g+(A<<2|A|A>>>2|A>>>4)|0]|0)>>>2&48|a[g+(o>>>6|B|B>>>2|B>>>4)|0]&192|(d[g+(z<<2|z|z<<4|z>>>2)|0]|0)>>>4&12|(d[g+(x<<4|x|x<<6|x<<2)|0]|0)>>>6;C=C+4|0;if(!(C>>>0<l>>>0)){break}else{D=D+1|0}}E=a[m]|0}else{E=n}if(E<<24>>24==16){if((l|0)==0){i=k;return}else{F=0;G=f}while(1){n=G+1|0;m=b[(c[h+((d[n]|0)>>>j<<2)>>2]|0)+((d[G]|0)<<1)>>1]|0;a[G]=(m&65535)>>>8;a[n]=m;F=F+1|0;if((F|0)==(l|0)){break}else{G=G+2|0}}i=k;return}else if(E<<24>>24==8){if((l|0)==0){i=k;return}else{H=0;I=f}while(1){a[I]=a[g+(d[I]|0)|0]|0;H=H+1|0;if((H|0)==(l|0)){break}else{I=I+1|0}}i=k;return}else if(E<<24>>24==4){if((l|0)==0){i=k;return}else{J=0;K=f}while(1){f=d[K]|0;E=f&15;a[K]=(d[g+(E<<4|E)|0]|0)>>>4|a[g+(f&240|f>>>4)|0]&240;J=J+2|0;if(!(J>>>0<l>>>0)){break}else{K=K+1|0}}i=k;return}else{i=k;return}}else{i=k;return}}function yr(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;h=i;j=c[b>>2]|0;k=b+8|0;l=a[k]|0;m=(f|0)==0;if(!(l<<24>>24!=2|m)){n=b+9|0;if((a[n]|0)==8){if((j|0)==0){o=8}else{p=e;q=0;r=e;while(1){a[p]=a[f+((d[r+1|0]|0)>>>3<<5|(d[r]|0)>>>3<<10|(d[r+2|0]|0)>>>3)|0]|0;q=q+1|0;if((q|0)==(j|0)){break}else{p=p+1|0;r=r+3|0}}o=a[n]|0}a[k]=3;a[b+10|0]=1;a[b+11|0]=o;n=o&255;if((o&255)>7){s=ea(n>>>3,j)|0}else{s=((ea(n,j)|0)+7|0)>>>3}c[b+4>>2]=s;i=h;return}}if(!(l<<24>>24!=6|m)){m=b+9|0;if((a[m]|0)==8){if((j|0)==0){t=8}else{s=e;n=0;o=e;while(1){a[s]=a[f+((d[o+1|0]|0)>>>3<<5|(d[o]|0)>>>3<<10|(d[o+2|0]|0)>>>3)|0]|0;n=n+1|0;if((n|0)==(j|0)){break}else{s=s+1|0;o=o+4|0}}t=a[m]|0}a[k]=3;a[b+10|0]=1;a[b+11|0]=t;k=t&255;if((t&255)>7){u=ea(k>>>3,j)|0}else{u=((ea(k,j)|0)+7|0)>>>3}c[b+4>>2]=u;i=h;return}}if(l<<24>>24!=3|(g|0)==0){i=h;return}if((a[b+9|0]|0)!=8|(j|0)==0){i=h;return}else{v=0;w=e}while(1){a[w]=a[g+(d[w]|0)|0]|0;v=v+1|0;if((v|0)==(j|0)){break}else{w=w+1|0}}i=h;return}function zr(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;i=i+16|0;h=g;j=a[b+8|0]|0;if(j<<24>>24==3){i=g;return}k=c[b>>2]|0;l=d[b+9|0]|0;if((j&2)==0){c[h>>2]=l-(d[f+3|0]|0);m=1}else{c[h>>2]=l-(d[f]|0);c[h+4>>2]=l-(d[f+1|0]|0);c[h+8>>2]=l-(d[f+2|0]|0);m=3}if((j&4)==0){n=m}else{c[h+(m<<2)>>2]=l-(d[f+4|0]|0);n=m+1|0}m=0;f=0;while(1){j=h+(m<<2)|0;if((c[j>>2]|0)<1){c[j>>2]=0;o=f}else{o=1}m=m+1|0;if((m|0)>=(n|0)){break}else{f=o}}if(o<<16>>16==0){i=g;return}if((l|0)==16){o=ea(n,k)|0;if((o|0)==0){i=g;return}else{p=e;q=0}while(1){f=p+1|0;m=((d[p]|0)<<8|(d[f]|0))>>>(c[h+(((q>>>0)%(n>>>0)|0)<<2)>>2]|0);a[p]=m>>>8;a[f]=m;q=q+1|0;if((q|0)==(o|0)){break}else{p=p+2|0}}i=g;return}else if((l|0)==8){p=ea(n,k)|0;if((p|0)==0){i=g;return}else{r=e;s=0}while(1){a[r]=(d[r]|0)>>>(c[h+(((s>>>0)%(n>>>0)|0)<<2)>>2]|0);s=s+1|0;if((s|0)==(p|0)){break}else{r=r+1|0}}i=g;return}else if((l|0)==4){r=c[b+4>>2]|0;p=c[h>>2]|0;if((r|0)==0){i=g;return}s=240>>>p&240|15>>>p;n=p;p=e;k=1;while(1){a[p]=(d[p]|0)>>>n&s;if((k|0)==(r|0)){break}n=c[h>>2]|0;p=p+1|0;k=k+1|0}i=g;return}else if((l|0)==2){l=c[b+4>>2]|0;if((l|0)==0){i=g;return}else{t=e;u=0}while(1){a[t]=(d[t]|0)>>>1&85;u=u+1|0;if((u|0)==(l|0)){break}else{t=t+1|0}}i=g;return}else{i=g;return}}function Ar(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;g=b+9|0;h=a[g]|0;if(!((h&255)<8)){i=f;return}j=h&255;h=c[b>>2]|0;if((j|0)==4){k=h+ -1|0;if((h|0)!=0){l=e+k|0;m=0;n=h<<2&4;o=e+(k>>>1)|0;while(1){a[l]=(d[o]|0)>>>n&15;k=(n|0)==4;m=m+1|0;if((m|0)==(h|0)){break}else{l=l+ -1|0;n=k?0:4;o=k?o+ -1|0:o}}}}else if((j|0)==1){o=h+ -1|0;if((h|0)!=0){n=e+o|0;l=0;m=h+7&7^7;k=e+(o>>>3)|0;while(1){a[n]=(d[k]|0)>>>m&1;o=(m|0)==7;l=l+1|0;if((l|0)==(h|0)){break}else{n=n+ -1|0;m=o?0:m+1|0;k=o?k+ -1|0:k}}}}else if((j|0)==2){j=h+ -1|0;if((h|0)!=0){k=e+j|0;m=0;n=(h<<1)+6&6^6;l=e+(j>>>2)|0;while(1){a[k]=(d[l]|0)>>>n&3;j=(n|0)==6;m=m+1|0;if((m|0)==(h|0)){break}else{k=k+ -1|0;n=j?0:n+2|0;l=j?l+ -1|0:l}}}}a[g]=8;g=d[b+10|0]|0;a[b+11|0]=g<<3;c[b+4>>2]=ea(g,h)|0;i=f;return}function Br(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;g=i;h=c[b>>2]|0;j=e>>>8&255;k=e&255;e=a[b+8|0]|0;if(e<<24>>24==0){l=a[b+9|0]|0;if(l<<24>>24==8){m=d+h|0;n=h<<1;o=d+n|0;if((f&128|0)==0){if((h|0)!=0){p=o;q=0;r=m;do{r=r+ -1|0;a[p+ -1|0]=a[r]|0;p=p+ -2|0;a[p]=k;q=q+1|0}while((q|0)!=(h|0))}a[b+10|0]=2;a[b+11|0]=16;c[b+4>>2]=n;i=g;return}else{a[d+(n+ -1)|0]=k;if(h>>>0>1){q=o;o=1;p=m;while(1){m=p+ -1|0;r=q+ -2|0;a[r]=a[m]|0;s=o+1|0;a[q+ -3|0]=k;if((s|0)==(h|0)){break}else{q=r;o=s;p=m}}}a[b+10|0]=2;a[b+11|0]=16;c[b+4>>2]=n;i=g;return}}else if(l<<24>>24==16){l=d+(h<<1)|0;n=h<<2;p=d+n|0;if((f&128|0)==0){if((h|0)!=0){o=p;q=0;m=l;do{a[o+ -1|0]=a[m+ -1|0]|0;m=m+ -2|0;a[o+ -2|0]=a[m]|0;a[o+ -3|0]=j;o=o+ -4|0;a[o]=k;q=q+1|0}while((q|0)!=(h|0))}a[b+10|0]=2;a[b+11|0]=32;c[b+4>>2]=n;i=g;return}else{a[d+(n+ -1)|0]=j;a[d+(n+ -2)|0]=k;if(h>>>0>1){q=p;p=1;o=l;while(1){a[q+ -3|0]=a[o+ -1|0]|0;l=o+ -2|0;m=q+ -4|0;a[m]=a[l]|0;s=p+1|0;a[q+ -5|0]=j;a[q+ -6|0]=k;if((s|0)==(h|0)){break}else{q=m;p=s;o=l}}}a[b+10|0]=2;a[b+11|0]=32;c[b+4>>2]=n;i=g;return}}else{i=g;return}}else if(e<<24>>24==2){e=a[b+9|0]|0;if(e<<24>>24==8){n=h*3|0;o=d+n|0;p=n+h|0;n=d+p|0;if((f&128|0)==0){if((h|0)!=0){q=n;l=0;s=o;do{a[q+ -1|0]=a[s+ -1|0]|0;a[q+ -2|0]=a[s+ -2|0]|0;s=s+ -3|0;a[q+ -3|0]=a[s]|0;q=q+ -4|0;a[q]=k;l=l+1|0}while((l|0)!=(h|0))}a[b+10|0]=4;a[b+11|0]=32;c[b+4>>2]=h<<2;i=g;return}else{a[d+(p+ -1)|0]=k;if(h>>>0>1){p=n;n=1;l=o;while(1){a[p+ -2|0]=a[l+ -1|0]|0;a[p+ -3|0]=a[l+ -2|0]|0;o=l+ -3|0;q=p+ -4|0;a[q]=a[o]|0;s=n+1|0;a[p+ -5|0]=k;if((s|0)==(h|0)){break}else{p=q;n=s;l=o}}}a[b+10|0]=4;a[b+11|0]=32;c[b+4>>2]=h<<2;i=g;return}}else if(e<<24>>24==16){e=h*6|0;l=d+e|0;n=e+(h<<1)|0;e=d+n|0;if((f&128|0)==0){if((h|0)!=0){f=e;p=0;o=l;do{a[f+ -1|0]=a[o+ -1|0]|0;a[f+ -2|0]=a[o+ -2|0]|0;a[f+ -3|0]=a[o+ -3|0]|0;a[f+ -4|0]=a[o+ -4|0]|0;a[f+ -5|0]=a[o+ -5|0]|0;o=o+ -6|0;a[f+ -6|0]=a[o]|0;a[f+ -7|0]=j;f=f+ -8|0;a[f]=k;p=p+1|0}while((p|0)!=(h|0))}a[b+10|0]=4;a[b+11|0]=64;c[b+4>>2]=h<<3;i=g;return}else{a[d+(n+ -1)|0]=j;a[d+(n+ -2)|0]=k;if(h>>>0>1){n=e;e=1;d=l;while(1){a[n+ -3|0]=a[d+ -1|0]|0;a[n+ -4|0]=a[d+ -2|0]|0;a[n+ -5|0]=a[d+ -3|0]|0;a[n+ -6|0]=a[d+ -4|0]|0;a[n+ -7|0]=a[d+ -5|0]|0;l=d+ -6|0;p=n+ -8|0;a[p]=a[l]|0;f=e+1|0;a[n+ -9|0]=j;a[n+ -10|0]=k;if((f|0)==(h|0)){break}else{n=p;e=f;d=l}}}a[b+10|0]=4;a[b+11|0]=64;c[b+4>>2]=h<<3;i=g;return}}else{i=g;return}}else{i=g;return}}function Cr(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;f=i;g=c[b>>2]|0;h=a[b+8|0]|0;if(h<<24>>24==4){j=e+(c[b+4>>2]|0)|0;k=(g|0)==0;if((a[b+9|0]|0)==8){if(k){i=f;return}else{l=j;m=0}while(1){n=l+ -1|0;a[n]=d[n]^255;m=m+1|0;if((m|0)==(g|0)){break}else{l=l+ -2|0}}i=f;return}else{if(k){i=f;return}else{o=0;p=j}while(1){j=p+ -1|0;a[j]=d[j]^255;j=p+ -2|0;a[j]=d[j]^255;o=o+1|0;if((o|0)==(g|0)){break}else{p=p+ -4|0}}i=f;return}}else if(h<<24>>24==6){h=e+(c[b+4>>2]|0)|0;e=(g|0)==0;if((a[b+9|0]|0)==8){if(e){i=f;return}else{q=0;r=h}while(1){b=r+ -1|0;a[b]=d[b]^255;q=q+1|0;if((q|0)==(g|0)){break}else{r=r+ -4|0}}i=f;return}else{if(e){i=f;return}else{s=0;t=h}while(1){h=t+ -1|0;a[h]=d[h]^255;h=t+ -2|0;a[h]=d[h]^255;s=s+1|0;if((s|0)==(g|0)){break}else{t=t+ -8|0}}i=f;return}}else{i=f;return}}function Dr(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;e=i;f=c[b>>2]|0;g=a[b+8|0]|0;if(g<<24>>24==6){h=d+(c[b+4>>2]|0)|0;j=(f|0)==0;if((a[b+9|0]|0)==8){if(j){i=e;return}else{k=0;l=h}do{m=l+ -1|0;n=a[m]|0;o=l+ -2|0;a[m]=a[o]|0;m=l+ -3|0;a[o]=a[m]|0;l=l+ -4|0;a[m]=a[l]|0;a[l]=n;k=k+1|0}while((k|0)!=(f|0));i=e;return}else{if(j){i=e;return}else{p=0;q=h}do{h=q+ -1|0;j=a[h]|0;k=q+ -2|0;l=a[k]|0;n=q+ -3|0;a[h]=a[n]|0;h=q+ -4|0;a[k]=a[h]|0;k=q+ -5|0;a[n]=a[k]|0;n=q+ -6|0;a[h]=a[n]|0;h=q+ -7|0;a[k]=a[h]|0;q=q+ -8|0;a[n]=a[q]|0;a[h]=j;a[q]=l;p=p+1|0}while((p|0)!=(f|0));i=e;return}}else if(g<<24>>24==4){g=d+(c[b+4>>2]|0)|0;d=(f|0)==0;if((a[b+9|0]|0)==8){if(d){i=e;return}else{r=g;s=0}do{b=r+ -1|0;p=a[b]|0;r=r+ -2|0;a[b]=a[r]|0;a[r]=p;s=s+1|0}while((s|0)!=(f|0));i=e;return}else{if(d){i=e;return}else{t=g;u=0}do{g=t+ -1|0;d=a[g]|0;s=t+ -2|0;r=a[s]|0;p=t+ -3|0;a[g]=a[p]|0;t=t+ -4|0;a[s]=a[t]|0;a[p]=d;a[t]=r;u=u+1|0}while((u|0)!=(f|0));i=e;return}}else{i=e;return}}function Er(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;f=i;g=a[b+8|0]|0;if((g&2)==0){i=f;return}h=c[b>>2]|0;j=a[b+9|0]|0;if(j<<24>>24==16){if(g<<24>>24==6){k=8}else if(g<<24>>24==2){k=6}else{i=f;return}if((h|0)==0){i=f;return}else{l=0;m=e}while(1){b=m+1|0;n=(d[m+2|0]|0)<<8|(d[m+3|0]|0);o=m+4|0;p=m+5|0;q=n+((d[m]|0)<<8|(d[b]|0))|0;r=((d[o]|0)<<8|(d[p]|0))+n|0;a[m]=q>>>8;a[b]=q;a[o]=r>>>8;a[p]=r;l=l+1|0;if((l|0)==(h|0)){break}else{m=m+k|0}}i=f;return}else if(j<<24>>24==8){if(g<<24>>24==2){s=3}else if(g<<24>>24==6){s=4}else{i=f;return}if((h|0)==0){i=f;return}else{t=0;u=e}while(1){e=d[u+1|0]|0;a[u]=e+(d[u]|0);g=u+2|0;a[g]=e+(d[g]|0);t=t+1|0;if((t|0)==(h|0)){break}else{u=u+s|0}}i=f;return}else{i=f;return}}function Fr(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;i=i+16|0;f=e;g=b+744|0;c[g>>2]=33;jr(b,f,8);h=(d[f+1|0]|0)<<16|(d[f]|0)<<24|(d[f+2|0]|0)<<8|(d[f+3|0]|0);if((h|0)<0){Hq(b,49680)}j=b+380|0;k=f+4|0;f=d[k]|d[k+1|0]<<8|d[k+2|0]<<16|d[k+3|0]<<24;a[j]=f;a[j+1|0]=f>>8;a[j+2|0]=f>>16;a[j+3|0]=f>>24;xq(b);yq(b,j,4);f=a[j]|0;if(!((f+ -65<<24>>24&255)>57|(f+ -91<<24>>24&255)<6)){f=a[b+381|0]|0;if(!((f+ -65<<24>>24&255)>57|(f+ -91<<24>>24&255)<6)){f=a[b+382|0]|0;if(!((f+ -65<<24>>24&255)>57|(f+ -91<<24>>24&255)<6)){f=a[b+383|0]|0;if(!((f+ -65<<24>>24&255)>57|(f+ -91<<24>>24&255)<6)){c[g>>2]=65;i=e;return h|0}}}}Jq(b,53784);c[g>>2]=65;i=e;return h|0}function Gr(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;if((a|0)==0){i=d;return}jr(a,b,c);yq(a,b,c);i=d;return}function Hr(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;g=f;h=b+272|0;j=c[h>>2]|0;a:do{if(j>>>0<e>>>0){k=b+268|0;l=j;m=e;while(1){n=c[k>>2]|0;jr(b,n,l);yq(b,n,l);n=m-j|0;if(!(n>>>0>j>>>0)){o=n;break a}l=c[h>>2]|0;m=n}}else{o=e}}while(0);if((o|0)!=0){e=c[b+268>>2]|0;if((b|0)!=0){jr(b,e,o);yq(b,e,o)}}o=b+380|0;e=b+204|0;h=c[e>>2]|0;if((a[o]&32)==0){c[b+744>>2]=129;jr(b,g,4);if((h&2048|0)!=0){p=0;i=f;return p|0}}else{c[b+744>>2]=129;jr(b,g,4);if((h&768|0)==768){p=0;i=f;return p|0}}if(((d[g+1|0]|0)<<16|(d[g]|0)<<24|(d[g+2|0]|0)<<8|(d[g+3|0]|0)|0)==(c[b+368>>2]|0)){p=0;i=f;return p|0}g=c[e>>2]|0;if((a[o]&32)==0){if((g&1024|0)==0){q=16}else{q=15}}else{if((g&512|0)==0){q=15}else{q=16}}if((q|0)==15){Lq(b,49720);p=1;i=f;return p|0}else if((q|0)==16){Jq(b,49720);p=0;i=f;return p|0}return 0}function Ir(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;h=i;i=i+64|0;j=h;k=h+4|0;do{if(f>>>0>e>>>0){Iq(b,49736);l=0}else{if((d|0)!=0){c[j>>2]=d;id(k|0,50,49872,j|0)|0;Iq(b,k);l=f;break}m=b+740|0;n=e-f|0;o=Jr(b,(c[m>>2]|0)+f|0,n,0,0)|0;p=c[b+316>>2]|0;if((p|0)!=0){if(!((o+f|0)>>>0<(p+ -1|0)>>>0)){Iq(b,49760);l=f;break}}if((o|0)==0){l=f}else{p=o+f|0;q=_q(b,p+1|0)|0;if((q|0)==0){Iq(b,49832);l=f;break}tu(q|0,c[m>>2]|0,f|0)|0;r=Jr(b,(c[m>>2]|0)+f|0,n,q+f|0,o)|0;a[q+p|0]=0;if((r|0)!=(o|0)){Iq(b,49808);Zq(b,q);l=f;break}Zq(b,c[m>>2]|0);c[m>>2]=q;s=p;c[g>>2]=s;i=h;return}}}while(0);f=_q(b,l+1|0)|0;if((f|0)==0){s=l;c[g>>2]=s;i=h;return}e=b+740|0;if((l|0)!=0){tu(f|0,c[e>>2]|0,l|0)|0}Zq(b,c[e>>2]|0);c[e>>2]=f;a[f+l|0]=0;s=l;c[g>>2]=s;i=h;return}function Jr(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;g=i;i=i+64|0;h=g;j=g+4|0;k=a+212|0;c[k>>2]=b;b=a+216|0;c[b>>2]=d;d=a+268|0;l=a+224|0;m=a+272|0;n=a+228|0;if((e|0)==0){o=c[m>>2]|0;p=0;while(1){c[l>>2]=c[d>>2];c[n>>2]=o;q=Ns(k,0)|0;r=c[m>>2]|0;s=r-(c[n>>2]|0)|0;t=p+(q>>>0<2&(s|0)>0?s:0)|0;if((q|0)==0){o=r;p=t}else{u=q;v=t;break}}}else{p=0;while(1){c[l>>2]=c[d>>2];c[n>>2]=c[m>>2];o=Ns(k,0)|0;t=(c[m>>2]|0)-(c[n>>2]|0)|0;q=(o|0)==0;if(o>>>0<2&(t|0)>0){if(p>>>0<f>>>0){r=f-p|0;tu(e+p|0,c[d>>2]|0,((t|0)<(r|0)?t:r)|0)|0}w=t+p|0}else{w=p}if(q){p=w}else{u=o;v=w;break}}}c[b>>2]=0;Ks(k)|0;if((u|0)==1){x=v;i=g;return x|0}v=c[a+236>>2]|0;if((v|0)==0){if((u|0)==-3){y=54184}else if((u|0)==-5){y=54128}else{y=54232}c[h>>2]=a+380;id(j|0,52,y|0,h|0)|0;z=j}else{z=v}Iq(a,z);x=0;i=g;return x|0}function Kr(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;g=i;i=i+16|0;h=g;j=b+200|0;if((c[j>>2]&1|0)!=0){Hq(b,49912)}if((f|0)!=13){Hq(b,49936)}c[j>>2]=c[j>>2]|1;if((b|0)!=0){jr(b,h,13);yq(b,h,13)}Hr(b,0)|0;j=(d[h+1|0]|0)<<16|(d[h]|0)<<24|(d[h+2|0]|0)<<8|(d[h+3|0]|0);if((j|0)<0){Hq(b,49680)}f=(d[h+5|0]|0)<<16|(d[h+4|0]|0)<<24|(d[h+6|0]|0)<<8|(d[h+7|0]|0);if((f|0)<0){Hq(b,49680)}k=a[h+8|0]|0;l=k&255;m=a[h+9|0]|0;n=m&255;o=a[h+10|0]|0;p=o&255;q=a[h+11|0]|0;r=q&255;s=a[h+12|0]|0;h=s&255;c[b+296>>2]=j;c[b+300>>2]=f;a[b+391|0]=k;a[b+387|0]=s;a[b+390|0]=m;a[b+664|0]=q;a[b+696|0]=o;switch(n|0){case 4:{a[b+394|0]=2;t=2;break};case 2:{a[b+394|0]=3;t=3;break};case 3:case 0:{a[b+394|0]=1;t=1;break};case 6:{a[b+394|0]=4;t=4;break};default:{t=a[b+394|0]|0}}o=ea(t&255,l)|0;a[b+393|0]=o;t=o&255;if(t>>>0>7){u=ea(t>>>3,j)|0;v=b+312|0;c[v>>2]=u;os(b,e,j,f,l,n,h,p,r);i=g;return}else{u=((ea(t,j)|0)+7|0)>>>3;v=b+312|0;c[v>>2]=u;os(b,e,j,f,l,n,h,p,r);i=g;return}}function Lr(d,f,g){d=d|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;i=i+784|0;j=h+8|0;k=h;l=d+200|0;m=c[l>>2]|0;do{if((m&1|0)==0){Hq(d,49960)}else{if((m&4|0)==0){if((m&2|0)==0){break}Hq(d,50016);break}else{Iq(d,49992);Hr(d,g)|0;i=h;return}}}while(0);c[l>>2]=c[l>>2]|2;l=d+390|0;m=a[l]|0;if((m&2)==0){Iq(d,50040);Hr(d,g)|0;i=h;return}do{if(!(g>>>0<769&((g>>>0)%3|0|0)==0)){if(m<<24>>24==3){Hq(d,50080);break}Iq(d,50080);Hr(d,g)|0;i=h;return}}while(0);m=(g|0)/3|0;if((g|0)>2){g=k+1|0;n=k+2|0;if((d|0)==0){o=0;p=j;while(1){a[p]=a[k]|0;a[p+1|0]=a[g]|0;a[p+2|0]=a[n]|0;o=o+1|0;if((o|0)>=(m|0)){break}else{p=p+3|0}}}else{p=0;o=j;while(1){jr(d,k,3);yq(d,k,3);a[o]=a[k]|0;a[o+1|0]=a[g]|0;a[o+2|0]=a[n]|0;p=p+1|0;if((p|0)>=(m|0)){break}else{o=o+3|0}}}}Hr(d,0)|0;ts(d,f,j,m);if((a[l]|0)!=3|(f|0)==0){i=h;return}if((c[f+8>>2]&16|0)==0){i=h;return}l=d+378|0;j=m&65535;o=m&65535;if((e[l>>1]|0)>>>0>o>>>0){Iq(d,50104);b[l>>1]=j}l=f+22|0;if(!((e[l>>1]|0)>>>0>o>>>0)){i=h;return}Iq(d,50144);b[l>>1]=j;i=h;return}function Mr(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;b=i;e=a+200|0;f=c[e>>2]|0;if((f&5|0)==5){g=f}else{Hq(a,50192);g=c[e>>2]|0}c[e>>2]=g|24;if((d|0)!=0){Iq(a,50216)}Hr(a,d)|0;i=b;return}function Nr(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,h=0,j=0,k=0,l=0.0;f=i;i=i+16|0;h=f;j=f+4|0;k=c[a+200>>2]|0;do{if((k&1|0)==0){Hq(a,50248)}else{if((k&4|0)==0){if((k&2|0)==0){break}Iq(a,50304);break}else{Iq(a,50280);Hr(a,e)|0;i=f;return}}}while(0);k=(b|0)!=0;if(k){if((c[b+8>>2]&2049|0)==1){Iq(a,50328);Hr(a,e)|0;i=f;return}}if((e|0)!=4){Iq(a,50352);Hr(a,e)|0;i=f;return}if((a|0)!=0){jr(a,j,4);yq(a,j,4)}if((Hr(a,0)|0)!=0){i=f;return}e=(d[j+1|0]|0)<<16|(d[j]|0)<<24|(d[j+2|0]|0)<<8|(d[j+3|0]|0);if((e|0)==0){Iq(a,50384);i=f;return}if(k){if((c[b+8>>2]&2048|0)!=0){if((e+ -45e3|0)>>>0>1e3){Iq(a,50424);k=c[r>>2]|0;c[h>>2]=e;Re(k|0,50480,h|0)|0;i=f;return}}}l=+(e|0)/1.0e5;g[a+444>>2]=l;ls(a,b,l);ms(a,b,e);i=f;return}function Or(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;i=i+16|0;h=g;j=h+3|0;k=h+2|0;l=h+1|0;c[h>>2]=0;m=c[b+200>>2]|0;do{if((m&1|0)==0){Hq(b,50504)}else{if((m&4|0)==0){if((m&2|0)==0){break}Iq(b,50560);break}else{Iq(b,50536);Hr(b,f)|0;i=g;return}}}while(0);if((e|0)!=0){if((c[e+8>>2]&2|0)!=0){Iq(b,50584);Hr(b,f)|0;i=g;return}}m=b+390|0;if((a[m]|0)==3){n=3}else{n=d[b+394|0]|0}if((n|0)!=(f|0)|f>>>0>4){Iq(b,50608);Hr(b,f)|0;i=g;return}if((b|0)!=0){jr(b,h,f);yq(b,h,f)}if((Hr(b,0)|0)!=0){i=g;return}f=a[h]|0;h=b+476|0;if((a[m]&2)==0){vu(h|0,f|0,4)|0;a[b+480|0]=a[l]|0}else{a[h]=f;a[b+477|0]=a[l]|0;a[b+478|0]=a[k]|0;a[b+480|0]=a[j]|0}us(b,e,h);i=g;return}function Pr(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0;f=i;i=i+64|0;g=f;j=f+32|0;l=c[a+200>>2]|0;do{if((l&1|0)==0){Hq(a,50640)}else{if((l&4|0)==0){if((l&2|0)==0){break}Iq(a,50696);break}else{Iq(a,50672);Hr(a,e)|0;i=f;return}}}while(0);l=(b|0)!=0;if(l){if((c[b+8>>2]&2052|0)==4){Iq(a,50728);Hr(a,e)|0;i=f;return}}if((e|0)!=32){Iq(a,50752);Hr(a,e)|0;i=f;return}if((a|0)!=0){jr(a,j,32);yq(a,j,32)}if((Hr(a,0)|0)!=0){i=f;return}e=(d[j+1|0]|0)<<16|(d[j]|0)<<24|(d[j+2|0]|0)<<8|(d[j+3|0]|0);m=(d[j+5|0]|0)<<16|(d[j+4|0]|0)<<24|(d[j+6|0]|0)<<8|(d[j+7|0]|0);n=(d[j+9|0]|0)<<16|(d[j+8|0]|0)<<24|(d[j+10|0]|0)<<8|(d[j+11|0]|0);o=(d[j+13|0]|0)<<16|(d[j+12|0]|0)<<24|(d[j+14|0]|0)<<8|(d[j+15|0]|0);p=(d[j+17|0]|0)<<16|(d[j+16|0]|0)<<24|(d[j+18|0]|0)<<8|(d[j+19|0]|0);q=(d[j+21|0]|0)<<16|(d[j+20|0]|0)<<24|(d[j+22|0]|0)<<8|(d[j+23|0]|0);s=(d[j+25|0]|0)<<16|(d[j+24|0]|0)<<24|(d[j+26|0]|0)<<8|(d[j+27|0]|0);t=(d[j+29|0]|0)<<16|(d[j+28|0]|0)<<24|(d[j+30|0]|0)<<8|(d[j+31|0]|0);u=+(e|0)/1.0e5;v=+(m|0)/1.0e5;w=+(n|0)/1.0e5;x=+(o|0)/1.0e5;y=+(p|0)/1.0e5;z=+(q|0)/1.0e5;A=+(s|0)/1.0e5;B=+(t|0)/1.0e5;if(l){if((c[b+8>>2]&2048|0)!=0){if(!((e+ -30270|0)>>>0>2e3)){if(!((m+ -31900|0)>>>0>2e3)){if(!((n+ -63e3|0)>>>0>2e3)){if(!((o+ -32e3|0)>>>0>2e3)){if(!((p+ -29e3|0)>>>0>2e3)){if(!((q+ -59e3|0)>>>0>2e3)){if(!((s+ -14e3|0)>>>0>2e3)){if(!((t+ -5e3|0)>>>0>2e3)){i=f;return}}}}}}}}Iq(a,50784);l=c[r>>2]|0;h[k>>3]=u;c[g>>2]=c[k>>2];c[g+4>>2]=c[k+4>>2];j=g+8|0;h[k>>3]=v;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];j=g+16|0;h[k>>3]=w;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];j=g+24|0;h[k>>3]=x;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];Re(l|0,50840,g|0)|0;h[k>>3]=y;c[g>>2]=c[k>>2];c[g+4>>2]=c[k+4>>2];j=g+8|0;h[k>>3]=z;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];j=g+16|0;h[k>>3]=A;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];j=g+24|0;h[k>>3]=B;c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];Re(l|0,50872,g|0)|0;i=f;return}}js(a,b,u,v,w,x,y,z,A,B);ks(a,b,e,m,n,o,p,q,s,t);i=f;return}function Qr(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+16|0;g=f;h=f+4|0;j=c[b+200>>2]|0;do{if((j&1|0)==0){Hq(b,50904)}else{if((j&4|0)==0){if((j&2|0)==0){break}Iq(b,50960);break}else{Iq(b,50936);Hr(b,e)|0;i=f;return}}}while(0);j=(d|0)!=0;if(j){if((c[d+8>>2]&2048|0)!=0){Iq(b,50984);Hr(b,e)|0;i=f;return}}if((e|0)!=1){Iq(b,51008);Hr(b,e)|0;i=f;return}if((b|0)!=0){jr(b,h,1);yq(b,h,1)}if((Hr(b,0)|0)!=0){i=f;return}e=a[h]|0;h=e&255;if((e&255)>3){Iq(b,51040);i=f;return}do{if(j){e=d+8|0;k=c[e>>2]|0;if((k&1|0)==0){l=k}else{if(((c[d+252>>2]|0)+ -45e3|0)>>>0>1e3){Iq(b,50424);m=c[r>>2]|0;c[g>>2]=c[b+660>>2];Re(m|0,51064,g|0)|0;l=c[e>>2]|0}else{l=k}}if((l&4|0)!=0){if(!(((c[d+256>>2]|0)+ -30270|0)>>>0>2e3)){if(!(((c[d+260>>2]|0)+ -31900|0)>>>0>2e3)){if(!(((c[d+264>>2]|0)+ -63e3|0)>>>0>2e3)){if(!(((c[d+268>>2]|0)+ -32e3|0)>>>0>2e3)){if(!(((c[d+272>>2]|0)+ -29e3|0)>>>0>2e3)){if(!(((c[d+276>>2]|0)+ -59e3|0)>>>0>2e3)){if(!(((c[d+280>>2]|0)+ -14e3|0)>>>0>2e3)){if(!(((c[d+284>>2]|0)+ -5e3|0)>>>0>2e3)){break}}}}}}}}Iq(b,50784)}}}while(0);vs(b,d,h);i=f;return}function Rr(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;g=i;i=i+64|0;h=g;j=g+4|0;k=g+8|0;l=c[b+200>>2]|0;do{if((l&1|0)==0){Hq(b,51096)}else{if((l&4|0)==0){if((l&2|0)==0){break}Iq(b,51152);break}else{Iq(b,51128);Hr(b,f)|0;i=g;return}}}while(0);if((e|0)!=0){if((c[e+8>>2]&4096|0)!=0){Iq(b,51176);Hr(b,f)|0;i=g;return}}l=b+740|0;Zq(b,c[l>>2]|0);m=Yq(b,f+1|0)|0;c[l>>2]=m;if((b|0)!=0){jr(b,m,f);yq(b,m,f)}m=(Hr(b,0)|0)==0;n=c[l>>2]|0;if(!m){Zq(b,n);c[l>>2]=0;i=g;return}a[n+f|0]=0;n=c[l>>2]|0;m=n;while(1){o=m+1|0;if((a[m]|0)==0){break}else{m=o}}if(!(o>>>0<(n+(f+ -1)|0)>>>0)){Zq(b,n);c[l>>2]=0;Iq(b,51200);i=g;return}if((a[o]|0)==0){p=n}else{Iq(b,51224);p=c[l>>2]|0}n=m+2-p|0;Ir(b,0,f,n,j);f=c[j>>2]|0;j=f-n|0;p=c[l>>2]|0;if(n>>>0>f>>>0|j>>>0<4){Zq(b,p);c[l>>2]=0;Iq(b,51272);i=g;return}f=p+n|0;m=d[p+(n+1)|0]<<16|d[f]<<24|d[p+(n+2)|0]<<8|d[p+(n+3)|0];n=m>>>0<j>>>0?m:j;if(m>>>0>n>>>0){Zq(b,p);c[l>>2]=0;Iq(b,51320);c[h>>2]=m;id(k|0,50,51352,h|0)|0;Iq(b,k);c[h>>2]=n;id(k|0,50,51384,h|0)|0;Iq(b,k);i=g;return}else{ws(b,e,p,0,f,n);Zq(b,c[l>>2]|0);c[l>>2]=0;i=g;return}}function Sr(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;h=i;i=i+16|0;j=h;k=e+708|0;l=c[k>>2]|0;if((l|0)==1){Hr(e,g)|0;i=h;return}else if((l|0)!=0){m=3}if((m|0)==3){m=l+ -1|0;c[k>>2]=m;if((m|0)==1){Iq(e,51416);Hr(e,g)|0;i=h;return}}m=c[e+200>>2]|0;if((m&1|0)==0){Hq(e,51456)}else{if((m&4|0)!=0){Iq(e,51488);Hr(e,g)|0;i=h;return}}m=e+740|0;Zq(e,c[m>>2]|0);k=Yq(e,g+1|0)|0;c[m>>2]=k;if((e|0)!=0){jr(e,k,g);yq(e,k,g)}k=(Hr(e,0)|0)==0;l=c[m>>2]|0;if(!k){Zq(e,l);c[m>>2]=0;i=h;return}a[l+g|0]=0;l=c[m>>2]|0;k=l;while(1){n=k+1|0;if((a[k]|0)==0){break}else{k=n}}if(n>>>0>(l+(g+ -2)|0)>>>0){Zq(e,l);c[m>>2]=0;Iq(e,51512);i=h;return}o=k+2|0;k=a[n]|0;n=j+4|0;a[n]=k;p=k<<24>>24==8?6:10;q=l-o+g|0;if(((q|0)%(p|0)|0|0)!=0){Zq(e,l);c[m>>2]=0;Iq(e,51536);i=h;return}l=(q|0)/(p|0)|0;c[j+12>>2]=l;if(l>>>0>429496729){Iq(e,51568);i=h;return}p=_q(e,l*10|0)|0;q=j+8|0;c[q>>2]=p;if((p|0)==0){Iq(e,51592);i=h;return}a:do{if((l|0)>0){g=k;r=o;s=0;while(1){t=p+(s*10|0)|0;if(g<<24>>24==8){b[t>>1]=d[r]|0;b[p+(s*10|0)+2>>1]=d[r+1|0]|0;b[p+(s*10|0)+4>>1]=d[r+2|0]|0;b[p+(s*10|0)+6>>1]=d[r+3|0]|0;u=r+4|0}else{b[t>>1]=d[r]<<8|d[r+1|0];b[p+(s*10|0)+2>>1]=d[r+2|0]<<8|d[r+3|0];b[p+(s*10|0)+4>>1]=d[r+4|0]<<8|d[r+5|0];b[p+(s*10|0)+6>>1]=d[r+6|0]<<8|d[r+7|0];u=r+8|0}b[p+(s*10|0)+8>>1]=d[u]<<8|d[u+1|0];t=s+1|0;if((t|0)>=(l|0)){break a}g=a[n]|0;r=u+2|0;s=t}}}while(0);c[j>>2]=c[m>>2];As(e,f,j,1);Zq(e,c[m>>2]|0);c[m>>2]=0;Zq(e,c[q>>2]|0);i=h;return}function Tr(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0;j=i;i=i+272|0;k=j+8|0;l=j;m=j+2|0;n=f+200|0;o=c[n>>2]|0;if((o&1|0)==0){Hq(f,51632)}else{if((o&4|0)!=0){Iq(f,51664);Hr(f,h)|0;i=j;return}if((g|0)!=0){if((c[g+8>>2]&16|0)!=0){Iq(f,51688);Hr(f,h)|0;i=j;return}}}o=a[f+390|0]|0;if(o<<24>>24==2){if((h|0)!=6){Iq(f,51712);Hr(f,h)|0;i=j;return}if((f|0)!=0){jr(f,m,6);yq(f,m,6)}b[f+378>>1]=1;b[f+494>>1]=(d[m]|0)<<8|(d[m+1|0]|0);b[f+496>>1]=(d[m+2|0]|0)<<8|(d[m+3|0]|0);b[f+498>>1]=(d[m+4|0]|0)<<8|(d[m+5|0]|0)}else if(o<<24>>24==0){if((h|0)!=2){Iq(f,51712);Hr(f,h)|0;i=j;return}if((f|0)!=0){jr(f,l,2);yq(f,l,2)}b[f+378>>1]=1;b[f+500>>1]=(d[l]|0)<<8|(d[l+1|0]|0)}else if(o<<24>>24==3){if((c[n>>2]&2|0)==0){Iq(f,51744)}if((e[f+376>>1]|0)>>>0<h>>>0|h>>>0>256){Iq(f,51712);Hr(f,h)|0;i=j;return}if((h|0)==0){Iq(f,51776);Hr(f,0)|0;i=j;return}if((f|0)!=0){jr(f,k,h);yq(f,k,h)}b[f+378>>1]=h}else{Iq(f,51800);Hr(f,h)|0;i=j;return}h=f+378|0;if((Hr(f,0)|0)==0){zs(f,g,k,e[h>>1]|0,f+492|0);i=j;return}else{b[h>>1]=0;i=j;return}}function Ur(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;h=i;i=i+16|0;j=h;k=c[e+200>>2]|0;if((k&1|0)==0){Hq(e,51848);l=a[e+390|0]|0}else{if((k&4|0)!=0){Iq(e,51880);Hr(e,g)|0;i=h;return}m=a[e+390|0]|0;if(m<<24>>24==3){if((k&2|0)==0){Iq(e,51904);Hr(e,g)|0;i=h;return}}if((f|0)==0){l=m}else{if((c[f+8>>2]&32|0)==0){l=m}else{Iq(e,51936);Hr(e,g)|0;i=h;return}}}if(l<<24>>24==3){n=1}else{n=(l&2)==0?2:6}if((n|0)!=(g|0)){Iq(e,51960);Hr(e,g)|0;i=h;return}if((e|0)!=0){jr(e,j,g);yq(e,j,g)}if((Hr(e,0)|0)!=0){i=h;return}g=a[e+390|0]|0;do{if(g<<24>>24==3){n=a[j]|0;a[e+408|0]=n;if((f|0)!=0){l=b[f+20>>1]|0;if(!(l<<16>>16==0)){m=n&255;if(m>>>0<(l&65535)>>>0){l=c[e+372>>2]|0;b[e+410>>1]=d[l+(m*3|0)|0]|0;b[e+412>>1]=d[l+(m*3|0)+1|0]|0;b[e+414>>1]=d[l+(m*3|0)+2|0]|0;break}Iq(e,51992);i=h;return}}}else{m=((d[j]|0)<<8|(d[j+1|0]|0))&65535;if((g&2)==0){b[e+416>>1]=m;b[e+414>>1]=m;b[e+412>>1]=m;b[e+410>>1]=m;break}else{b[e+410>>1]=m;b[e+412>>1]=(d[j+2|0]|0)<<8|(d[j+3|0]|0);b[e+414>>1]=(d[j+4|0]|0)<<8|(d[j+5|0]|0);break}}}while(0);is(e,f,e+408|0);i=h;return}function Vr(a,f,g){a=a|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0;h=i;i=i+528|0;j=h;k=h+512|0;l=c[a+200>>2]|0;if((l&1|0)==0){Hq(a,52032)}else{if((l&4|0)!=0){Iq(a,52064);Hr(a,g)|0;i=h;return}if((l&2|0)==0){Iq(a,52088);Hr(a,g)|0;i=h;return}if((f|0)!=0){if((c[f+8>>2]&64|0)!=0){Iq(a,52120);Hr(a,g)|0;i=h;return}}}l=g>>>1;if((l|0)!=(e[a+376>>1]|0|0)|g>>>0>513){Iq(a,52144);Hr(a,g)|0;i=h;return}if((l|0)!=0){g=k+1|0;if((a|0)==0){m=0;do{b[j+(m<<1)>>1]=(d[k]|0)<<8|(d[g]|0);m=m+1|0}while(m>>>0<l>>>0)}else{m=0;do{jr(a,k,2);yq(a,k,2);b[j+(m<<1)>>1]=(d[k]|0)<<8|(d[g]|0);m=m+1|0}while(m>>>0<l>>>0)}}if((Hr(a,0)|0)!=0){i=h;return}ns(a,f,j);i=h;return}function Wr(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0;f=i;i=i+16|0;g=f;h=c[a+200>>2]|0;if((h&1|0)==0){Hq(a,52176)}else{if((h&4|0)!=0){Iq(a,52208);Hr(a,e)|0;i=f;return}if((b|0)!=0){if((c[b+8>>2]&128|0)!=0){Iq(a,52232);Hr(a,e)|0;i=f;return}}}if((e|0)!=9){Iq(a,52256);Hr(a,e)|0;i=f;return}if((a|0)!=0){jr(a,g,9);yq(a,g,9)}if((Hr(a,0)|0)!=0){i=f;return}ss(a,b,(d[g+1|0]|0)<<16|(d[g]|0)<<24|(d[g+2|0]|0)<<8|(d[g+3|0]|0),(d[g+5|0]|0)<<16|(d[g+4|0]|0)<<24|(d[g+6|0]|0)<<8|(d[g+7|0]|0),d[g+8|0]|0);i=f;return}function Xr(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0;f=i;i=i+16|0;g=f;h=c[a+200>>2]|0;if((h&1|0)==0){Hq(a,52288)}else{if((h&4|0)!=0){Iq(a,52320);Hr(a,e)|0;i=f;return}if((b|0)!=0){if((c[b+8>>2]&256|0)!=0){Iq(a,52344);Hr(a,e)|0;i=f;return}}}if((e|0)!=9){Iq(a,52368);Hr(a,e)|0;i=f;return}if((a|0)!=0){jr(a,g,9);yq(a,g,9)}if((Hr(a,0)|0)!=0){i=f;return}ps(a,b,(d[g+1|0]|0)<<16|(d[g]|0)<<24|(d[g+2|0]|0)<<8|(d[g+3|0]|0),(d[g+5|0]|0)<<16|(d[g+4|0]|0)<<24|(d[g+6|0]|0)<<8|(d[g+7|0]|0),d[g+8|0]|0);i=f;return}function Yr(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;g=i;h=c[b+200>>2]|0;if((h&1|0)==0){Hq(b,52400)}else{if((h&4|0)!=0){Iq(b,52432);Hr(b,f)|0;i=g;return}if((e|0)!=0){if((c[e+8>>2]&1024|0)!=0){Iq(b,52456);Hr(b,f)|0;i=g;return}}}h=b+740|0;Zq(b,c[h>>2]|0);j=_q(b,f+1|0)|0;c[h>>2]=j;if((j|0)==0){Iq(b,52480);i=g;return}if((b|0)!=0){jr(b,j,f);yq(b,j,f)}j=(Hr(b,0)|0)==0;k=c[h>>2]|0;if(!j){Zq(b,k);c[h>>2]=0;i=g;return}a[k+f|0]=0;k=c[h>>2]|0;j=k;while(1){l=j+1|0;if((a[j]|0)==0){break}else{j=l}}m=k+f|0;if(!(m>>>0>(j+12|0)>>>0)){Iq(b,52512);Zq(b,c[h>>2]|0);c[h>>2]=0;i=g;return}f=d[j+2|0]<<16|d[l]<<24|d[j+3|0]<<8|d[j+4|0];l=d[j+6|0]<<16|d[j+5|0]<<24|d[j+7|0]<<8|d[j+8|0];k=a[j+9|0]|0;n=a[j+10|0]|0;o=j+11|0;j=k&255;if(k<<24>>24!=0|n<<24>>24==2){if((k+ -1<<24>>24&255)>1|n<<24>>24==3){if(k<<24>>24!=3|n<<24>>24==4){if((k&255)>3){Iq(b,52584);p=o}else{p=o}while(1){if((a[p]|0)==0){break}else{p=p+1|0}}k=n&255;q=_q(b,k<<2)|0;if((q|0)==0){Zq(b,c[h>>2]|0);c[h>>2]=0;Iq(b,52632);i=g;return}a:do{if(!(n<<24>>24==0)){r=p;s=0;b:while(1){t=r+1|0;c[q+(s<<2)>>2]=t;if(t>>>0>m>>>0){break}else{u=t}while(1){t=u+1|0;if((a[u]|0)==0){break}if(t>>>0>m>>>0){break b}else{u=t}}s=s+1|0;if((s|0)>=(k|0)){break a}else{r=u}}Iq(b,52512);Zq(b,c[h>>2]|0);c[h>>2]=0;Zq(b,q);i=g;return}}while(0);qs(b,e,c[h>>2]|0,f,l,j,k,o,q);Zq(b,c[h>>2]|0);c[h>>2]=0;Zq(b,q);i=g;return}}}Iq(b,52536);Zq(b,c[h>>2]|0);c[h>>2]=0;i=g;return}function Zr(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0.0,m=0,n=0.0;f=i;i=i+16|0;g=f;h=c[b+200>>2]|0;if((h&1|0)==0){Hq(b,52664)}else{if((h&4|0)!=0){Iq(b,52696);Hr(b,e)|0;i=f;return}if((d|0)!=0){if((c[d+8>>2]&16384|0)!=0){Iq(b,52720);Hr(b,e)|0;i=f;return}}}h=_q(b,e+1|0)|0;j=b+740|0;c[j>>2]=h;if((h|0)==0){Iq(b,52744);Hr(b,e)|0;i=f;return}if((b|0)!=0){jr(b,h,e);yq(b,h,e)}h=(Hr(b,0)|0)==0;k=c[j>>2]|0;if(!h){Zq(b,k);c[j>>2]=0;i=f;return}a[k+e|0]=0;l=+mu((c[j>>2]|0)+1|0,g);if((a[c[g>>2]|0]|0)!=0){Iq(b,52792);Zq(b,c[j>>2]|0);c[j>>2]=0;i=f;return}k=c[j>>2]|0;h=k;while(1){m=h+1|0;if((a[h]|0)==0){break}else{h=m}}if((k+e|0)>>>0<m>>>0){Iq(b,52832);Zq(b,c[j>>2]|0);c[j>>2]=0;i=f;return}n=+mu(m,g);if((a[c[g>>2]|0]|0)!=0){Iq(b,52856);Zq(b,c[j>>2]|0);c[j>>2]=0;i=f;return}g=c[j>>2]|0;if((g+e|0)>>>0>=m>>>0&!(l<=0.0)&!(n<=0.0)){rs(b,d,a[g]|0,l,n);Zq(b,c[j>>2]|0);c[j>>2]=0;i=f;return}else{Iq(b,52896);Zq(b,c[j>>2]|0);c[j>>2]=0;i=f;return}}function _r(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;h=i;i=i+16|0;j=h+8|0;k=h;l=e+200|0;m=c[l>>2]|0;if((m&1|0)==0){Hq(e,52920);n=c[l>>2]|0}else{if((f|0)==0){n=m}else{if((c[f+8>>2]&512|0)==0){n=m}else{Iq(e,52944);Hr(e,g)|0;i=h;return}}}if((n&4|0)!=0){c[l>>2]=n|8}if((g|0)!=7){Iq(e,52968);Hr(e,g)|0;i=h;return}if((e|0)!=0){jr(e,j,7);yq(e,j,7)}if((Hr(e,0)|0)!=0){i=h;return}a[k+6|0]=a[j+6|0]|0;a[k+5|0]=a[j+5|0]|0;a[k+4|0]=a[j+4|0]|0;a[k+3|0]=a[j+3|0]|0;a[k+2|0]=a[j+2|0]|0;b[k>>1]=(d[j]|0)<<8|(d[j+1|0]|0);ys(e,f,k);i=h;return}function $r(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=b+708|0;h=c[g>>2]|0;if((h|0)==1){Hr(b,e)|0;i=f;return}else if((h|0)!=0){j=3}if((j|0)==3){j=h+ -1|0;c[g>>2]=j;if((j|0)==1){Iq(b,53e3);Hr(b,e)|0;i=f;return}}j=b+200|0;g=c[j>>2]|0;if((g&1|0)==0){Hq(b,53040);k=c[j>>2]|0}else{k=g}if((k&4|0)!=0){c[j>>2]=k|8}k=b+740|0;Zq(b,c[k>>2]|0);j=_q(b,e+1|0)|0;c[k>>2]=j;if((j|0)==0){Iq(b,53072);i=f;return}if((b|0)!=0){jr(b,j,e);yq(b,j,e)}j=(Hr(b,0)|0)==0;g=c[k>>2]|0;if(!j){Zq(b,g);c[k>>2]=0;i=f;return}j=g+e|0;a[j]=0;e=g;while(1){l=e+1|0;if((a[e]|0)==0){break}else{e=l}}h=(e|0)==(j|0)?e:l;l=_q(b,28)|0;if((l|0)==0){Iq(b,53104);Zq(b,c[k>>2]|0);c[k>>2]=0;i=f;return}c[l>>2]=-1;c[l+4>>2]=g;c[l+20>>2]=0;c[l+24>>2]=0;c[l+16>>2]=0;c[l+8>>2]=h;c[l+12>>2]=uu(h|0)|0;h=xs(b,d,l,1)|0;Zq(b,c[k>>2]|0);c[k>>2]=0;Zq(b,l);if((h|0)==0){i=f;return}Iq(b,53144);i=f;return}function as(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;i=i+16|0;g=f;h=b+708|0;j=c[h>>2]|0;if((j|0)==1){Hr(b,e)|0;i=f;return}else if((j|0)!=0){k=3}if((k|0)==3){k=j+ -1|0;c[h>>2]=k;if((k|0)==1){Iq(b,53192);Hr(b,e)|0;i=f;return}}k=b+200|0;h=c[k>>2]|0;if((h&1|0)==0){Hq(b,53232);l=c[k>>2]|0}else{l=h}if((l&4|0)!=0){c[k>>2]=l|8}l=b+740|0;Zq(b,c[l>>2]|0);k=_q(b,e+1|0)|0;c[l>>2]=k;if((k|0)==0){Iq(b,53264);i=f;return}if((b|0)!=0){jr(b,k,e);yq(b,k,e)}k=(Hr(b,0)|0)==0;h=c[l>>2]|0;if(!k){Zq(b,h);c[l>>2]=0;i=f;return}a[h+e|0]=0;h=c[l>>2]|0;k=h;while(1){m=k+1|0;if((a[k]|0)==0){break}else{k=m}}if(!(k>>>0<(h+(e+ -2)|0)>>>0)){Iq(b,53304);Zq(b,c[l>>2]|0);c[l>>2]=0;i=f;return}j=a[m]|0;if(j<<24>>24==0){n=h;o=j<<24>>24}else{Iq(b,53328);n=c[l>>2]|0;o=0}j=k+2-n|0;Ir(b,o,e,j,g);e=_q(b,28)|0;if((e|0)==0){Iq(b,53368);Zq(b,c[l>>2]|0);c[l>>2]=0;i=f;return}c[e>>2]=o;c[e+4>>2]=c[l>>2];c[e+20>>2]=0;c[e+24>>2]=0;c[e+16>>2]=0;c[e+8>>2]=(c[l>>2]|0)+j;c[e+12>>2]=c[g>>2];g=xs(b,d,e,1)|0;Zq(b,e);Zq(b,c[l>>2]|0);c[l>>2]=0;if((g|0)==0){i=f;return}Hq(b,53408);i=f;return}function bs(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;i=i+16|0;g=f;h=b+708|0;j=c[h>>2]|0;if((j|0)==1){Hr(b,e)|0;i=f;return}else if((j|0)!=0){k=3}if((k|0)==3){k=j+ -1|0;c[h>>2]=k;if((k|0)==1){Iq(b,53448);Hr(b,e)|0;i=f;return}}k=b+200|0;h=c[k>>2]|0;if((h&1|0)==0){Hq(b,53488);l=c[k>>2]|0}else{l=h}if((l&4|0)!=0){c[k>>2]=l|8}l=b+740|0;Zq(b,c[l>>2]|0);k=_q(b,e+1|0)|0;c[l>>2]=k;if((k|0)==0){Iq(b,53520);i=f;return}if((b|0)!=0){jr(b,k,e);yq(b,k,e)}k=(Hr(b,0)|0)==0;h=c[l>>2]|0;if(!k){Zq(b,h);c[l>>2]=0;i=f;return}a[h+e|0]=0;h=c[l>>2]|0;k=h;while(1){m=k+1|0;if((a[k]|0)==0){break}else{k=m}}if(!(m>>>0<(h+(e+ -3)|0)>>>0)){Iq(b,53552);Zq(b,c[l>>2]|0);c[l>>2]=0;i=f;return}j=a[m]|0;m=k+3|0;n=a[k+2|0]|0;k=m;while(1){o=k+1|0;if((a[k]|0)==0){break}else{k=o}}k=j<<24>>24;p=n<<24>>24;n=h+e|0;if(o>>>0<n>>>0){q=o}else{Iq(b,53552);Zq(b,c[l>>2]|0);c[l>>2]=0;i=f;return}while(1){r=q+1|0;if((a[q]|0)==0){break}else{q=r}}if(!(r>>>0<n>>>0)){Iq(b,53576);Zq(b,c[l>>2]|0);c[l>>2]=0;i=f;return}n=h;q=r-n|0;if(j<<24>>24==0){c[g>>2]=uu(h+q|0)|0}else{Ir(b,p,e,q,g)}e=_q(b,28)|0;if((e|0)==0){Iq(b,53600);Zq(b,c[l>>2]|0);c[l>>2]=0;i=f;return}c[e>>2]=k+1;c[e+24>>2]=(c[l>>2]|0)+(o-n);c[e+20>>2]=(c[l>>2]|0)+(m-n);c[e+16>>2]=c[g>>2];c[e+12>>2]=0;c[e+4>>2]=c[l>>2];c[e+8>>2]=(c[l>>2]|0)+q;q=xs(b,d,e,1)|0;Zq(b,e);Zq(b,c[l>>2]|0);c[l>>2]=0;if((q|0)==0){i=f;return}Hq(b,53640);i=f;return}function cs(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;h=b+708|0;j=c[h>>2]|0;if((j|0)==1){Hr(b,f)|0;i=g;return}else if((j|0)!=0){k=3}if((k|0)==3){l=j+ -1|0;c[h>>2]=l;if((l|0)==1){Iq(b,53680);Hr(b,f)|0;i=g;return}}l=b+200|0;h=c[l>>2]|0;j=b+380|0;if((h&4|0)!=0){if((nu(j,53728,4)|0)!=0){c[l>>2]=h|8}}if((a[j]&32)==0){if((Eq(b,j)|0)!=3){if((c[b+636>>2]|0)==0){Jq(b,53736)}}}if((c[b+204>>2]&32768|0)==0){if((c[b+636>>2]|0)==0){m=f}else{k=14}}else{k=14}if((k|0)==14){k=b+712|0;h=d[j]|d[j+1|0]<<8|d[j+2|0]<<16|d[j+3|0]<<24;a[k]=h;a[k+1|0]=h>>8;a[k+2|0]=h>>16;a[k+3|0]=h>>24;a[b+716|0]=0;c[b+724>>2]=f;if((f|0)==0){c[b+720>>2]=0}else{h=Yq(b,f)|0;c[b+720>>2]=h;if((b|0)!=0){jr(b,h,f);yq(b,h,f)}}f=c[b+636>>2]|0;do{if((f|0)==0){Bs(b,e,k,1)}else{h=Yh[f&15](b,k)|0;if((h|0)<0){Jq(b,53760);break}if((h|0)==0){if((a[j]&32)==0){if((Eq(b,j)|0)!=3){Jq(b,53736)}}Bs(b,e,k,1)}}}while(0);k=b+720|0;Zq(b,c[k>>2]|0);c[k>>2]=0;m=0}Hr(b,m)|0;i=g;return}function ds(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;g=i;if((f|0)==255){h=a[b+363|0]|0;j=h&255;k=c[b+296>>2]|0;if((h&255)>7){l=ea(j>>>3,k)|0}else{l=((ea(k,j)|0)+7|0)>>>3}tu(e|0,(c[b+332>>2]|0)+1|0,l|0)|0;i=g;return}l=d[b+363|0]|0;if((l|0)==4){j=c[b+296>>2]|0;k=c[b+208>>2]&65536;h=k>>>14;m=h^4;n=(k>>>13)+ -4|0;if((j|0)==0){i=g;return}k=e;o=0;p=128;q=m;r=(c[b+332>>2]|0)+1|0;while(1){if((p&f|0)!=0){a[k]=((d[r]|0)>>>q&15)<<q|(d[k]|0)&3855>>>(4-q|0)}if((q|0)==(h|0)){s=k+1|0;t=m;u=r+1|0}else{s=k;t=n+q|0;u=r}o=o+1|0;if((o|0)==(j|0)){break}else{k=s;p=(p|0)==1?128:p>>1;q=t;r=u}}i=g;return}else if((l|0)==2){u=c[b+296>>2]|0;r=c[b+208>>2]&65536;t=(r|0)==0;q=t?6:0;p=t?0:6;t=(r>>>14)+ -2|0;if((u|0)==0){i=g;return}r=e;s=0;k=128;j=q;o=(c[b+332>>2]|0)+1|0;while(1){if((k&f|0)!=0){a[r]=((d[o]|0)>>>j&3)<<j|(d[r]|0)&16191>>>(6-j|0)}if((j|0)==(p|0)){v=r+1|0;w=q;x=o+1|0}else{v=r;w=t+j|0;x=o}s=s+1|0;if((s|0)==(u|0)){break}else{r=v;k=(k|0)==1?128:k>>1;j=w;o=x}}i=g;return}else if((l|0)==1){x=c[b+296>>2]|0;o=c[b+208>>2]&65536;w=(o|0)==0;j=w?0:7;k=w?7:0;w=(o>>>15)+ -1|0;if((x|0)==0){i=g;return}o=e;v=0;r=128;u=k;s=(c[b+332>>2]|0)+1|0;while(1){if((r&f|0)!=0){a[o]=((d[s]|0)>>>u&1)<<u|(d[o]|0)&32639>>>(7-u|0)}if((u|0)==(j|0)){y=o+1|0;z=k;A=s+1|0}else{y=o;z=w+u|0;A=s}v=v+1|0;if((v|0)==(x|0)){break}else{o=y;r=(r|0)==1?128:r>>1;u=z;s=A}}i=g;return}else{A=l>>>3;l=c[b+296>>2]|0;if((l|0)==0){i=g;return}s=e;e=0;z=128;u=(c[b+332>>2]|0)+1|0;while(1){if((z&f|0)!=0){tu(s|0,u|0,A|0)|0}e=e+1|0;if((e|0)==(l|0)){break}else{s=s+A|0;z=(z|0)==1?128:z>>>1&255;u=u+A|0}}i=g;return}}function es(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;e=i;i=i+16|0;f=e;g=c[b+332>>2]|0;h=c[b+208>>2]|0;j=b+352|0;k=c[j>>2]|0;l=c[54048+((d[b+388|0]|0)<<2)>>2]|0;m=ea(l,k)|0;n=b+363|0;o=d[n]|0;if((o|0)==1){p=k+7&7;if((h&65536|0)==0){q=m+7&7^7;r=7;s=1;t=0;u=p^7}else{q=m+7&7;r=0;s=-1;t=7;u=p}if((k|0)!=0){p=g+(((m+ -1|0)>>>3)+1)|0;v=q;q=0;w=g+(((k+ -1|0)>>>3)+1)|0;x=u;while(1){u=(d[w]|0)>>>x&1;y=p;z=v;A=0;do{a[y]=(d[y]|0)&32639>>>(7-z|0)|u<<z;B=(z|0)==(r|0);z=B?t:z+s|0;y=B?y+ -1|0:y;A=A+1|0}while((A|0)<(l|0));A=(x|0)==(r|0);q=q+1|0;if(!(q>>>0<(c[j>>2]|0)>>>0)){break}else{p=y;v=z;w=A?w+ -1|0:w;x=A?t:x+s|0}}}}else if((o|0)==2){s=(k<<1)+6&6;if((h&65536|0)==0){C=(m<<1)+6&6^6;D=6;E=2;F=0;G=s^6}else{C=(m<<1)+6&6;D=0;E=-2;F=6;G=s}if((k|0)!=0){s=g+(((m+ -1|0)>>>2)+1)|0;x=C;C=0;t=g+(((k+ -1|0)>>>2)+1)|0;w=G;while(1){G=(d[t]|0)>>>w&3;v=s;p=x;q=0;do{a[v]=(d[v]|0)&16191>>>(6-p|0)|G<<p;r=(p|0)==(D|0);v=r?v+ -1|0:v;p=r?F:p+E|0;q=q+1|0}while((q|0)<(l|0));q=(w|0)==(D|0);C=C+1|0;if(!(C>>>0<(c[j>>2]|0)>>>0)){break}else{s=v;x=p;t=q?t+ -1|0:t;w=q?F:w+E|0}}}}else if((o|0)==4){E=k&1;if((h&65536|0)==0){H=m&1;I=4;J=4;K=0;L=E}else{H=m&1^1;I=0;J=-4;K=4;L=E^1}if((k|0)!=0){E=g+(((m+ -1|0)>>>1)+1)|0;h=H<<2;H=0;w=g+(((k+ -1|0)>>>1)+1)|0;F=L<<2;while(1){L=(d[w]|0)>>>F&15;t=E;x=h;s=0;do{a[t]=(d[t]|0)&3855>>>(4-x|0)|L<<x;C=(x|0)==(I|0);t=C?t+ -1|0:t;x=C?K:x+J|0;s=s+1|0}while((s|0)<(l|0));s=(F|0)==(I|0);H=H+1|0;if(!(H>>>0<(c[j>>2]|0)>>>0)){break}else{E=t;h=x;w=s?w+ -1|0:w;F=s?K:F+J|0}}}}else{J=o>>>3;if((k|0)!=0){o=g+((ea(J,m+ -1|0)|0)+1)|0;F=g+((ea(J,k+ -1|0)|0)+1)|0;k=0-J|0;g=0-(ea((l|0)>1?l:1,J)|0)|0;K=o;o=0;w=F;while(1){tu(f|0,w|0,J|0)|0;F=K;h=0;while(1){tu(F|0,f|0,J|0)|0;h=h+1|0;if((h|0)>=(l|0)){break}else{F=F+k|0}}o=o+1|0;if(!(o>>>0<(c[j>>2]|0)>>>0)){break}else{K=K+g|0;w=w+k|0}}}}c[j>>2]=m;j=a[n]|0;n=j&255;if((j&255)>7){M=ea(n>>>3,m)|0;N=b+356|0;c[N>>2]=M;i=e;return}else{M=((ea(n,m)|0)+7|0)>>>3;N=b+356|0;c[N>>2]=M;i=e;return}}function fs(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;j=i;switch(h|0){case 3:{h=((d[e+11|0]|0)+7|0)>>>3;k=c[e+4>>2]|0;if((h|0)==0){l=g;m=f}else{n=f+h|0;o=0;p=g;q=f;while(1){a[q]=((d[p]|0)>>>1)+(d[q]|0);o=o+1|0;if(!(o>>>0<h>>>0)){break}else{p=p+1|0;q=q+1|0}}l=g+h|0;m=n}if((k|0)==(h|0)){i=j;return}n=k-h|0;h=0;k=f;q=l;l=m;while(1){a[l]=(((d[k]|0)+(d[q]|0)|0)>>>1)+(d[l]|0);h=h+1|0;if((h|0)==(n|0)){break}else{k=k+1|0;q=q+1|0;l=l+1|0}}i=j;return};case 2:{l=c[e+4>>2]|0;if((l|0)==0){i=j;return}else{r=0;s=g;t=f}while(1){a[t]=(d[s]|0)+(d[t]|0);r=r+1|0;if((r|0)==(l|0)){break}else{s=s+1|0;t=t+1|0}}i=j;return};case 4:{t=((d[e+11|0]|0)+7|0)>>>3;s=c[e+4>>2]|0;if((t|0)==0){u=g;v=f}else{l=f+t|0;r=0;q=g;k=f;while(1){a[k]=(d[q]|0)+(d[k]|0);r=r+1|0;if(!(r>>>0<t>>>0)){break}else{q=q+1|0;k=k+1|0}}u=g+t|0;v=l}if((s|0)==(t|0)){i=j;return}l=s-t|0;t=g;g=0;s=f;k=u;u=v;while(1){v=d[s]|0;q=d[k]|0;r=d[t]|0;n=q-r|0;h=v-r|0;m=(n|0)<0?0-n|0:n;p=(h|0)<0?0-h|0:h;o=n+h|0;h=(o|0)<0?0-o|0:o;if((m|0)>(p|0)|(m|0)>(h|0)){w=(p|0)<=(h|0)?q:r}else{w=v}a[u]=(d[u]|0)+w;g=g+1|0;if((g|0)==(l|0)){break}else{t=t+1|0;s=s+1|0;k=k+1|0;u=u+1|0}}i=j;return};case 1:{u=c[e+4>>2]|0;k=((d[e+11|0]|0)+7|0)>>>3;if(!(k>>>0<u>>>0)){i=j;return}e=k;s=f;t=f+k|0;while(1){a[t]=(d[s]|0)+(d[t]|0);e=e+1|0;if((e|0)==(u|0)){break}else{s=s+1|0;t=t+1|0}}i=j;return};case 0:{i=j;return};default:{Iq(b,53808);a[f]=0;i=j;return}}}function gs(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;e=i;i=i+16|0;f=e+4|0;g=e;h=b+324|0;j=(c[h>>2]|0)+1|0;c[h>>2]=j;k=b+304|0;if(j>>>0<(c[k>>2]|0)>>>0){i=e;return}a:do{if((a[b+387|0]|0)!=0){c[h>>2]=0;vu(c[b+328>>2]|0,0,(c[b+312>>2]|0)+1|0)|0;j=b+388|0;l=b+296|0;m=b+320|0;n=b+208|0;o=b+300|0;p=a[j]|0;do{p=p+1<<24>>24;a[j]=p;q=p&255;if((p&255)>6){break a}r=c[54048+(q<<2)>>2]|0;s=(((c[l>>2]|0)+ -1+r-(c[54016+(q<<2)>>2]|0)|0)>>>0)/(r>>>0)|0;c[m>>2]=s;if((c[n>>2]&2|0)!=0){break}r=c[53880+(q<<2)>>2]|0;c[k>>2]=(((c[o>>2]|0)+ -1+r-(c[53848+(q<<2)>>2]|0)|0)>>>0)/(r>>>0)|0}while((s|0)==0);if((p&255)<7){i=e;return}}}while(0);k=b+204|0;if((c[k>>2]&32|0)==0){h=b+212|0;c[b+224>>2]=f;f=b+228|0;c[f>>2]=1;o=b+216|0;n=b+236|0;m=b+364|0;l=b+272|0;j=b+268|0;s=g+1|0;r=g+2|0;q=g+3|0;t=b+380|0;u=(b|0)==0;while(1){if((c[o>>2]|0)==0){v=c[m>>2]|0;if((v|0)==0){while(1){Hr(b,0)|0;jr(b,g,4);w=d[s]<<16|d[g]<<24|d[r]<<8|d[q];if((w|0)<0){Hq(b,49680)}c[m>>2]=w;xq(b);if(!u){jr(b,t,4);yq(b,t,4)}if((nu(t,53912,4)|0)!=0){Hq(b,53920)}w=c[m>>2]|0;if((w|0)!=0){x=w;break}}}else{x=v}p=c[l>>2]|0;c[o>>2]=p;w=c[j>>2]|0;c[h>>2]=w;if(p>>>0>x>>>0){c[o>>2]=x;y=x}else{y=p}jr(b,w,y);yq(b,w,y);c[m>>2]=(c[m>>2]|0)-(c[o>>2]|0)}w=Ns(h,1)|0;if((w|0)==1){z=24;break}else if((w|0)!=0){w=c[n>>2]|0;Hq(b,(w|0)==0?53968:w)}if((c[f>>2]|0)==0){z=31;break}}if((z|0)==24){if((c[f>>2]|0)==0){z=27}else{if((c[o>>2]|0)==0){if((c[m>>2]|0)!=0){z=27}}else{z=27}}if((z|0)==27){Iq(b,53944)}o=b+200|0;c[o>>2]=c[o>>2]|8}else if((z|0)==31){Iq(b,53944);o=b+200|0;c[o>>2]=c[o>>2]|8}c[k>>2]=c[k>>2]|32;c[f>>2]=0;A=m}else{A=b+364|0}if((c[A>>2]|0)==0){if((c[b+216>>2]|0)!=0){z=35}}else{z=35}if((z|0)==35){Iq(b,53992)}Ks(b+212|0)|0;z=b+200|0;c[z>>2]=c[z>>2]|8;i=e;return}function hs(e){e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;f=i;c[e+216>>2]=0;or(e);g=e+387|0;if((a[g]|0)==0){c[e+304>>2]=c[e+300>>2];h=c[e+296>>2]|0;c[e+320>>2]=h;j=c[e+208>>2]|0;k=h}else{h=c[e+208>>2]|0;l=c[e+300>>2]|0;if((h&2|0)==0){c[e+304>>2]=(l+7|0)>>>3}else{c[e+304>>2]=l}l=c[e+296>>2]|0;m=d[e+388|0]|0;n=c[54048+(m<<2)>>2]|0;c[e+320>>2]=((l+ -1+n-(c[54016+(m<<2)>>2]|0)|0)>>>0)/(n>>>0)|0;j=h;k=l}l=d[e+393|0]|0;if((j&4|0)==0){o=l}else{o=(d[e+391|0]|0)<8?8:l}l=c[e+208>>2]|0;j=(l&4096|0)==0;do{if(j){p=o}else{h=a[e+390|0]|0;if(h<<24>>24==2){if((b[e+378>>1]|0)==0){p=o;break}p=(o<<2>>>0)/3|0;break}else if(h<<24>>24==0){p=(o>>>0<8?8:o)<<((b[e+378>>1]|0)!=0);break}else if(h<<24>>24==3){p=(b[e+378>>1]|0)==0?24:32;break}else{p=o;break}}}while(0);o=(l&32768|0)==0;do{if(o){q=p}else{h=a[e+390|0]|0;if(h<<24>>24==3){q=32;break}else if(h<<24>>24==0){q=(p|0)<9?16:32;break}if(h<<24>>24==2){q=(p|0)<33?32:64}else{q=p}}}while(0);do{if((l&16384|0)==0){r=q}else{if(((b[e+378>>1]|0)==0|j)&o){p=a[e+390|0]|0;if(!(p<<24>>24==4)){h=p<<24>>24==6;if((q|0)<9){r=h?32:24;break}else{r=h?64:48;break}}}r=(q|0)<17?32:64}}while(0);if((l&1048576|0)==0){s=r}else{l=ea(d[e+197|0]|0,d[e+196|0]|0)|0;s=(l|0)>(r|0)?l:r}r=k+7&-8;if((s|0)>7){t=ea(r,s>>>3)|0}else{t=(ea(r,s)|0)>>>3}r=(s+7>>3)+49+t|0;t=e+732|0;if(r>>>0>(c[t>>2]|0)>>>0){s=e+680|0;Zq(e,c[s>>2]|0);if((a[g]|0)==0){u=Yq(e,r)|0}else{u=Xq(e,r)|0}c[s>>2]=u;c[e+332>>2]=u+(32-(u+15&15));c[t>>2]=r}r=e+312|0;t=c[r>>2]|0;if((t|0)==-1){Hq(e,54080);v=c[r>>2]|0}else{v=t}t=e+736|0;u=e+328|0;s=c[u>>2]|0;if(!((v+1|0)>>>0>(c[t>>2]|0)>>>0)){w=v;x=s;y=w+1|0;vu(x|0,0,y|0)|0;z=e+204|0;A=c[z>>2]|0;B=A|64;c[z>>2]=B;i=f;return}Zq(e,s);s=Yq(e,(c[r>>2]|0)+1|0)|0;c[u>>2]=s;u=c[r>>2]|0;c[t>>2]=u+1;w=u;x=s;y=w+1|0;vu(x|0,0,y|0)|0;z=e+204|0;A=c[z>>2]|0;B=A|64;c[z>>2]=B;i=f;return}function is(a,d,e){a=a|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==0|(d|0)==0){i=f;return}a=d+90|0;b[a+0>>1]=b[e+0>>1]|0;b[a+2>>1]=b[e+2>>1]|0;b[a+4>>1]=b[e+4>>1]|0;b[a+6>>1]=b[e+6>>1]|0;b[a+8>>1]=b[e+8>>1]|0;e=d+8|0;c[e>>2]=c[e>>2]|32;i=f;return}function js(a,b,d,e,f,h,j,k,l,m){a=a|0;b=b|0;d=+d;e=+e;f=+f;h=+h;j=+j;k=+k;l=+l;m=+m;var n=0;n=i;if((a|0)==0|(b|0)==0){i=n;return}g[b+128>>2]=d;g[b+132>>2]=e;g[b+136>>2]=f;g[b+140>>2]=h;g[b+144>>2]=j;g[b+148>>2]=k;g[b+152>>2]=l;g[b+156>>2]=m;c[b+256>>2]=~~(d*1.0e5+.5);c[b+260>>2]=~~(e*1.0e5+.5);c[b+264>>2]=~~(f*1.0e5+.5);c[b+268>>2]=~~(h*1.0e5+.5);c[b+272>>2]=~~(j*1.0e5+.5);c[b+276>>2]=~~(k*1.0e5+.5);c[b+280>>2]=~~(l*1.0e5+.5);c[b+284>>2]=~~(m*1.0e5+.5);a=b+8|0;c[a>>2]=c[a>>2]|4;i=n;return}function ks(a,b,d,e,f,h,j,k,l,m){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0;n=i;if((a|0)==0|(b|0)==0){i=n;return}if((Fq(a,d,e,f,h,j,k,l,m)|0)==0){i=n;return}c[b+256>>2]=d;c[b+260>>2]=e;c[b+264>>2]=f;c[b+268>>2]=h;c[b+272>>2]=j;c[b+276>>2]=k;c[b+280>>2]=l;c[b+284>>2]=m;g[b+128>>2]=+(d|0)/1.0e5;g[b+132>>2]=+(e|0)/1.0e5;g[b+136>>2]=+(f|0)/1.0e5;g[b+140>>2]=+(h|0)/1.0e5;g[b+144>>2]=+(j|0)/1.0e5;g[b+148>>2]=+(k|0)/1.0e5;g[b+152>>2]=+(l|0)/1.0e5;g[b+156>>2]=+(m|0)/1.0e5;m=b+8|0;c[m>>2]=c[m>>2]|4;i=n;return}function ls(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0.0,h=0;e=i;if((a|0)==0|(b|0)==0){i=e;return}if(d>21474.83){Iq(a,54280);f=21474.83}else{f=d}g[b+40>>2]=f;c[b+252>>2]=~~(f*1.0e5+.5);h=b+8|0;c[h>>2]=c[h>>2]|1;if(!(f==0.0)){i=e;return}Iq(a,54312);i=e;return}function ms(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((a|0)==0|(b|0)==0){i=e;return}if((d|0)<0){Iq(a,54328);f=0}else{f=d}g[b+40>>2]=+(f|0)/1.0e5;c[b+252>>2]=f;d=b+8|0;c[d>>2]=c[d>>2]|1;if((f|0)!=0){i=e;return}Iq(a,54312);i=e;return}function ns(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0;g=i;if((a|0)==0|(d|0)==0){i=g;return}h=d+20|0;j=b[h>>1]|0;if(j<<16>>16==0|(j&65535)>256){Iq(a,54360);i=g;return}Bq(a,d,8,0);j=_q(a,512)|0;c[a+596>>2]=j;if((j|0)==0){Iq(a,54408);i=g;return}if((b[h>>1]|0)!=0){a=0;do{b[j+(a<<1)>>1]=b[f+(a<<1)>>1]|0;a=a+1|0}while((a|0)<(e[h>>1]|0))}c[d+124>>2]=j;j=d+8|0;c[j>>2]=c[j>>2]|64;j=d+184|0;c[j>>2]=c[j>>2]|8;i=g;return}function os(b,e,f,g,h,j,k,l,m){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0;n=i;if((b|0)==0|(e|0)==0){i=n;return}c[e>>2]=f;c[e+4>>2]=g;o=e+24|0;a[o]=h;p=e+25|0;a[p]=j;a[e+26|0]=l;a[e+27|0]=m;a[e+28|0]=k;Gq(b,f,g,h&255,j&255,k&255,l&255,m&255);m=a[p]|0;if(m<<24>>24==3){a[e+29|0]=1;q=1}else{p=(m&2)==0?1:3;a[e+29|0]=p;if((m&4)==0){q=p}else{m=p+1<<24>>24;a[e+29|0]=m;q=m}}m=ea(d[o]|0,q&255)|0;a[e+30|0]=m;if(f>>>0>536870782){c[e+12>>2]=0;i=n;return}q=m&255;if(q>>>0>7){r=ea(q>>>3,f)|0}else{r=((ea(q,f)|0)+7|0)>>>3}c[e+12>>2]=r;i=n;return}function ps(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;if((b|0)==0|(d|0)==0){i=h;return}c[d+100>>2]=e;c[d+104>>2]=f;a[d+108|0]=g;g=d+8|0;c[g>>2]=c[g>>2]|256;i=h;return}function qs(b,d,e,f,g,h,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0;m=i;if((b|0)==0|(d|0)==0){i=m;return}n=(uu(e|0)|0)+1|0;o=_q(b,n)|0;c[d+160>>2]=o;if((o|0)==0){Iq(b,54448);i=m;return}tu(o|0,e|0,n|0)|0;c[d+164>>2]=f;c[d+168>>2]=g;a[d+180|0]=h;a[d+181|0]=j;h=(uu(k|0)|0)+1|0;g=_q(b,h)|0;c[d+172>>2]=g;if((g|0)==0){Iq(b,54488);i=m;return}tu(g|0,k|0,h|0)|0;h=(j<<2)+4|0;k=_q(b,h)|0;g=d+176|0;c[g>>2]=k;if((k|0)==0){Iq(b,54528);i=m;return}vu(k|0,0,h|0)|0;a:do{if((j|0)>0){h=0;while(1){k=l+(h<<2)|0;f=(uu(c[k>>2]|0)|0)+1|0;n=_q(b,f)|0;c[(c[g>>2]|0)+(h<<2)>>2]=n;n=c[(c[g>>2]|0)+(h<<2)>>2]|0;if((n|0)==0){break}tu(n|0,c[k>>2]|0,f|0)|0;h=h+1|0;if((h|0)>=(j|0)){break a}}Iq(b,54568);i=m;return}}while(0);b=d+8|0;c[b>>2]=c[b>>2]|1024;b=d+184|0;c[b>>2]=c[b>>2]|128;i=m;return}function rs(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=+f;g=+g;var j=0;j=i;if((b|0)==0|(d|0)==0){i=j;return}a[d+220|0]=e;h[d+224>>3]=f;h[d+232>>3]=g;e=d+8|0;c[e>>2]=c[e>>2]|16384;i=j;return}function ss(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;if((b|0)==0|(d|0)==0){i=h;return}c[d+112>>2]=e;c[d+116>>2]=f;a[d+120|0]=g;g=d+8|0;c[g>>2]=c[g>>2]|128;i=h;return}function ts(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;if((d|0)==0|(e|0)==0){i=h;return}do{if(g>>>0>256){if((a[e+25|0]|0)==3){Hq(d,54608);break}Iq(d,54608);i=h;return}}while(0);Bq(d,e,4096,0);j=Xq(d,768)|0;k=d+372|0;c[k>>2]=j;tu(j|0,f|0,g*3|0)|0;c[e+16>>2]=c[k>>2];k=g&65535;b[d+376>>1]=k;b[e+20>>1]=k;k=e+184|0;c[k>>2]=c[k>>2]|4096;k=e+8|0;c[k>>2]=c[k>>2]|8;i=h;return}function us(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=i;if((b|0)==0|(d|0)==0){i=f;return}b=d+68|0;a[b+0|0]=a[e+0|0]|0;a[b+1|0]=a[e+1|0]|0;a[b+2|0]=a[e+2|0]|0;a[b+3|0]=a[e+3|0]|0;a[b+4|0]=a[e+4|0]|0;e=d+8|0;c[e>>2]=c[e>>2]|2;i=f;return}function vs(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;f=i;if((b|0)==0|(d|0)==0){i=f;return}a[d+44|0]=e;e=d+8|0;h=c[e>>2]|2049;g[d+40>>2]=.45454999804496765;c[d+252>>2]=45455;c[e>>2]=h;if((Fq(b,31270,32900,64e3,33e3,3e4,6e4,15e3,6e3)|0)==0){j=d+132|0;k=d+136|0;l=d+140|0;m=d+144|0;n=d+148|0;o=d+152|0;p=d+156|0;q=d+256|0;r=d+260|0;s=d+264|0;t=d+268|0;u=d+272|0;v=d+276|0;w=d+280|0;x=d+284|0;y=d+128|0;z=c[e>>2]|0}else{b=d+256|0;c[b>>2]=31270;h=d+260|0;c[h>>2]=32900;A=d+264|0;c[A>>2]=64e3;B=d+268|0;c[B>>2]=33e3;C=d+272|0;c[C>>2]=3e4;D=d+276|0;c[D>>2]=6e4;E=d+280|0;c[E>>2]=15e3;F=d+284|0;c[F>>2]=6e3;G=d+128|0;g[G>>2]=.3127000033855438;H=d+132|0;g[H>>2]=.32899999618530273;I=d+136|0;g[I>>2]=.6399999856948853;J=d+140|0;g[J>>2]=.33000001311302185;K=d+144|0;g[K>>2]=.30000001192092896;L=d+148|0;g[L>>2]=.6000000238418579;M=d+152|0;g[M>>2]=.15000000596046448;N=d+156|0;g[N>>2]=.05999999865889549;d=c[e>>2]|4;c[e>>2]=d;j=H;k=I;l=J;m=K;n=L;o=M;p=N;q=b;r=h;s=A;t=B;u=C;v=D;w=E;x=F;y=G;z=d}g[y>>2]=.3127000033855438;g[j>>2]=.32899999618530273;g[k>>2]=.6399999856948853;g[l>>2]=.33000001311302185;g[m>>2]=.30000001192092896;g[n>>2]=.6000000238418579;g[o>>2]=.15000000596046448;g[p>>2]=.05999999865889549;c[q>>2]=31270;c[r>>2]=32900;c[s>>2]=64e3;c[t>>2]=33e3;c[u>>2]=3e4;c[v>>2]=6e4;c[w>>2]=15e3;c[x>>2]=6e3;c[e>>2]=z|4;i=f;return}function ws(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;if((b|0)==0|(d|0)==0|(e|0)==0|(g|0)==0){i=j;return}k=(uu(e|0)|0)+1|0;l=_q(b,k)|0;if((l|0)==0){Iq(b,54632);i=j;return}tu(l|0,e|0,k|0)|0;k=_q(b,h)|0;if((k|0)==0){Zq(b,l);Iq(b,54680);i=j;return}else{tu(k|0,g|0,h|0)|0;Bq(b,d,16,0);c[d+204>>2]=h;c[d+196>>2]=l;c[d+200>>2]=k;a[d+208|0]=f;f=d+184|0;c[f>>2]=c[f>>2]|16;f=d+8|0;c[f>>2]=c[f>>2]|4096;i=j;return}}function xs(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;g=i;if((b|0)==0|(d|0)==0|(f|0)==0){h=0;i=g;return h|0}j=d+48|0;k=(c[j>>2]|0)+f|0;l=d+52|0;m=c[l>>2]|0;do{if((k|0)>(m|0)){n=d+56|0;o=c[n>>2]|0;if((o|0)==0){p=f+8|0;c[l>>2]=p;c[j>>2]=0;q=_q(b,p*28|0)|0;c[n>>2]=q;if((q|0)==0){h=1;i=g;return h|0}else{q=d+184|0;c[q>>2]=c[q>>2]|16384;break}}q=k+8|0;c[l>>2]=q;p=_q(b,q*28|0)|0;c[n>>2]=p;if((p|0)!=0){tu(p|0,o|0,m*28|0)|0;Zq(b,o);break}Zq(b,o);h=1;i=g;return h|0}}while(0);if((f|0)<=0){h=0;i=g;return h|0}m=d+56|0;d=c[j>>2]|0;l=0;while(1){k=c[m>>2]|0;o=k+(d*28|0)|0;p=e+(l*28|0)+4|0;n=c[p>>2]|0;if((n|0)==0){r=d}else{q=uu(n|0)|0;n=e+(l*28|0)|0;s=c[n>>2]|0;if((s|0)<1){t=0;u=0}else{v=c[e+(l*28|0)+20>>2]|0;if((v|0)==0){w=0}else{w=uu(v|0)|0}v=c[e+(l*28|0)+24>>2]|0;if((v|0)==0){t=0;u=w}else{t=uu(v|0)|0;u=w}}v=e+(l*28|0)+8|0;x=c[v>>2]|0;if((x|0)==0){y=19}else{if((a[x]|0)==0){y=19}else{z=uu(x|0)|0;c[o>>2]=s;A=z}}do{if((y|0)==19){y=0;if((s|0)>0){c[o>>2]=1;A=0;break}else{c[o>>2]=-1;A=0;break}}}while(0);s=_q(b,q+4+u+t+A|0)|0;z=k+(d*28|0)+4|0;c[z>>2]=s;if((s|0)==0){h=1;y=34;break}tu(s|0,c[p>>2]|0,q|0)|0;a[(c[z>>2]|0)+q|0]=0;if((c[n>>2]|0)>0){s=(c[z>>2]|0)+(q+1)|0;x=k+(d*28|0)+20|0;c[x>>2]=s;tu(s|0,c[e+(l*28|0)+20>>2]|0,u|0)|0;a[(c[x>>2]|0)+u|0]=0;s=(c[x>>2]|0)+(u+1)|0;x=k+(d*28|0)+24|0;c[x>>2]=s;tu(s|0,c[e+(l*28|0)+24>>2]|0,t|0)|0;a[(c[x>>2]|0)+t|0]=0;s=(c[x>>2]|0)+(t+1)|0;c[k+(d*28|0)+8>>2]=s;B=s}else{c[k+(d*28|0)+20>>2]=0;c[k+(d*28|0)+24>>2]=0;s=(c[z>>2]|0)+(q+1)|0;c[k+(d*28|0)+8>>2]=s;B=s}if((A|0)==0){C=B}else{tu(B|0,c[v>>2]|0,A|0)|0;C=c[k+(d*28|0)+8>>2]|0}a[C+A|0]=0;s=k+(d*28|0)+12|0;if((c[o>>2]|0)>0){c[s>>2]=0;c[k+(d*28|0)+16>>2]=A}else{c[s>>2]=A;c[k+(d*28|0)+16>>2]=0}s=(c[j>>2]|0)+1|0;c[j>>2]=s;r=s}s=l+1|0;if((s|0)<(f|0)){d=r;l=s}else{h=0;y=34;break}}if((y|0)==34){i=g;return h|0}return 0}function ys(a,d,f){a=a|0;d=d|0;f=f|0;var g=0,h=0,j=0;g=i;if((a|0)==0|(d|0)==0){i=g;return}if((c[a+200>>2]&512|0)!=0){i=g;return}a=f;f=a;h=e[f>>1]|e[f+2>>1]<<16;f=a+4|0;a=e[f>>1]|e[f+2>>1]<<16;f=d+60|0;j=f;b[j>>1]=h;b[j+2>>1]=h>>>16;h=f+4|0;b[h>>1]=a;b[h+2>>1]=a>>>16;a=d+8|0;c[a>>2]=c[a>>2]|512;i=g;return}function zs(f,g,h,j,k){f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0;l=i;if((f|0)==0|(g|0)==0){i=l;return}if((h|0)!=0){Bq(f,g,8192,0);m=Yq(f,256)|0;n=g+76|0;c[n>>2]=m;c[f+488>>2]=m;if((j+ -1|0)>>>0<256){tu(c[n>>2]|0,h|0,j|0)|0}}if((k|0)==0){b[g+22>>1]=j;if((j|0)==0){i=l;return}}else{h=1<<(d[g+24|0]|0);n=a[g+25|0]|0;if(n<<24>>24==0){if((e[k+8>>1]|0|0)>(h|0)){o=11}}else if(n<<24>>24==2){if((e[k+2>>1]|0|0)>(h|0)){o=11}else{if((e[k+4>>1]|0|0)>(h|0)){o=11}else{if((e[k+6>>1]|0|0)>(h|0)){o=11}}}}if((o|0)==11){Iq(f,54728)}f=g+80|0;b[f+0>>1]=b[k+0>>1]|0;b[f+2>>1]=b[k+2>>1]|0;b[f+4>>1]=b[k+4>>1]|0;b[f+6>>1]=b[k+6>>1]|0;b[f+8>>1]=b[k+8>>1]|0;b[g+22>>1]=(j|0)==0?1:j&65535}j=g+8|0;c[j>>2]=c[j>>2]|16;j=g+184|0;c[j>>2]=c[j>>2]|8192;i=l;return}function As(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;g=i;if((b|0)==0|(d|0)==0){i=g;return}h=d+216|0;j=_q(b,(c[h>>2]|0)+f<<4)|0;if((j|0)==0){Iq(b,54784);i=g;return}k=d+212|0;tu(j|0,c[k>>2]|0,c[h>>2]<<4|0)|0;Zq(b,c[k>>2]|0);c[k>>2]=0;if((f|0)>0){l=0;do{m=(c[h>>2]|0)+l|0;n=e+(l<<4)|0;o=(uu(c[n>>2]|0)|0)+1|0;p=_q(b,o)|0;q=j+(m<<4)|0;c[q>>2]=p;do{if((p|0)==0){Iq(b,54816)}else{tu(p|0,c[n>>2]|0,o|0)|0;r=e+(l<<4)+12|0;s=_q(b,(c[r>>2]|0)*10|0)|0;c[j+(m<<4)+8>>2]=s;if((s|0)==0){Iq(b,54816);Zq(b,c[q>>2]|0);c[q>>2]=0;break}else{tu(s|0,c[e+(l<<4)+8>>2]|0,(c[r>>2]|0)*10|0)|0;c[j+(m<<4)+12>>2]=c[r>>2];a[j+(m<<4)+4|0]=a[e+(l<<4)+4|0]|0;break}}}while(0);l=l+1|0}while((l|0)!=(f|0))}c[k>>2]=j;c[h>>2]=(c[h>>2]|0)+f;f=d+8|0;c[f>>2]=c[f>>2]|8192;f=d+184|0;c[f>>2]=c[f>>2]|32;i=g;return}function Bs(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;g=i;if((b|0)==0|(d|0)==0|(f|0)==0){i=g;return}h=d+192|0;j=_q(b,((c[h>>2]|0)+f|0)*20|0)|0;if((j|0)==0){Iq(b,54864);i=g;return}k=d+188|0;tu(j|0,c[k>>2]|0,(c[h>>2]|0)*20|0)|0;Zq(b,c[k>>2]|0);c[k>>2]=0;if((f|0)>0){l=b+200|0;m=0;do{n=(c[h>>2]|0)+m|0;o=j+(n*20|0)|0;p=e+(m*20|0)|0;a[o+0|0]=a[p+0|0]|0;a[o+1|0]=a[p+1|0]|0;a[o+2|0]=a[p+2|0]|0;a[o+3|0]=a[p+3|0]|0;a[o+4|0]=a[p+4|0]|0;a[j+(n*20|0)+4|0]=0;p=e+(m*20|0)+12|0;o=j+(n*20|0)+12|0;c[o>>2]=c[p>>2];a[j+(n*20|0)+16|0]=c[l>>2];q=c[p>>2]|0;do{if((q|0)==0){c[j+(n*20|0)+8>>2]=0}else{r=_q(b,q)|0;c[j+(n*20|0)+8>>2]=r;if((r|0)==0){Iq(b,54864);c[o>>2]=0;break}else{tu(r|0,c[e+(m*20|0)+8>>2]|0,c[p>>2]|0)|0;break}}}while(0);m=m+1|0}while((m|0)!=(f|0))}c[k>>2]=j;c[h>>2]=(c[h>>2]|0)+f;f=d+184|0;c[f>>2]=c[f>>2]|512;i=g;return}function Cs(b){b=b|0;var e=0,f=0;e=i;if((b|0)==0){i=e;return}if((d[b+391|0]|0)>=8){i=e;return}f=b+208|0;c[f>>2]=c[f>>2]|4;a[b+392|0]=8;i=e;return}function Ds(b){b=b|0;var d=0,e=0,f=0;d=i;if((b|0)==0){e=1}else{if((a[b+387|0]|0)==0){e=1}else{f=b+208|0;c[f>>2]=c[f>>2]|2;e=7}}i=d;return e|0}function Es(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;g=a[b+8|0]|0;if(g<<24>>24==4){h=a[b+9|0]|0;if(h<<24>>24==16){j=c[b+4>>2]|0;if((j|0)==0){i=f;return}else{k=0;l=e}while(1){a[l]=(d[l]|0)^255;m=l+1|0;a[m]=(d[m]|0)^255;k=k+4|0;if(!(k>>>0<j>>>0)){break}else{l=l+4|0}}i=f;return}else if(h<<24>>24==8){h=c[b+4>>2]|0;if((h|0)==0){i=f;return}else{n=0;o=e}while(1){a[o]=(d[o]|0)^255;n=n+2|0;if(!(n>>>0<h>>>0)){break}else{o=o+2|0}}i=f;return}else{i=f;return}}else if(g<<24>>24==0){g=c[b+4>>2]|0;if((g|0)==0){i=f;return}else{p=0;q=e}while(1){a[q]=(d[q]|0)^255;p=p+1|0;if((p|0)==(g|0)){break}else{q=q+1|0}}i=f;return}else{i=f;return}}function Fs(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;if((a[b+9|0]|0)!=16){i=f;return}g=ea(d[b+10|0]|0,c[b>>2]|0)|0;if((g|0)==0){i=f;return}else{h=0;j=e}while(1){e=a[j]|0;b=j+1|0;a[j]=a[b]|0;a[b]=e;h=h+1|0;if((h|0)==(g|0)){break}else{j=j+2|0}}i=f;return}function Gs(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;g=a[b+9|0]|0;do{if((g&255)<8){h=c[b+4>>2]|0;j=e+h|0;if(g<<24>>24==2){k=55168}else if(g<<24>>24==1){k=54912}else if(g<<24>>24==4){k=55424}else{break}if((h|0)>0){h=e;do{a[h]=a[k+(d[h]|0)|0]|0;h=h+1|0}while(h>>>0<j>>>0)}}}while(0);i=f;return}function Hs(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;g=c[b>>2]|0;h=b+8|0;j=a[h]|0;if(j<<24>>24==2){k=3}else if(j<<24>>24==4){k=19}else if(j<<24>>24==6){if((e&4194304|0)!=0){k=3}}else if(j<<24>>24==0){k=20}do{if((k|0)==3){l=b+10|0;if((a[l]|0)!=4){if(j<<24>>24==4){k=19;break}else if(j<<24>>24==0){k=20;break}else{break}}m=(e&128|0)!=0;if((a[b+9|0]|0)==8){if(m){if(g>>>0>1){n=1;o=d;p=d;while(1){q=p+4|0;r=o+3|0;a[r]=a[q]|0;a[o+4|0]=a[p+5|0]|0;a[o+5|0]=a[p+6|0]|0;s=n+1|0;if((s|0)==(g|0)){break}else{n=s;o=r;p=q}}}}else{if((g|0)!=0){p=d;o=0;n=d;while(1){a[p]=a[n+1|0]|0;a[p+1|0]=a[n+2|0]|0;a[p+2|0]=a[n+3|0]|0;o=o+1|0;if((o|0)==(g|0)){break}else{p=p+3|0;n=n+4|0}}}}a[b+11|0]=24;c[b+4>>2]=g*3}else{if(m){if(g>>>0>1){n=1;p=d;o=d;while(1){q=o+8|0;r=p+6|0;a[r]=a[q]|0;a[p+7|0]=a[o+9|0]|0;a[p+8|0]=a[o+10|0]|0;a[p+9|0]=a[o+11|0]|0;a[p+10|0]=a[o+12|0]|0;a[p+11|0]=a[o+13|0]|0;s=n+1|0;if((s|0)==(g|0)){break}else{n=s;p=r;o=q}}}}else{if((g|0)!=0){o=d;p=0;n=d;while(1){a[o]=a[n+2|0]|0;a[o+1|0]=a[n+3|0]|0;a[o+2|0]=a[n+4|0]|0;a[o+3|0]=a[n+5|0]|0;a[o+4|0]=a[n+6|0]|0;a[o+5|0]=a[n+7|0]|0;p=p+1|0;if((p|0)==(g|0)){break}else{o=o+6|0;n=n+8|0}}}}a[b+11|0]=48;c[b+4>>2]=g*6}a[l]=3}}while(0);if((k|0)==19){if((e&4194304|0)!=0){k=20}}if((k|0)==20){k=b+10|0;if((a[k]|0)==2){j=(e&128|0)!=0;if((a[b+9|0]|0)==8){n=(g|0)==0;if(j){if(!n){o=d;p=0;m=d;while(1){a[o]=a[m]|0;p=p+1|0;if((p|0)==(g|0)){break}else{o=o+1|0;m=m+2|0}}}}else{if(!n){n=d;m=0;o=d;while(1){a[n]=a[o+1|0]|0;m=m+1|0;if((m|0)==(g|0)){break}else{n=n+1|0;o=o+2|0}}}}a[b+11|0]=8;c[b+4>>2]=g}else{if(j){if(g>>>0>1){j=1;o=d;n=d;while(1){m=n+4|0;p=o+2|0;a[p]=a[m]|0;a[o+3|0]=a[n+5|0]|0;q=j+1|0;if((q|0)==(g|0)){break}else{j=q;o=p;n=m}}}}else{if((g|0)!=0){n=d;o=0;j=d;while(1){a[n]=a[j+2|0]|0;a[n+1|0]=a[j+3|0]|0;o=o+1|0;if((o|0)==(g|0)){break}else{n=n+2|0;j=j+4|0}}}}a[b+11|0]=16;c[b+4>>2]=g<<1}a[k]=1}}if((e&4194304|0)==0){i=f;return}a[h]=a[h]&251;i=f;return}function Is(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;f=a[b+8|0]|0;if((f&2)==0){i=e;return}g=c[b>>2]|0;h=a[b+9|0]|0;if(h<<24>>24==8){if(f<<24>>24==2){if((g|0)==0){i=e;return}else{j=0;k=d}while(1){b=a[k]|0;l=k+2|0;a[k]=a[l]|0;a[l]=b;j=j+1|0;if((j|0)==(g|0)){break}else{k=k+3|0}}i=e;return}else if(f<<24>>24==6){if((g|0)==0){i=e;return}else{m=0;n=d}while(1){k=a[n]|0;j=n+2|0;a[n]=a[j]|0;a[j]=k;m=m+1|0;if((m|0)==(g|0)){break}else{n=n+4|0}}i=e;return}else{i=e;return}}else if(h<<24>>24==16){if(f<<24>>24==2){if((g|0)==0){i=e;return}else{o=0;p=d}while(1){h=a[p]|0;n=p+4|0;a[p]=a[n]|0;a[n]=h;h=p+1|0;n=a[h]|0;m=p+5|0;a[h]=a[m]|0;a[m]=n;o=o+1|0;if((o|0)==(g|0)){break}else{p=p+6|0}}i=e;return}else if(f<<24>>24==6){if((g|0)==0){i=e;return}else{q=0;r=d}while(1){d=a[r]|0;f=r+4|0;a[r]=a[f]|0;a[f]=d;d=r+1|0;f=a[d]|0;p=r+5|0;a[d]=a[p]|0;a[p]=f;q=q+1|0;if((q|0)==(g|0)){break}else{r=r+8|0}}i=e;return}else{i=e;return}}else{i=e;return}}function Js(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;f=i;if((b|0)==0){g=0;i=f;return g|0}h=~a;a:do{if((e|0)==0){j=h}else{a=b;k=e;l=h;while(1){if((a&3|0)==0){break}m=c[55680+(((d[a]|0)^l&255)<<2)>>2]^l>>>8;n=k+ -1|0;if((n|0)==0){j=m;break a}else{a=a+1|0;k=n;l=m}}if(k>>>0>31){m=k;n=a;o=l;while(1){p=c[n>>2]^o;q=c[57728+((p>>>8&255)<<2)>>2]^c[58752+((p&255)<<2)>>2]^c[56704+((p>>>16&255)<<2)>>2]^c[55680+(p>>>24<<2)>>2]^c[n+4>>2];p=c[57728+((q>>>8&255)<<2)>>2]^c[58752+((q&255)<<2)>>2]^c[56704+((q>>>16&255)<<2)>>2]^c[55680+(q>>>24<<2)>>2]^c[n+8>>2];q=c[57728+((p>>>8&255)<<2)>>2]^c[58752+((p&255)<<2)>>2]^c[56704+((p>>>16&255)<<2)>>2]^c[55680+(p>>>24<<2)>>2]^c[n+12>>2];p=c[57728+((q>>>8&255)<<2)>>2]^c[58752+((q&255)<<2)>>2]^c[56704+((q>>>16&255)<<2)>>2]^c[55680+(q>>>24<<2)>>2]^c[n+16>>2];q=c[57728+((p>>>8&255)<<2)>>2]^c[58752+((p&255)<<2)>>2]^c[56704+((p>>>16&255)<<2)>>2]^c[55680+(p>>>24<<2)>>2]^c[n+20>>2];p=c[57728+((q>>>8&255)<<2)>>2]^c[58752+((q&255)<<2)>>2]^c[56704+((q>>>16&255)<<2)>>2]^c[55680+(q>>>24<<2)>>2]^c[n+24>>2];q=n+32|0;r=c[57728+((p>>>8&255)<<2)>>2]^c[58752+((p&255)<<2)>>2]^c[56704+((p>>>16&255)<<2)>>2]^c[55680+(p>>>24<<2)>>2]^c[n+28>>2];p=c[57728+((r>>>8&255)<<2)>>2]^c[58752+((r&255)<<2)>>2]^c[56704+((r>>>16&255)<<2)>>2]^c[55680+(r>>>24<<2)>>2];r=m+ -32|0;if(r>>>0>31){m=r;n=q;o=p}else{s=r;t=q;u=p;break}}}else{s=k;t=a;u=l}if(s>>>0>3){o=s;n=t;m=u;while(1){p=n+4|0;q=c[n>>2]^m;r=c[57728+((q>>>8&255)<<2)>>2]^c[58752+((q&255)<<2)>>2]^c[56704+((q>>>16&255)<<2)>>2]^c[55680+(q>>>24<<2)>>2];q=o+ -4|0;if(q>>>0>3){o=q;n=p;m=r}else{v=q;w=p;x=r;break}}}else{v=s;w=t;x=u}if((v|0)==0){j=x}else{m=w;n=v;o=x;while(1){l=c[55680+(((d[m]|0)^o&255)<<2)>>2]^o>>>8;a=n+ -1|0;if((a|0)==0){j=l;break}else{m=m+1|0;n=a;o=l}}}}}while(0);g=~j;i=f;return g|0}function Ks(a){a=a|0;var b=0,d=0,e=0;b=i;if((a|0)==0){d=-2;i=b;return d|0}e=c[a+28>>2]|0;if((e|0)==0){d=-2;i=b;return d|0}c[e+24>>2]=0;c[a+20>>2]=0;c[a+8>>2]=0;c[a+24>>2]=0;c[e>>2]=0;c[e+4>>2]=0;c[e+12>>2]=0;c[e+32>>2]=0;c[e+36>>2]=0;c[e+48>>2]=0;c[e+52>>2]=0;a=e+1320|0;c[e+100>>2]=a;c[e+72>>2]=a;c[e+68>>2]=a;d=0;i=b;return d|0}function Ls(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;if((e|0)==0){h=-6;i=g;return h|0}if(!((a[e]|0)==49&(f|0)==56)){h=-6;i=g;return h|0}if((b|0)==0){h=-2;i=g;return h|0}f=b+24|0;c[f>>2]=0;e=b+32|0;j=c[e>>2]|0;if((j|0)==0){c[e>>2]=8;c[b+40>>2]=0;k=8}else{k=j}j=b+36|0;if((c[j>>2]|0)==0){c[j>>2]=14}e=b+40|0;l=Qh[k&15](c[e>>2]|0,1,7080)|0;if((l|0)==0){h=-4;i=g;return h|0}k=b+28|0;c[k>>2]=l;if((d|0)<0){c[l+8>>2]=0;m=0-d|0}else{c[l+8>>2]=(d>>4)+1;m=(d|0)<48?d&15:d}if((m+ -8|0)>>>0>7){Kh[c[j>>2]&63](c[e>>2]|0,l);c[k>>2]=0;h=-2;i=g;return h|0}c[l+28>>2]=m;c[l+44>>2]=0;l=c[k>>2]|0;if((l|0)==0){h=-2;i=g;return h|0}c[l+24>>2]=0;c[b+20>>2]=0;c[b+8>>2]=0;c[f>>2]=0;c[l>>2]=0;c[l+4>>2]=0;c[l+12>>2]=0;c[l+32>>2]=0;c[l+36>>2]=0;c[l+48>>2]=0;c[l+52>>2]=0;f=l+1320|0;c[l+100>>2]=f;c[l+72>>2]=f;c[l+68>>2]=f;h=0;i=g;return h|0}function Ms(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;d=i;e=Ls(a,15,b,c)|0;i=d;return e|0}function Ns(f,g){f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0,Tc=0,Uc=0,Vc=0,Wc=0,Xc=0,Yc=0,Zc=0,_c=0,$c=0,ad=0,bd=0,cd=0,dd=0,ed=0,fd=0,gd=0,hd=0,id=0,jd=0,kd=0,ld=0,md=0,nd=0,od=0,pd=0,qd=0,rd=0,sd=0,td=0,ud=0,vd=0,wd=0,xd=0,yd=0,zd=0,Ad=0,Bd=0,Cd=0,Dd=0,Ed=0,Fd=0,Gd=0,Hd=0,Id=0,Jd=0,Kd=0,Ld=0,Md=0,Nd=0,Od=0,Pd=0,Qd=0,Rd=0,Sd=0,Td=0,Ud=0,Vd=0,Wd=0,Xd=0,Yd=0,Zd=0,_d=0,$d=0,ae=0,be=0,ce=0,de=0,ee=0,fe=0,ge=0,he=0,ie=0,je=0,ke=0,le=0,me=0,ne=0,oe=0,pe=0,qe=0,re=0,se=0,te=0,ue=0,ve=0,we=0,xe=0,ye=0,ze=0,Ae=0,Be=0,Ce=0,De=0,Ee=0,Fe=0,Ge=0,He=0,Ie=0,Je=0,Ke=0,Le=0,Me=0,Ne=0,Oe=0,Pe=0,Qe=0,Re=0,Se=0,Te=0,Ue=0,Ve=0,We=0,Xe=0,Ye=0,Ze=0,_e=0,$e=0,af=0,bf=0,cf=0,df=0,ef=0,ff=0,gf=0,hf=0,jf=0,kf=0,lf=0,mf=0,nf=0,of=0,pf=0,qf=0,rf=0,sf=0,tf=0,uf=0,vf=0,wf=0,xf=0,yf=0,zf=0,Af=0,Bf=0,Cf=0,Df=0,Ef=0,Ff=0,Gf=0,Hf=0,If=0,Jf=0,Kf=0,Lf=0,Mf=0,Nf=0,Of=0,Pf=0,Qf=0,Rf=0,Sf=0,Tf=0,Uf=0,Vf=0,Wf=0,Xf=0,Yf=0,Zf=0,_f=0,$f=0,ag=0,bg=0,cg=0,dg=0,eg=0,fg=0,gg=0,hg=0;h=i;i=i+16|0;j=h;if((f|0)==0){k=-2;i=h;return k|0}l=c[f+28>>2]|0;if((l|0)==0){k=-2;i=h;return k|0}m=f+12|0;n=c[m>>2]|0;if((n|0)==0){k=-2;i=h;return k|0}o=c[f>>2]|0;if((o|0)==0){if((c[f+4>>2]|0)!=0){k=-2;i=h;return k|0}}p=c[l>>2]|0;if((p|0)==11){c[l>>2]=12;q=12;r=c[f>>2]|0;s=c[m>>2]|0}else{q=p;r=o;s=n}n=f+16|0;o=c[n>>2]|0;p=f+4|0;t=c[p>>2]|0;u=l+48|0;v=l+52|0;w=l+8|0;x=l+20|0;y=j+1|0;z=l+16|0;A=f+24|0;B=l+28|0;C=f+48|0;D=l+56|0;E=l+12|0;F=(g|0)==5;G=l+4|0;H=l+68|0;I=l+76|0;J=l+72|0;K=l+80|0;L=l+64|0;M=l+60|0;N=l+36|0;O=l+40|0;P=l+44|0;Q=l+32|0;R=f+20|0;S=l+24|0;T=l+88|0;U=l+92|0;V=l+84|0;W=l+96|0;X=l+1320|0;Y=l+100|0;Z=l+104|0;_=l+744|0;$=j+2|0;aa=j+3|0;ba=q;q=c[v>>2]|0;ca=t;da=c[u>>2]|0;ea=o;fa=r;r=o;o=s;s=0;a:while(1){b:do{switch(ba|0){case 4:{ga=q;ha=ca;ia=da;ja=fa;ka=53;break};case 18:{la=q;ma=ca;na=da;oa=fa;pa=s;ka=166;break};case 14:{qa=c[D>>2]|0;ra=q;sa=ca;ta=da;ua=fa;ka=112;break};case 5:{va=q;wa=ca;xa=da;ya=fa;ka=60;break};case 6:{za=q;Aa=ca;Ba=da;Ca=fa;ka=67;break};case 13:{Da=q&7;Ea=da>>>Da;Fa=q-Da|0;if(Fa>>>0<32){Da=Fa;Ga=ca;Ha=Ea;Ia=fa;while(1){if((Ga|0)==0){Ja=Da;Ka=0;La=Ha;Ma=ea;Na=Ia;Oa=r;Pa=s;break a}Qa=Ga+ -1|0;Ra=Ia+1|0;Sa=(d[Ia]<<Da)+Ha|0;Ta=Da+8|0;if(Ta>>>0<32){Da=Ta;Ga=Qa;Ha=Sa;Ia=Ra}else{Ua=Ta;Va=Qa;Wa=Sa;Xa=Ra;break}}}else{Ua=Fa;Va=ca;Wa=Ea;Xa=fa}Ia=Wa&65535;if((Ia|0)==(Wa>>>16^65535|0)){c[D>>2]=Ia;c[l>>2]=14;qa=Ia;ra=0;sa=Va;ta=0;ua=Xa;ka=112;break b}else{c[A>>2]=64072;c[l>>2]=27;Ya=Ua;Za=Va;_a=Wa;$a=ea;ab=Xa;bb=r;cb=o;db=s;break b}break};case 7:{eb=q;fb=ca;gb=da;hb=fa;ka=74;break};case 12:{ib=q;jb=ca;kb=da;lb=fa;ka=95;break};case 11:{mb=q;nb=ca;ob=da;pb=fa;ka=94;break};case 8:{qb=q;rb=ca;sb=da;tb=fa;ka=81;break};case 16:{Ia=c[W>>2]|0;if(Ia>>>0<(c[V>>2]|0)>>>0){ub=Ia;vb=q;wb=ca;xb=da;yb=fa;ka=122}else{zb=Ia;Ab=q;Bb=ca;Cb=da;Db=fa;ka=126}break};case 22:{Eb=q;Fb=ca;Gb=da;Hb=fa;Ib=s;ka=210;break};case 9:{if(q>>>0<32){Ia=q;Ha=ca;Ga=da;Da=fa;while(1){if((Ha|0)==0){Ja=Ia;Ka=0;La=Ga;Ma=ea;Na=Da;Oa=r;Pa=s;break a}Ra=Ha+ -1|0;Sa=Da+1|0;Qa=(d[Da]<<Ia)+Ga|0;Ta=Ia+8|0;if(Ta>>>0<32){Ia=Ta;Ha=Ra;Ga=Qa;Da=Sa}else{Jb=Ra;Kb=Qa;Lb=Sa;break}}}else{Jb=ca;Kb=da;Lb=fa}Da=wg(Kb|0)|0;c[x>>2]=Da;c[C>>2]=Da;c[l>>2]=10;Mb=0;Nb=Jb;Ob=0;Pb=Lb;ka=91;break};case 3:{if(q>>>0<16){Qb=q;Rb=ca;Sb=da;Tb=fa;ka=48}else{Ub=ca;Vb=da;Wb=fa;ka=50}break};case 17:{Xb=c[W>>2]|0;Yb=q;Zb=ca;_b=da;$b=fa;ac=s;ka=132;break};case 21:{bc=c[L>>2]|0;cc=q;dc=ca;ec=da;fc=fa;gc=s;ka=201;break};case 20:{hc=q;ic=ca;jc=da;kc=fa;lc=s;ka=190;break};case 15:{if(q>>>0<14){Da=q;Ga=ca;Ha=da;Ia=fa;while(1){if((Ga|0)==0){Ja=Da;Ka=0;La=Ha;Ma=ea;Na=Ia;Oa=r;Pa=s;break a}Ea=Ga+ -1|0;Fa=Ia+1|0;Sa=(d[Ia]<<Da)+Ha|0;Qa=Da+8|0;if(Qa>>>0<14){Da=Qa;Ga=Ea;Ha=Sa;Ia=Fa}else{mc=Qa;nc=Ea;oc=Sa;pc=Fa;break}}}else{mc=q;nc=ca;oc=da;pc=fa}Ia=(oc&31)+257|0;c[T>>2]=Ia;Ha=(oc>>>5&31)+1|0;c[U>>2]=Ha;c[V>>2]=(oc>>>10&15)+4;Ga=oc>>>14;Da=mc+ -14|0;if(Ia>>>0>286|Ha>>>0>30){c[A>>2]=64104;c[l>>2]=27;Ya=Da;Za=nc;_a=Ga;$a=ea;ab=pc;bb=r;cb=o;db=s;break b}else{c[W>>2]=0;c[l>>2]=16;ub=0;vb=Da;wb=nc;xb=Ga;yb=pc;ka=122;break b}break};case 19:{qc=c[L>>2]|0;rc=q;sc=ca;tc=da;uc=fa;vc=s;ka=184;break};case 10:{Mb=q;Nb=ca;Ob=da;Pb=fa;ka=91;break};case 2:{if(q>>>0<32){wc=q;xc=ca;yc=da;zc=fa;ka=42}else{Ac=ca;Bc=da;Cc=fa;ka=44}break};case 1:{if(q>>>0<16){Ga=q;Da=ca;Ha=da;Ia=fa;while(1){if((Da|0)==0){Ja=Ga;Ka=0;La=Ha;Ma=ea;Na=Ia;Oa=r;Pa=s;break a}Fa=Da+ -1|0;Sa=Ia+1|0;Ea=(d[Ia]<<Ga)+Ha|0;Qa=Ga+8|0;if(Qa>>>0<16){Ga=Qa;Da=Fa;Ha=Ea;Ia=Sa}else{Dc=Qa;Ec=Fa;Fc=Ea;Gc=Sa;break}}}else{Dc=q;Ec=ca;Fc=da;Gc=fa}c[z>>2]=Fc;if((Fc&255|0)!=8){c[A>>2]=63936;c[l>>2]=27;Ya=Dc;Za=Ec;_a=Fc;$a=ea;ab=Gc;bb=r;cb=o;db=s;break b}if((Fc&57344|0)!=0){c[A>>2]=63992;c[l>>2]=27;Ya=Dc;Za=Ec;_a=Fc;$a=ea;ab=Gc;bb=r;cb=o;db=s;break b}if((Fc&512|0)!=0){a[j]=Fc;a[y]=Fc>>>8;c[x>>2]=Js(c[x>>2]|0,j,2)|0}c[l>>2]=2;wc=0;xc=Ec;yc=0;zc=Gc;ka=42;break};case 0:{Ia=c[w>>2]|0;if((Ia|0)==0){c[l>>2]=12;Ya=q;Za=ca;_a=da;$a=ea;ab=fa;bb=r;cb=o;db=s;break b}if(q>>>0<16){Ha=q;Da=ca;Ga=da;Sa=fa;while(1){if((Da|0)==0){Ja=Ha;Ka=0;La=Ga;Ma=ea;Na=Sa;Oa=r;Pa=s;break a}Ea=Da+ -1|0;Fa=Sa+1|0;Qa=(d[Sa]<<Ha)+Ga|0;Ra=Ha+8|0;if(Ra>>>0<16){Ha=Ra;Da=Ea;Ga=Qa;Sa=Fa}else{Hc=Ra;Ic=Ea;Jc=Qa;Kc=Fa;break}}}else{Hc=q;Ic=ca;Jc=da;Kc=fa}if((Ia&2|0)!=0&(Jc|0)==35615){c[x>>2]=Js(0,0,0)|0;a[j]=31;a[y]=-117;c[x>>2]=Js(c[x>>2]|0,j,2)|0;c[l>>2]=1;Ya=0;Za=Ic;_a=0;$a=ea;ab=Kc;bb=r;cb=o;db=s;break b}c[z>>2]=0;if((Ia&1|0)!=0){if(((((Jc<<8&65280)+(Jc>>>8)|0)>>>0)%31|0|0)==0){if((Jc&15|0)!=8){c[A>>2]=63936;c[l>>2]=27;Ya=Hc;Za=Ic;_a=Jc;$a=ea;ab=Kc;bb=r;cb=o;db=s;break b}Sa=Jc>>>4;if(((Sa&15)+8|0)>>>0>(c[B>>2]|0)>>>0){c[A>>2]=63968;c[l>>2]=27;Ya=Hc+ -4|0;Za=Ic;_a=Sa;$a=ea;ab=Kc;bb=r;cb=o;db=s;break b}else{Sa=zt(0,0,0)|0;c[x>>2]=Sa;c[C>>2]=Sa;c[l>>2]=Jc>>>12&2^11;Ya=0;Za=Ic;_a=0;$a=ea;ab=Kc;bb=r;cb=o;db=s;break b}}}c[A>>2]=63912;c[l>>2]=27;Ya=Hc;Za=Ic;_a=Jc;$a=ea;ab=Kc;bb=r;cb=o;db=s;break};case 23:{if((ea|0)==0){Lc=q;Mc=ca;Nc=da;Oc=0;Pc=fa;Qc=s;ka=246;break a}a[o]=c[D>>2];c[l>>2]=18;Ya=q;Za=ca;_a=da;$a=ea+ -1|0;ab=fa;bb=r;cb=o+1|0;db=s;break};case 24:{if((c[w>>2]|0)==0){Rc=q;Sc=ca;Tc=da;Uc=fa;Vc=r}else{if(q>>>0<32){Sa=q;Ga=ca;Da=da;Ha=fa;while(1){if((Ga|0)==0){Ja=Sa;Ka=0;La=Da;Ma=ea;Na=Ha;Oa=r;Pa=s;break a}Fa=Ga+ -1|0;Qa=Ha+1|0;Ea=(d[Ha]<<Sa)+Da|0;Ra=Sa+8|0;if(Ra>>>0<32){Sa=Ra;Ga=Fa;Da=Ea;Ha=Qa}else{Wc=Ra;Xc=Fa;Yc=Ea;Zc=Qa;break}}}else{Wc=q;Xc=ca;Yc=da;Zc=fa}Ha=r-ea|0;c[R>>2]=(c[R>>2]|0)+Ha;c[S>>2]=(c[S>>2]|0)+Ha;if((r|0)!=(ea|0)){Da=c[x>>2]|0;Ga=o+(0-Ha)|0;if((c[z>>2]|0)==0){_c=zt(Da,Ga,Ha)|0}else{_c=Js(Da,Ga,Ha)|0}c[x>>2]=_c;c[C>>2]=_c}if((c[z>>2]|0)==0){$c=wg(Yc|0)|0}else{$c=Yc}if(($c|0)==(c[x>>2]|0)){Rc=0;Sc=Xc;Tc=0;Uc=Zc;Vc=ea}else{c[A>>2]=64352;c[l>>2]=27;Ya=Wc;Za=Xc;_a=Yc;$a=ea;ab=Zc;bb=ea;cb=o;db=s;break b}}c[l>>2]=25;ad=Rc;bd=Sc;cd=Tc;dd=Uc;ed=Vc;ka=238;break};case 25:{ad=q;bd=ca;cd=da;dd=fa;ed=r;ka=238;break};case 26:{Lc=q;Mc=ca;Nc=da;Oc=ea;Pc=fa;Qc=1;ka=246;break a;break};case 27:{Ja=q;Ka=ca;La=da;Ma=ea;Na=fa;Oa=r;Pa=-3;break a;break};case 28:{ka=258;break a;break};default:{k=-2;ka=259;break a}}}while(0);do{if((ka|0)==42){while(1){ka=0;if((xc|0)==0){Ja=wc;Ka=0;La=yc;Ma=ea;Na=zc;Oa=r;Pa=s;break a}Ha=xc+ -1|0;Ga=zc+1|0;Da=(d[zc]<<wc)+yc|0;Sa=wc+8|0;if(Sa>>>0<32){wc=Sa;xc=Ha;yc=Da;zc=Ga;ka=42}else{Ac=Ha;Bc=Da;Cc=Ga;ka=44;break}}}else if((ka|0)==91){ka=0;if((c[E>>2]|0)==0){ka=92;break a}Ga=zt(0,0,0)|0;c[x>>2]=Ga;c[C>>2]=Ga;c[l>>2]=11;mb=Mb;nb=Nb;ob=Ob;pb=Pb;ka=94}else if((ka|0)==112){ka=0;if((qa|0)==0){c[l>>2]=11;Ya=ra;Za=sa;_a=ta;$a=ea;ab=ua;bb=r;cb=o;db=s;break}Ga=qa>>>0>sa>>>0?sa:qa;Da=Ga>>>0>ea>>>0?ea:Ga;if((Da|0)==0){Lc=ra;Mc=sa;Nc=ta;Oc=ea;Pc=ua;Qc=s;ka=246;break a}tu(o|0,ua|0,Da|0)|0;c[D>>2]=(c[D>>2]|0)-Da;Ya=ra;Za=sa-Da|0;_a=ta;$a=ea-Da|0;ab=ua+Da|0;bb=r;cb=o+Da|0;db=s}else if((ka|0)==122){while(1){ka=0;if(vb>>>0<3){Da=vb;Ga=wb;Ha=xb;Sa=yb;while(1){if((Ga|0)==0){Ja=Da;Ka=0;La=Ha;Ma=ea;Na=Sa;Oa=r;Pa=s;break a}Ia=Ga+ -1|0;Qa=Sa+1|0;Ea=(d[Sa]<<Da)+Ha|0;Fa=Da+8|0;if(Fa>>>0<3){Da=Fa;Ga=Ia;Ha=Ea;Sa=Qa}else{fd=Fa;gd=Ia;hd=Ea;id=Qa;break}}}else{fd=vb;gd=wb;hd=xb;id=yb}c[W>>2]=ub+1;b[l+(e[63872+(ub<<1)>>1]<<1)+104>>1]=hd&7;Sa=hd>>>3;Ha=fd+ -3|0;Ga=c[W>>2]|0;if(Ga>>>0<(c[V>>2]|0)>>>0){ub=Ga;vb=Ha;wb=gd;xb=Sa;yb=id;ka=122}else{zb=Ga;Ab=Ha;Bb=gd;Cb=Sa;Db=id;ka=126;break}}}else if((ka|0)==238){ka=0;if((c[w>>2]|0)==0){jd=ad;kd=bd;ld=cd;md=dd;ka=245;break a}if((c[z>>2]|0)==0){jd=ad;kd=bd;ld=cd;md=dd;ka=245;break a}if(ad>>>0<32){Sa=ad;Ha=bd;Ga=cd;Da=dd;while(1){if((Ha|0)==0){Ja=Sa;Ka=0;La=Ga;Ma=ea;Na=Da;Oa=ed;Pa=s;break a}Qa=Ha+ -1|0;Ea=Da+1|0;Ia=(d[Da]<<Sa)+Ga|0;Fa=Sa+8|0;if(Fa>>>0<32){Sa=Fa;Ha=Qa;Ga=Ia;Da=Ea}else{nd=Fa;od=Qa;pd=Ia;qd=Ea;break}}}else{nd=ad;od=bd;pd=cd;qd=dd}if((pd|0)==(c[S>>2]|0)){jd=0;kd=od;ld=0;md=qd;ka=245;break a}c[A>>2]=64376;c[l>>2]=27;Ya=nd;Za=od;_a=pd;$a=ea;ab=qd;bb=ed;cb=o;db=s}}while(0);do{if((ka|0)==44){ka=0;if((c[z>>2]&512|0)!=0){a[j]=Bc;a[y]=Bc>>>8;a[$]=Bc>>>16;a[aa]=Bc>>>24;c[x>>2]=Js(c[x>>2]|0,j,4)|0}c[l>>2]=3;Qb=0;Rb=Ac;Sb=0;Tb=Cc;ka=48}else if((ka|0)==94){ka=0;if(F){Lc=mb;Mc=nb;Nc=ob;Oc=ea;Pc=pb;Qc=s;ka=246;break a}else{ib=mb;jb=nb;kb=ob;lb=pb;ka=95}}else if((ka|0)==126){ka=0;if(zb>>>0<19){Da=zb;while(1){Ga=Da+1|0;b[l+(e[63872+(Da<<1)>>1]<<1)+104>>1]=0;if((Ga|0)==19){break}else{Da=Ga}}c[W>>2]=19}c[Y>>2]=X;c[H>>2]=X;c[I>>2]=7;Da=Qs(0,Z,19,Y,I,_)|0;if((Da|0)==0){c[W>>2]=0;c[l>>2]=17;Xb=0;Yb=Ab;Zb=Bb;_b=Cb;$b=Db;ac=0;ka=132;break}else{c[A>>2]=64144;c[l>>2]=27;Ya=Ab;Za=Bb;_a=Cb;$a=ea;ab=Db;bb=r;cb=o;db=Da;break}}}while(0);do{if((ka|0)==48){while(1){ka=0;if((Rb|0)==0){Ja=Qb;Ka=0;La=Sb;Ma=ea;Na=Tb;Oa=r;Pa=s;break a}Da=Rb+ -1|0;Ga=Tb+1|0;Ha=(d[Tb]<<Qb)+Sb|0;Sa=Qb+8|0;if(Sa>>>0<16){Qb=Sa;Rb=Da;Sb=Ha;Tb=Ga;ka=48}else{Ub=Da;Vb=Ha;Wb=Ga;ka=50;break}}}else if((ka|0)==95){ka=0;if((c[G>>2]|0)!=0){Ga=ib&7;c[l>>2]=24;Ya=ib-Ga|0;Za=jb;_a=kb>>>Ga;$a=ea;ab=lb;bb=r;cb=o;db=s;break}if(ib>>>0<3){Ga=ib;Ha=jb;Da=kb;Sa=lb;while(1){if((Ha|0)==0){Ja=Ga;Ka=0;La=Da;Ma=ea;Na=Sa;Oa=r;Pa=s;break a}Ea=Ha+ -1|0;Ia=Sa+1|0;Qa=(d[Sa]<<Ga)+Da|0;Fa=Ga+8|0;if(Fa>>>0<3){Ga=Fa;Ha=Ea;Da=Qa;Sa=Ia}else{rd=Fa;sd=Ea;td=Qa;ud=Ia;break}}}else{rd=ib;sd=jb;td=kb;ud=lb}c[G>>2]=td&1;Sa=td>>>1&3;if((Sa|0)==1){c[H>>2]=64400;c[I>>2]=9;c[J>>2]=66448;c[K>>2]=5;c[l>>2]=18}else if((Sa|0)==0){c[l>>2]=13}else if((Sa|0)==2){c[l>>2]=15}else if((Sa|0)==3){c[A>>2]=64048;c[l>>2]=27}Ya=rd+ -3|0;Za=sd;_a=td>>>3;$a=ea;ab=ud;bb=r;cb=o;db=s}else if((ka|0)==132){ka=0;Sa=c[T>>2]|0;Da=c[U>>2]|0;c:do{if(Xb>>>0<(Da+Sa|0)>>>0){Ha=Xb;Ga=Da;Ia=Sa;Qa=Yb;Ea=Zb;Fa=_b;Ra=$b;d:while(1){Ta=(1<<c[I>>2])+ -1|0;vd=Ta&Fa;wd=c[H>>2]|0;xd=d[wd+(vd<<2)+1|0]|0;if(xd>>>0>Qa>>>0){yd=Qa;zd=Ea;Ad=Fa;Bd=Ra;while(1){if((zd|0)==0){Ja=yd;Ka=0;La=Ad;Ma=ea;Na=Bd;Oa=r;Pa=ac;break a}Cd=zd+ -1|0;Dd=Bd+1|0;Ed=(d[Bd]<<yd)+Ad|0;Fd=yd+8|0;Gd=Ta&Ed;Hd=d[wd+(Gd<<2)+1|0]|0;if(Hd>>>0>Fd>>>0){yd=Fd;zd=Cd;Ad=Ed;Bd=Dd}else{Id=Hd;Jd=Gd;Kd=Fd;Ld=Cd;Md=Ed;Nd=Dd;break}}}else{Id=xd;Jd=vd;Kd=Qa;Ld=Ea;Md=Fa;Nd=Ra}Bd=b[wd+(Jd<<2)+2>>1]|0;e:do{if((Bd&65535)<16){if(Kd>>>0<Id>>>0){Ad=Kd;zd=Ld;yd=Md;Ta=Nd;while(1){if((zd|0)==0){Ja=Ad;Ka=0;La=yd;Ma=ea;Na=Ta;Oa=r;Pa=ac;break a}Dd=zd+ -1|0;Ed=Ta+1|0;Cd=(d[Ta]<<Ad)+yd|0;Fd=Ad+8|0;if(Fd>>>0<Id>>>0){Ad=Fd;zd=Dd;yd=Cd;Ta=Ed}else{Od=Fd;Pd=Dd;Qd=Cd;Rd=Ed;break}}}else{Od=Kd;Pd=Ld;Qd=Md;Rd=Nd}c[W>>2]=Ha+1;b[l+(Ha<<1)+104>>1]=Bd;Sd=Od-Id|0;Td=Pd;Ud=Qd>>>Id;Vd=Rd}else{if(Bd<<16>>16==16){Ta=Id+2|0;if(Kd>>>0<Ta>>>0){yd=Kd;zd=Ld;Ad=Md;Ed=Nd;while(1){if((zd|0)==0){Ja=yd;Ka=0;La=Ad;Ma=ea;Na=Ed;Oa=r;Pa=ac;break a}Cd=zd+ -1|0;Dd=Ed+1|0;Fd=(d[Ed]<<yd)+Ad|0;Gd=yd+8|0;if(Gd>>>0<Ta>>>0){yd=Gd;zd=Cd;Ad=Fd;Ed=Dd}else{Wd=Gd;Xd=Cd;Yd=Fd;Zd=Dd;break}}}else{Wd=Kd;Xd=Ld;Yd=Md;Zd=Nd}_d=Yd>>>Id;$d=Wd-Id|0;if((Ha|0)==0){ka=149;break d}ae=$d+ -2|0;be=(_d&3)+3|0;ce=Xd;de=_d>>>2;ee=b[l+(Ha+ -1<<1)+104>>1]|0;fe=Zd}else if(Bd<<16>>16==17){Ed=Id+3|0;if(Kd>>>0<Ed>>>0){Ad=Kd;zd=Ld;yd=Md;Ta=Nd;while(1){if((zd|0)==0){Ja=Ad;Ka=0;La=yd;Ma=ea;Na=Ta;Oa=r;Pa=ac;break a}Dd=zd+ -1|0;Fd=Ta+1|0;Cd=(d[Ta]<<Ad)+yd|0;Gd=Ad+8|0;if(Gd>>>0<Ed>>>0){Ad=Gd;zd=Dd;yd=Cd;Ta=Fd}else{ge=Gd;he=Dd;ie=Cd;je=Fd;break}}}else{ge=Kd;he=Ld;ie=Md;je=Nd}Ta=ie>>>Id;ae=-3-Id+ge|0;be=(Ta&7)+3|0;ce=he;de=Ta>>>3;ee=0;fe=je}else{Ta=Id+7|0;if(Kd>>>0<Ta>>>0){yd=Kd;zd=Ld;Ad=Md;Ed=Nd;while(1){if((zd|0)==0){Ja=yd;Ka=0;La=Ad;Ma=ea;Na=Ed;Oa=r;Pa=ac;break a}Fd=zd+ -1|0;Cd=Ed+1|0;Dd=(d[Ed]<<yd)+Ad|0;Gd=yd+8|0;if(Gd>>>0<Ta>>>0){yd=Gd;zd=Fd;Ad=Dd;Ed=Cd}else{ke=Gd;le=Fd;me=Dd;ne=Cd;break}}}else{ke=Kd;le=Ld;me=Md;ne=Nd}Ed=me>>>Id;ae=-7-Id+ke|0;be=(Ed&127)+11|0;ce=le;de=Ed>>>7;ee=0;fe=ne}if((Ha+be|0)>>>0>(Ga+Ia|0)>>>0){ka=158;break d}else{oe=Ha;pe=be}while(1){Ed=pe+ -1|0;c[W>>2]=oe+1;b[l+(oe<<1)+104>>1]=ee;if((Ed|0)==0){Sd=ae;Td=ce;Ud=de;Vd=fe;break e}oe=c[W>>2]|0;pe=Ed}}}while(0);Bd=c[W>>2]|0;wd=c[T>>2]|0;vd=c[U>>2]|0;if(Bd>>>0<(vd+wd|0)>>>0){Ha=Bd;Ga=vd;Ia=wd;Qa=Sd;Ea=Td;Fa=Ud;Ra=Vd}else{qe=wd;re=Sd;se=Td;te=Ud;ue=Vd;break c}}if((ka|0)==149){ka=0;c[A>>2]=64176;c[l>>2]=27;qe=Ia;re=$d;se=Xd;te=_d;ue=Zd;break}else if((ka|0)==158){ka=0;c[A>>2]=64176;c[l>>2]=27;qe=Ia;re=ae;se=ce;te=de;ue=fe;break}}else{qe=Sa;re=Yb;se=Zb;te=_b;ue=$b}}while(0);c[Y>>2]=X;c[H>>2]=X;c[I>>2]=9;Sa=Qs(1,Z,qe,Y,I,_)|0;if((Sa|0)!=0){c[A>>2]=64208;c[l>>2]=27;Ya=re;Za=se;_a=te;$a=ea;ab=ue;bb=r;cb=o;db=Sa;break}c[J>>2]=c[Y>>2];c[K>>2]=6;Sa=Qs(2,l+(c[T>>2]<<1)+104|0,c[U>>2]|0,Y,K,_)|0;if((Sa|0)==0){c[l>>2]=18;la=re;ma=se;na=te;oa=ue;pa=0;ka=166;break}else{c[A>>2]=64240;c[l>>2]=27;Ya=re;Za=se;_a=te;$a=ea;ab=ue;bb=r;cb=o;db=Sa;break}}}while(0);do{if((ka|0)==50){ka=0;if((c[z>>2]&512|0)!=0){a[j]=Vb;a[y]=Vb>>>8;c[x>>2]=Js(c[x>>2]|0,j,2)|0}c[l>>2]=4;ga=0;ha=Ub;ia=0;ja=Wb;ka=53}else if((ka|0)==166){ka=0;if(ma>>>0>5&ea>>>0>257){c[m>>2]=o;c[n>>2]=ea;c[f>>2]=oa;c[p>>2]=ma;c[u>>2]=na;c[v>>2]=la;At(f,r);Ya=c[v>>2]|0;Za=c[p>>2]|0;_a=c[u>>2]|0;$a=c[n>>2]|0;ab=c[f>>2]|0;bb=r;cb=c[m>>2]|0;db=pa;break}Sa=(1<<c[I>>2])+ -1|0;Da=Sa&na;Ra=c[H>>2]|0;Fa=a[Ra+(Da<<2)+1|0]|0;Ea=Fa&255;if(Ea>>>0>la>>>0){Qa=la;Ga=ma;Ha=na;wd=oa;while(1){if((Ga|0)==0){Ja=Qa;Ka=0;La=Ha;Ma=ea;Na=wd;Oa=r;Pa=pa;break a}vd=Ga+ -1|0;Bd=wd+1|0;xd=(d[wd]<<Qa)+Ha|0;Ed=Qa+8|0;Ad=Sa&xd;zd=a[Ra+(Ad<<2)+1|0]|0;yd=zd&255;if(yd>>>0>Ed>>>0){Qa=Ed;Ga=vd;Ha=xd;wd=Bd}else{ve=zd;we=yd;xe=Ad;ye=Ed;ze=vd;Ae=xd;Be=Bd;break}}}else{ve=Fa;we=Ea;xe=Da;ye=la;ze=ma;Ae=na;Be=oa}wd=a[Ra+(xe<<2)|0]|0;Ha=b[Ra+(xe<<2)+2>>1]|0;Ga=wd&255;if(wd<<24>>24==0){Ce=ye;De=ze;Ee=Ae;Fe=Be;Ge=0;He=ve;Ie=Ha}else{if((Ga&240|0)==0){Qa=Ha&65535;Sa=(1<<we+Ga)+ -1|0;Ga=((Ae&Sa)>>>we)+Qa|0;Bd=a[Ra+(Ga<<2)+1|0]|0;if(((Bd&255)+we|0)>>>0>ye>>>0){xd=ye;vd=ze;Ed=Ae;Ad=Be;while(1){if((vd|0)==0){Ja=xd;Ka=0;La=Ed;Ma=ea;Na=Ad;Oa=r;Pa=pa;break a}yd=vd+ -1|0;zd=Ad+1|0;Ta=(d[Ad]<<xd)+Ed|0;Cd=xd+8|0;Dd=((Ta&Sa)>>>we)+Qa|0;Fd=a[Ra+(Dd<<2)+1|0]|0;if(((Fd&255)+we|0)>>>0>Cd>>>0){xd=Cd;vd=yd;Ed=Ta;Ad=zd}else{Je=Dd;Ke=Fd;Le=Cd;Me=yd;Ne=Ta;Oe=zd;break}}}else{Je=Ga;Ke=Bd;Le=ye;Me=ze;Ne=Ae;Oe=Be}Ce=Le-we|0;De=Me;Ee=Ne>>>we;Fe=Oe;Ge=a[Ra+(Je<<2)|0]|0;He=Ke;Ie=b[Ra+(Je<<2)+2>>1]|0}else{Ce=ye;De=ze;Ee=Ae;Fe=Be;Ge=wd;He=ve;Ie=Ha}}Ad=He&255;Ed=Ee>>>Ad;vd=Ce-Ad|0;c[D>>2]=Ie&65535;Ad=Ge&255;if(Ge<<24>>24==0){c[l>>2]=23;Ya=vd;Za=De;_a=Ed;$a=ea;ab=Fe;bb=r;cb=o;db=pa;break}if((Ad&32|0)!=0){c[l>>2]=11;Ya=vd;Za=De;_a=Ed;$a=ea;ab=Fe;bb=r;cb=o;db=pa;break}if((Ad&64|0)==0){xd=Ad&15;c[L>>2]=xd;c[l>>2]=19;qc=xd;rc=vd;sc=De;tc=Ed;uc=Fe;vc=pa;ka=184;break}else{c[A>>2]=64264;c[l>>2]=27;Ya=vd;Za=De;_a=Ed;$a=ea;ab=Fe;bb=r;cb=o;db=pa;break}}}while(0);if((ka|0)==53){ka=0;Ed=c[z>>2]|0;if((Ed&1024|0)==0){Pe=ga;Qe=ha;Re=ia;Se=ja}else{if(ga>>>0<16){vd=ga;xd=ha;Ad=ia;Qa=ja;while(1){if((xd|0)==0){Ja=vd;Ka=0;La=Ad;Ma=ea;Na=Qa;Oa=r;Pa=s;break a}Sa=xd+ -1|0;Da=Qa+1|0;Ea=(d[Qa]<<vd)+Ad|0;Fa=vd+8|0;if(Fa>>>0<16){vd=Fa;xd=Sa;Ad=Ea;Qa=Da}else{Te=Sa;Ue=Ea;Ve=Da;break}}}else{Te=ha;Ue=ia;Ve=ja}c[D>>2]=Ue;if((Ed&512|0)==0){Pe=0;Qe=Te;Re=0;Se=Ve}else{a[j]=Ue;a[y]=Ue>>>8;c[x>>2]=Js(c[x>>2]|0,j,2)|0;Pe=0;Qe=Te;Re=0;Se=Ve}}c[l>>2]=5;va=Pe;wa=Qe;xa=Re;ya=Se;ka=60}else if((ka|0)==184){ka=0;if((qc|0)==0){We=rc;Xe=sc;Ye=tc;Ze=uc}else{if(rc>>>0<qc>>>0){Qa=rc;Ad=sc;xd=tc;vd=uc;while(1){if((Ad|0)==0){Ja=Qa;Ka=0;La=xd;Ma=ea;Na=vd;Oa=r;Pa=vc;break a}Da=Ad+ -1|0;Ea=vd+1|0;Sa=(d[vd]<<Qa)+xd|0;Fa=Qa+8|0;if(Fa>>>0<qc>>>0){Qa=Fa;Ad=Da;xd=Sa;vd=Ea}else{_e=Fa;$e=Da;af=Sa;bf=Ea;break}}}else{_e=rc;$e=sc;af=tc;bf=uc}c[D>>2]=(c[D>>2]|0)+((1<<qc)+ -1&af);We=_e-qc|0;Xe=$e;Ye=af>>>qc;Ze=bf}c[l>>2]=20;hc=We;ic=Xe;jc=Ye;kc=Ze;lc=vc;ka=190}do{if((ka|0)==60){ka=0;vd=c[z>>2]|0;if((vd&1024|0)==0){cf=wa;df=ya}else{xd=c[D>>2]|0;Ad=xd>>>0>wa>>>0?wa:xd;if((Ad|0)==0){ef=xd;ff=wa;gf=ya}else{if((vd&512|0)==0){hf=xd}else{c[x>>2]=Js(c[x>>2]|0,ya,Ad)|0;hf=c[D>>2]|0}xd=hf-Ad|0;c[D>>2]=xd;ef=xd;ff=wa-Ad|0;gf=ya+Ad|0}if((ef|0)==0){cf=ff;df=gf}else{Lc=va;Mc=ff;Nc=xa;Oc=ea;Pc=gf;Qc=s;ka=246;break a}}c[l>>2]=6;za=va;Aa=cf;Ba=xa;Ca=df;ka=67}else if((ka|0)==190){ka=0;Ad=(1<<c[K>>2])+ -1|0;xd=Ad&jc;vd=c[J>>2]|0;Qa=a[vd+(xd<<2)+1|0]|0;Ed=Qa&255;if(Ed>>>0>hc>>>0){Ea=hc;Sa=ic;Da=jc;Fa=kc;while(1){if((Sa|0)==0){Ja=Ea;Ka=0;La=Da;Ma=ea;Na=Fa;Oa=r;Pa=lc;break a}zd=Sa+ -1|0;Ta=Fa+1|0;yd=(d[Fa]<<Ea)+Da|0;Cd=Ea+8|0;Fd=Ad&yd;Dd=a[vd+(Fd<<2)+1|0]|0;Gd=Dd&255;if(Gd>>>0>Cd>>>0){Ea=Cd;Sa=zd;Da=yd;Fa=Ta}else{jf=Dd;kf=Gd;lf=Fd;mf=Cd;nf=zd;of=yd;pf=Ta;break}}}else{jf=Qa;kf=Ed;lf=xd;mf=hc;nf=ic;of=jc;pf=kc}Fa=a[vd+(lf<<2)|0]|0;Da=b[vd+(lf<<2)+2>>1]|0;Sa=Fa&255;if((Sa&240|0)==0){Ea=Da&65535;Ad=(1<<kf+Sa)+ -1|0;Sa=((of&Ad)>>>kf)+Ea|0;Ha=a[vd+(Sa<<2)+1|0]|0;if(((Ha&255)+kf|0)>>>0>mf>>>0){wd=mf;Ra=nf;Bd=of;Ga=pf;while(1){if((Ra|0)==0){Ja=wd;Ka=0;La=Bd;Ma=ea;Na=Ga;Oa=r;Pa=lc;break a}Ta=Ra+ -1|0;yd=Ga+1|0;zd=(d[Ga]<<wd)+Bd|0;Cd=wd+8|0;Fd=((zd&Ad)>>>kf)+Ea|0;Gd=a[vd+(Fd<<2)+1|0]|0;if(((Gd&255)+kf|0)>>>0>Cd>>>0){wd=Cd;Ra=Ta;Bd=zd;Ga=yd}else{qf=Fd;rf=Gd;sf=Cd;tf=Ta;uf=zd;vf=yd;break}}}else{qf=Sa;rf=Ha;sf=mf;tf=nf;uf=of;vf=pf}wf=sf-kf|0;xf=tf;yf=uf>>>kf;zf=vf;Af=a[vd+(qf<<2)|0]|0;Bf=rf;Cf=b[vd+(qf<<2)+2>>1]|0}else{wf=mf;xf=nf;yf=of;zf=pf;Af=Fa;Bf=jf;Cf=Da}Ga=Bf&255;Bd=yf>>>Ga;Ra=wf-Ga|0;Ga=Af&255;if((Ga&64|0)==0){c[M>>2]=Cf&65535;wd=Ga&15;c[L>>2]=wd;c[l>>2]=21;bc=wd;cc=Ra;dc=xf;ec=Bd;fc=zf;gc=lc;ka=201;break}else{c[A>>2]=64296;c[l>>2]=27;Ya=Ra;Za=xf;_a=Bd;$a=ea;ab=zf;bb=r;cb=o;db=lc;break}}}while(0);do{if((ka|0)==67){ka=0;Bd=c[z>>2]|0;if((Bd&2048|0)==0){Df=Aa;Ef=Ca}else{if((Aa|0)==0){Lc=za;Mc=0;Nc=Ba;Oc=ea;Pc=Ca;Qc=s;ka=246;break a}else{Ff=0}while(1){Gf=Ff+1|0;Hf=(a[Ca+Ff|0]|0)!=0;if(Hf&Gf>>>0<Aa>>>0){Ff=Gf}else{break}}if((Bd&8192|0)!=0){c[x>>2]=Js(c[x>>2]|0,Ca,Gf)|0}Da=Aa-Gf|0;Fa=Ca+Gf|0;if(Hf){Lc=za;Mc=Da;Nc=Ba;Oc=ea;Pc=Fa;Qc=s;ka=246;break a}else{Df=Da;Ef=Fa}}c[l>>2]=7;eb=za;fb=Df;gb=Ba;hb=Ef;ka=74}else if((ka|0)==201){ka=0;if((bc|0)==0){If=c[M>>2]|0;Jf=cc;Kf=dc;Lf=ec;Mf=fc}else{if(cc>>>0<bc>>>0){Fa=cc;Da=dc;vd=ec;Ha=fc;while(1){if((Da|0)==0){Ja=Fa;Ka=0;La=vd;Ma=ea;Na=Ha;Oa=r;Pa=gc;break a}Sa=Da+ -1|0;Ra=Ha+1|0;wd=(d[Ha]<<Fa)+vd|0;Ga=Fa+8|0;if(Ga>>>0<bc>>>0){Fa=Ga;Da=Sa;vd=wd;Ha=Ra}else{Nf=Ga;Of=Sa;Pf=wd;Qf=Ra;break}}}else{Nf=cc;Of=dc;Pf=ec;Qf=fc}Ha=(c[M>>2]|0)+((1<<bc)+ -1&Pf)|0;c[M>>2]=Ha;If=Ha;Jf=Nf-bc|0;Kf=Of;Lf=Pf>>>bc;Mf=Qf}if(If>>>0>(r-ea+(c[N>>2]|0)|0)>>>0){c[A>>2]=64320;c[l>>2]=27;Ya=Jf;Za=Kf;_a=Lf;$a=ea;ab=Mf;bb=r;cb=o;db=gc;break}else{c[l>>2]=22;Eb=Jf;Fb=Kf;Gb=Lf;Hb=Mf;Ib=gc;ka=210;break}}}while(0);if((ka|0)==74){ka=0;Ha=c[z>>2]|0;if((Ha&4096|0)==0){Rf=fb;Sf=hb}else{if((fb|0)==0){Lc=eb;Mc=0;Nc=gb;Oc=ea;Pc=hb;Qc=s;ka=246;break}else{Tf=0}while(1){Uf=Tf+1|0;Vf=(a[hb+Tf|0]|0)!=0;if(Vf&Uf>>>0<fb>>>0){Tf=Uf}else{break}}if((Ha&8192|0)!=0){c[x>>2]=Js(c[x>>2]|0,hb,Uf)|0}vd=fb-Uf|0;Da=hb+Uf|0;if(Vf){Lc=eb;Mc=vd;Nc=gb;Oc=ea;Pc=Da;Qc=s;ka=246;break}else{Rf=vd;Sf=Da}}c[l>>2]=8;qb=eb;rb=Rf;sb=gb;tb=Sf;ka=81}else if((ka|0)==210){ka=0;if((ea|0)==0){Lc=Eb;Mc=Fb;Nc=Gb;Oc=0;Pc=Hb;Qc=Ib;ka=246;break}Da=r-ea|0;vd=c[M>>2]|0;if(vd>>>0>Da>>>0){Fa=vd-Da|0;Da=c[O>>2]|0;if(Fa>>>0>Da>>>0){Bd=Fa-Da|0;Wf=Bd;Xf=(c[P>>2]|0)+((c[Q>>2]|0)-Bd)|0}else{Wf=Fa;Xf=(c[P>>2]|0)+(Da-Fa)|0}Fa=c[D>>2]|0;Yf=Fa;Zf=Wf>>>0>Fa>>>0?Fa:Wf;_f=Xf}else{Fa=c[D>>2]|0;Yf=Fa;Zf=Fa;_f=o+(0-vd)|0}vd=Zf>>>0>ea>>>0?ea:Zf;c[D>>2]=Yf-vd;Fa=~ea;Da=~Zf;Bd=Fa>>>0>Da>>>0?Fa:Da;Da=vd;Fa=_f;Ra=o;while(1){a[Ra]=a[Fa]|0;Da=Da+ -1|0;if((Da|0)==0){break}else{Fa=Fa+1|0;Ra=Ra+1|0}}Ra=ea-vd|0;Fa=o+~Bd|0;if((c[D>>2]|0)==0){c[l>>2]=18;Ya=Eb;Za=Fb;_a=Gb;$a=Ra;ab=Hb;bb=r;cb=Fa;db=Ib}else{Ya=Eb;Za=Fb;_a=Gb;$a=Ra;ab=Hb;bb=r;cb=Fa;db=Ib}}do{if((ka|0)==81){ka=0;if((c[z>>2]&512|0)==0){$f=qb;ag=rb;bg=sb;cg=tb}else{if(qb>>>0<16){Fa=qb;Ra=rb;Da=sb;Ha=tb;while(1){if((Ra|0)==0){Ja=Fa;Ka=0;La=Da;Ma=ea;Na=Ha;Oa=r;Pa=s;break a}wd=Ra+ -1|0;Sa=Ha+1|0;Ga=(d[Ha]<<Fa)+Da|0;Ea=Fa+8|0;if(Ea>>>0<16){Fa=Ea;Ra=wd;Da=Ga;Ha=Sa}else{dg=Ea;eg=wd;fg=Ga;gg=Sa;break}}}else{dg=qb;eg=rb;fg=sb;gg=tb}if((fg|0)==(c[x>>2]&65535|0)){$f=0;ag=eg;bg=0;cg=gg}else{c[A>>2]=64024;c[l>>2]=27;Ya=dg;Za=eg;_a=fg;$a=ea;ab=gg;bb=r;cb=o;db=s;break}}Ha=Js(0,0,0)|0;c[x>>2]=Ha;c[C>>2]=Ha;c[l>>2]=11;Ya=$f;Za=ag;_a=bg;$a=ea;ab=cg;bb=r;cb=o;db=s}}while(0);ba=c[l>>2]|0;q=Ya;ca=Za;da=_a;ea=$a;fa=ab;r=bb;o=cb;s=db}if((ka|0)==92){c[m>>2]=o;c[n>>2]=ea;c[f>>2]=Pb;c[p>>2]=Nb;c[u>>2]=Ob;c[v>>2]=Mb;k=2;i=h;return k|0}else if((ka|0)==245){c[l>>2]=26;Ja=jd;Ka=kd;La=ld;Ma=ea;Na=md;Oa=ed;Pa=1}else if((ka|0)==246){Ja=Lc;Ka=Mc;La=Nc;Ma=Oc;Na=Pc;Oa=r;Pa=Qc}else if((ka|0)==258){k=-4;i=h;return k|0}else if((ka|0)==259){i=h;return k|0}c[m>>2]=o;c[n>>2]=Ma;c[f>>2]=Na;c[p>>2]=Ka;c[u>>2]=La;c[v>>2]=Ja;if((c[Q>>2]|0)==0){if((c[l>>2]|0)>>>0<24){if((Oa|0)!=(c[n>>2]|0)){ka=250}}}else{ka=250}if((ka|0)==250){if((Os(f,Oa)|0)!=0){c[l>>2]=28;k=-4;i=h;return k|0}}ka=c[p>>2]|0;p=c[n>>2]|0;n=Oa-p|0;Q=f+8|0;c[Q>>2]=t-ka+(c[Q>>2]|0);c[R>>2]=(c[R>>2]|0)+n;c[S>>2]=(c[S>>2]|0)+n;S=(Oa|0)==(p|0);if(!((c[w>>2]|0)==0|S)){w=c[x>>2]|0;p=(c[m>>2]|0)+(0-n)|0;if((c[z>>2]|0)==0){hg=zt(w,p,n)|0}else{hg=Js(w,p,n)|0}c[x>>2]=hg;c[C>>2]=hg}c[f+44>>2]=((c[G>>2]|0)!=0?64:0)+(c[v>>2]|0)+((c[l>>2]|0)==11?128:0);k=((t|0)==(ka|0)&S|(g|0)==4)&(Pa|0)==0?-5:Pa;i=h;return k|0}function Os(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;e=c[a+28>>2]|0;f=e+44|0;g=c[f>>2]|0;if((g|0)==0){h=Qh[c[a+32>>2]&15](c[a+40>>2]|0,1<<c[e+28>>2],1)|0;c[f>>2]=h;if((h|0)==0){j=1;i=d;return j|0}else{k=h}}else{k=g}g=e+32|0;h=c[g>>2]|0;if((h|0)==0){l=1<<c[e+28>>2];c[g>>2]=l;c[e+40>>2]=0;c[e+36>>2]=0;m=l}else{m=h}h=b-(c[a+16>>2]|0)|0;if(!(h>>>0<m>>>0)){tu(k|0,(c[a+12>>2]|0)+(0-m)|0,m|0)|0;c[e+40>>2]=0;c[e+36>>2]=c[g>>2];j=0;i=d;return j|0}b=e+40|0;l=c[b>>2]|0;n=m-l|0;m=n>>>0>h>>>0?h:n;n=a+12|0;tu(k+l|0,(c[n>>2]|0)+(0-h)|0,m|0)|0;l=h-m|0;if((h|0)!=(m|0)){tu(c[f>>2]|0,(c[n>>2]|0)+(0-l)|0,l|0)|0;c[b>>2]=l;c[e+36>>2]=c[g>>2];j=0;i=d;return j|0}l=(c[b>>2]|0)+h|0;n=c[g>>2]|0;c[b>>2]=(l|0)==(n|0)?0:l;l=e+36|0;e=c[l>>2]|0;if(!(e>>>0<n>>>0)){j=0;i=d;return j|0}c[l>>2]=e+h;j=0;i=d;return j|0}function Ps(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;b=i;if((a|0)==0){d=-2;i=b;return d|0}e=a+28|0;f=c[e>>2]|0;if((f|0)==0){d=-2;i=b;return d|0}g=a+36|0;h=c[g>>2]|0;if((h|0)==0){d=-2;i=b;return d|0}j=c[f+44>>2]|0;k=a+40|0;if((j|0)==0){l=h;m=f}else{Kh[h&63](c[k>>2]|0,j);l=c[g>>2]|0;m=c[e>>2]|0}Kh[l&63](c[k>>2]|0,m);c[e>>2]=0;d=0;i=b;return d|0}function Qs(d,f,g,h,j,k){d=d|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0;l=i;i=i+64|0;m=l+32|0;n=l;o=m+0|0;p=o+32|0;do{b[o>>1]=0;o=o+2|0}while((o|0)<(p|0));o=(g|0)==0;if(!o){p=0;do{q=m+(e[f+(p<<1)>>1]<<1)|0;b[q>>1]=(b[q>>1]|0)+1<<16>>16;p=p+1|0}while((p|0)!=(g|0))}p=c[j>>2]|0;q=15;while(1){r=q+ -1|0;if((b[m+(q<<1)>>1]|0)!=0){break}if((r|0)==0){s=-1;t=56;break}else{q=r}}if((t|0)==56){i=l;return s|0}r=p>>>0>q>>>0?q:p;p=1;while(1){u=p+1|0;if((b[m+(p<<1)>>1]|0)!=0){v=p;break}if(u>>>0<16){p=u}else{v=u;break}}p=r>>>0<v>>>0?v:r;r=1;u=1;do{r=(r<<1)-(e[m+(u<<1)>>1]|0)|0;u=u+1|0;if((r|0)<0){s=-1;t=56;break}}while(u>>>0<16);if((t|0)==56){i=l;return s|0}if((r|0)>0){if((d|0)==0){s=-1;i=l;return s|0}if((g-(e[m>>1]|0)|0)!=1){s=-1;i=l;return s|0}}b[n+2>>1]=0;r=0;u=1;do{r=(e[m+(u<<1)>>1]|0)+(r&65535)|0;u=u+1|0;b[n+(u<<1)>>1]=r}while((u|0)!=15);if(!o){o=0;do{u=b[f+(o<<1)>>1]|0;if(!(u<<16>>16==0)){r=n+((u&65535)<<1)|0;u=b[r>>1]|0;b[r>>1]=u+1<<16>>16;b[k+((u&65535)<<1)>>1]=o}o=o+1|0}while((o|0)!=(g|0))}if((d|0)==1){g=1<<p;if(g>>>0>1285){s=1;i=l;return s|0}else{w=1;x=g;y=66576+ -514|0;z=256;A=66640+ -514|0}}else if((d|0)==0){w=0;x=1<<p;y=k;z=19;A=k}else{w=0;x=1<<p;y=66704;z=-1;A=66768}d=x+ -1|0;g=p&255;o=p;n=0;u=0;r=v;v=-1;B=c[h>>2]|0;C=0;D=x;a:while(1){x=1<<o;E=u;F=r;G=C;while(1){H=F-n|0;I=H&255;J=b[k+(G<<1)>>1]|0;K=J&65535;if((K|0)<(z|0)){L=0;M=J}else{if((K|0)>(z|0)){L=b[A+(K<<1)>>1]&255;M=b[y+(K<<1)>>1]|0}else{L=96;M=0}}K=1<<H;H=E>>>n;J=x;while(1){N=J-K|0;O=N+H|0;a[B+(O<<2)|0]=L;a[B+(O<<2)+1|0]=I;b[B+(O<<2)+2>>1]=M;if((J|0)==(K|0)){break}else{J=N}}J=1<<F+ -1;while(1){if((J&E|0)==0){break}else{J=J>>>1}}if((J|0)==0){P=0}else{P=(J+ -1&E)+J|0}Q=G+1|0;K=m+(F<<1)|0;H=(b[K>>1]|0)+ -1<<16>>16;b[K>>1]=H;if(H<<16>>16==0){if((F|0)==(q|0)){break a}R=e[f+(e[k+(Q<<1)>>1]<<1)>>1]|0}else{R=F}if(!(R>>>0>p>>>0)){E=P;F=R;G=Q;continue}S=P&d;if((S|0)==(v|0)){E=P;F=R;G=Q}else{break}}G=(n|0)==0?p:n;F=B+(x<<2)|0;E=R-G|0;b:do{if(R>>>0<q>>>0){H=R;K=E;N=1<<E;while(1){O=N-(e[m+(H<<1)>>1]|0)|0;if((O|0)<1){T=K;break b}U=K+1|0;V=U+G|0;if(V>>>0<q>>>0){H=V;K=U;N=O<<1}else{T=U;break}}}else{T=E}}while(0);E=(1<<T)+D|0;if(w&E>>>0>1285){s=1;t=56;break}a[(c[h>>2]|0)+(S<<2)|0]=T;a[(c[h>>2]|0)+(S<<2)+1|0]=g;x=c[h>>2]|0;b[x+(S<<2)+2>>1]=(F-x|0)>>>2;o=T;n=G;u=P;r=R;v=S;B=F;C=Q;D=E}if((t|0)==56){i=l;return s|0}c:do{if((P|0)!=0){t=n;Q=P;C=q;S=B;R=I;while(1){if((t|0)==0){W=0;X=C;Y=S;Z=R}else{if((Q&d|0)==(v|0)){W=t;X=C;Y=S;Z=R}else{W=0;X=p;Y=c[h>>2]|0;Z=g}}r=Q>>>W;a[Y+(r<<2)|0]=64;a[Y+(r<<2)+1|0]=Z;b[Y+(r<<2)+2>>1]=0;r=1<<X+ -1;while(1){if((r&Q|0)==0){break}else{r=r>>>1}}if((r|0)==0){break c}Q=(r+ -1&Q)+r|0;if((Q|0)==0){break}else{t=W;C=X;S=Y;R=Z}}}}while(0);c[h>>2]=(c[h>>2]|0)+(D<<2);c[j>>2]=p;s=0;i=l;return s|0}function Rs(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;f=b+4|0;g=Qh[c[c[f>>2]>>2]&15](b,1,116)|0;c[b+392>>2]=g;c[g>>2]=60;c[g+8>>2]=61;c[g+112>>2]=0;if(d<<24>>24==0){d=Qh[c[(c[f>>2]|0)+4>>2]&15](b,1,1280)|0;c[g+32>>2]=d;c[g+36>>2]=d+128;c[g+40>>2]=d+256;c[g+44>>2]=d+384;c[g+48>>2]=d+512;c[g+52>>2]=d+640;c[g+56>>2]=d+768;c[g+60>>2]=d+896;c[g+64>>2]=d+1024;c[g+68>>2]=d+1152;c[g+4>>2]=10;c[g+12>>2]=8;c[g+16>>2]=0;i=e;return}d=b+36|0;if((c[d>>2]|0)>0){h=b+200|0;j=g+72|0;k=0;l=c[b+196>>2]|0;while(1){m=l+12|0;n=c[m>>2]|0;if((a[h]|0)==0){o=n}else{o=n*3|0}n=c[(c[f>>2]|0)+20>>2]|0;p=qq(c[l+28>>2]|0,c[l+8>>2]|0)|0;q=qq(c[l+32>>2]|0,c[m>>2]|0)|0;c[j+(k<<2)>>2]=Lh[n&3](b,1,1,p,q,o)|0;q=k+1|0;if((q|0)<(c[d>>2]|0)){k=q;l=l+84|0}else{r=j;break}}}else{r=g+72|0}c[g+4>>2]=9;c[g+12>>2]=7;c[g+16>>2]=r;i=e;return}function Ss(a){a=a|0;var b=0,d=0,e=0;b=i;c[a+128>>2]=0;d=c[a+392>>2]|0;do{if((c[a+292>>2]|0)>1){c[d+28>>2]=1}else{e=c[a+296>>2]|0;if((c[a+284>>2]|0)==1){c[d+28>>2]=c[e+72>>2];break}else{c[d+28>>2]=c[e+12>>2];break}}}while(0);c[d+20>>2]=0;c[d+24>>2]=0;i=b;return}function Ts(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;e=i;f=c[d+392>>2]|0;if((c[f+16>>2]|0)==0){g=d+136|0;c[g>>2]=0;i=e;return}a:do{if((a[d+73|0]|0)!=0){if((a[d+200|0]|0)!=0){h=d+140|0;if((c[h>>2]|0)!=0){j=f+112|0;k=c[j>>2]|0;if((k|0)==0){l=d+36|0;m=Qh[c[c[d+4>>2]>>2]&15](d,1,(c[l>>2]|0)*24|0)|0;c[j>>2]=m;n=l;o=m}else{n=d+36|0;o=k}if((c[n>>2]|0)>0){k=0;m=o;l=c[d+196>>2]|0;j=0;while(1){p=c[l+76>>2]|0;if((p|0)==0){break a}if((b[p>>1]|0)==0){break a}if((b[p+2>>1]|0)==0){break a}if((b[p+16>>1]|0)==0){break a}if((b[p+32>>1]|0)==0){break a}if((b[p+18>>1]|0)==0){break a}if((b[p+4>>1]|0)==0){break a}p=c[h>>2]|0;if((c[p+(k<<8)>>2]|0)<0){break a}q=p+(k<<8)+4|0;c[m+4>>2]=c[q>>2];r=(c[q>>2]|0)==0?j:1;q=p+(k<<8)+8|0;c[m+8>>2]=c[q>>2];s=(c[q>>2]|0)==0?r:1;r=p+(k<<8)+12|0;c[m+12>>2]=c[r>>2];q=(c[r>>2]|0)==0?s:1;s=p+(k<<8)+16|0;c[m+16>>2]=c[s>>2];r=(c[s>>2]|0)==0?q:1;q=p+(k<<8)+20|0;c[m+20>>2]=c[q>>2];j=(c[q>>2]|0)==0?r:1;k=k+1|0;if((k|0)>=(c[n>>2]|0)){break}else{m=m+24|0;l=l+84|0}}if(!(j<<24>>24==0)){c[f+12>>2]=9;g=d+136|0;c[g>>2]=0;i=e;return}}}}}}while(0);c[f+12>>2]=7;g=d+136|0;c[g>>2]=0;i=e;return}function Us(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;b=i;i=i+16|0;d=b;e=a+392|0;f=c[e>>2]|0;g=a+292|0;if((c[g>>2]|0)>0){h=a+4|0;j=f+72|0;k=a+128|0;l=0;do{m=c[a+(l<<2)+296>>2]|0;n=c[m+12>>2]|0;o=ea(n,c[k>>2]|0)|0;c[d+(l<<2)>>2]=Oh[c[(c[h>>2]|0)+32>>2]&3](a,c[j+(c[m+4>>2]<<2)>>2]|0,o,n,1)|0;l=l+1|0}while((l|0)<(c[g>>2]|0))}l=f+24|0;j=c[l>>2]|0;h=f+28|0;k=c[h>>2]|0;a:do{if((j|0)<(k|0)){n=f+20|0;o=a+312|0;m=a+408|0;p=f+32|0;q=k;r=c[n>>2]|0;s=j;b:while(1){if(r>>>0<(c[o>>2]|0)>>>0){t=r;while(1){u=c[g>>2]|0;if((u|0)>0){v=0;w=0;while(1){x=c[a+(w<<2)+296>>2]|0;y=c[x+52>>2]|0;z=ea(y,t)|0;A=c[x+56>>2]|0;if((A|0)>0){x=c[d+(w<<2)>>2]|0;if((y|0)>0){B=v;C=0;while(1){D=(y|0)>1?y:1;E=B;F=(c[x+(C+s<<2)>>2]|0)+(z<<7)|0;G=0;while(1){c[p+(E<<2)>>2]=F;G=G+1|0;if((G|0)>=(y|0)){break}else{E=E+1|0;F=F+128|0}}F=B+D|0;E=C+1|0;if((E|0)<(A|0)){B=F;C=E}else{H=F;break}}}else{H=v}}else{H=v}w=w+1|0;if((w|0)>=(u|0)){break}else{v=H}}}v=t+1|0;if((Yh[c[(c[m>>2]|0)+4>>2]&15](a,p)|0)<<24>>24==0){break b}if(v>>>0<(c[o>>2]|0)>>>0){t=v}else{break}}I=c[h>>2]|0}else{I=q}c[n>>2]=0;v=s+1|0;if((v|0)<(I|0)){q=I;r=0;s=v}else{break a}}c[l>>2]=s;c[n>>2]=t;J=0;i=b;return J|0}}while(0);t=a+128|0;l=(c[t>>2]|0)+1|0;c[t>>2]=l;t=c[a+284>>2]|0;if(!(l>>>0<t>>>0)){Jh[c[(c[a+400>>2]|0)+12>>2]&127](a);J=4;i=b;return J|0}I=c[e>>2]|0;do{if((c[g>>2]|0)>1){c[I+28>>2]=1}else{e=c[a+296>>2]|0;if(l>>>0<(t+ -1|0)>>>0){c[I+28>>2]=c[e+12>>2];break}else{c[I+28>>2]=c[e+72>>2];break}}}while(0);c[I+20>>2]=0;c[I+24>>2]=0;J=3;i=b;return J|0}function Vs(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;e=i;f=c[b+392>>2]|0;g=b+284|0;h=(c[g>>2]|0)+ -1|0;j=b+124|0;k=b+132|0;l=b+400|0;m=b+128|0;n=b+136|0;while(1){o=c[j>>2]|0;p=c[k>>2]|0;if((o|0)>=(p|0)){if((o|0)!=(p|0)){break}if((c[m>>2]|0)>>>0>(c[n>>2]|0)>>>0){break}}if((Mh[c[c[l>>2]>>2]&31](b)|0)==0){q=0;r=22;break}}if((r|0)==22){i=e;return q|0}r=b+36|0;l=c[r>>2]|0;if((l|0)>0){m=b+4|0;k=f+72|0;f=b+412|0;j=l;l=0;p=c[b+196>>2]|0;while(1){if((a[p+48|0]|0)==0){s=j}else{o=p+12|0;t=c[o>>2]|0;u=ea(t,c[n>>2]|0)|0;v=Oh[c[(c[m>>2]|0)+32>>2]&3](b,c[k+(l<<2)>>2]|0,u,t,0)|0;if((c[n>>2]|0)>>>0<h>>>0){w=c[o>>2]|0}else{t=c[o>>2]|0;o=((c[p+32>>2]|0)>>>0)%(t>>>0)|0;w=(o|0)==0?t:o}o=c[(c[f>>2]|0)+(l<<2)+4>>2]|0;if((w|0)>0){t=p+28|0;u=p+36|0;x=c[t>>2]|0;y=0;z=c[d+(l<<2)>>2]|0;while(1){if((x|0)==0){A=c[u>>2]|0;B=0}else{C=0;D=c[v+(y<<2)>>2]|0;E=0;while(1){Gh[o&31](b,p,D,z,E);F=c[u>>2]|0;G=C+1|0;H=c[t>>2]|0;if(G>>>0<H>>>0){C=G;D=D+128|0;E=F+E|0}else{A=F;B=H;break}}}y=y+1|0;if((y|0)==(w|0)){break}else{x=B;z=z+(A<<2)|0}}}s=c[r>>2]|0}l=l+1|0;if((l|0)>=(s|0)){break}else{j=s;p=p+84|0}}}p=(c[n>>2]|0)+1|0;c[n>>2]=p;q=p>>>0<(c[g>>2]|0)>>>0?3:4;i=e;return q|0}function Ws(a){a=a|0;return 0}function Xs(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,fa=0,ga=0,ha=0,ia=0,ja=0;e=i;f=b+392|0;g=c[f>>2]|0;h=(c[b+312>>2]|0)+ -1|0;j=b+284|0;k=c[j>>2]|0;l=k+ -1|0;m=g+24|0;n=c[m>>2]|0;o=g+28|0;p=c[o>>2]|0;do{if((n|0)<(p|0)){q=g+20|0;r=g+32|0;s=b+320|0;t=b+408|0;u=b+292|0;v=b+412|0;w=b+128|0;x=p;y=c[q>>2]|0;z=n;a:while(1){if(y>>>0>h>>>0){A=x}else{B=y;while(1){tq(c[r>>2]|0,c[s>>2]<<7);if((Yh[c[(c[t>>2]|0)+4>>2]&15](b,r)|0)<<24>>24==0){break a}C=c[u>>2]|0;if((C|0)>0){D=B>>>0<h>>>0;E=C;C=0;F=0;while(1){G=c[b+(F<<2)+296>>2]|0;if((a[G+48|0]|0)==0){H=E;I=(c[G+60>>2]|0)+C|0}else{J=c[G+4>>2]|0;K=c[(c[v>>2]|0)+(J<<2)+4>>2]|0;L=G+52|0;M=c[(D?L:G+68|0)>>2]|0;N=G+36|0;O=c[N>>2]|0;P=ea(c[G+64>>2]|0,B)|0;Q=G+56|0;R=c[Q>>2]|0;if((R|0)>0){S=ea(O,z)|0;T=G+72|0;b:do{if((M|0)>0){U=R;V=O;W=C;X=(c[d+(J<<2)>>2]|0)+(S<<2)|0;Y=0;while(1){if((c[w>>2]|0)>>>0<l>>>0){Z=P;_=0;$=17}else{if((Y+z|0)<(c[T>>2]|0)){Z=P;_=0;$=17}else{aa=U;ba=V}}if(($|0)==17){while(1){$=0;Gh[K&31](b,G,c[r+(_+W<<2)>>2]|0,X,Z);ca=c[N>>2]|0;_=_+1|0;if((_|0)==(M|0)){break}else{Z=ca+Z|0;$=17}}aa=c[Q>>2]|0;ba=ca}da=(c[L>>2]|0)+W|0;fa=Y+1|0;if((fa|0)>=(aa|0)){ga=da;break b}U=aa;V=ba;W=da;X=X+(ba<<2)|0;Y=fa}}else{Y=C;X=0;while(1){W=(c[L>>2]|0)+Y|0;V=X+1|0;if((V|0)<(R|0)){Y=W;X=V}else{ga=W;break}}}}while(0);H=c[u>>2]|0;I=ga}else{H=E;I=C}}F=F+1|0;if((F|0)>=(H|0)){break}else{E=H;C=I}}}C=B+1|0;if(C>>>0>h>>>0){break}else{B=C}}A=c[o>>2]|0}c[q>>2]=0;C=z+1|0;if((C|0)<(A|0)){x=A;y=0;z=C}else{$=25;break}}if(($|0)==25){ha=w;ia=c[j>>2]|0;break}c[m>>2]=z;c[q>>2]=B;ja=0;i=e;return ja|0}else{ha=b+128|0;ia=k}}while(0);k=b+136|0;c[k>>2]=(c[k>>2]|0)+1;k=(c[ha>>2]|0)+1|0;c[ha>>2]=k;if(!(k>>>0<ia>>>0)){Jh[c[(c[b+400>>2]|0)+12>>2]&127](b);ja=4;i=e;return ja|0}ha=c[f>>2]|0;do{if((c[b+292>>2]|0)>1){c[ha+28>>2]=1}else{f=c[b+296>>2]|0;if(k>>>0<(ia+ -1|0)>>>0){c[ha+28>>2]=c[f+12>>2];break}else{c[ha+28>>2]=c[f+72>>2];break}}}while(0);c[ha+20>>2]=0;c[ha+24>>2]=0;ja=3;i=e;return ja|0}function Ys(d,f){d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0;g=i;i=i+128|0;h=g;j=c[d+392>>2]|0;k=d+284|0;l=(c[k>>2]|0)+ -1|0;m=d+124|0;n=d+132|0;o=d+400|0;p=d+364|0;q=d+128|0;r=d+136|0;while(1){s=c[m>>2]|0;t=c[n>>2]|0;if((s|0)>(t|0)){break}u=c[o>>2]|0;if((a[u+17|0]|0)!=0){break}if((s|0)==(t|0)){if((c[q>>2]|0)>>>0>((c[r>>2]|0)+((c[p>>2]|0)==0)|0)>>>0){break}}if((Mh[c[u>>2]&31](d)|0)==0){v=0;w=75;break}}if((w|0)==75){i=g;return v|0}w=d+36|0;p=c[w>>2]|0;if((p|0)>0){q=d+4|0;o=j+72|0;n=j+112|0;j=d+412|0;m=h+4|0;u=h+18|0;t=h+32|0;s=h+16|0;x=h+2|0;y=p;p=0;z=c[d+196>>2]|0;while(1){if((a[z+48|0]|0)==0){A=y}else{B=c[r>>2]|0;if(B>>>0<l>>>0){C=c[z+12>>2]|0;D=C;E=C<<1;F=C;G=0}else{C=c[z+12>>2]|0;H=((c[z+32>>2]|0)>>>0)%(C>>>0)|0;I=(H|0)==0?C:H;D=C;E=I;F=I;G=1}if((B|0)==0){J=Oh[c[(c[q>>2]|0)+32>>2]&3](d,c[o+(p<<2)>>2]|0,0,E,0)|0;K=1}else{I=ea(D,B+ -1|0)|0;B=Oh[c[(c[q>>2]|0)+32>>2]&3](d,c[o+(p<<2)>>2]|0,I,D+E|0,0)|0;J=B+(c[z+12>>2]<<2)|0;K=0}B=c[n>>2]|0;I=p*6|0;C=c[z+76>>2]|0;H=e[C>>1]|0;L=e[C+2>>1]|0;M=e[C+16>>1]|0;N=e[C+32>>1]|0;O=e[C+18>>1]|0;P=e[C+4>>1]|0;C=c[(c[j>>2]|0)+(p<<2)+4>>2]|0;if((F|0)>0){Q=(K|0)!=0;R=(G|0)!=0;S=z+28|0;T=B+((I|1)<<2)|0;U=B+(I+2<<2)|0;V=B+(I+3<<2)|0;W=B+(I+4<<2)|0;X=B+(I+5<<2)|0;I=z+36|0;B=H*9|0;Y=P<<7;Z=P<<8;P=H*5|0;_=O<<7;$=O<<8;O=N<<7;aa=N<<8;N=H*36|0;H=M<<7;ba=M<<8;M=L<<7;ca=L<<8;L=F+ -1|0;da=0;fa=c[f+(p<<2)>>2]|0;while(1){ga=c[J+(da<<2)>>2]|0;if(Q&(da|0)==0){ha=ga}else{ha=c[J+(da+ -1<<2)>>2]|0}if(R&(da|0)==(L|0)){ia=ga}else{ia=c[J+(da+1<<2)>>2]|0}ja=b[ha>>1]|0;ka=b[ga>>1]|0;la=b[ia>>1]|0;ma=(c[S>>2]|0)+ -1|0;na=ja;oa=ja;ja=ka;pa=ka;ka=la;qa=la;la=0;ra=ga;ga=ia;sa=0;ta=ha;while(1){sq(ra,h,1);if(la>>>0<ma>>>0){ua=b[ta+128>>1]|0;va=b[ra+128>>1]|0;wa=b[ga+128>>1]|0}else{ua=oa;va=pa;wa=qa}xa=c[T>>2]|0;if((xa|0)!=0){if((b[x>>1]|0)==0){ya=ea(N,ja-va|0)|0;if((ya|0)>-1){za=(ya+M|0)/(ca|0)|0;if((xa|0)>0){Aa=1<<xa;Ba=(za|0)<(Aa|0)?za:Aa+ -1|0}else{Ba=za}}else{za=(M-ya|0)/(ca|0)|0;if((xa|0)>0){ya=1<<xa;Ca=(za|0)<(ya|0)?za:ya+ -1|0}else{Ca=za}Ba=0-Ca|0}b[x>>1]=Ba}}za=c[U>>2]|0;if((za|0)!=0){if((b[s>>1]|0)==0){ya=ea(N,oa-qa|0)|0;if((ya|0)>-1){xa=(ya+H|0)/(ba|0)|0;if((za|0)>0){Aa=1<<za;Da=(xa|0)<(Aa|0)?xa:Aa+ -1|0}else{Da=xa}}else{xa=(H-ya|0)/(ba|0)|0;if((za|0)>0){ya=1<<za;Ea=(xa|0)<(ya|0)?xa:ya+ -1|0}else{Ea=xa}Da=0-Ea|0}b[s>>1]=Da}}xa=c[V>>2]|0;if((xa|0)!=0){if((b[t>>1]|0)==0){ya=ea(B,oa-(pa<<1)+qa|0)|0;if((ya|0)>-1){za=(ya+O|0)/(aa|0)|0;if((xa|0)>0){Aa=1<<xa;Fa=(za|0)<(Aa|0)?za:Aa+ -1|0}else{Fa=za}}else{za=(O-ya|0)/(aa|0)|0;if((xa|0)>0){ya=1<<xa;Ga=(za|0)<(ya|0)?za:ya+ -1|0}else{Ga=za}Fa=0-Ga|0}b[t>>1]=Fa}}za=c[W>>2]|0;if((za|0)!=0){if((b[u>>1]|0)==0){ya=ea(P,na-ka-ua+wa|0)|0;if((ya|0)>-1){xa=(ya+_|0)/($|0)|0;if((za|0)>0){Aa=1<<za;Ha=(xa|0)<(Aa|0)?xa:Aa+ -1|0}else{Ha=xa}}else{xa=(_-ya|0)/($|0)|0;if((za|0)>0){ya=1<<za;Ia=(xa|0)<(ya|0)?xa:ya+ -1|0}else{Ia=xa}Ha=0-Ia|0}b[u>>1]=Ha}}xa=c[X>>2]|0;if((xa|0)!=0){if((b[m>>1]|0)==0){ya=ea(B,ja-(pa<<1)+va|0)|0;if((ya|0)>-1){za=(ya+Y|0)/(Z|0)|0;if((xa|0)>0){Aa=1<<xa;Ja=(za|0)<(Aa|0)?za:Aa+ -1|0}else{Ja=za}}else{za=(Y-ya|0)/(Z|0)|0;if((xa|0)>0){ya=1<<xa;Ka=(za|0)<(ya|0)?za:ya+ -1|0}else{Ka=za}Ja=0-Ka|0}b[m>>1]=Ja}}Gh[C&31](d,z,h,fa,sa);La=c[I>>2]|0;la=la+1|0;if(la>>>0>ma>>>0){break}else{za=qa;ya=pa;xa=oa;oa=ua;pa=va;qa=wa;ra=ra+128|0;ga=ga+128|0;sa=La+sa|0;ta=ta+128|0;ka=za;ja=ya;na=xa}}da=da+1|0;if((da|0)==(F|0)){break}else{fa=fa+(La<<2)|0}}}A=c[w>>2]|0}p=p+1|0;if((p|0)>=(A|0)){break}else{y=A;z=z+84|0}}}z=(c[r>>2]|0)+1|0;c[r>>2]=z;v=z>>>0<(c[k>>2]|0)>>>0?3:4;i=g;return v|0}function Zs(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;d=i;e=b+4|0;f=Qh[c[c[e>>2]>>2]&15](b,1,24)|0;g=b+420|0;c[g>>2]=f;c[f>>2]=62;h=b+40|0;switch(c[h>>2]|0){case 5:case 4:{if((c[b+36>>2]|0)!=4){j=c[b>>2]|0;c[j+20>>2]=10;Jh[c[j>>2]&127](b)}break};case 3:case 2:{if((c[b+36>>2]|0)!=3){j=c[b>>2]|0;c[j+20>>2]=10;Jh[c[j>>2]&127](b)}break};case 1:{if((c[b+36>>2]|0)!=1){j=c[b>>2]|0;c[j+20>>2]=10;Jh[c[j>>2]&127](b)}break};default:{if((c[b+36>>2]|0)<1){j=c[b>>2]|0;c[j+20>>2]=10;Jh[c[j>>2]&127](b)}}}j=b+44|0;k=c[j>>2]|0;do{if((k|0)==1){c[b+100>>2]=1;l=c[h>>2]|0;if(!((l|0)==3|(l|0)==1)){l=c[b>>2]|0;c[l+20>>2]=27;Jh[c[l>>2]&127](b);break}c[f+4>>2]=3;l=b+36|0;if((c[l>>2]|0)>1){m=b+196|0;n=1;do{a[(c[m>>2]|0)+(n*84|0)+48|0]=0;n=n+1|0}while((n|0)<(c[l>>2]|0))}}else if((k|0)==2){c[b+100>>2]=3;l=c[h>>2]|0;if((l|0)==1){c[f+4>>2]=5;break}else if((l|0)==2){c[f+4>>2]=6;break}else if((l|0)==3){c[f+4>>2]=4;l=c[g>>2]|0;n=l+8|0;c[n>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;m=l+12|0;c[m>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;o=l+16|0;c[o>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;p=l+20|0;c[p>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;l=c[n>>2]|0;n=c[o>>2]|0;o=0;q=-128;while(1){c[l+(o<<2)>>2]=(q*91881|0)+32768>>16;c[(c[m>>2]|0)+(o<<2)>>2]=(q*116130|0)+32768>>16;c[n+(o<<2)>>2]=ea(q,-46802)|0;r=(ea(q,-22554)|0)+32768|0;c[(c[p>>2]|0)+(o<<2)>>2]=r;o=o+1|0;if((o|0)==256){break}else{q=q+1|0}}}else{q=c[b>>2]|0;c[q+20>>2]=27;Jh[c[q>>2]&127](b);break}}else if((k|0)==4){c[b+100>>2]=4;q=c[h>>2]|0;if((q|0)==5){c[f+4>>2]=7;o=c[g>>2]|0;p=o+8|0;c[p>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;n=o+12|0;c[n>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;m=o+16|0;c[m>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;l=o+20|0;c[l>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;o=c[p>>2]|0;p=c[m>>2]|0;m=0;r=-128;while(1){c[o+(m<<2)>>2]=(r*91881|0)+32768>>16;c[(c[n>>2]|0)+(m<<2)>>2]=(r*116130|0)+32768>>16;c[p+(m<<2)>>2]=ea(r,-46802)|0;s=(ea(r,-22554)|0)+32768|0;c[(c[l>>2]|0)+(m<<2)>>2]=s;m=m+1|0;if((m|0)==256){break}else{r=r+1|0}}}else if((q|0)==4){c[f+4>>2]=6;break}else{r=c[b>>2]|0;c[r+20>>2]=27;Jh[c[r>>2]&127](b);break}}else{r=c[h>>2]|0;if((k|0)!=(r|0)){c[j>>2]=r;if((r|0)==0){r=c[b>>2]|0;c[r+20>>2]=27;Jh[c[r>>2]&127](b);break}}c[b+100>>2]=c[b+36>>2];c[f+4>>2]=6}}while(0);if((a[b+74|0]|0)==0){c[b+104>>2]=c[b+100>>2];i=d;return}else{c[b+104>>2]=1;i=d;return}}function _s(a){a=a|0;return}function $s(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;rq(c[b>>2]|0,d,e,0,f,c[a+92>>2]|0);i=g;return}function at(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;j=i;k=c[b+420>>2]|0;l=c[b+92>>2]|0;m=c[b+288>>2]|0;b=c[k+8>>2]|0;n=c[k+12>>2]|0;o=c[k+16>>2]|0;p=c[k+20>>2]|0;if((h|0)<=0){i=j;return}k=e+4|0;q=e+8|0;if((l|0)==0){i=j;return}else{r=g;s=f;t=h}while(1){h=t+ -1|0;f=c[(c[e>>2]|0)+(s<<2)>>2]|0;g=c[(c[k>>2]|0)+(s<<2)>>2]|0;u=c[(c[q>>2]|0)+(s<<2)>>2]|0;v=s+1|0;w=r+4|0;x=0;y=c[r>>2]|0;while(1){z=d[f+x|0]|0;A=d[g+x|0]|0;B=d[u+x|0]|0;a[y]=a[m+((c[b+(B<<2)>>2]|0)+z)|0]|0;a[y+1|0]=a[m+(((c[o+(B<<2)>>2]|0)+(c[p+(A<<2)>>2]|0)>>16)+z)|0]|0;a[y+2|0]=a[m+((c[n+(A<<2)>>2]|0)+z)|0]|0;x=x+1|0;if((x|0)==(l|0)){break}else{y=y+3|0}}if((h|0)>0){r=w;s=v;t=h}else{break}}i=j;return}function bt(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;j=c[b+92>>2]|0;if((g|0)<1|(j|0)==0){i=h;return}else{k=f;l=e;m=g}while(1){g=m+ -1|0;e=l+1|0;f=c[(c[d>>2]|0)+(l<<2)>>2]|0;b=k+4|0;n=0;o=c[k>>2]|0;while(1){p=a[f+n|0]|0;a[o+2|0]=p;a[o+1|0]=p;a[o]=p;n=n+1|0;if((n|0)==(j|0)){break}else{o=o+3|0}}if((g|0)>0){k=b;l=e;m=g}else{break}}i=h;return}function ct(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0;h=i;j=c[b+36>>2]|0;k=c[b+92>>2]|0;if((g|0)<=0){i=h;return}b=(k|0)==0;l=e;e=f;f=g;while(1){f=f+ -1|0;if(!((j|0)<1|b)){g=0;do{m=k;n=c[(c[d+(g<<2)>>2]|0)+(l<<2)>>2]|0;o=(c[e>>2]|0)+g|0;while(1){a[o]=a[n]|0;m=m+ -1|0;if((m|0)==0){break}else{n=n+1|0;o=o+j|0}}g=g+1|0}while((g|0)!=(j|0))}if((f|0)<=0){break}else{l=l+1|0;e=e+4|0}}i=h;return}function dt(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;j=i;k=c[b+420>>2]|0;l=c[b+92>>2]|0;m=c[b+288>>2]|0;b=c[k+8>>2]|0;n=c[k+12>>2]|0;o=c[k+16>>2]|0;p=c[k+20>>2]|0;if((h|0)<=0){i=j;return}k=e+4|0;q=e+8|0;r=e+12|0;if((l|0)==0){i=j;return}else{s=g;t=f;u=h}while(1){h=u+ -1|0;f=c[(c[e>>2]|0)+(t<<2)>>2]|0;g=c[(c[k>>2]|0)+(t<<2)>>2]|0;v=c[(c[q>>2]|0)+(t<<2)>>2]|0;w=c[(c[r>>2]|0)+(t<<2)>>2]|0;x=t+1|0;y=s+4|0;z=0;A=c[s>>2]|0;while(1){B=d[g+z|0]|0;C=d[v+z|0]|0;D=(d[f+z|0]|0)^255;a[A]=a[m+(D-(c[b+(C<<2)>>2]|0))|0]|0;a[A+1|0]=a[m+(D-((c[o+(C<<2)>>2]|0)+(c[p+(B<<2)>>2]|0)>>16))|0]|0;a[A+2|0]=a[m+(D-(c[n+(B<<2)>>2]|0))|0]|0;a[A+3|0]=a[w+z|0]|0;z=z+1|0;if((z|0)==(l|0)){break}else{A=A+4|0}}if((h|0)>0){s=y;t=x;u=h}else{break}}i=j;return}



function Po(a){a=a|0;var b=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;b=i;e=a+24|0;f=c[e>>2]|0;g=f+4|0;h=c[g>>2]|0;do{if((h|0)==0){if((Mh[c[f+12>>2]&31](a)|0)<<24>>24==0){j=0;i=b;return j|0}else{k=c[g>>2]|0;break}}else{k=h}}while(0);h=c[f>>2]|0;l=k+ -1|0;k=h+1|0;m=(d[h]|0)<<8;do{if((l|0)==0){if((Mh[c[f+12>>2]&31](a)|0)<<24>>24==0){j=0;i=b;return j|0}else{n=c[g>>2]|0;o=c[f>>2]|0;break}}else{n=l;o=k}}while(0);k=(d[o]|0|m)+ -2|0;m=c[a>>2]|0;c[m+20>>2]=91;c[m+24>>2]=c[a+380>>2];c[m+28>>2]=k;Kh[c[m+4>>2]&63](a,1);c[f>>2]=o+1;c[g>>2]=n+ -1;if((k|0)<=0){j=1;i=b;return j|0}Kh[c[(c[e>>2]|0)+16>>2]&63](a,k);j=1;i=b;return j|0}function Qo(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;e=i;i=i+16|0;f=e;g=b+24|0;h=c[g>>2]|0;j=h+4|0;k=c[j>>2]|0;do{if((k|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){l=0;i=e;return l|0}else{m=c[j>>2]|0;break}}else{m=k}}while(0);k=c[h>>2]|0;n=m+ -1|0;m=k+1|0;o=d[k]<<8;do{if((n|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){l=0;i=e;return l|0}else{p=c[j>>2]|0;q=c[h>>2]|0;break}}else{p=n;q=m}}while(0);m=(d[q]|o)+ -2|0;o=p+ -1|0;p=q+1|0;if((m|0)>13){r=o;s=p;t=14;u=9}else{if((m|0)<1){v=o;w=p;x=0}else{r=o;s=p;t=m;u=9}}a:do{if((u|0)==9){p=h+12|0;o=r;q=0;n=s;while(1){if((o|0)==0){if((Mh[c[p>>2]&31](b)|0)<<24>>24==0){l=0;break}y=c[j>>2]|0;z=c[h>>2]|0}else{y=o;z=n}a[f+q|0]=a[z]|0;k=q+1|0;A=y+ -1|0;B=z+1|0;if(k>>>0<t>>>0){o=A;q=k;n=B}else{v=A;w=B;x=t;break a}}i=e;return l|0}}while(0);t=m-x|0;z=b+380|0;y=c[z>>2]|0;do{if((y|0)==238){if(x>>>0>11){if((a[f]|0)==65){if((a[f+1|0]|0)==100){if((a[f+2|0]|0)==111){if((a[f+3|0]|0)==98){if((a[f+4|0]|0)==101){s=d[f+7|0]<<8|d[f+8|0];r=d[f+9|0]<<8|d[f+10|0];u=a[f+11|0]|0;n=c[b>>2]|0;c[n+24>>2]=d[f+5|0]<<8|d[f+6|0];c[n+28>>2]=s;c[n+32>>2]=r;c[n+36>>2]=u&255;c[n+20>>2]=76;Kh[c[n+4>>2]&63](b,1);a[b+264|0]=1;a[b+265|0]=u;break}}}}}}u=c[b>>2]|0;c[u+20>>2]=78;c[u+24>>2]=m;Kh[c[u+4>>2]&63](b,1)}else if((y|0)==224){Ro(b,f,x,t)}else{u=c[b>>2]|0;c[u+20>>2]=68;c[u+24>>2]=c[z>>2];Jh[c[u>>2]&127](b)}}while(0);c[h>>2]=w;c[j>>2]=v;if((t|0)<=0){l=1;i=e;return l|0}Kh[c[(c[g>>2]|0)+16>>2]&63](b,t);l=1;i=e;return l|0}function Ro(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;k=h+g|0;if(g>>>0>13){if((a[f]|0)==74){if((a[f+1|0]|0)==70){if((a[f+2|0]|0)==73){if((a[f+3|0]|0)==70){if((a[f+4|0]|0)==0){a[e+256|0]=1;h=a[f+5|0]|0;l=e+257|0;a[l]=h;m=e+258|0;a[m]=a[f+6|0]|0;n=e+259|0;a[n]=a[f+7|0]|0;o=(d[f+8|0]<<8|d[f+9|0])&65535;p=e+260|0;b[p>>1]=o;q=(d[f+10|0]<<8|d[f+11|0])&65535;r=e+262|0;b[r>>1]=q;if(h<<24>>24==1){s=e;t=1;u=o;v=q}else{q=c[e>>2]|0;c[q+20>>2]=119;c[q+24>>2]=d[l]|0;c[q+28>>2]=d[m]|0;Kh[c[q+4>>2]&63](e,-1);s=e;t=a[l]|0;u=b[p>>1]|0;v=b[r>>1]|0}r=c[e>>2]|0;c[r+24>>2]=t&255;c[r+28>>2]=d[m]|0;c[r+32>>2]=u&65535;c[r+36>>2]=v&65535;c[r+40>>2]=d[n]|0;c[r+20>>2]=87;Kh[c[r+4>>2]&63](s,1);r=f+12|0;n=a[r]|0;v=f+13|0;u=a[v]|0;if((u|n)<<24>>24==0){w=n;x=u}else{u=c[e>>2]|0;c[u+20>>2]=90;c[u+24>>2]=d[r]|0;c[u+28>>2]=d[v]|0;Kh[c[u+4>>2]&63](s,1);w=a[r]|0;x=a[v]|0}v=k+ -14|0;if((v|0)==(ea((w&255)*3|0,x&255)|0)){i=j;return}x=c[e>>2]|0;c[x+20>>2]=88;c[x+24>>2]=v;Kh[c[x+4>>2]&63](s,1);i=j;return}}}}}}if(g>>>0>5){if((a[f]|0)==74){if((a[f+1|0]|0)==70){if((a[f+2|0]|0)==88){if((a[f+3|0]|0)==88){if((a[f+4|0]|0)==0){g=f+5|0;f=d[g]|0;if((f|0)==19){s=c[e>>2]|0;c[s+20>>2]=110;c[s+24>>2]=k;Kh[c[s+4>>2]&63](e,1);i=j;return}else if((f|0)==17){s=c[e>>2]|0;c[s+20>>2]=109;c[s+24>>2]=k;Kh[c[s+4>>2]&63](e,1);i=j;return}else if((f|0)==16){f=c[e>>2]|0;c[f+20>>2]=108;c[f+24>>2]=k;Kh[c[f+4>>2]&63](e,1);i=j;return}else{f=c[e>>2]|0;c[f+20>>2]=89;c[f+24>>2]=d[g]|0;c[f+28>>2]=k;Kh[c[f+4>>2]&63](e,1);i=j;return}}}}}}}f=c[e>>2]|0;c[f+20>>2]=77;c[f+24>>2]=k;Kh[c[f+4>>2]&63](e,1);i=j;return}function So(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;g=i;h=c[b+24>>2]|0;j=c[h>>2]|0;k=h+4|0;l=c[k>>2]|0;a[b+200|0]=e;a[b+201|0]=f;do{if((l|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){m=0;i=g;return m|0}else{n=c[k>>2]|0;o=c[h>>2]|0;break}}else{n=l;o=j}}while(0);j=n+ -1|0;n=o+1|0;l=d[o]<<8;do{if((j|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){m=0;i=g;return m|0}else{p=c[k>>2]|0;q=c[h>>2]|0;break}}else{p=j;q=n}}while(0);n=p+ -1|0;p=q+1|0;j=d[q]|l;do{if((n|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){m=0;i=g;return m|0}else{r=c[k>>2]|0;s=c[h>>2]|0;break}}else{r=n;s=p}}while(0);p=r+ -1|0;r=s+1|0;c[b+192>>2]=d[s]|0;do{if((p|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){m=0;i=g;return m|0}else{t=c[k>>2]|0;u=c[h>>2]|0;break}}else{t=p;u=r}}while(0);r=t+ -1|0;t=u+1|0;p=d[u]<<8;u=b+32|0;c[u>>2]=p;do{if((r|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){m=0;i=g;return m|0}else{v=c[u>>2]|0;w=c[k>>2]|0;x=c[h>>2]|0;break}}else{v=p;w=r;x=t}}while(0);t=w+ -1|0;w=x+1|0;c[u>>2]=v+(d[x]|0);do{if((t|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){m=0;i=g;return m|0}else{y=c[k>>2]|0;z=c[h>>2]|0;break}}else{y=t;z=w}}while(0);w=y+ -1|0;y=z+1|0;t=d[z]<<8;z=b+28|0;c[z>>2]=t;do{if((w|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){m=0;i=g;return m|0}else{A=c[z>>2]|0;B=c[k>>2]|0;C=c[h>>2]|0;break}}else{A=t;B=w;C=y}}while(0);y=B+ -1|0;B=C+1|0;c[z>>2]=A+(d[C]|0);do{if((y|0)==0){if((Mh[c[h+12>>2]&31](b)|0)<<24>>24==0){m=0;i=g;return m|0}else{D=c[k>>2]|0;E=c[h>>2]|0;break}}else{D=y;E=B}}while(0);B=b+36|0;c[B>>2]=d[E]|0;y=j+ -8|0;j=c[b>>2]|0;c[j+24>>2]=c[b+380>>2];c[j+28>>2]=c[z>>2];c[j+32>>2]=c[u>>2];c[j+36>>2]=c[B>>2];c[j+20>>2]=100;Kh[c[j+4>>2]&63](b,1);j=b+404|0;if((a[(c[j>>2]|0)+13|0]|0)!=0){if((c[b+20>>2]|0)!=201){C=c[b>>2]|0;c[C+20>>2]=58;Jh[c[C>>2]&127](b)}}if((c[u>>2]|0)==0){F=31}else{if((c[z>>2]|0)==0){F=31}else{z=c[B>>2]|0;if((z|0)<1){F=31}else{G=z}}}if((F|0)==31){z=c[b>>2]|0;c[z+20>>2]=32;Jh[c[z>>2]&127](b);G=c[B>>2]|0}if((y|0)!=(G*3|0)){G=c[b>>2]|0;c[G+20>>2]=11;Jh[c[G>>2]&127](b)}G=b+196|0;y=c[G>>2]|0;if((y|0)==0){z=Qh[c[c[b+4>>2]>>2]&15](b,1,(c[B>>2]|0)*84|0)|0;c[G>>2]=z;H=z}else{H=y}y=D+ -1|0;D=E+1|0;a:do{if((c[B>>2]|0)>0){E=h+12|0;z=y;G=0;u=H;C=D;while(1){c[u+4>>2]=G;if((z|0)==0){if((Mh[c[E>>2]&31](b)|0)<<24>>24==0){m=0;F=50;break}I=c[k>>2]|0;J=c[h>>2]|0}else{I=z;J=C}A=I+ -1|0;w=J+1|0;c[u>>2]=d[J]|0;if((A|0)==0){if((Mh[c[E>>2]&31](b)|0)<<24>>24==0){m=0;F=50;break}K=c[k>>2]|0;L=c[h>>2]|0}else{K=A;L=w}w=K+ -1|0;A=d[L]|0;t=u+8|0;c[t>>2]=A>>>4;x=u+12|0;c[x>>2]=A&15;if((w|0)==0){if((Mh[c[E>>2]&31](b)|0)<<24>>24==0){m=0;F=50;break}M=c[k>>2]|0;N=c[h>>2]|0}else{M=w;N=L+1|0}w=u+16|0;c[w>>2]=d[N]|0;A=c[b>>2]|0;c[A+24>>2]=c[u>>2];c[A+28>>2]=c[t>>2];c[A+32>>2]=c[x>>2];c[A+36>>2]=c[w>>2];c[A+20>>2]=101;Kh[c[A+4>>2]&63](b,1);A=G+1|0;w=M+ -1|0;x=N+1|0;if((A|0)<(c[B>>2]|0)){z=w;G=A;u=u+84|0;C=x}else{O=w;P=x;break a}}if((F|0)==50){i=g;return m|0}}else{O=y;P=D}}while(0);a[(c[j>>2]|0)+13|0]=1;c[h>>2]=P;c[k>>2]=O;m=1;i=g;return m|0}function To(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;e=b+20|0;if((c[e>>2]|0)!=202){f=c[b>>2]|0;c[f+20>>2]=20;c[f+24>>2]=c[e>>2];Jh[c[f>>2]&127](b)}f=c[b+48>>2]|0;e=c[b+52>>2]|0;do{if(f<<3>>>0>e>>>0){if(!(f<<2>>>0>e>>>0)){c[b+92>>2]=pq(c[b+28>>2]|0,4)|0;c[b+96>>2]=pq(c[b+32>>2]|0,4)|0;c[b+280>>2]=2;g=2;break}h=c[b+28>>2]|0;if(f<<1>>>0>e>>>0){c[b+92>>2]=h;c[b+96>>2]=c[b+32>>2];c[b+280>>2]=8;g=8;break}else{c[b+92>>2]=pq(h,2)|0;c[b+96>>2]=pq(c[b+32>>2]|0,2)|0;c[b+280>>2]=4;g=4;break}}else{c[b+92>>2]=pq(c[b+28>>2]|0,8)|0;c[b+96>>2]=pq(c[b+32>>2]|0,8)|0;c[b+280>>2]=1;g=1}}while(0);e=b+196|0;f=b+36|0;h=c[f>>2]|0;a:do{if((h|0)>0){j=b+280|0;k=b+272|0;l=b+276|0;m=g;n=1;o=c[e>>2]|0;while(1){p=o+12|0;b:do{if((m|0)<8){q=c[o+8>>2]|0;r=ea(m,c[k>>2]|0)|0;s=m;while(1){t=s<<1;if((ea(t,q)|0)>(r|0)){u=s;break b}v=ea(t,c[p>>2]|0)|0;if((v|0)>(ea(c[l>>2]|0,m)|0)){u=s;break b}if((t|0)<8){s=t}else{u=t;break}}}else{u=m}}while(0);c[o+36>>2]=u;w=c[f>>2]|0;if((n|0)>=(w|0)){break}m=c[j>>2]|0;n=n+1|0;o=o+84|0}if((w|0)>0){o=b+28|0;n=b+272|0;j=b+32|0;m=b+276|0;l=1;k=c[e>>2]|0;while(1){p=k+36|0;s=ea(ea(c[k+8>>2]|0,c[o>>2]|0)|0,c[p>>2]|0)|0;c[k+40>>2]=pq(s,c[n>>2]<<3)|0;s=ea(ea(c[k+12>>2]|0,c[j>>2]|0)|0,c[p>>2]|0)|0;c[k+44>>2]=pq(s,c[m>>2]<<3)|0;s=c[f>>2]|0;if((l|0)>=(s|0)){x=s;break a}l=l+1|0;k=k+84|0}}else{x=w}}else{x=h}}while(0);h=c[b+44>>2]|0;switch(h|0){case 3:case 2:{c[b+100>>2]=3;y=3;break};case 5:case 4:{c[b+100>>2]=4;y=4;break};case 1:{c[b+100>>2]=1;y=1;break};default:{c[b+100>>2]=x;y=x}}c[b+104>>2]=(a[b+74|0]|0)==0?y:1;if((a[b+72|0]|0)==0){if((a[b+266|0]|0)==0){if((c[b+40>>2]|0)==3&(x|0)==3&(h|0)==2&(y|0)==3){y=c[e>>2]|0;if((c[y+8>>2]|0)==2){if((c[y+92>>2]|0)==1){if((c[y+176>>2]|0)==1){if((c[y+12>>2]|0)<=2){if((c[y+96>>2]|0)==1){if((c[y+180>>2]|0)==1){e=c[y+36>>2]|0;if((e|0)==(c[b+280>>2]|0)){if((c[y+120>>2]|0)==(e|0)){if((c[y+204>>2]|0)==(e|0)){c[b+108>>2]=c[b+276>>2];i=d;return}}}}}}}}}}}}c[b+108>>2]=1;i=d;return}function Uo(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;d=i;e=b+4|0;f=Qh[c[c[e>>2]>>2]&15](b,1,28)|0;g=b+384|0;c[g>>2]=f;c[f>>2]=45;c[f+4>>2]=46;a[f+8|0]=0;f=c[g>>2]|0;To(b);g=Qh[c[c[e>>2]>>2]&15](b,1,1408)|0;h=b+288|0;c[h>>2]=g+256;vu(g|0,0,256)|0;j=0;do{a[g+(j+256)|0]=j;j=j+1|0}while((j|0)!=256);vu(g+512|0,-1,384)|0;vu(g+896|0,0,384)|0;j=g+1280|0;g=(c[h>>2]|0)+0|0;h=j+128|0;do{a[j]=a[g]|0;j=j+1|0;g=g+1|0}while((j|0)<(h|0));g=b+100|0;j=f+12|0;c[j>>2]=0;if((a[b+72|0]|0)==0){if((a[b+266|0]|0)==0){if((c[b+40>>2]|0)==3){if((c[b+36>>2]|0)==3){if((c[b+44>>2]|0)==2){if((c[g>>2]|0)==3){h=c[b+196>>2]|0;if((c[h+8>>2]|0)==2){if((c[h+92>>2]|0)==1){if((c[h+176>>2]|0)==1){if((c[h+12>>2]|0)>2){k=0}else{if((c[h+96>>2]|0)==1){if((c[h+180>>2]|0)==1){l=c[h+36>>2]|0;if((l|0)==(c[b+280>>2]|0)){if((c[h+120>>2]|0)==(l|0)){k=(c[h+204>>2]|0)==(l|0)|0}else{k=0}}else{k=0}}else{k=0}}else{k=0}}}else{k=0}}else{k=0}}else{k=0}}else{k=0}}else{k=0}}else{k=0}}else{k=0}}else{k=0}}else{k=0}l=f+16|0;a[l]=k;k=f+20|0;c[k>>2]=0;h=f+24|0;c[h>>2]=0;do{if((a[b+74|0]|0)==0){a[b+88|0]=0;a[b+89|0]=0;a[b+90|0]=0;m=b+65|0}else{if((a[b+64|0]|0)==0){a[b+88|0]=0;a[b+89|0]=0;a[b+90|0]=0}f=b+65|0;if((a[f]|0)!=0){n=c[b>>2]|0;c[n+20>>2]=47;Jh[c[n>>2]&127](b)}do{if((c[g>>2]|0)==3){if((c[b+116>>2]|0)!=0){a[b+89|0]=1;break}if((a[b+80|0]|0)==0){a[b+88|0]=1;break}else{a[b+90|0]=1;break}}else{a[b+88|0]=1;a[b+89|0]=0;a[b+90|0]=0;c[b+116>>2]=0}}while(0);if((a[b+88|0]|0)!=0){Wp(b);c[k>>2]=c[b+424>>2]}if((a[b+90|0]|0)==0){if((a[b+89|0]|0)==0){m=f;break}}eq(b);c[h>>2]=c[b+424>>2];m=f}}while(0);if((a[m]|0)==0){if((a[l]|0)==0){Zs(b);mp(b)}else{Xo(b)}hp(b,a[b+90|0]|0)}et(b);do{if((a[b+201|0]|0)==0){if((a[b+200|0]|0)==0){jt(b);break}else{bp(b);break}}else{l=c[b>>2]|0;c[l+20>>2]=1;Jh[c[l>>2]&127](b)}}while(0);l=b+400|0;if((a[(c[l>>2]|0)+16|0]|0)==0){o=(a[b+64|0]|0)!=0|0}else{o=1}Rs(b,o);if((a[m]|0)==0){mt(b,0)}Jh[c[(c[e>>2]|0)+24>>2]&127](b);Jh[c[(c[l>>2]|0)+8>>2]&127](b);e=c[b+8>>2]|0;if((e|0)==0){i=d;return}if((a[b+64|0]|0)!=0){i=d;return}if((a[(c[l>>2]|0)+16|0]|0)==0){i=d;return}l=c[b+36>>2]|0;if((a[b+200|0]|0)==0){p=l}else{p=(l*3|0)+2|0}c[e+4>>2]=0;c[e+8>>2]=ea(c[b+284>>2]|0,p)|0;c[e+12>>2]=0;c[e+16>>2]=(a[b+90|0]|0)!=0?3:2;c[j>>2]=(c[j>>2]|0)+1;i=d;return}function Vo(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=c[b+384>>2]|0;f=e+8|0;if((a[f]|0)==0){g=b+74|0;do{if((a[g]|0)!=0){if((c[b+116>>2]|0)==0){if((a[b+80|0]|0)!=0){if((a[b+90|0]|0)!=0){c[b+424>>2]=c[e+24>>2];a[f]=1;break}}if((a[b+88|0]|0)==0){h=c[b>>2]|0;c[h+20>>2]=46;Jh[c[h>>2]&127](b);break}else{c[b+424>>2]=c[e+20>>2];break}}}}while(0);Jh[c[c[b+412>>2]>>2]&127](b);Jh[c[(c[b+392>>2]|0)+8>>2]&127](b);if((a[b+65|0]|0)==0){if((a[e+16|0]|0)==0){Jh[c[c[b+420>>2]>>2]&127](b)}Jh[c[c[b+416>>2]>>2]&127](b);if((a[g]|0)!=0){Kh[c[c[b+424>>2]>>2]&63](b,a[f]|0)}Kh[c[c[b+396>>2]>>2]&63](b,(a[f]|0)!=0?3:0);Kh[c[c[b+388>>2]>>2]&63](b,0)}}else{a[f]=0;Kh[c[c[b+424>>2]>>2]&63](b,0);Kh[c[c[b+396>>2]>>2]&63](b,2);Kh[c[c[b+388>>2]>>2]&63](b,2)}g=c[b+8>>2]|0;if((g|0)==0){i=d;return}h=e+12|0;c[g+12>>2]=c[h>>2];e=((a[f]|0)!=0?2:1)+(c[h>>2]|0)|0;h=g+16|0;c[h>>2]=e;if((a[b+64|0]|0)==0){i=d;return}if((a[(c[b+400>>2]|0)+17|0]|0)!=0){i=d;return}c[h>>2]=e+((a[b+90|0]|0)!=0?2:1);i=d;return}function Wo(b){b=b|0;var d=0,e=0;d=i;e=c[b+384>>2]|0;if((a[b+74|0]|0)!=0){Jh[c[(c[b+424>>2]|0)+8>>2]&127](b)}b=e+12|0;c[b>>2]=(c[b>>2]|0)+1;i=d;return}function Xo(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=b+4|0;f=Qh[c[c[e>>2]>>2]&15](b,1,48)|0;g=b+416|0;c[g>>2]=f;c[f>>2]=47;a[f+8|0]=0;h=ea(c[b+100>>2]|0,c[b+92>>2]|0)|0;c[f+40>>2]=h;j=f+4|0;if((c[b+276>>2]|0)==2){c[j>>2]=1;c[f+12>>2]=3;c[f+32>>2]=Qh[c[(c[e>>2]|0)+4>>2]&15](b,1,h)|0}else{c[j>>2]=2;c[f+12>>2]=4;c[f+32>>2]=0}f=c[g>>2]|0;g=f+16|0;c[g>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;j=f+20|0;c[j>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;h=f+24|0;c[h>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;k=f+28|0;c[k>>2]=Qh[c[c[e>>2]>>2]&15](b,1,1024)|0;b=c[j>>2]|0;j=c[h>>2]|0;h=0;e=-128;while(1){c[(c[g>>2]|0)+(h<<2)>>2]=(e*91881|0)+32768>>16;c[b+(h<<2)>>2]=(e*116130|0)+32768>>16;c[j+(h<<2)>>2]=ea(e,-46802)|0;f=(ea(e,-22554)|0)+32768|0;c[(c[k>>2]|0)+(h<<2)>>2]=f;h=h+1|0;if((h|0)==256){break}else{e=e+1|0}}i=d;return}function Yo(b){b=b|0;var d=0;d=c[b+416>>2]|0;a[d+36|0]=0;c[d+44>>2]=c[b+96>>2];return}function Zo(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;i=i+16|0;k=f;l=c[b+416>>2]|0;m=l+36|0;if((a[m]|0)==0){n=l+44|0;o=c[n>>2]|0;p=o>>>0<2?o:2;o=c[h>>2]|0;q=j-o|0;j=p>>>0>q>>>0?q:p;c[k>>2]=c[g+(o<<2)>>2];if(j>>>0>1){c[k+4>>2]=c[g+(o+1<<2)>>2]}else{c[k+4>>2]=c[l+32>>2];a[m]=1}ei[c[l+12>>2]&63](b,d,c[e>>2]|0,k);r=n;s=j}else{rq(l+32|0,0,g+(c[h>>2]<<2)|0,0,1,c[l+40>>2]|0);a[m]=0;r=l+44|0;s=1}c[h>>2]=(c[h>>2]|0)+s;c[r>>2]=(c[r>>2]|0)-s;if((a[m]|0)!=0){i=f;return}c[e>>2]=(c[e>>2]|0)+1;i=f;return}function _o(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;h=i;j=c[b+416>>2]|0;k=c[b+288>>2]|0;l=c[j+16>>2]|0;m=c[j+20>>2]|0;n=c[j+24>>2]|0;o=c[j+28>>2]|0;j=f<<1;p=c[e>>2]|0;q=c[p+(j<<2)>>2]|0;r=c[p+((j|1)<<2)>>2]|0;j=c[(c[e+4>>2]|0)+(f<<2)>>2]|0;p=c[(c[e+8>>2]|0)+(f<<2)>>2]|0;f=c[g>>2]|0;e=c[g+4>>2]|0;g=b+92|0;b=c[g>>2]|0;s=b>>>1;if((s|0)==0){t=b;u=q;v=r;w=j;x=p;y=f;z=e}else{b=s*6|0;A=s<<1;B=f+b|0;C=p+s|0;D=s;E=q;F=r;G=j;H=p;p=f;f=e;while(1){I=d[G]|0;J=d[H]|0;K=c[l+(J<<2)>>2]|0;L=(c[n+(J<<2)>>2]|0)+(c[o+(I<<2)>>2]|0)>>16;J=c[m+(I<<2)>>2]|0;I=d[E]|0;a[p]=a[k+(I+K)|0]|0;a[p+1|0]=a[k+(I+L)|0]|0;a[p+2|0]=a[k+(I+J)|0]|0;I=d[E+1|0]|0;a[p+3|0]=a[k+(I+K)|0]|0;a[p+4|0]=a[k+(I+L)|0]|0;a[p+5|0]=a[k+(I+J)|0]|0;I=d[F]|0;a[f]=a[k+(I+K)|0]|0;a[f+1|0]=a[k+(I+L)|0]|0;a[f+2|0]=a[k+(I+J)|0]|0;I=d[F+1|0]|0;a[f+3|0]=a[k+(I+K)|0]|0;a[f+4|0]=a[k+(I+L)|0]|0;a[f+5|0]=a[k+(I+J)|0]|0;D=D+ -1|0;if((D|0)==0){break}else{E=E+2|0;F=F+2|0;G=G+1|0;H=H+1|0;p=p+6|0;f=f+6|0}}t=c[g>>2]|0;u=q+A|0;v=r+A|0;w=j+s|0;x=C;y=B;z=e+b|0}if((t&1|0)==0){i=h;return}t=d[w]|0;w=d[x]|0;x=c[l+(w<<2)>>2]|0;l=(c[n+(w<<2)>>2]|0)+(c[o+(t<<2)>>2]|0)>>16;o=c[m+(t<<2)>>2]|0;t=d[u]|0;a[y]=a[k+(t+x)|0]|0;a[y+1|0]=a[k+(t+l)|0]|0;a[y+2|0]=a[k+(t+o)|0]|0;t=d[v]|0;a[z]=a[k+(t+x)|0]|0;a[z+1|0]=a[k+(t+l)|0]|0;a[z+2|0]=a[k+(t+o)|0]|0;i=h;return}function $o(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;h=i;ei[c[(c[a+416>>2]|0)+12>>2]&63](a,b,c[d>>2]|0,f+(c[g>>2]<<2)|0);c[g>>2]=(c[g>>2]|0)+1;c[d>>2]=(c[d>>2]|0)+1;i=h;return}function ap(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;h=i;j=c[b+416>>2]|0;k=c[b+288>>2]|0;l=c[j+16>>2]|0;m=c[j+20>>2]|0;n=c[j+24>>2]|0;o=c[j+28>>2]|0;j=c[(c[e>>2]|0)+(f<<2)>>2]|0;p=c[(c[e+4>>2]|0)+(f<<2)>>2]|0;q=c[(c[e+8>>2]|0)+(f<<2)>>2]|0;f=c[g>>2]|0;g=b+92|0;b=c[g>>2]|0;e=b>>>1;if((e|0)==0){r=b;s=j;t=p;u=q;v=f}else{b=e*6|0;w=e<<1;x=q+e|0;y=e;z=j;A=p;B=q;q=f;while(1){C=d[A]|0;D=d[B]|0;E=c[l+(D<<2)>>2]|0;F=(c[n+(D<<2)>>2]|0)+(c[o+(C<<2)>>2]|0)>>16;D=c[m+(C<<2)>>2]|0;C=d[z]|0;a[q]=a[k+(C+E)|0]|0;a[q+1|0]=a[k+(C+F)|0]|0;a[q+2|0]=a[k+(C+D)|0]|0;C=d[z+1|0]|0;a[q+3|0]=a[k+(C+E)|0]|0;a[q+4|0]=a[k+(C+F)|0]|0;a[q+5|0]=a[k+(C+D)|0]|0;y=y+ -1|0;if((y|0)==0){break}else{z=z+2|0;A=A+1|0;B=B+1|0;q=q+6|0}}r=c[g>>2]|0;s=j+w|0;t=p+e|0;u=x;v=f+b|0}if((r&1|0)==0){i=h;return}r=d[t]|0;t=d[u]|0;u=(c[n+(t<<2)>>2]|0)+(c[o+(r<<2)>>2]|0)>>16;o=c[m+(r<<2)>>2]|0;r=d[s]|0;a[v]=a[k+(r+(c[l+(t<<2)>>2]|0))|0]|0;a[v+1|0]=a[k+(r+u)|0]|0;a[v+2|0]=a[k+(r+o)|0]|0;i=h;return}function bp(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=a+4|0;e=Qh[c[c[d>>2]>>2]&15](a,1,64)|0;c[a+408>>2]=e;c[e>>2]=48;f=e+44|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;f=a+36|0;e=Qh[c[c[d>>2]>>2]&15](a,1,c[f>>2]<<8)|0;c[a+140>>2]=e;if((c[f>>2]|0)>0){g=0}else{i=b;return}do{vu(e+(g<<8)|0,-1,256)|0;g=g+1|0}while((g|0)<(c[f>>2]|0));i=b;return}function cp(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;d=i;e=c[b+408>>2]|0;f=b+364|0;g=c[f>>2]|0;h=(g|0)==0;j=b+368|0;k=c[j>>2]|0;if(h){l=(k|0)!=0|0}else{l=(c[b+292>>2]|0)==1?((g|0)>(k|0)|(k|0)>63)&1:1}k=b+372|0;g=c[k>>2]|0;m=c[b+376>>2]|0;if((g|0)==0){n=l}else{n=(m|0)==(g+ -1|0)?l:1}l=b+376|0;if(!(n<<24>>24==0&(m|0)<14)){m=c[b>>2]|0;c[m+20>>2]=16;c[m+24>>2]=c[f>>2];c[m+28>>2]=c[j>>2];c[m+32>>2]=c[k>>2];c[m+36>>2]=c[l>>2];Jh[c[m>>2]&127](b)}m=b+292|0;n=c[m>>2]|0;a:do{if((n|0)>0){g=b+140|0;if(h){o=n;p=0;while(1){q=c[(c[b+(p<<2)+296>>2]|0)+4>>2]|0;r=c[g>>2]|0;s=c[f>>2]|0;if((s|0)>(c[j>>2]|0)){t=o}else{u=s;while(1){s=r+(q<<8)+(u<<2)|0;v=c[s>>2]|0;if((c[k>>2]|0)!=(((v|0)<0?0:v)|0)){v=c[b>>2]|0;c[v+20>>2]=115;c[v+24>>2]=q;c[v+28>>2]=u;Kh[c[v+4>>2]&63](b,-1)}c[s>>2]=c[l>>2];if((u|0)>=(c[j>>2]|0)){break}u=u+1|0}t=c[m>>2]|0}u=p+1|0;if((u|0)<(t|0)){o=t;p=u}else{w=t;break a}}}else{x=0}while(1){p=c[(c[b+(x<<2)+296>>2]|0)+4>>2]|0;o=c[g>>2]|0;if((c[o+(p<<8)>>2]|0)<0){u=c[b>>2]|0;c[u+20>>2]=115;c[u+24>>2]=p;c[u+28>>2]=0;Kh[c[u+4>>2]&63](b,-1)}u=c[f>>2]|0;b:do{if((u|0)<=(c[j>>2]|0)){q=u;while(1){r=o+(p<<8)+(q<<2)|0;s=c[r>>2]|0;if((c[k>>2]|0)!=(((s|0)<0?0:s)|0)){s=c[b>>2]|0;c[s+20>>2]=115;c[s+24>>2]=p;c[s+28>>2]=q;Kh[c[s+4>>2]&63](b,-1)}c[r>>2]=c[l>>2];if((q|0)>=(c[j>>2]|0)){break b}q=q+1|0}}}while(0);p=x+1|0;o=c[m>>2]|0;if((p|0)<(o|0)){x=p}else{w=o;break}}}else{w=n}}while(0);n=e+4|0;do{if((c[k>>2]|0)==0){if(h){c[n>>2]=2;break}else{c[n>>2]=3;break}}else{if(h){c[n>>2]=4;break}else{c[n>>2]=5;break}}}while(0);if((w|0)<=0){y=e+20|0;z=e+16|0;c[z>>2]=0;A=e+12|0;c[A>>2]=0;B=e+8|0;a[B]=0;c[y>>2]=0;C=b+252|0;D=c[C>>2]|0;E=e+40|0;F=D;c[E>>2]=F;i=d;return}w=e+44|0;n=e+20|0;x=n+4|0;j=e+60|0;if(h){G=0}else{h=0;while(1){l=c[(c[b+(h<<2)+296>>2]|0)+24>>2]|0;f=w+(l<<2)|0;gt(b,0,l,f);c[j>>2]=c[f>>2];c[x+(h<<2)>>2]=0;f=h+1|0;if((f|0)<(c[m>>2]|0)){h=f}else{y=n;break}}z=e+16|0;c[z>>2]=0;A=e+12|0;c[A>>2]=0;B=e+8|0;a[B]=0;c[y>>2]=0;C=b+252|0;D=c[C>>2]|0;E=e+40|0;F=D;c[E>>2]=F;i=d;return}while(1){if((c[k>>2]|0)==0){h=c[(c[b+(G<<2)+296>>2]|0)+20>>2]|0;gt(b,1,h,w+(h<<2)|0)}c[x+(G<<2)>>2]=0;h=G+1|0;if((h|0)<(c[m>>2]|0)){G=h}else{y=n;break}}z=e+16|0;c[z>>2]=0;A=e+12|0;c[A>>2]=0;B=e+8|0;a[B]=0;c[y>>2]=0;C=b+252|0;D=c[C>>2]|0;E=e+40|0;F=D;c[E>>2]=F;i=d;return}function dp(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0;g=i;i=i+48|0;h=g+20|0;j=g;k=c[e+408>>2]|0;l=c[e+376>>2]|0;m=e+252|0;if((c[m>>2]|0)!=0){n=k+40|0;if((c[n>>2]|0)==0){o=k+16|0;p=c[e+404>>2]|0;q=p+20|0;c[q>>2]=(c[q>>2]|0)+((c[o>>2]|0)/8|0);c[o>>2]=0;if((Mh[c[p+8>>2]&31](e)|0)<<24>>24==0){r=0;i=g;return r|0}p=e+292|0;o=k+20|0;if((c[p>>2]|0)>0){q=o+4|0;s=0;do{c[q+(s<<2)>>2]=0;s=s+1|0}while((s|0)<(c[p>>2]|0))}c[o>>2]=0;c[n>>2]=c[m>>2];if((c[e+380>>2]|0)==0){a[k+8|0]=0}}}if((a[k+8|0]|0)==0){c[h+16>>2]=e;m=e+24|0;n=c[m>>2]|0;o=c[n>>2]|0;c[h>>2]=o;p=c[n+4>>2]|0;s=h+4|0;c[s>>2]=p;q=k+12|0;t=c[q>>2]|0;u=k+16|0;v=c[u>>2]|0;w=k+20|0;c[j+0>>2]=c[w+0>>2];c[j+4>>2]=c[w+4>>2];c[j+8>>2]=c[w+8>>2];c[j+12>>2]=c[w+12>>2];c[j+16>>2]=c[w+16>>2];x=e+320|0;do{if((c[x>>2]|0)>0){y=k+44|0;z=h+8|0;A=h+12|0;B=v;C=0;D=t;while(1){E=c[f+(C<<2)>>2]|0;F=c[e+(C<<2)+324>>2]|0;G=c[y+(c[(c[e+(F<<2)+296>>2]|0)+20>>2]<<2)>>2]|0;if((B|0)<8){if((ht(h,D,B,0)|0)<<24>>24==0){r=0;H=29;break}I=c[z>>2]|0;J=c[A>>2]|0;if((J|0)<8){K=J;L=I;M=1;H=17}else{N=J;O=I;H=15}}else{N=B;O=D;H=15}if((H|0)==15){H=0;I=O>>N+ -8&255;J=c[G+(I<<2)+144>>2]|0;if((J|0)==0){K=N;L=O;M=9;H=17}else{P=N-J|0;Q=O;R=d[G+I+1168|0]|0}}if((H|0)==17){H=0;I=it(h,L,K,G,M)|0;if((I|0)<0){r=0;H=29;break}P=c[A>>2]|0;Q=c[z>>2]|0;R=I}if((R|0)==0){S=P;T=Q;U=0}else{if((P|0)<(R|0)){if((ht(h,Q,P,R)|0)<<24>>24==0){r=0;H=29;break}V=c[A>>2]|0;W=c[z>>2]|0}else{V=P;W=Q}I=V-R|0;G=W>>I&(1<<R)+ -1;if((G|0)<(c[41160+(R<<2)>>2]|0)){S=I;T=W;U=(c[41224+(R<<2)>>2]|0)+G|0}else{S=I;T=W;U=G}}G=j+(F<<2)+4|0;F=(c[G>>2]|0)+U|0;c[G>>2]=F;b[E>>1]=F<<l;F=C+1|0;if((F|0)<(c[x>>2]|0)){B=S;C=F;D=T}else{H=26;break}}if((H|0)==26){X=c[h>>2]|0;Y=c[m>>2]|0;Z=c[s>>2]|0;_=S;$=T;break}else if((H|0)==29){i=g;return r|0}}else{X=o;Y=n;Z=p;_=v;$=t}}while(0);c[Y>>2]=X;c[(c[m>>2]|0)+4>>2]=Z;c[q>>2]=$;c[u>>2]=_;c[w+0>>2]=c[j+0>>2];c[w+4>>2]=c[j+4>>2];c[w+8>>2]=c[j+8>>2];c[w+12>>2]=c[j+12>>2];c[w+16>>2]=c[j+16>>2]}j=k+40|0;c[j>>2]=(c[j>>2]|0)+ -1;r=1;i=g;return r|0}function ep(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0;g=i;i=i+32|0;h=g;j=c[e+408>>2]|0;k=c[e+368>>2]|0;l=c[e+376>>2]|0;m=e+252|0;if((c[m>>2]|0)!=0){n=j+40|0;if((c[n>>2]|0)==0){o=j+16|0;p=c[e+404>>2]|0;q=p+20|0;c[q>>2]=(c[q>>2]|0)+((c[o>>2]|0)/8|0);c[o>>2]=0;if((Mh[c[p+8>>2]&31](e)|0)<<24>>24==0){r=0;i=g;return r|0}p=e+292|0;o=j+20|0;if((c[p>>2]|0)>0){q=o+4|0;s=0;do{c[q+(s<<2)>>2]=0;s=s+1|0}while((s|0)<(c[p>>2]|0))}c[o>>2]=0;c[n>>2]=c[m>>2];if((c[e+380>>2]|0)==0){a[j+8|0]=0}}}if((a[j+8|0]|0)==0){m=j+20|0;n=c[m>>2]|0;if((n|0)==0){c[h+16>>2]=e;o=e+24|0;p=c[o>>2]|0;c[h>>2]=c[p>>2];s=h+4|0;c[s>>2]=c[p+4>>2];p=j+12|0;q=c[p>>2]|0;t=j+16|0;u=c[t>>2]|0;v=c[f>>2]|0;f=c[j+60>>2]|0;w=c[e+364>>2]|0;a:do{if((w|0)>(k|0)){x=0;y=u;z=q}else{e=h+8|0;A=h+12|0;B=u;C=q;D=w;while(1){if((B|0)<8){if((ht(h,C,B,0)|0)<<24>>24==0){r=0;E=40;break}F=c[e>>2]|0;G=c[A>>2]|0;if((G|0)<8){H=G;I=F;J=1;E=19}else{K=G;L=F;E=17}}else{K=B;L=C;E=17}if((E|0)==17){E=0;F=L>>K+ -8&255;G=c[f+(F<<2)+144>>2]|0;if((G|0)==0){H=K;I=L;J=9;E=19}else{M=K-G|0;N=L;O=d[f+F+1168|0]|0}}if((E|0)==19){E=0;F=it(h,I,H,f,J)|0;if((F|0)<0){r=0;E=40;break}M=c[A>>2]|0;N=c[e>>2]|0;O=F}P=O>>4;F=O&15;if((F|0)==0){if((P|0)!=15){E=30;break}Q=M;R=N;S=D+15|0}else{G=P+D|0;if((M|0)<(F|0)){if((ht(h,N,M,F)|0)<<24>>24==0){r=0;E=40;break}T=c[A>>2]|0;U=c[e>>2]|0}else{T=M;U=N}V=T-F|0;W=U>>V&(1<<F)+ -1;if((W|0)<(c[41160+(F<<2)>>2]|0)){X=(c[41224+(F<<2)>>2]|0)+W|0}else{X=W}b[v+(c[47080+(G<<2)>>2]<<1)>>1]=X<<l;Q=V;R=U;S=G}if((S|0)<(k|0)){B=Q;C=R;D=S+1|0}else{x=0;y=Q;z=R;break a}}if((E|0)==30){D=1<<P;if((P|0)==0){Y=D;Z=M;_=N}else{do{if((M|0)<(P|0)){if((ht(h,N,M,P)|0)<<24>>24==0){r=0;i=g;return r|0}else{$=c[A>>2]|0;aa=c[e>>2]|0;break}}else{$=M;aa=N}}while(0);e=$-P|0;Y=(aa>>e&D+ -1)+D|0;Z=e;_=aa}x=Y+ -1|0;y=Z;z=_;break}else if((E|0)==40){i=g;return r|0}}}while(0);c[c[o>>2]>>2]=c[h>>2];c[(c[o>>2]|0)+4>>2]=c[s>>2];c[p>>2]=z;c[t>>2]=y;ba=x}else{ba=n+ -1|0}c[m>>2]=ba}ba=j+40|0;c[ba>>2]=(c[ba>>2]|0)+ -1;r=1;i=g;return r|0}function fp(d,f){d=d|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;g=i;i=i+32|0;h=g;j=c[d+408>>2]|0;k=1<<c[d+376>>2];l=d+252|0;if((c[l>>2]|0)!=0){m=j+40|0;if((c[m>>2]|0)==0){n=j+16|0;o=c[d+404>>2]|0;p=o+20|0;c[p>>2]=(c[p>>2]|0)+((c[n>>2]|0)/8|0);c[n>>2]=0;if((Mh[c[o+8>>2]&31](d)|0)<<24>>24==0){q=0;i=g;return q|0}o=d+292|0;n=j+20|0;if((c[o>>2]|0)>0){p=n+4|0;r=0;do{c[p+(r<<2)>>2]=0;r=r+1|0}while((r|0)<(c[o>>2]|0))}c[n>>2]=0;c[m>>2]=c[l>>2];if((c[d+380>>2]|0)==0){a[j+8|0]=0}}}c[h+16>>2]=d;l=d+24|0;m=c[l>>2]|0;n=c[m>>2]|0;c[h>>2]=n;o=c[m+4>>2]|0;r=h+4|0;c[r>>2]=o;p=j+12|0;s=c[p>>2]|0;t=j+16|0;u=c[t>>2]|0;v=d+320|0;do{if((c[v>>2]|0)>0){d=h+8|0;w=h+12|0;x=u;y=0;z=s;while(1){A=c[f+(y<<2)>>2]|0;if((x|0)<1){if((ht(h,z,x,1)|0)<<24>>24==0){q=0;B=19;break}C=c[w>>2]|0;D=c[d>>2]|0}else{C=x;D=z}E=C+ -1|0;if((1<<E&D|0)!=0){b[A>>1]=e[A>>1]|0|k}A=y+1|0;if((A|0)<(c[v>>2]|0)){x=E;y=A;z=D}else{B=17;break}}if((B|0)==17){F=c[h>>2]|0;G=c[l>>2]|0;H=c[r>>2]|0;I=E;J=D;break}else if((B|0)==19){i=g;return q|0}}else{F=n;G=m;H=o;I=u;J=s}}while(0);c[G>>2]=F;c[(c[l>>2]|0)+4>>2]=H;c[p>>2]=J;c[t>>2]=I;I=j+40|0;c[I>>2]=(c[I>>2]|0)+ -1;q=1;i=g;return q|0}function gp(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0;g=i;i=i+288|0;h=g+256|0;j=g;k=c[e+408>>2]|0;l=c[e+368>>2]|0;m=c[e+376>>2]|0;n=1<<m;o=-1<<m;m=e+252|0;if((c[m>>2]|0)!=0){p=k+40|0;if((c[p>>2]|0)==0){q=k+16|0;r=c[e+404>>2]|0;s=r+20|0;c[s>>2]=(c[s>>2]|0)+((c[q>>2]|0)/8|0);c[q>>2]=0;if((Mh[c[r+8>>2]&31](e)|0)<<24>>24==0){t=0;i=g;return t|0}r=e+292|0;q=k+20|0;if((c[r>>2]|0)>0){s=q+4|0;u=0;do{c[s+(u<<2)>>2]=0;u=u+1|0}while((u|0)<(c[r>>2]|0))}c[q>>2]=0;c[p>>2]=c[m>>2];if((c[e+380>>2]|0)==0){a[k+8|0]=0}}}do{if((a[k+8|0]|0)==0){c[h+16>>2]=e;m=e+24|0;p=c[m>>2]|0;c[h>>2]=c[p>>2];q=h+4|0;c[q>>2]=c[p+4>>2];p=k+12|0;r=c[p>>2]|0;u=k+16|0;s=c[u>>2]|0;v=k+20|0;w=c[v>>2]|0;x=c[f>>2]|0;y=c[k+60>>2]|0;z=c[e+364>>2]|0;a:do{if((w|0)==0){if((z|0)>(l|0)){A=0;B=s;C=r;D=61}else{E=h+8|0;F=h+12|0;G=s;H=r;I=z;J=0;while(1){if((G|0)<8){if((ht(h,H,G,0)|0)<<24>>24==0){K=J;break a}L=c[E>>2]|0;M=c[F>>2]|0;if((M|0)<8){N=M;O=L;P=1;D=19}else{Q=M;R=L;D=17}}else{Q=G;R=H;D=17}if((D|0)==17){D=0;L=R>>Q+ -8&255;M=c[y+(L<<2)+144>>2]|0;if((M|0)==0){N=Q;O=R;P=9;D=19}else{S=Q-M|0;T=R;U=d[y+L+1168|0]|0}}if((D|0)==19){D=0;L=it(h,O,N,y,P)|0;if((L|0)<0){K=J;break a}S=c[F>>2]|0;T=c[E>>2]|0;U=L}V=U>>4;L=U&15;if((L|0)==0){if((V|0)==15){W=S;X=T;Y=15;Z=0}else{break}}else if((L|0)==1){D=23}else{L=c[e>>2]|0;c[L+20>>2]=118;Kh[c[L+4>>2]&63](e,-1);D=23}if((D|0)==23){D=0;if((S|0)<1){if((ht(h,T,S,1)|0)<<24>>24==0){K=J;break a}_=c[F>>2]|0;$=c[E>>2]|0}else{_=S;$=T}L=_+ -1|0;W=L;X=$;Y=V;Z=(1<<L&$|0)==0?o:n}L=W;M=X;aa=I;ba=Y;b:while(1){ca=x+(c[47080+(aa<<2)>>2]<<1)|0;do{if((b[ca>>1]|0)==0){if((ba|0)<1){da=L;ea=M;fa=aa;break b}else{ga=L;ha=M;ia=ba+ -1|0}}else{if((L|0)<1){if((ht(h,M,L,1)|0)<<24>>24==0){K=J;break a}ja=c[F>>2]|0;ka=c[E>>2]|0}else{ja=L;ka=M}la=ja+ -1|0;if((1<<la&ka|0)==0){ga=la;ha=ka;ia=ba}else{ma=b[ca>>1]|0;na=ma<<16>>16;if((na&n|0)==0){if(ma<<16>>16>-1){b[ca>>1]=na+n;ga=la;ha=ka;ia=ba;break}else{b[ca>>1]=na+o;ga=la;ha=ka;ia=ba;break}}else{ga=la;ha=ka;ia=ba}}}}while(0);ca=aa+1|0;if((aa|0)<(l|0)){L=ga;M=ha;aa=ca;ba=ia}else{da=ga;ea=ha;fa=ca;break}}if((Z|0)==0){oa=J}else{ba=c[47080+(fa<<2)>>2]|0;b[x+(ba<<1)>>1]=Z;c[j+(J<<2)>>2]=ba;oa=J+1|0}if((fa|0)<(l|0)){G=da;H=ea;I=fa+1|0;J=oa}else{A=0;B=da;C=ea;D=61;break a}}H=1<<V;if((V|0)==0){pa=H;qa=S;ra=T;sa=I;ta=J;D=48}else{if((S|0)<(V|0)){if((ht(h,T,S,V)|0)<<24>>24==0){K=J;break}ua=c[F>>2]|0;va=c[E>>2]|0}else{ua=S;va=T}G=ua-V|0;ba=(va>>G&H+ -1)+H|0;if((ba|0)==0){A=0;B=G;C=va;D=61}else{pa=ba;qa=G;ra=va;sa=I;ta=J;D=48}}}}else{pa=w;qa=s;ra=r;sa=z;ta=0;D=48}}while(0);c:do{if((D|0)==48){if((sa|0)>(l|0)){wa=qa;xa=ra}else{z=h+8|0;r=h+12|0;s=qa;w=ra;y=sa;while(1){G=x+(c[47080+(y<<2)>>2]<<1)|0;do{if((b[G>>1]|0)==0){ya=s;za=w}else{if((s|0)<1){if((ht(h,w,s,1)|0)<<24>>24==0){K=ta;break c}Aa=c[r>>2]|0;Ba=c[z>>2]|0}else{Aa=s;Ba=w}ba=Aa+ -1|0;if((1<<ba&Ba|0)==0){ya=ba;za=Ba}else{H=b[G>>1]|0;aa=H<<16>>16;if((aa&n|0)==0){if(H<<16>>16>-1){b[G>>1]=aa+n;ya=ba;za=Ba;break}else{b[G>>1]=aa+o;ya=ba;za=Ba;break}}else{ya=ba;za=Ba}}}}while(0);if((y|0)<(l|0)){s=ya;w=za;y=y+1|0}else{wa=ya;xa=za;break}}}A=pa+ -1|0;B=wa;C=xa;D=61}}while(0);if((D|0)==61){c[c[m>>2]>>2]=c[h>>2];c[(c[m>>2]|0)+4>>2]=c[q>>2];c[p>>2]=C;c[u>>2]=B;c[v>>2]=A;break}if((K|0)>0){Ca=K}else{t=0;i=g;return t|0}while(1){y=Ca+ -1|0;b[x+(c[j+(y<<2)>>2]<<1)>>1]=0;if((y|0)>0){Ca=y}else{t=0;break}}i=g;return t|0}}while(0);Ca=k+40|0;c[Ca>>2]=(c[Ca>>2]|0)+ -1;t=1;i=g;return t|0}function hp(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;f=b+4|0;g=Qh[c[c[f>>2]>>2]&15](b,1,28)|0;c[b+396>>2]=g;c[g>>2]=4;h=g+8|0;c[h>>2]=0;j=g+12|0;c[j>>2]=0;if((a[b+74|0]|0)==0){i=e;return}k=c[b+276>>2]|0;l=g+16|0;c[l>>2]=k;g=c[f>>2]|0;if(d<<24>>24==0){d=ea(c[b+100>>2]|0,c[b+92>>2]|0)|0;c[j>>2]=_h[c[g+8>>2]&3](b,1,d,k)|0;i=e;return}else{d=c[g+16>>2]|0;g=ea(c[b+100>>2]|0,c[b+92>>2]|0)|0;j=qq(c[b+96>>2]|0,k)|0;c[h>>2]=Lh[d&3](b,1,0,g,j,c[l>>2]|0)|0;i=e;return}}function ip(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;e=i;f=c[b+396>>2]|0;do{if((d|0)==3){if((c[f+8>>2]|0)==0){g=c[b>>2]|0;c[g+20>>2]=4;Jh[c[g>>2]&127](b)}c[f+4>>2]=4}else if((d|0)==0){if((a[b+74|0]|0)==0){c[f+4>>2]=c[(c[b+416>>2]|0)+4>>2];break}c[f+4>>2]=3;g=f+12|0;if((c[g>>2]|0)==0){c[g>>2]=Oh[c[(c[b+4>>2]|0)+28>>2]&3](b,c[f+8>>2]|0,0,c[f+16>>2]|0,1)|0}}else if((d|0)==2){if((c[f+8>>2]|0)==0){g=c[b>>2]|0;c[g+20>>2]=4;Jh[c[g>>2]&127](b)}c[f+4>>2]=5}else{g=c[b>>2]|0;c[g+20>>2]=4;Jh[c[g>>2]&127](b)}}while(0);c[f+24>>2]=0;c[f+20>>2]=0;i=e;return}function jp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;j=i;i=i+16|0;k=j;l=c[a+396>>2]|0;m=h-(c[g>>2]|0)|0;h=c[l+16>>2]|0;c[k>>2]=0;n=l+12|0;Wh[c[(c[a+416>>2]|0)+4>>2]&15](a,b,d,e,c[n>>2]|0,k,m>>>0>h>>>0?h:m);ei[c[(c[a+424>>2]|0)+4>>2]&63](a,c[n>>2]|0,f+(c[g>>2]<<2)|0,c[k>>2]|0);c[g>>2]=(c[g>>2]|0)+(c[k>>2]|0);i=j;return}function kp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;h=i;f=c[a+396>>2]|0;j=f+24|0;k=c[j>>2]|0;if((k|0)==0){l=f+16|0;m=Oh[c[(c[a+4>>2]|0)+28>>2]&3](a,c[f+8>>2]|0,c[f+20>>2]|0,c[l>>2]|0,1)|0;c[f+12>>2]=m;n=l;o=m;p=c[j>>2]|0}else{n=f+16|0;o=c[f+12>>2]|0;p=k}Wh[c[(c[a+416>>2]|0)+4>>2]&15](a,b,d,e,o,j,c[n>>2]|0);o=c[j>>2]|0;if(o>>>0>p>>>0){e=o-p|0;ei[c[(c[a+424>>2]|0)+4>>2]&63](a,(c[f+12>>2]|0)+(p<<2)|0,0,e);c[g>>2]=(c[g>>2]|0)+e;q=c[j>>2]|0}else{q=o}o=c[n>>2]|0;if(q>>>0<o>>>0){i=h;return}q=f+20|0;c[q>>2]=(c[q>>2]|0)+o;c[j>>2]=0;i=h;return}function lp(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;d=c[a+396>>2]|0;b=d+24|0;j=c[b>>2]|0;if((j|0)==0){k=d+20|0;l=d+16|0;m=Oh[c[(c[a+4>>2]|0)+28>>2]&3](a,c[d+8>>2]|0,c[k>>2]|0,c[l>>2]|0,0)|0;c[d+12>>2]=m;n=k;o=l;p=k;q=c[b>>2]|0;r=m}else{m=d+20|0;n=m;o=d+16|0;p=m;q=j;r=c[d+12>>2]|0}d=(c[o>>2]|0)-q|0;j=c[g>>2]|0;m=h-j|0;h=d>>>0>m>>>0?m:d;d=(c[a+96>>2]|0)-(c[n>>2]|0)|0;m=h>>>0>d>>>0?d:h;ei[c[(c[a+424>>2]|0)+4>>2]&63](a,r+(q<<2)|0,f+(j<<2)|0,m);c[g>>2]=(c[g>>2]|0)+m;g=(c[b>>2]|0)+m|0;c[b>>2]=g;m=c[o>>2]|0;if(g>>>0<m>>>0){i=e;return}c[p>>2]=(c[n>>2]|0)+m;c[b>>2]=0;i=e;return}function mp(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;d=i;e=b+4|0;f=Qh[c[c[e>>2]>>2]&15](b,1,160)|0;c[b+416>>2]=f;c[f>>2]=49;c[f+4>>2]=6;g=f+8|0;a[g]=0;if((a[b+266|0]|0)!=0){h=c[b>>2]|0;c[h+20>>2]=25;Jh[c[h>>2]&127](b)}if((a[b+72|0]|0)==0){j=0}else{j=(c[b+280>>2]|0)>1|0}h=c[b+196>>2]|0;k=b+36|0;if((c[k>>2]|0)<=0){i=d;return}l=b+280|0;m=b+272|0;n=b+276|0;o=f+100|0;p=f+52|0;q=b+92|0;r=f+12|0;if(j<<24>>24==0){j=0;s=h;while(1){t=c[s+36>>2]|0;u=ea(t,c[s+8>>2]|0)|0;v=c[l>>2]|0;w=(u|0)/(v|0)|0;u=(ea(c[s+12>>2]|0,t)|0)/(v|0)|0;v=c[m>>2]|0;t=c[n>>2]|0;c[o+(j<<2)>>2]=u;do{if((a[s+48|0]|0)==0){c[p+(j<<2)>>2]=9}else{x=(u|0)==(t|0);if((w|0)==(v|0)&x){c[p+(j<<2)>>2]=8;break}y=(w<<1|0)==(v|0);do{if(y&x){c[p+(j<<2)>>2]=7}else{if(y){if((u<<1|0)==(t|0)){c[p+(j<<2)>>2]=6;break}}if(((v|0)%(w|0)|0|0)==0){if(((t|0)%(u|0)|0|0)==0){c[p+(j<<2)>>2]=5;a[f+(j+140)|0]=(v|0)/(w|0)|0;a[f+(j+150)|0]=(t|0)/(u|0)|0;break}}z=c[b>>2]|0;c[z+20>>2]=38;Jh[c[z>>2]&127](b)}}while(0);y=c[(c[e>>2]|0)+8>>2]|0;x=qq(c[q>>2]|0,c[m>>2]|0)|0;c[r+(j<<2)>>2]=_h[y&3](b,1,x,c[n>>2]|0)|0}}while(0);u=j+1|0;if((u|0)>=(c[k>>2]|0)){break}j=u;s=s+84|0}i=d;return}else{A=0;B=h}while(1){h=c[B+36>>2]|0;s=ea(h,c[B+8>>2]|0)|0;j=c[l>>2]|0;u=(s|0)/(j|0)|0;s=(ea(c[B+12>>2]|0,h)|0)/(j|0)|0;j=c[m>>2]|0;h=c[n>>2]|0;c[o+(A<<2)>>2]=s;do{if((a[B+48|0]|0)==0){c[p+(A<<2)>>2]=9}else{t=(s|0)==(h|0);if((u|0)==(j|0)&t){c[p+(A<<2)>>2]=8;break}w=(u<<1|0)==(j|0);do{if(w&t){v=p+(A<<2)|0;if((c[B+40>>2]|0)>>>0>2){c[v>>2]=10;break}else{c[v>>2]=7;break}}else{if(w){if((s<<1|0)==(h|0)){v=p+(A<<2)|0;if((c[B+40>>2]|0)>>>0>2){c[v>>2]=11;a[g]=1;break}else{c[v>>2]=6;break}}}if(((j|0)%(u|0)|0|0)==0){if(((h|0)%(s|0)|0|0)==0){c[p+(A<<2)>>2]=5;a[f+(A+140)|0]=(j|0)/(u|0)|0;a[f+(A+150)|0]=(h|0)/(s|0)|0;break}}v=c[b>>2]|0;c[v+20>>2]=38;Jh[c[v>>2]&127](b)}}while(0);w=c[(c[e>>2]|0)+8>>2]|0;t=qq(c[q>>2]|0,c[m>>2]|0)|0;c[r+(A<<2)>>2]=_h[w&3](b,1,t,c[n>>2]|0)|0}}while(0);s=A+1|0;if((s|0)>=(c[k>>2]|0)){break}A=s;B=B+84|0}i=d;return}function np(a){a=a|0;var b=0;b=c[a+416>>2]|0;c[b+92>>2]=c[a+276>>2];c[b+96>>2]=c[a+96>>2];return}function op(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;e=i;j=c[a+416>>2]|0;k=j+92|0;l=c[k>>2]|0;m=a+276|0;n=c[m>>2]|0;if((l|0)<(n|0)){o=n;p=l}else{l=a+36|0;if((c[l>>2]|0)>0){n=j+52|0;q=j+100|0;r=j+12|0;s=0;t=c[a+196>>2]|0;while(1){u=(c[b+(s<<2)>>2]|0)+((ea(c[q+(s<<2)>>2]|0,c[d>>2]|0)|0)<<2)|0;ei[c[n+(s<<2)>>2]&63](a,t,u,r+(s<<2)|0);s=s+1|0;if((s|0)>=(c[l>>2]|0)){break}else{t=t+84|0}}}c[k>>2]=0;o=c[m>>2]|0;p=0}t=o-p|0;o=j+96|0;l=c[o>>2]|0;s=t>>>0>l>>>0?l:t;t=c[g>>2]|0;l=h-t|0;h=s>>>0>l>>>0?l:s;Gh[c[(c[a+420>>2]|0)+4>>2]&31](a,j+12|0,p,f+(t<<2)|0,h);c[g>>2]=(c[g>>2]|0)+h;c[o>>2]=(c[o>>2]|0)-h;o=(c[k>>2]|0)+h|0;c[k>>2]=o;if((o|0)<(c[m>>2]|0)){i=e;return}c[d>>2]=(c[d>>2]|0)+1;i=e;return}function pp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[e>>2]=0;return}function qp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;c[e>>2]=d;return}function rp(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;h=i;j=c[g>>2]|0;g=b+276|0;if((c[g>>2]|0)<=0){i=h;return}b=e+40|0;e=0;do{k=c[f+(e<<2)>>2]|0;l=c[j+(e<<2)>>2]|0;m=k+1|0;n=a[k]|0;a[l]=n;a[l+1|0]=((d[m]|0)+2+((n&255)*3|0)|0)>>>2;n=c[b>>2]|0;o=n+ -2|0;p=l+2|0;if((o|0)==0){q=l;r=m;s=p}else{t=n<<1;u=l;v=o;o=m;m=p;while(1){p=o+1|0;w=(d[o]|0)*3|0;a[m]=((d[o+ -1|0]|0)+1+w|0)>>>2;a[u+3|0]=(w+2+(d[p]|0)|0)>>>2;w=v+ -1|0;if((w|0)==0){break}else{x=m;v=w;o=p;m=m+2|0;u=x}}q=l+(t+ -4)|0;r=k+(n+ -1)|0;s=l+(t+ -2)|0}u=a[r]|0;a[s]=((d[r+ -1|0]|0)+1+((u&255)*3|0)|0)>>>2;a[q+3|0]=u;e=e+1|0}while((e|0)<(c[g>>2]|0));i=h;return}function sp(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;d=i;g=c[f>>2]|0;f=b+276|0;h=c[f>>2]|0;if((h|0)<=0){i=d;return}j=b+92|0;b=h;h=0;while(1){k=c[g+(h<<2)>>2]|0;l=c[j>>2]|0;m=k+l|0;if((l|0)>0){l=c[e+(h<<2)>>2]|0;n=k;while(1){k=a[l]|0;a[n]=k;o=n+2|0;a[n+1|0]=k;if(o>>>0<m>>>0){l=l+1|0;n=o}else{break}}p=c[f>>2]|0}else{p=b}h=h+1|0;if((h|0)>=(p|0)){break}else{b=p}}i=d;return}function tp(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;h=i;j=c[g>>2]|0;g=b+276|0;if((c[g>>2]|0)<=0){i=h;return}b=e+40|0;e=0;k=0;do{l=f+(e<<2)|0;m=c[l>>2]|0;n=c[f+(e+ -1<<2)>>2]|0;o=k|1;p=c[j+(k<<2)>>2]|0;q=((d[m]|0)*3|0)+(d[n]|0)|0;r=((d[m+1|0]|0)*3|0)+(d[n+1|0]|0)|0;a[p]=((q<<2)+8|0)>>>4;a[p+1|0]=((q*3|0)+7+r|0)>>>4;s=c[b>>2]|0;t=s+ -2|0;u=p+2|0;if((t|0)==0){v=p;w=q;x=u;y=r}else{z=s<<1;s=p;A=t;t=m+2|0;m=n+2|0;n=q;q=u;u=r;while(1){B=((d[t]|0)*3|0)+(d[m]|0)|0;r=u*3|0;a[q]=(n+8+r|0)>>>4;a[s+3|0]=(r+7+B|0)>>>4;A=A+ -1|0;if((A|0)==0){break}else{r=u;C=q;t=t+1|0;m=m+1|0;q=q+2|0;u=B;n=r;s=C}}v=p+(z+ -4)|0;w=u;x=p+(z+ -2)|0;y=B}a[x]=(w+8+(y*3|0)|0)>>>4;a[v+3|0]=((y<<2)+7|0)>>>4;s=c[l>>2]|0;e=e+1|0;n=c[f+(e<<2)>>2]|0;q=c[j+(o<<2)>>2]|0;m=((d[s]|0)*3|0)+(d[n]|0)|0;t=((d[s+1|0]|0)*3|0)+(d[n+1|0]|0)|0;a[q]=((m<<2)+8|0)>>>4;a[q+1|0]=((m*3|0)+7+t|0)>>>4;A=c[b>>2]|0;C=A+ -2|0;r=q+2|0;if((C|0)==0){D=q;E=m;F=r;G=t}else{H=A<<1;A=q;I=C;C=s+2|0;s=n+2|0;n=m;m=r;r=t;while(1){J=((d[C]|0)*3|0)+(d[s]|0)|0;t=r*3|0;a[m]=(n+8+t|0)>>>4;a[A+3|0]=(t+7+J|0)>>>4;I=I+ -1|0;if((I|0)==0){break}else{t=r;K=m;C=C+1|0;s=s+1|0;m=m+2|0;r=J;n=t;A=K}}D=q+(H+ -4)|0;E=r;F=q+(H+ -2)|0;G=J}a[F]=(E+8+(G*3|0)|0)>>>4;a[D+3|0]=((G<<2)+7|0)>>>4;k=k+2|0}while((k|0)<(c[g>>2]|0));i=h;return}function up(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;d=i;g=c[f>>2]|0;f=b+276|0;if((c[f>>2]|0)<=0){i=d;return}h=b+92|0;b=0;j=0;while(1){k=c[g+(j<<2)>>2]|0;l=c[h>>2]|0;m=k+l|0;if((l|0)>0){n=c[e+(b<<2)>>2]|0;o=k;while(1){k=a[n]|0;a[o]=k;p=o+2|0;a[o+1|0]=k;if(p>>>0<m>>>0){n=n+1|0;o=p}else{break}}q=c[h>>2]|0}else{q=l}rq(g,j,g,j|1,1,q);j=j+2|0;if((j|0)>=(c[f>>2]|0)){break}else{b=b+1|0}}i=d;return}function vp(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;g=i;h=c[b+416>>2]|0;j=c[f>>2]|0;f=c[d+4>>2]|0;d=a[h+140+f|0]|0;k=d&255;l=a[h+f+150|0]|0;f=l&255;h=b+276|0;if((c[h>>2]|0)<=0){i=g;return}m=b+92|0;b=(l&255)>1;l=f+ -1|0;n=d<<24>>24==0;d=0-k|0;o=((d|0)>-1?d:-1)+k+1|0;k=0;d=0;while(1){p=c[j+(d<<2)>>2]|0;q=c[m>>2]|0;r=p+q|0;if((q|0)>0){q=c[e+(k<<2)>>2]|0;s=p;while(1){if(n){t=s}else{vu(s|0,a[q]|0,o|0)|0;t=s+o|0}if(t>>>0<r>>>0){q=q+1|0;s=t}else{break}}}if(b){rq(j,d,j,d+1|0,l,c[m>>2]|0)}s=d+f|0;if((s|0)>=(c[h>>2]|0)){break}k=k+1|0;d=s}i=g;return}function wp(a){a=a|0;c[a>>2]=50;c[a+4>>2]=5;c[a+8>>2]=51;c[a+12>>2]=6;c[a+16>>2]=52;c[a+104>>2]=0;c[a+108>>2]=0;c[a+20>>2]=0;c[a+112>>2]=46264;c[a+116>>2]=123;c[a+120>>2]=0;c[a+124>>2]=0;c[a+128>>2]=0;return a|0}function xp(a){a=a|0;Jh[c[(c[a>>2]|0)+8>>2]&127](a);po(a);Gg(1)}function yp(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=c[a>>2]|0;if((b|0)>=0){if((c[e+104>>2]|0)<(b|0)){i=d;return}Jh[c[e+8>>2]&127](a);i=d;return}b=e+108|0;f=c[b>>2]|0;if((f|0)==0){g=4}else{if((c[e+104>>2]|0)>2){g=4}else{h=f}}if((g|0)==4){Jh[c[e+8>>2]&127](a);h=c[b>>2]|0}c[b>>2]=h+1;i=d;return}function zp(a){a=a|0;var b=0,d=0,e=0;b=i;i=i+208|0;d=b;e=b+8|0;Kh[c[(c[a>>2]|0)+12>>2]&63](a,e);a=c[r>>2]|0;c[d>>2]=e;Re(a|0,46768,d|0)|0;i=b;return}function Ap(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;i=i+32|0;f=e;g=c[b>>2]|0;b=c[g+20>>2]|0;if((b|0)>0){if((b|0)>(c[g+116>>2]|0)){h=4}else{j=(c[g+112>>2]|0)+(b<<2)|0;h=8}}else{h=4}if((h|0)==4){k=c[g+120>>2]|0;if((k|0)==0){h=9}else{l=c[g+124>>2]|0;if((b|0)<(l|0)){h=9}else{if((b|0)>(c[g+128>>2]|0)){h=9}else{j=k+(b-l<<2)|0;h=8}}}}if((h|0)==8){l=c[j>>2]|0;if((l|0)==0){h=9}else{m=l}}if((h|0)==9){c[g+24>>2]=b;m=c[c[g+112>>2]>>2]|0}b=m;while(1){n=b+1|0;l=a[b]|0;if(l<<24>>24==0){h=12;break}else if(l<<24>>24==37){h=13;break}else{b=n}}if((h|0)==12){o=g+24|0}else if((h|0)==13){h=g+24|0;if((a[n]|0)==115){c[f>>2]=h;lb(d|0,m|0,f|0)|0;i=e;return}else{o=h}}h=c[g+28>>2]|0;n=c[g+32>>2]|0;b=c[g+36>>2]|0;l=c[g+40>>2]|0;j=c[g+44>>2]|0;k=c[g+48>>2]|0;p=c[g+52>>2]|0;c[f>>2]=c[o>>2];c[f+4>>2]=h;c[f+8>>2]=n;c[f+12>>2]=b;c[f+16>>2]=l;c[f+20>>2]=j;c[f+24>>2]=k;c[f+28>>2]=p;lb(d|0,m|0,f|0)|0;i=e;return}function Bp(a){a=a|0;var b=0;b=c[a>>2]|0;c[b+108>>2]=0;c[b+20>>2]=0;return}function Cp(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;i=i+16|0;e=d;f=d+8|0;g=d+12|0;h=b+4|0;c[h>>2]=0;c[f>>2]=Up(b)|0;j=Op(b,84)|0;if((j|0)==0){Vp(b);k=c[b>>2]|0;c[k+20>>2]=54;c[k+24>>2]=0;Jh[c[k>>2]&127](b)}c[j>>2]=2;c[j+4>>2]=3;c[j+8>>2]=1;c[j+12>>2]=2;c[j+16>>2]=1;c[j+20>>2]=2;c[j+24>>2]=53;c[j+28>>2]=1;c[j+32>>2]=2;c[j+36>>2]=7;c[j+40>>2]=54;c[j+48>>2]=1e9;b=j+44|0;c[b>>2]=c[f>>2];c[j+56>>2]=0;c[j+64>>2]=0;c[j+52>>2]=0;c[j+60>>2]=0;c[j+68>>2]=0;c[j+72>>2]=0;c[j+76>>2]=84;c[h>>2]=j;j=ef(46776)|0;if((j|0)==0){i=d;return}a[g]=120;c[e>>2]=f;c[e+4>>2]=g;if((Wb(j|0,46784,e|0)|0)<=0){i=d;return}e=a[g]|0;if(e<<24>>24==77|e<<24>>24==109){e=(c[f>>2]|0)*1e3|0;c[f>>2]=e;l=e}else{l=c[f>>2]|0}c[b>>2]=l*1e3;i=d;return}function Dp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;e=i;f=c[a+4>>2]|0;if(d>>>0>999999984){g=c[a>>2]|0;c[g+20>>2]=54;c[g+24>>2]=1;Jh[c[g>>2]&127](a)}g=d&7;if((g|0)==0){h=d}else{h=d+8-g|0}if(b>>>0>1){g=c[a>>2]|0;c[g+20>>2]=14;c[g+24>>2]=b;Jh[c[g>>2]&127](a)}g=f+52+(b<<2)|0;d=c[g>>2]|0;a:do{if((d|0)==0){j=0;k=10}else{l=d;while(1){if(!((c[l+8>>2]|0)>>>0<h>>>0)){m=l;break a}n=c[l>>2]|0;if((n|0)==0){j=l;k=10;break}else{l=n}}}}while(0);do{if((k|0)==10){d=h+16|0;l=(j|0)==0;n=c[(l?46792:46800)+(b<<2)>>2]|0;o=999999984-h|0;p=n>>>0>o>>>0?o:n;n=d+p|0;o=Op(a,n)|0;if((o|0)==0){q=p;while(1){r=q>>>1;if(q>>>0<100){s=c[a>>2]|0;c[s+20>>2]=54;c[s+24>>2]=2;Jh[c[s>>2]&127](a)}s=d+r|0;t=Op(a,s)|0;if((t|0)==0){q=r}else{u=s;v=t;w=r;break}}}else{u=n;v=o;w=p}q=f+76|0;c[q>>2]=(c[q>>2]|0)+u;c[v>>2]=0;c[v+4>>2]=0;c[v+8>>2]=w+h;if(l){c[g>>2]=v;m=v;break}else{c[j>>2]=v;m=v;break}}}while(0);v=m+4|0;j=c[v>>2]|0;c[v>>2]=j+h;v=m+8|0;c[v>>2]=(c[v>>2]|0)-h;i=e;return m+16+j|0}function Ep(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=c[a+4>>2]|0;if(d>>>0>999999984){g=c[a>>2]|0;c[g+20>>2]=54;c[g+24>>2]=3;Jh[c[g>>2]&127](a)}g=d&7;if((g|0)==0){h=d}else{h=d+8-g|0}if(b>>>0>1){g=c[a>>2]|0;c[g+20>>2]=14;c[g+24>>2]=b;Jh[c[g>>2]&127](a)}g=h+16|0;d=Qp(a,g)|0;if((d|0)==0){j=c[a>>2]|0;c[j+20>>2]=54;c[j+24>>2]=4;Jh[c[j>>2]&127](a)}a=f+76|0;c[a>>2]=(c[a>>2]|0)+g;g=f+60+(b<<2)|0;c[d>>2]=c[g>>2];c[d+4>>2]=h;c[d+8>>2]=0;c[g>>2]=d;i=e;return d+16|0}function Fp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;g=c[a+4>>2]|0;h=999999984/(d>>>0)|0;if((h|0)==0){j=c[a>>2]|0;c[j+20>>2]=70;Jh[c[j>>2]&127](a)}j=(h|0)<(e|0)?h:e;c[g+80>>2]=j;g=Dp(a,b,e<<2)|0;if((e|0)==0){i=f;return g|0}h=~e;k=0;l=j;while(1){j=e-k|0;m=l>>>0<j>>>0?l:j;j=Ep(a,b,ea(m,d)|0)|0;if((m|0)==0){n=k}else{o=~l;p=k+h|0;q=p>>>0<o>>>0?o:p;p=k;o=m;r=j;while(1){c[g+(p<<2)>>2]=r;o=o+ -1|0;if((o|0)==0){break}else{p=p+1|0;r=r+d|0}}n=k+ -1-q|0}if(n>>>0<e>>>0){k=n;l=m}else{break}}i=f;return g|0}function Gp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;g=c[a+4>>2]|0;h=d<<7;j=999999984/(h>>>0)|0;if((j|0)==0){k=c[a>>2]|0;c[k+20>>2]=70;Jh[c[k>>2]&127](a)}k=(j|0)<(e|0)?j:e;c[g+80>>2]=k;g=Dp(a,b,e<<2)|0;if((e|0)==0){i=f;return g|0}j=~e;l=0;m=k;while(1){k=e-l|0;n=m>>>0<k>>>0?m:k;k=Ep(a,b,ea(h,n)|0)|0;if((n|0)==0){o=l}else{p=~m;q=l+j|0;r=q>>>0<p>>>0?p:q;q=l;p=n;s=k;while(1){c[g+(q<<2)>>2]=s;p=p+ -1|0;if((p|0)==0){break}else{q=q+1|0;s=s+(d<<7)|0}}o=l+ -1-r|0}if(o>>>0<e>>>0){l=o;m=n}else{break}}i=f;return g|0}function Hp(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;k=c[b+4>>2]|0;if((d|0)!=1){l=c[b>>2]|0;c[l+20>>2]=14;c[l+24>>2]=d;Jh[c[l>>2]&127](b)}l=Dp(b,d,120)|0;c[l>>2]=0;c[l+4>>2]=g;c[l+8>>2]=f;c[l+12>>2]=h;a[l+32|0]=e;a[l+34|0]=0;e=k+68|0;c[l+36>>2]=c[e>>2];c[e>>2]=l;i=j;return l|0}function Ip(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;k=c[b+4>>2]|0;if((d|0)!=1){l=c[b>>2]|0;c[l+20>>2]=14;c[l+24>>2]=d;Jh[c[l>>2]&127](b)}l=Dp(b,d,120)|0;c[l>>2]=0;c[l+4>>2]=g;c[l+8>>2]=f;c[l+12>>2]=h;a[l+32|0]=e;a[l+34|0]=0;e=k+72|0;c[l+36>>2]=c[e>>2];c[e>>2]=l;i=j;return l|0}function Jp(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;e=c[b+4>>2]|0;f=e+68|0;g=c[f>>2]|0;if((g|0)==0){h=0;j=0}else{k=0;l=0;m=g;while(1){if((c[m>>2]|0)==0){g=c[m+8>>2]|0;n=(ea(g,c[m+12>>2]|0)|0)+l|0;o=(ea(c[m+4>>2]|0,g)|0)+k|0;p=n}else{o=k;p=l}n=c[m+36>>2]|0;if((n|0)==0){h=o;j=p;break}else{k=o;l=p;m=n}}}m=e+72|0;p=c[m>>2]|0;if((p|0)==0){q=h;r=j}else{l=p;p=h;h=j;while(1){if((c[l>>2]|0)==0){j=c[l+8>>2]|0;o=(ea(c[l+12>>2]<<7,j)|0)+h|0;s=(ea(j<<7,c[l+4>>2]|0)|0)+p|0;t=o}else{s=p;t=h}o=c[l+36>>2]|0;if((o|0)==0){q=s;r=t;break}else{l=o;p=s;h=t}}}if((r|0)<1){i=d;return}t=Sp(b,r,q,c[e+76>>2]|0)|0;if((t|0)<(q|0)){q=(t|0)/(r|0)|0;u=(q|0)<1?1:q}else{u=1e9}q=c[f>>2]|0;if((q|0)!=0){f=e+80|0;r=q;do{if((c[r>>2]|0)==0){q=c[r+4>>2]|0;t=c[r+12>>2]|0;if(((((q+ -1|0)>>>0)/(t>>>0)|0)+1|0)>(u|0)){h=r+16|0;c[h>>2]=ea(t,u)|0;t=r+8|0;Tp(b,r+40|0,ea(c[t>>2]|0,q)|0);a[r+34|0]=1;v=t;w=c[h>>2]|0}else{c[r+16>>2]=q;v=r+8|0;w=q}c[r>>2]=Fp(b,1,c[v>>2]|0,w)|0;c[r+20>>2]=c[f>>2];c[r+24>>2]=0;c[r+28>>2]=0;a[r+33|0]=0}r=c[r+36>>2]|0}while((r|0)!=0)}r=c[m>>2]|0;if((r|0)==0){i=d;return}m=e+80|0;e=r;do{if((c[e>>2]|0)==0){r=c[e+4>>2]|0;f=c[e+12>>2]|0;if(((((r+ -1|0)>>>0)/(f>>>0)|0)+1|0)>(u|0)){w=e+16|0;c[w>>2]=ea(f,u)|0;f=e+8|0;Tp(b,e+40|0,ea(r<<7,c[f>>2]|0)|0);a[e+34|0]=1;x=f;y=c[w>>2]|0}else{c[e+16>>2]=r;x=e+8|0;y=r}c[e>>2]=Gp(b,1,c[x>>2]|0,y)|0;c[e+20>>2]=c[m>>2];c[e+24>>2]=0;c[e+28>>2]=0;a[e+33|0]=0}e=c[e+36>>2]|0}while((e|0)!=0);i=d;return}function Kp(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;h=i;j=f+e|0;k=d+4|0;if(j>>>0>(c[k>>2]|0)>>>0){l=4}else{if((c[d+12>>2]|0)>>>0<f>>>0){l=4}else{if((c[d>>2]|0)==0){l=4}}}if((l|0)==4){f=c[b>>2]|0;c[f+20>>2]=22;Jh[c[f>>2]&127](b)}f=d+24|0;m=c[f>>2]|0;if(m>>>0>e>>>0){l=7}else{if(j>>>0>((c[d+16>>2]|0)+m|0)>>>0){l=7}}a:do{if((l|0)==7){if((a[d+34|0]|0)==0){m=c[b>>2]|0;c[m+20>>2]=69;Jh[c[m>>2]&127](b)}m=d+33|0;if((a[m]|0)!=0){n=c[d+8>>2]|0;o=c[f>>2]|0;p=d+20|0;q=d+16|0;r=c[q>>2]|0;b:do{if((r|0)>0){s=d+28|0;t=d+40|0;u=d+44|0;v=c[p>>2]|0;w=(v|0)<(r|0)?v:r;v=(c[s>>2]|0)-o|0;x=(w|0)<(v|0)?w:v;v=(c[k>>2]|0)-o|0;w=(x|0)<(v|0)?x:v;if((w|0)>=1){v=w;w=ea(o,n)|0;x=0;while(1){y=ea(v,n)|0;Gh[c[u>>2]&31](b,t,c[(c[d>>2]|0)+(x<<2)>>2]|0,w,y);z=c[p>>2]|0;A=c[q>>2]|0;B=z+x|0;if((B|0)>=(A|0)){break b}C=A-B|0;A=(z|0)<(C|0)?z:C;C=B+(c[f>>2]|0)|0;z=(c[s>>2]|0)-C|0;D=(A|0)<(z|0)?A:z;z=(c[k>>2]|0)-C|0;C=(D|0)<(z|0)?D:z;if((C|0)<1){break b}v=C;w=y+w|0;x=B}}}}while(0);a[m]=0}q=c[d+16>>2]|0;if((c[f>>2]|0)>>>0<e>>>0){E=e}else{p=j-q|0;E=(p|0)<0?0:p}c[f>>2]=E;p=c[d+8>>2]|0;n=d+20|0;o=d+16|0;if((q|0)>0){r=d+28|0;x=d+40|0;w=c[n>>2]|0;v=(w|0)<(q|0)?w:q;q=(c[r>>2]|0)-E|0;w=(v|0)<(q|0)?v:q;q=(c[k>>2]|0)-E|0;v=(w|0)<(q|0)?w:q;if((v|0)>=1){q=v;v=ea(p,E)|0;w=0;while(1){s=ea(q,p)|0;Gh[c[x>>2]&31](b,x,c[(c[d>>2]|0)+(w<<2)>>2]|0,v,s);t=c[n>>2]|0;u=c[o>>2]|0;B=t+w|0;if((B|0)>=(u|0)){break a}y=u-B|0;u=(t|0)<(y|0)?t:y;y=B+(c[f>>2]|0)|0;t=(c[r>>2]|0)-y|0;C=(u|0)<(t|0)?u:t;t=(c[k>>2]|0)-y|0;y=(C|0)<(t|0)?C:t;if((y|0)<1){break a}q=y;v=s+v|0;w=B}}}}}while(0);k=d+28|0;E=c[k>>2]|0;do{if(E>>>0<j>>>0){if(E>>>0<e>>>0){if(g<<24>>24==0){F=0;G=e}else{w=c[b>>2]|0;c[w+20>>2]=22;Jh[c[w>>2]&127](b);H=e;l=29}}else{H=E;l=29}if((l|0)==29){if(g<<24>>24==0){F=0;G=H}else{c[k>>2]=j;F=1;G=H}}if((a[d+32|0]|0)==0){if(F){break}w=c[b>>2]|0;c[w+20>>2]=22;Jh[c[w>>2]&127](b);break}w=c[d+8>>2]|0;v=c[f>>2]|0;q=G-v|0;r=j-v|0;if(q>>>0<r>>>0){v=q;do{tq(c[(c[d>>2]|0)+(v<<2)>>2]|0,w);v=v+1|0}while((v|0)!=(r|0))}}}while(0);if(g<<24>>24==0){I=c[d>>2]|0;J=c[f>>2]|0;K=e-J|0;L=I+(K<<2)|0;i=h;return L|0}a[d+33|0]=1;I=c[d>>2]|0;J=c[f>>2]|0;K=e-J|0;L=I+(K<<2)|0;i=h;return L|0}function Lp(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;h=i;j=f+e|0;k=d+4|0;if(j>>>0>(c[k>>2]|0)>>>0){l=4}else{if((c[d+12>>2]|0)>>>0<f>>>0){l=4}else{if((c[d>>2]|0)==0){l=4}}}if((l|0)==4){f=c[b>>2]|0;c[f+20>>2]=22;Jh[c[f>>2]&127](b)}f=d+24|0;m=c[f>>2]|0;if(m>>>0>e>>>0){l=7}else{if(j>>>0>((c[d+16>>2]|0)+m|0)>>>0){l=7}}a:do{if((l|0)==7){if((a[d+34|0]|0)==0){m=c[b>>2]|0;c[m+20>>2]=69;Jh[c[m>>2]&127](b)}m=d+33|0;if((a[m]|0)!=0){n=c[d+8>>2]<<7;o=c[f>>2]|0;p=d+20|0;q=d+16|0;r=c[q>>2]|0;b:do{if((r|0)>0){s=d+28|0;t=d+40|0;u=d+44|0;v=c[p>>2]|0;w=(v|0)<(r|0)?v:r;v=(c[s>>2]|0)-o|0;x=(w|0)<(v|0)?w:v;v=(c[k>>2]|0)-o|0;w=(x|0)<(v|0)?x:v;if((w|0)>=1){v=w;w=ea(o,n)|0;x=0;while(1){y=ea(v,n)|0;Gh[c[u>>2]&31](b,t,c[(c[d>>2]|0)+(x<<2)>>2]|0,w,y);z=c[p>>2]|0;A=c[q>>2]|0;B=z+x|0;if((B|0)>=(A|0)){break b}C=A-B|0;A=(z|0)<(C|0)?z:C;C=B+(c[f>>2]|0)|0;z=(c[s>>2]|0)-C|0;D=(A|0)<(z|0)?A:z;z=(c[k>>2]|0)-C|0;C=(D|0)<(z|0)?D:z;if((C|0)<1){break b}v=C;w=y+w|0;x=B}}}}while(0);a[m]=0}q=c[d+16>>2]|0;if((c[f>>2]|0)>>>0<e>>>0){E=e}else{p=j-q|0;E=(p|0)<0?0:p}c[f>>2]=E;p=c[d+8>>2]<<7;n=d+20|0;o=d+16|0;if((q|0)>0){r=d+28|0;x=d+40|0;w=c[n>>2]|0;v=(w|0)<(q|0)?w:q;q=(c[r>>2]|0)-E|0;w=(v|0)<(q|0)?v:q;q=(c[k>>2]|0)-E|0;v=(w|0)<(q|0)?w:q;if((v|0)>=1){q=v;v=ea(p,E)|0;w=0;while(1){s=ea(q,p)|0;Gh[c[x>>2]&31](b,x,c[(c[d>>2]|0)+(w<<2)>>2]|0,v,s);t=c[n>>2]|0;u=c[o>>2]|0;B=t+w|0;if((B|0)>=(u|0)){break a}y=u-B|0;u=(t|0)<(y|0)?t:y;y=B+(c[f>>2]|0)|0;t=(c[r>>2]|0)-y|0;C=(u|0)<(t|0)?u:t;t=(c[k>>2]|0)-y|0;y=(C|0)<(t|0)?C:t;if((y|0)<1){break a}q=y;v=s+v|0;w=B}}}}}while(0);k=d+28|0;E=c[k>>2]|0;do{if(E>>>0<j>>>0){if(E>>>0<e>>>0){if(g<<24>>24==0){F=0;G=e}else{w=c[b>>2]|0;c[w+20>>2]=22;Jh[c[w>>2]&127](b);H=e;l=29}}else{H=E;l=29}if((l|0)==29){if(g<<24>>24==0){F=0;G=H}else{c[k>>2]=j;F=1;G=H}}if((a[d+32|0]|0)==0){if(F){break}w=c[b>>2]|0;c[w+20>>2]=22;Jh[c[w>>2]&127](b);break}w=c[d+8>>2]<<7;v=c[f>>2]|0;q=G-v|0;r=j-v|0;if(q>>>0<r>>>0){v=q;do{tq(c[(c[d>>2]|0)+(v<<2)>>2]|0,w);v=v+1|0}while((v|0)!=(r|0))}}}while(0);if(g<<24>>24==0){I=c[d>>2]|0;J=c[f>>2]|0;K=e-J|0;L=I+(K<<2)|0;i=h;return L|0}a[d+33|0]=1;I=c[d>>2]|0;J=c[f>>2]|0;K=e-J|0;L=I+(K<<2)|0;i=h;return L|0}function Mp(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;f=c[b+4>>2]|0;if(d>>>0>1){g=c[b>>2]|0;c[g+20>>2]=14;c[g+24>>2]=d;Jh[c[g>>2]&127](b)}else{if((d|0)==1){g=f+68|0;h=c[g>>2]|0;if((h|0)!=0){j=h;do{h=j+34|0;if((a[h]|0)!=0){a[h]=0;Kh[c[j+48>>2]&63](b,j+40|0)}j=c[j+36>>2]|0}while((j|0)!=0)}c[g>>2]=0;g=f+72|0;j=c[g>>2]|0;if((j|0)!=0){h=j;do{j=h+34|0;if((a[j]|0)!=0){a[j]=0;Kh[c[h+48>>2]&63](b,h+40|0)}h=c[h+36>>2]|0}while((h|0)!=0)}c[g>>2]=0}}g=f+60+(d<<2)|0;h=c[g>>2]|0;c[g>>2]=0;if((h|0)!=0){g=f+76|0;j=h;while(1){h=c[j>>2]|0;k=(c[j+4>>2]|0)+16+(c[j+8>>2]|0)|0;Rp(b,j,k);c[g>>2]=(c[g>>2]|0)-k;if((h|0)==0){break}else{j=h}}}j=f+52+(d<<2)|0;d=c[j>>2]|0;c[j>>2]=0;if((d|0)==0){i=e;return}j=f+76|0;f=d;while(1){d=c[f>>2]|0;g=(c[f+4>>2]|0)+16+(c[f+8>>2]|0)|0;Pp(b,f,g);c[j>>2]=(c[j>>2]|0)-g;if((d|0)==0){break}else{f=d}}i=e;return}function Np(a){a=a|0;var b=0,d=0;b=i;Mp(a,1);Mp(a,0);d=a+4|0;Pp(a,c[d>>2]|0,84);c[d>>2]=0;Vp(a);i=b;return}function Op(a,b){a=a|0;b=b|0;var c=0;a=i;c=Xt(b)|0;i=a;return c|0}function Pp(a,b,c){a=a|0;b=b|0;c=c|0;c=i;Yt(b);i=c;return}function Qp(a,b){a=a|0;b=b|0;var c=0;a=i;c=Xt(b)|0;i=a;return c|0}function Rp(a,b,c){a=a|0;b=b|0;c=c|0;c=i;Yt(b);i=c;return}function Sp(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return c|0}function Tp(a,b,d){a=a|0;b=b|0;d=d|0;d=i;b=c[a>>2]|0;c[b+20>>2]=49;Jh[c[b>>2]&127](a);i=d;return}function Up(a){a=a|0;return 0}function Vp(a){a=a|0;return}function Wp(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;d=i;e=b+4|0;f=Qh[c[c[e>>2]>>2]&15](b,1,88)|0;g=b+424|0;c[g>>2]=f;c[f>>2]=8;c[f+8>>2]=55;c[f+12>>2]=56;c[f+68>>2]=0;c[f+52>>2]=0;f=b+100|0;if((c[f>>2]|0)>4){h=c[b>>2]|0;c[h+20>>2]=55;c[h+24>>2]=4;Jh[c[h>>2]&127](b)}h=b+84|0;j=c[h>>2]|0;if((j|0)>256){k=c[b>>2]|0;c[k+20>>2]=57;c[k+24>>2]=256;Jh[c[k>>2]&127](b);l=c[h>>2]|0}else{l=j}j=c[g>>2]|0;h=j+32|0;k=c[f>>2]|0;if((k|0)>1){m=1;while(1){n=m+1|0;o=1;p=n;do{p=ea(p,n)|0;o=o+1|0}while((o|0)!=(k|0));if((p|0)>(l|0)){q=m;r=p;break}else{m=n}}}else{m=(l|0)>1?l:1;q=m;r=m+1|0}if((q|0)<2){m=c[b>>2]|0;c[m+20>>2]=56;c[m+24>>2]=r;Jh[c[m>>2]&127](b)}if((k|0)>0){m=0;r=1;while(1){c[h+(m<<2)>>2]=q;o=ea(r,q)|0;s=m+1|0;if((s|0)==(k|0)){t=o;break}else{m=s;r=o}}}else{t=1}r=b+44|0;m=0;q=0;o=t;a:while(1){t=m;s=q;while(1){if((s|0)<(k|0)){if((c[r>>2]|0)==2){u=c[46808+(s<<2)>>2]|0}else{u=s}v=h+(u<<2)|0;w=c[v>>2]|0;x=w+1|0;y=ea((o|0)/(w|0)|0,x)|0;if((y|0)<=(l|0)){break}}if(t<<24>>24==0){break a}else{t=0;s=0}}c[v>>2]=x;m=1;q=s+1|0;o=y}y=c[b>>2]|0;if((c[f>>2]|0)==3){c[y+24>>2]=o;c[y+28>>2]=c[h>>2];c[y+32>>2]=c[j+36>>2];c[y+36>>2]=c[j+40>>2];c[y+20>>2]=94;Kh[c[y+4>>2]&63](b,1)}else{c[y+20>>2]=95;c[y+24>>2]=o;Kh[c[y+4>>2]&63](b,1)}y=_h[c[(c[e>>2]|0)+8>>2]&3](b,1,o,c[f>>2]|0)|0;q=c[f>>2]|0;if((q|0)>0){m=q;q=o;x=0;while(1){v=c[h+(x<<2)>>2]|0;l=(q|0)/(v|0)|0;b:do{if((v|0)>0){u=v+ -1|0;r=(u|0)/2|0;k=y+(x<<2)|0;if((l|0)>0){z=0}else{t=0;while(1){n=ea(t,l)|0;if((n|0)<(o|0)){p=n;do{p=p+q|0}while((p|0)<(o|0))}p=t+1|0;if((p|0)==(v|0)){A=m;break b}else{t=p}}}do{t=ea(z,l)|0;if((t|0)<(o|0)){p=(((z*255|0)+r|0)/(u|0)|0)&255;n=t;do{t=0;do{a[(c[k>>2]|0)+(t+n)|0]=p;t=t+1|0}while((t|0)!=(l|0));n=n+q|0}while((n|0)<(o|0))}z=z+1|0}while((z|0)!=(v|0));A=c[f>>2]|0}else{A=m}}while(0);v=x+1|0;if((v|0)<(A|0)){m=A;q=l;x=v}else{break}}}c[j+16>>2]=y;c[j+20>>2]=o;_p(b);if((c[b+76>>2]|0)!=2){i=d;return}o=(c[b+92>>2]<<1)+4|0;if((c[f>>2]|0)<=0){i=d;return}j=(c[g>>2]|0)+68|0;g=0;do{c[j+(g<<2)>>2]=Qh[c[(c[e>>2]|0)+4>>2]&15](b,1,o)|0;g=g+1|0}while((g|0)<(c[f>>2]|0));i=d;return}function Xp(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;e=i;f=b+424|0;g=c[f>>2]|0;c[b+116>>2]=c[g+16>>2];c[b+112>>2]=c[g+20>>2];h=c[b+76>>2]|0;if((h|0)==0){j=g+4|0;if((c[b+100>>2]|0)==3){c[j>>2]=12;i=e;return}else{c[j>>2]=13;i=e;return}}else if((h|0)==2){c[g+4>>2]=16;a[g+84|0]=0;j=g+68|0;if((c[j>>2]|0)==0){k=b+92|0;l=(c[k>>2]<<1)+4|0;m=b+100|0;if((c[m>>2]|0)<=0){i=e;return}n=b+4|0;o=(c[f>>2]|0)+68|0;p=0;while(1){c[o+(p<<2)>>2]=Qh[c[(c[n>>2]|0)+4>>2]&15](b,1,l)|0;q=p+1|0;r=c[m>>2]|0;if((q|0)<(r|0)){p=q}else{s=k;t=r;break}}}else{s=b+92|0;t=c[b+100>>2]|0}k=(c[s>>2]<<1)+4|0;s=b+100|0;if((t|0)>0){u=0}else{i=e;return}do{tq(c[j+(u<<2)>>2]|0,k);u=u+1|0}while((u|0)<(c[s>>2]|0));i=e;return}else if((h|0)==1){h=b+100|0;c[g+4>>2]=(c[h>>2]|0)==3?14:15;c[g+48>>2]=0;if((a[g+28|0]|0)==0){_p(b)}if((c[g+52>>2]|0)!=0){i=e;return}g=c[f>>2]|0;f=c[h>>2]|0;if((f|0)<=0){i=e;return}s=g+32|0;u=b+4|0;k=g+52|0;g=f;f=0;while(1){j=c[s+(f<<2)>>2]|0;a:do{if((f|0)>0){t=0;while(1){p=t+1|0;if((j|0)==(c[s+(t<<2)>>2]|0)){break}if((p|0)<(f|0)){t=p}else{v=14;break a}}p=c[k+(t<<2)>>2]|0;if((p|0)==0){v=14}else{w=g;x=p}}else{v=14}}while(0);if((v|0)==14){v=0;p=Qh[c[c[u>>2]>>2]&15](b,1,1024)|0;m=(j<<9)+ -512|0;l=0;do{n=0;do{o=255-(d[46824+(l<<4)+n|0]<<1)|0;r=o*255|0;if((o|0)<0){y=0-((0-r|0)/(m|0)|0)|0}else{y=(r|0)/(m|0)|0}c[p+(l<<6)+(n<<2)>>2]=y;n=n+1|0}while((n|0)!=16);l=l+1|0}while((l|0)!=16);w=c[h>>2]|0;x=p}c[k+(f<<2)>>2]=x;f=f+1|0;if((f|0)>=(w|0)){break}else{g=w}}i=e;return}else{w=c[b>>2]|0;c[w+20>>2]=48;Jh[c[w>>2]&127](b);i=e;return}}function Yp(a){a=a|0;return}function Zp(a){a=a|0;var b=0,d=0;b=i;d=c[a>>2]|0;c[d+20>>2]=46;Jh[c[d>>2]&127](a);i=b;return}function _p(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;d=i;e=c[b+424>>2]|0;f=(c[b+76>>2]|0)==1;a[e+28|0]=f&1;g=b+100|0;h=e+24|0;c[h>>2]=_h[c[(c[b+4>>2]|0)+8>>2]&3](b,1,f?766:256,c[g>>2]|0)|0;if((c[g>>2]|0)<=0){i=d;return}b=e+32|0;j=c[e+20>>2]|0;e=0;do{k=c[b+(e<<2)>>2]|0;j=(j|0)/(k|0)|0;if(f){l=(c[h>>2]|0)+(e<<2)|0;c[l>>2]=(c[l>>2]|0)+255}l=c[(c[h>>2]|0)+(e<<2)>>2]|0;m=k+ -1|0;n=m<<1;o=0;p=(k+254|0)/(n|0)|0;k=0;while(1){if((o|0)>(p|0)){q=k;while(1){r=q+1|0;s=(((r<<1|1)*255|0)+m|0)/(n|0)|0;if((o|0)>(s|0)){q=r}else{t=s;u=r;break}}}else{t=p;u=k}a[l+o|0]=ea(u,j)|0;o=o+1|0;if((o|0)==256){break}else{p=t;k=u}}if(f){k=l+255|0;p=1;do{a[l+(0-p)|0]=a[l]|0;a[l+(p+255)|0]=a[k]|0;p=p+1|0}while((p|0)!=256)}e=e+1|0}while((e|0)<(c[g>>2]|0));i=d;return}function $p(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;j=c[(c[b+424>>2]|0)+24>>2]|0;k=c[j>>2]|0;l=c[j+4>>2]|0;m=c[j+8>>2]|0;j=c[b+92>>2]|0;if((g|0)<1|(j|0)==0){i=h;return}else{n=0}do{b=j;o=c[e+(n<<2)>>2]|0;p=c[f+(n<<2)>>2]|0;while(1){a[p]=(d[l+(d[o+1|0]|0)|0]|0)+(d[k+(d[o]|0)|0]|0)+(d[m+(d[o+2|0]|0)|0]|0);b=b+ -1|0;if((b|0)==0){break}else{o=o+3|0;p=p+1|0}}n=n+1|0}while((n|0)!=(g|0));i=h;return}function aq(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;h=i;j=c[(c[b+424>>2]|0)+24>>2]|0;k=c[b+92>>2]|0;l=c[b+100>>2]|0;if((g|0)<=0){i=h;return}b=(k|0)==0;m=(l|0)>0;n=0;do{if(!b){o=k;p=c[e+(n<<2)>>2]|0;q=c[f+(n<<2)>>2]|0;while(1){if(m){r=0;s=0;t=p;while(1){s=(d[(c[j+(r<<2)>>2]|0)+(d[t]|0)|0]|0)+s|0;r=r+1|0;if((r|0)==(l|0)){break}else{t=t+1|0}}u=s&255;v=p+l|0}else{u=0;v=p}a[q]=u;o=o+ -1|0;if((o|0)==0){break}else{p=v;q=q+1|0}}}n=n+1|0}while((n|0)!=(g|0));i=h;return}function bq(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;h=i;j=c[b+424>>2]|0;k=c[j+24>>2]|0;l=c[k>>2]|0;m=c[k+4>>2]|0;n=c[k+8>>2]|0;k=c[b+92>>2]|0;if((g|0)<=0){i=h;return}b=j+48|0;o=j+52|0;j=o+4|0;p=o+8|0;q=(k|0)==0;r=c[b>>2]|0;s=0;do{t=c[o>>2]|0;u=c[j>>2]|0;v=c[p>>2]|0;if(!q){w=k;x=0;y=c[e+(s<<2)>>2]|0;z=c[f+(s<<2)>>2]|0;while(1){a[z]=(d[m+((d[y+1|0]|0)+(c[u+(r<<6)+(x<<2)>>2]|0))|0]|0)+(d[l+((d[y]|0)+(c[t+(r<<6)+(x<<2)>>2]|0))|0]|0)+(d[n+((d[y+2|0]|0)+(c[v+(r<<6)+(x<<2)>>2]|0))|0]|0);w=w+ -1|0;if((w|0)==0){break}else{x=x+1&15;y=y+3|0;z=z+1|0}}}r=r+1&15;c[b>>2]=r;s=s+1|0}while((s|0)!=(g|0));i=h;return}function cq(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;h=i;j=c[b+424>>2]|0;k=c[b+100>>2]|0;l=c[b+92>>2]|0;if((g|0)<=0){i=h;return}b=j+48|0;m=(k|0)>0;n=j+24|0;o=j+52|0;j=(l|0)==0;p=0;do{q=f+(p<<2)|0;tq(c[q>>2]|0,l);r=c[b>>2]|0;if(m){s=e+(p<<2)|0;t=0;do{u=c[(c[n>>2]|0)+(t<<2)>>2]|0;v=c[o+(t<<2)>>2]|0;if(!j){w=l;x=0;y=(c[s>>2]|0)+t|0;z=c[q>>2]|0;while(1){a[z]=(d[z]|0)+(d[u+((d[y]|0)+(c[v+(r<<6)+(x<<2)>>2]|0))|0]|0);w=w+ -1|0;if((w|0)==0){break}else{x=x+1&15;y=y+k|0;z=z+1|0}}}t=t+1|0}while((t|0)!=(k|0))}c[b>>2]=r+1&15;p=p+1|0}while((p|0)!=(g|0));i=h;return}function dq(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;j=i;k=c[e+424>>2]|0;l=c[e+100>>2]|0;m=c[e+92>>2]|0;n=c[e+288>>2]|0;if((h|0)<=0){i=j;return}e=(l|0)>0;o=k+84|0;p=k+68|0;q=k+24|0;r=k+16|0;k=(m|0)==0;s=m+ -1|0;t=ea(s,l)|0;u=0-l|0;v=m+1|0;w=0;do{x=g+(w<<2)|0;tq(c[x>>2]|0,m);if(e){y=f+(w<<2)|0;z=0;do{A=c[x>>2]|0;if((a[o]|0)==0){B=z;C=1;D=l;E=c[p+(z<<2)>>2]|0;F=A}else{B=z+t|0;C=-1;D=u;E=(c[p+(z<<2)>>2]|0)+(v<<1)|0;F=A+s|0}A=c[(c[q>>2]|0)+(z<<2)>>2]|0;G=c[(c[r>>2]|0)+(z<<2)>>2]|0;if(k){H=0;I=E}else{J=ea(m,C)|0;K=0;L=0;M=m;N=0;O=E;P=(c[y>>2]|0)+B|0;Q=F;while(1){R=O+(C<<1)|0;S=d[n+((N+8+(b[R>>1]|0)>>4)+(d[P]|0))|0]|0;T=d[A+S|0]|0;a[Q]=(d[Q]|0)+T;U=S-(d[G+T|0]|0)|0;T=U<<1;S=T+U|0;b[O>>1]=S+L;V=S+T|0;W=V+K|0;S=M+ -1|0;if((S|0)==0){break}else{K=U;L=W;M=S;N=V+T|0;O=R;P=P+D|0;Q=Q+C|0}}H=W&65535;I=E+(J<<1)|0}b[I>>1]=H;z=z+1|0}while((z|0)!=(l|0))}a[o]=(a[o]|0)==0|0;w=w+1|0}while((w|0)!=(h|0));i=j;return}function eq(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=b+4|0;f=Qh[c[c[e>>2]>>2]&15](b,1,44)|0;c[b+424>>2]=f;c[f>>2]=9;c[f+12>>2]=57;g=f+32|0;c[g>>2]=0;c[f+40>>2]=0;if((c[b+100>>2]|0)!=3){h=c[b>>2]|0;c[h+20>>2]=47;Jh[c[h>>2]&127](b)}h=f+24|0;c[h>>2]=Qh[c[c[e>>2]>>2]&15](b,1,128)|0;j=0;do{k=Qh[c[(c[e>>2]|0)+4>>2]&15](b,1,4096)|0;c[(c[h>>2]|0)+(j<<2)>>2]=k;j=j+1|0}while((j|0)!=32);a[f+28|0]=1;if((a[b+90|0]|0)==0){c[f+16>>2]=0}else{j=c[b+84>>2]|0;if((j|0)<8){h=c[b>>2]|0;c[h+20>>2]=56;c[h+24>>2]=8;Jh[c[h>>2]&127](b)}else{if((j|0)>256){h=c[b>>2]|0;c[h+20>>2]=57;c[h+24>>2]=256;Jh[c[h>>2]&127](b)}}c[f+16>>2]=_h[c[(c[e>>2]|0)+8>>2]&3](b,1,j,3)|0;c[f+20>>2]=j}j=b+76|0;if((c[j>>2]|0)==0){i=d;return}c[j>>2]=2;c[g>>2]=Qh[c[(c[e>>2]|0)+4>>2]&15](b,1,((c[b+92>>2]|0)*6|0)+12|0)|0;hq(b);i=d;return}function fq(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;f=c[b+424>>2]|0;g=c[f+24>>2]|0;h=b+76|0;if((c[h>>2]|0)==0){j=0}else{c[h>>2]=2;j=2}if(d<<24>>24==0){c[f+4>>2]=(j|0)==2?18:19;c[f+8>>2]=59;j=c[b+112>>2]|0;if((j|0)<1){d=c[b>>2]|0;c[d+20>>2]=56;c[d+24>>2]=1;Jh[c[d>>2]&127](b)}else{if((j|0)>256){j=c[b>>2]|0;c[j+20>>2]=57;c[j+24>>2]=256;Jh[c[j>>2]&127](b)}}if((c[h>>2]|0)==2){h=((c[b+92>>2]|0)*6|0)+12|0;j=f+32|0;d=c[j>>2]|0;if((d|0)==0){k=Qh[c[(c[b+4>>2]|0)+4>>2]&15](b,1,h)|0;c[j>>2]=k;l=k}else{l=d}tq(l,h);if((c[f+40>>2]|0)==0){hq(b)}a[f+36|0]=0}}else{c[f+4>>2]=17;c[f+8>>2]=58;a[f+28|0]=1}b=f+28|0;if((a[b]|0)==0){i=e;return}else{m=0}do{tq(c[g+(m<<2)>>2]|0,4096);m=m+1|0}while((m|0)!=32);a[b]=0;i=e;return}function gq(b){b=b|0;a[(c[b+424>>2]|0)+28|0]=1;return}function hq(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=c[a+424>>2]|0;e=Qh[c[c[a+4>>2]>>2]&15](a,1,2044)|0;a=e+1020|0;c[d+40>>2]=a;c[a>>2]=0;c[e+1024>>2]=1;c[e+1016>>2]=-1;c[e+1028>>2]=2;c[e+1012>>2]=-2;c[e+1032>>2]=3;c[e+1008>>2]=-3;c[e+1036>>2]=4;c[e+1004>>2]=-4;c[e+1040>>2]=5;c[e+1e3>>2]=-5;c[e+1044>>2]=6;c[e+996>>2]=-6;c[e+1048>>2]=7;c[e+992>>2]=-7;c[e+1052>>2]=8;c[e+988>>2]=-8;c[e+1056>>2]=9;c[e+984>>2]=-9;c[e+1060>>2]=10;c[e+980>>2]=-10;c[e+1064>>2]=11;c[e+976>>2]=-11;c[e+1068>>2]=12;c[e+972>>2]=-12;c[e+1072>>2]=13;c[e+968>>2]=-13;c[e+1076>>2]=14;c[e+964>>2]=-14;c[e+1080>>2]=15;c[e+960>>2]=-15;e=16;d=16;do{c[a+(e<<2)>>2]=d;c[a+(0-e<<2)>>2]=0-d;e=e+1|0;d=(e&1^1)+d|0}while((e|0)!=48);e=0-d|0;f=48;do{c[a+(f<<2)>>2]=d;c[a+(0-f<<2)>>2]=e;f=f+1|0}while((f|0)!=256);i=b;return}function iq(a,e,f,g){a=a|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;h=c[(c[a+424>>2]|0)+24>>2]|0;j=c[a+92>>2]|0;if((g|0)<1|(j|0)==0){i=f;return}else{k=0}do{a=j;l=c[e+(k<<2)>>2]|0;while(1){m=(c[h+((d[l]|0)>>>3<<2)>>2]|0)+((d[l+1|0]|0)>>>2<<6)+((d[l+2|0]|0)>>>3<<1)|0;n=b[m>>1]|0;o=n+1<<16>>16;b[m>>1]=o<<16>>16==0?n:o;a=a+ -1|0;if((a|0)==0){break}else{l=l+3|0}}k=k+1|0}while((k|0)!=(g|0));i=f;return}function jq(d){d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0;e=i;f=d+424|0;g=c[f>>2]|0;h=d+116|0;c[h>>2]=c[g+16>>2];j=c[g+20>>2]|0;k=Qh[c[c[d+4>>2]>>2]&15](d,1,j<<5)|0;c[k>>2]=0;c[k+4>>2]=31;c[k+8>>2]=0;c[k+12>>2]=63;c[k+16>>2]=0;c[k+20>>2]=31;oq(c[(c[f>>2]|0)+24>>2]|0,k);if((j|0)>1){l=1;while(1){if((l<<1|0)>(j|0)){m=k;n=0;o=0;p=0;while(1){q=c[m+24>>2]|0;r=(q|0)>(o|0);s=r?m:p;t=n+1|0;if((t|0)==(l|0)){u=s;break}else{m=m+32|0;n=t;o=r?q:o;p=s}}}else{p=k;o=0;n=0;m=0;while(1){s=c[p+28>>2]|0;if((s|0)>(n|0)){q=(c[p+24>>2]|0)>0;v=q?s:n;w=q?p:m}else{v=n;w=m}q=o+1|0;if((q|0)==(l|0)){u=w;break}else{p=p+32|0;o=q;n=v;m=w}}}if((u|0)==0){x=l;break}m=k+(l<<5)|0;n=u+4|0;c[k+(l<<5)+4>>2]=c[n>>2];o=u+12|0;c[k+(l<<5)+12>>2]=c[o>>2];p=u+20|0;c[k+(l<<5)+20>>2]=c[p>>2];c[m>>2]=c[u>>2];q=u+8|0;s=k+(l<<5)+8|0;c[s>>2]=c[q>>2];r=u+16|0;t=k+(l<<5)+16|0;c[t>>2]=c[r>>2];y=c[n>>2]|0;z=c[u>>2]|0;A=y-z<<4;B=c[o>>2]|0;C=c[q>>2]|0;q=(B-C|0)*12|0;D=c[p>>2]|0;E=c[r>>2]|0;r=(A|0)>(q|0);F=(D-E<<3|0)>((r?A:q)|0)?2:r&1^1;if((F|0)==2){r=(E+D|0)/2|0;c[p>>2]=r;c[t>>2]=r+1}else if((F|0)==0){r=(z+y|0)/2|0;c[n>>2]=r;c[m>>2]=r+1}else if((F|0)==1){F=(C+B|0)/2|0;c[o>>2]=F;c[s>>2]=F+1}oq(c[(c[f>>2]|0)+24>>2]|0,u);oq(c[(c[f>>2]|0)+24>>2]|0,m);m=l+1|0;if((m|0)<(j|0)){l=m}else{x=m;break}}if((x|0)>0){G=x}else{H=x;I=d+112|0;c[I>>2]=H;J=c[d>>2]|0;K=J+20|0;c[K>>2]=96;L=J+24|0;c[L>>2]=H;M=J+4|0;N=c[M>>2]|0;Kh[N&63](d,1);O=g+28|0;a[O]=1;i=e;return}}else{G=1}x=0;while(1){l=c[(c[f>>2]|0)+24>>2]|0;j=c[k+(x<<5)>>2]|0;u=c[k+(x<<5)+4>>2]|0;w=c[k+(x<<5)+8>>2]|0;v=c[k+(x<<5)+12>>2]|0;m=c[k+(x<<5)+16>>2]|0;F=c[k+(x<<5)+20>>2]|0;if((j|0)>(u|0)){P=0;Q=0;R=0;S=0}else{s=(w|0)>(v|0);o=(m|0)>(F|0);B=j;j=0;C=0;r=0;n=0;while(1){if(s){T=j;U=C;V=r;W=n}else{y=c[l+(B<<2)>>2]|0;z=B<<3|4;t=j;p=w;D=C;E=r;q=n;while(1){if(o){X=t;Y=D;Z=E;_=q}else{A=p<<2|2;$=t;aa=D;ba=m;ca=E;da=y+(p<<6)+(m<<1)|0;fa=q;while(1){ga=b[da>>1]|0;ha=ga&65535;if(ga<<16>>16==0){ia=$;ja=aa;ka=ca;la=fa}else{ia=(ea(ha,z)|0)+$|0;ja=(ea(ha,A)|0)+aa|0;ka=(ea(ha,ba<<3|4)|0)+ca|0;la=ha+fa|0}if((ba|0)<(F|0)){$=ia;aa=ja;ba=ba+1|0;ca=ka;da=da+2|0;fa=la}else{X=ia;Y=ja;Z=ka;_=la;break}}}if((p|0)<(v|0)){t=X;p=p+1|0;D=Y;E=Z;q=_}else{T=X;U=Y;V=Z;W=_;break}}}if((B|0)<(u|0)){B=B+1|0;j=T;C=U;r=V;n=W}else{P=T;Q=U;R=V;S=W;break}}}n=S>>1;a[(c[c[h>>2]>>2]|0)+x|0]=(n+P|0)/(S|0)|0;a[(c[(c[h>>2]|0)+4>>2]|0)+x|0]=(n+Q|0)/(S|0)|0;a[(c[(c[h>>2]|0)+8>>2]|0)+x|0]=(n+R|0)/(S|0)|0;n=x+1|0;if((n|0)==(G|0)){H=G;break}else{x=n}}I=d+112|0;c[I>>2]=H;J=c[d>>2]|0;K=J+20|0;c[K>>2]=96;L=J+24|0;c[L>>2]=H;M=J+4|0;N=c[M>>2]|0;Kh[N&63](d,1);O=g+28|0;a[O]=1;i=e;return}function kq(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0;j=i;k=c[e+424>>2]|0;l=c[k+24>>2]|0;m=c[e+92>>2]|0;n=c[e+288>>2]|0;o=c[k+40>>2]|0;p=c[e+116>>2]|0;q=c[p>>2]|0;r=c[p+4>>2]|0;s=c[p+8>>2]|0;if((h|0)<=0){i=j;return}p=k+36|0;t=k+32|0;k=(m|0)==0;u=m+ -1|0;v=u*3|0;w=(m*3|0)+3|0;x=0;do{y=c[f+(x<<2)>>2]|0;z=c[g+(x<<2)>>2]|0;if((a[p]|0)==0){A=1;B=3;C=c[t>>2]|0;D=y;E=z;F=1}else{A=-1;B=-3;C=(c[t>>2]|0)+(w<<1)|0;D=y+v|0;E=z+u|0;F=0}a[p]=F;if(k){G=0;H=0;I=0;J=C}else{z=B+1|0;y=B+2|0;K=ea(m,B)|0;L=0;M=0;N=0;O=0;P=0;Q=0;R=m;S=0;T=0;U=0;V=C;W=D;X=E;while(1){Y=V+(B<<1)|0;Z=d[n+((d[W]|0)+(c[o+(S+8+(b[Y>>1]|0)>>4<<2)>>2]|0))|0]|0;_=d[n+((d[W+1|0]|0)+(c[o+(T+8+(b[V+(z<<1)>>1]|0)>>4<<2)>>2]|0))|0]|0;$=d[n+((d[W+2|0]|0)+(c[o+(U+8+(b[V+(y<<1)>>1]|0)>>4<<2)>>2]|0))|0]|0;aa=$>>>3;ba=_>>>2;ca=Z>>>3;da=(c[l+(ca<<2)>>2]|0)+(ba<<6)+(aa<<1)|0;fa=b[da>>1]|0;if(fa<<16>>16==0){nq(e,ca,ba,aa);ga=b[da>>1]|0}else{ga=fa}fa=(ga&65535)+ -1|0;a[X]=fa;da=Z-(d[q+fa|0]|0)|0;Z=_-(d[r+fa|0]|0)|0;_=$-(d[s+fa|0]|0)|0;fa=da<<1;$=fa+da|0;b[V>>1]=$+O;aa=$+fa|0;ha=aa+L|0;$=Z<<1;ba=$+Z|0;b[V+2>>1]=ba+P;ca=ba+$|0;ia=ca+M|0;ba=_<<1;ja=ba+_|0;b[V+4>>1]=ja+Q;ka=ja+ba|0;la=ka+N|0;ja=R+ -1|0;if((ja|0)==0){break}else{L=da;M=Z;N=_;O=ha;P=ia;Q=la;R=ja;S=aa+fa|0;T=ca+$|0;U=ka+ba|0;V=Y;W=W+B|0;X=X+A|0}}G=ha&65535;H=ia&65535;I=la&65535;J=C+(K<<1)|0}b[J>>1]=G;b[J+2>>1]=H;b[J+4>>1]=I;x=x+1|0}while((x|0)!=(h|0));i=j;return}function lq(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;j=i;k=c[(c[e+424>>2]|0)+24>>2]|0;l=c[e+92>>2]|0;if((h|0)<=0){i=j;return}m=(l|0)==0;n=0;do{if(!m){o=l;p=c[f+(n<<2)>>2]|0;q=c[g+(n<<2)>>2]|0;while(1){r=(d[p]|0)>>>3;s=(d[p+1|0]|0)>>>2;t=(d[p+2|0]|0)>>>3;u=(c[k+(r<<2)>>2]|0)+(s<<6)+(t<<1)|0;v=b[u>>1]|0;if(v<<16>>16==0){nq(e,r,s,t);w=b[u>>1]|0}else{w=v}a[q]=(w&65535)+255;o=o+ -1|0;if((o|0)==0){break}else{p=p+3|0;q=q+1|0}}}n=n+1|0}while((n|0)!=(h|0));i=j;return}function mq(a){a=a|0;return}function nq(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;j=i;i=i+1408|0;k=j;l=j+1152|0;m=j+1024|0;n=c[(c[e+424>>2]|0)+24>>2]|0;o=f>>2;f=g>>3;g=h>>2;h=o<<5;p=h|4;q=f<<5;r=q|2;s=g<<5;t=s|4;u=c[e+112>>2]|0;v=h|28;h=v+p>>1;w=q|30;q=w+r>>1;x=s|28;s=x+t>>1;if((u|0)>0){y=c[e+116>>2]|0;z=c[y>>2]|0;A=c[y+4>>2]|0;B=c[y+8>>2]|0;y=0;C=2147483647;while(1){D=d[z+y|0]|0;do{if((D|0)<(p|0)){E=D-p<<1;F=D-v<<1;G=ea(F,F)|0;H=ea(E,E)|0}else{if((D|0)>(v|0)){E=D-v<<1;F=D-p<<1;G=ea(F,F)|0;H=ea(E,E)|0;break}if((D|0)>(h|0)){E=D-p<<1;G=ea(E,E)|0;H=0;break}else{E=D-v<<1;G=ea(E,E)|0;H=0;break}}}while(0);D=d[A+y|0]|0;do{if((D|0)<(r|0)){E=(D-r|0)*3|0;F=(D-w|0)*3|0;I=ea(F,F)|0;J=(ea(E,E)|0)+H|0}else{if((D|0)>(w|0)){E=(D-w|0)*3|0;F=(D-r|0)*3|0;I=ea(F,F)|0;J=(ea(E,E)|0)+H|0;break}if((D|0)>(q|0)){E=(D-r|0)*3|0;I=ea(E,E)|0;J=H;break}else{E=(D-w|0)*3|0;I=ea(E,E)|0;J=H;break}}}while(0);D=I+G|0;E=d[B+y|0]|0;do{if((E|0)<(t|0)){F=E-t|0;K=E-x|0;L=ea(K,K)|0;M=(ea(F,F)|0)+J|0}else{if((E|0)>(x|0)){F=E-x|0;K=E-t|0;L=ea(K,K)|0;M=(ea(F,F)|0)+J|0;break}if((E|0)>(s|0)){F=E-t|0;L=ea(F,F)|0;M=J;break}else{F=E-x|0;L=ea(F,F)|0;M=J;break}}}while(0);E=D+L|0;c[k+(y<<2)>>2]=M;N=(E|0)<(C|0)?E:C;E=y+1|0;if((E|0)==(u|0)){O=0;P=0;break}else{y=E;C=N}}while(1){if((c[k+(O<<2)>>2]|0)>(N|0)){Q=P}else{a[l+P|0]=O;Q=P+1|0}C=O+1|0;if((C|0)==(u|0)){R=Q;break}else{O=C;P=Q}}}else{R=0}Q=k;P=127;while(1){c[Q>>2]=2147483647;if((P|0)>0){Q=Q+4|0;P=P+ -1|0}else{break}}if((R|0)>0){P=e+116|0;e=0;do{Q=a[l+e|0]|0;O=Q&255;u=c[P>>2]|0;N=p-(d[(c[u>>2]|0)+O|0]|0)|0;C=N<<1;y=ea(C,C)|0;C=r-(d[(c[u+4>>2]|0)+O|0]|0)|0;M=C*3|0;L=(ea(M,M)|0)+y|0;y=t-(d[(c[u+8>>2]|0)+O|0]|0)|0;O=(C*72|0)+144|0;C=y<<4;u=C+64|0;M=C+192|0;J=C+320|0;C=k;x=m;s=L+(ea(y,y)|0)|0;y=3;L=(N<<6)+256|0;while(1){N=C;B=x;G=s;I=7;H=O;while(1){if((G|0)<(c[N>>2]|0)){c[N>>2]=G;a[B]=Q}w=u+G|0;q=N+4|0;if((w|0)<(c[q>>2]|0)){c[q>>2]=w;a[B+1|0]=Q}q=M+w|0;w=N+8|0;if((q|0)<(c[w>>2]|0)){c[w>>2]=q;a[B+2|0]=Q}w=J+q|0;q=N+12|0;if((w|0)<(c[q>>2]|0)){c[q>>2]=w;a[B+3|0]=Q}if((I|0)>0){N=N+16|0;B=B+4|0;G=G+H|0;I=I+ -1|0;H=H+288|0}else{break}}if((y|0)>0){C=C+128|0;x=x+32|0;s=s+L|0;y=y+ -1|0;L=L+512|0}else{break}}e=e+1|0}while((e|0)!=(R|0))}R=o<<2;o=f<<3;f=g<<2;g=c[n+(R<<2)>>2]|0;e=m;k=0;while(1){t=k+o|0;r=f|1;b[g+(t<<6)+(f<<1)>>1]=(d[e]|0)+1;b[g+(t<<6)+(r<<1)>>1]=(d[e+1|0]|0)+1;b[g+(t<<6)+(r+1<<1)>>1]=(d[e+2|0]|0)+1;b[g+(t<<6)+((f|3)<<1)>>1]=(d[e+3|0]|0)+1;k=k+1|0;if((k|0)==8){break}else{e=e+4|0}}e=c[n+((R|1)<<2)>>2]|0;k=m+32|0;g=0;while(1){t=g+o|0;r=f|1;b[e+(t<<6)+(f<<1)>>1]=(d[k]|0)+1;b[e+(t<<6)+(r<<1)>>1]=(d[k+1|0]|0)+1;b[e+(t<<6)+(r+1<<1)>>1]=(d[k+2|0]|0)+1;b[e+(t<<6)+((f|3)<<1)>>1]=(d[k+3|0]|0)+1;g=g+1|0;if((g|0)==8){break}else{k=k+4|0}}k=c[n+((R|2)<<2)>>2]|0;g=m+64|0;e=0;while(1){t=e+o|0;r=f|1;b[k+(t<<6)+(f<<1)>>1]=(d[g]|0)+1;b[k+(t<<6)+(r<<1)>>1]=(d[g+1|0]|0)+1;b[k+(t<<6)+(r+1<<1)>>1]=(d[g+2|0]|0)+1;b[k+(t<<6)+((f|3)<<1)>>1]=(d[g+3|0]|0)+1;e=e+1|0;if((e|0)==8){break}else{g=g+4|0}}g=c[n+((R|3)<<2)>>2]|0;R=m+96|0;m=0;while(1){n=m+o|0;e=f|1;b[g+(n<<6)+(f<<1)>>1]=(d[R]|0)+1;b[g+(n<<6)+(e<<1)>>1]=(d[R+1|0]|0)+1;b[g+(n<<6)+(e+1<<1)>>1]=(d[R+2|0]|0)+1;b[g+(n<<6)+((f|3)<<1)>>1]=(d[R+3|0]|0)+1;m=m+1|0;if((m|0)==8){break}else{R=R+4|0}}i=j;return}function oq(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;e=i;f=c[d>>2]|0;g=d+4|0;h=c[g>>2]|0;j=d+8|0;k=c[j>>2]|0;l=d+12|0;m=c[l>>2]|0;n=d+16|0;o=c[n>>2]|0;p=d+20|0;q=c[p>>2]|0;a:do{if((f|0)<(h|0)){r=(k|0)>(m|0);s=(o|0)>(q|0);t=f;b:while(1){if(!r){u=c[a+(t<<2)>>2]|0;v=k;while(1){if(!s){w=o;x=u+(v<<6)+(o<<1)|0;while(1){if((b[x>>1]|0)!=0){break b}if((w|0)<(q|0)){w=w+1|0;x=x+2|0}else{break}}}if((v|0)<(m|0)){v=v+1|0}else{break}}}if((t|0)<(h|0)){t=t+1|0}else{y=f;break a}}c[d>>2]=t;y=t}else{y=f}}while(0);c:do{if((h|0)>(y|0)){f=(k|0)>(m|0);s=(o|0)>(q|0);r=h;d:while(1){if(!f){v=c[a+(r<<2)>>2]|0;u=k;while(1){if(!s){x=o;w=v+(u<<6)+(o<<1)|0;while(1){if((b[w>>1]|0)!=0){break d}if((x|0)<(q|0)){x=x+1|0;w=w+2|0}else{break}}}if((u|0)<(m|0)){u=u+1|0}else{break}}}if((r|0)>(y|0)){r=r+ -1|0}else{z=h;break c}}c[g>>2]=r;z=r}else{z=h}}while(0);e:do{if((k|0)<(m|0)){h=(y|0)>(z|0);g=(o|0)>(q|0);s=k;f:while(1){if(!h){f=y;while(1){if(!g){t=o;u=(c[a+(f<<2)>>2]|0)+(s<<6)+(o<<1)|0;while(1){if((b[u>>1]|0)!=0){break f}if((t|0)<(q|0)){t=t+1|0;u=u+2|0}else{break}}}if((f|0)<(z|0)){f=f+1|0}else{break}}}if((s|0)<(m|0)){s=s+1|0}else{A=k;break e}}c[j>>2]=s;A=s}else{A=k}}while(0);g:do{if((m|0)>(A|0)){k=(y|0)>(z|0);j=(o|0)>(q|0);g=m;h:while(1){if(!k){h=y;while(1){if(!j){r=o;f=(c[a+(h<<2)>>2]|0)+(g<<6)+(o<<1)|0;while(1){if((b[f>>1]|0)!=0){break h}if((r|0)<(q|0)){r=r+1|0;f=f+2|0}else{break}}}if((h|0)<(z|0)){h=h+1|0}else{break}}}if((g|0)>(A|0)){g=g+ -1|0}else{B=m;break g}}c[l>>2]=g;B=g}else{B=m}}while(0);i:do{if((o|0)<(q|0)){m=(y|0)>(z|0);l=(A|0)>(B|0);j=o;j:while(1){if(!m){k=y;while(1){if(!l){s=A;h=(c[a+(k<<2)>>2]|0)+(A<<6)+(j<<1)|0;while(1){if((b[h>>1]|0)!=0){break j}if((s|0)<(B|0)){s=s+1|0;h=h+64|0}else{break}}}if((k|0)<(z|0)){k=k+1|0}else{break}}}if((j|0)<(q|0)){j=j+1|0}else{C=o;break i}}c[n>>2]=j;C=j}else{C=o}}while(0);k:do{if((q|0)>(C|0)){o=(y|0)>(z|0);n=(A|0)>(B|0);l=q;l:while(1){m:do{if(!o){if(n){m=y;while(1){if((m|0)<(z|0)){m=m+1|0}else{break m}}}else{D=y}while(1){m=A;g=(c[a+(D<<2)>>2]|0)+(A<<6)+(l<<1)|0;while(1){if((b[g>>1]|0)!=0){break l}if((m|0)<(B|0)){m=m+1|0;g=g+64|0}else{break}}if((D|0)<(z|0)){D=D+1|0}else{break}}}}while(0);if((l|0)>(C|0)){l=l+ -1|0}else{E=q;break k}}c[p>>2]=l;E=l}else{E=q}}while(0);q=z-y<<4;p=(B-A|0)*12|0;D=E-C<<3;c[d+24>>2]=(ea(p,p)|0)+(ea(q,q)|0)+(ea(D,D)|0);if((y|0)>(z|0)){F=0;G=d+28|0;c[G>>2]=F;i=e;return}D=(C|0)>(E|0);if((A|0)>(B|0)){F=0;G=d+28|0;c[G>>2]=F;i=e;return}else{H=y;I=0}while(1){y=c[a+(H<<2)>>2]|0;if(D){J=I}else{q=A;p=I;while(1){n=C;o=p;j=y+(q<<6)+(C<<1)|0;while(1){o=((b[j>>1]|0)!=0)+o|0;if((n|0)>=(E|0)){break}else{n=n+1|0;j=j+2|0}}if((q|0)<(B|0)){q=q+1|0;p=o}else{J=o;break}}}if((H|0)<(z|0)){H=H+1|0;I=J}else{F=J;break}}G=d+28|0;c[G>>2]=F;i=e;return}function pq(a,b){a=a|0;b=b|0;return(a+ -1+b|0)/(b|0)|0|0}function qq(a,b){a=a|0;b=b|0;var c=0;c=a+ -1+b|0;return c-((c|0)%(b|0)|0)|0}function rq(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0;h=i;if((f|0)<=0){i=h;return}j=d+(e<<2)|0;e=a+(b<<2)|0;b=f;while(1){tu(c[j>>2]|0,c[e>>2]|0,g|0)|0;b=b+ -1|0;if((b|0)<=0){break}else{j=j+4|0;e=e+4|0}}i=h;return}function sq(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;tu(b|0,a|0,c<<7|0)|0;i=d;return}function tq(a,b){a=a|0;b=b|0;var c=0;c=i;vu(a|0,0,b|0)|0;i=c;return}function uq(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+16|0;f=e;g=f;c[g>>2]=1196314761;c[g+4>>2]=169478669;if(d>>>0>8){h=8}else{if((d|0)==0){j=-1;i=e;return j|0}else{h=d}}if(b>>>0>7){j=-1;i=e;return j|0}j=nu(a+b|0,f+b|0,(h+b|0)>>>0>8?8-b|0:h)|0;i=e;return j|0}function vq(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=a+204|0;g=c[f>>2]|0;if((a|0)==0){h=0;i=e;return h|0}if((4294967295/(d>>>0)|0)>>>0<b>>>0){Iq(a,47400);h=0;i=e;return h|0}else{j=ea(d,b)|0;c[f>>2]=g|1048576;b=Yq(a,j)|0;c[f>>2]=g;h=b;i=e;return h|0}return 0}function wq(a,b){a=a|0;b=b|0;var c=0;c=i;Zq(a,b);i=c;return}function xq(a){a=a|0;var b=0;b=i;c[a+368>>2]=Js(0,0,0)|0;i=b;return}function yq(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=c[b+204>>2]|0;if((a[b+380|0]&32)==0){if((g&2048|0)!=0){i=f;return}}else{if((g&768|0)==768){i=f;return}}g=b+368|0;c[g>>2]=Js(c[g>>2]|0,d,e)|0;i=f;return}function zq(a){a=a|0;var b=0,d=0,e=0;b=i;if((a|0)==0){d=0}else{e=Vq(2,c[a+672>>2]|0,c[a+668>>2]|0)|0;if((e|0)==0){d=e}else{vu(e|0,0,288)|0;d=e}}i=b;return d|0}function Aq(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;Bq(a,b,32767,-1);e=a+640|0;if((c[e>>2]|0)!=0){f=a+644|0;Zq(a,c[f>>2]|0);c[f>>2]=0;c[e>>2]=0}if((b|0)==0){i=d;return}vu(b|0,0,288)|0;i=d;return}function Bq(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;j=i;if((e|0)==0|(f|0)==0){i=j;return}k=f+184|0;do{if((g&16384&c[k>>2]|0)!=0){if((h|0)==-1){l=f+48|0;if((c[l>>2]|0)>0){m=0;do{Bq(e,f,16384,m);m=m+1|0}while((m|0)<(c[l>>2]|0))}m=f+56|0;Zq(e,c[m>>2]|0);c[m>>2]=0;c[l>>2]=0;break}else{m=f+56|0;n=c[m>>2]|0;if((n|0)==0){break}o=c[n+(h*28|0)+4>>2]|0;if((o|0)==0){break}Zq(e,o);c[(c[m>>2]|0)+(h*28|0)+4>>2]=0;break}}}while(0);m=c[k>>2]|0;if((g&8192&m|0)==0){p=m}else{m=f+76|0;Zq(e,c[m>>2]|0);c[m>>2]=0;m=f+8|0;c[m>>2]=c[m>>2]&-17;p=c[k>>2]|0}if((g&256&p|0)!=0){m=f+8|0;c[m>>2]=c[m>>2]&-16385}if((g&128&p|0)==0){q=p}else{p=f+160|0;Zq(e,c[p>>2]|0);m=f+172|0;Zq(e,c[m>>2]|0);c[p>>2]=0;c[m>>2]=0;m=f+176|0;p=c[m>>2]|0;if((p|0)!=0){o=f+181|0;if((a[o]|0)==0){r=p}else{n=p;p=0;while(1){Zq(e,c[n+(p<<2)>>2]|0);c[(c[m>>2]|0)+(p<<2)>>2]=0;s=p+1|0;t=c[m>>2]|0;if((s|0)<(d[o]|0)){n=t;p=s}else{r=t;break}}}Zq(e,r);c[m>>2]=0}m=f+8|0;c[m>>2]=c[m>>2]&-1025;q=c[k>>2]|0}if((g&16&q|0)==0){u=q}else{q=f+196|0;Zq(e,c[q>>2]|0);m=f+200|0;Zq(e,c[m>>2]|0);c[q>>2]=0;c[m>>2]=0;m=f+8|0;c[m>>2]=c[m>>2]&-4097;u=c[k>>2]|0}do{if((g&32&u|0)!=0){if(!((h|0)==-1)){m=f+212|0;q=c[m>>2]|0;if((q|0)==0){break}Zq(e,c[q+(h<<4)>>2]|0);Zq(e,c[(c[m>>2]|0)+(h<<4)+8>>2]|0);c[(c[m>>2]|0)+(h<<4)>>2]=0;c[(c[m>>2]|0)+(h<<4)+8>>2]=0;break}m=f+216|0;q=c[m>>2]|0;if((q|0)!=0){if((q|0)>0){q=0;do{Bq(e,f,32,q);q=q+1|0}while((q|0)<(c[m>>2]|0))}q=f+212|0;Zq(e,c[q>>2]|0);c[q>>2]=0;c[m>>2]=0}q=f+8|0;c[q>>2]=c[q>>2]&-8193}}while(0);u=e+720|0;q=c[u>>2]|0;if((q|0)!=0){Zq(e,q);c[u>>2]=0}do{if((g&512&c[k>>2]|0)!=0){if(!((h|0)==-1)){u=f+188|0;q=c[u>>2]|0;if((q|0)==0){break}Zq(e,c[q+(h*20|0)+8>>2]|0);c[(c[u>>2]|0)+(h*20|0)+8>>2]=0;break}u=f+192|0;q=c[u>>2]|0;if((q|0)!=0){if((q|0)>0){q=0;do{Bq(e,f,512,q);q=q+1|0}while((q|0)<(c[u>>2]|0))}q=f+188|0;Zq(e,c[q>>2]|0);c[q>>2]=0;c[u>>2]=0}}}while(0);q=c[k>>2]|0;if((g&8&q|0)==0){v=q}else{q=f+124|0;Zq(e,c[q>>2]|0);c[q>>2]=0;q=f+8|0;c[q>>2]=c[q>>2]&-65;v=c[k>>2]|0}if((g&4096&v|0)==0){w=v}else{v=f+16|0;Zq(e,c[v>>2]|0);c[v>>2]=0;v=f+8|0;c[v>>2]=c[v>>2]&-9;b[f+20>>1]=0;w=c[k>>2]|0}if((g&64&w|0)!=0){w=f+248|0;v=c[w>>2]|0;if((v|0)!=0){q=f+4|0;if((c[q>>2]|0)>0){m=v;l=0;while(1){Zq(e,c[m+(l<<2)>>2]|0);c[(c[w>>2]|0)+(l<<2)>>2]=0;r=l+1|0;p=c[w>>2]|0;if((r|0)<(c[q>>2]|0)){m=p;l=r}else{x=p;break}}}else{x=v}Zq(e,x);c[w>>2]=0}w=f+8|0;c[w>>2]=c[w>>2]&-32769}if((h|0)==-1){c[k>>2]=c[k>>2]&~g;i=j;return}else{c[k>>2]=c[k>>2]&((g|16928)^-16929);i=j;return}}function Cq(a){a=a|0;var b=0;if((a|0)==0){b=0}else{b=c[a+180>>2]|0}return b|0}function Dq(a){a=a|0;return 47440}function Eq(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;if((a|0)==0|(b|0)==0){f=0;i=e;return f|0}g=c[a+640>>2]|0;if((g|0)<1){f=0;i=e;return f|0}h=g;j=(c[a+644>>2]|0)+((g*5|0)+ -5)|0;while(1){if((nu(b,j,4)|0)==0){break}g=h+ -1|0;if((g|0)==0){f=0;k=7;break}else{h=g;j=j+ -5|0}}if((k|0)==7){i=e;return f|0}f=d[j+4|0]|0;i=e;return f|0}function Fq(a,b,c,d,e,f,g,h,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0;k=i;if((a|0)==0){l=0;i=k;return l|0}if((b|0)<0|(c|0)<1|(d|0)<0|(e|0)<0|(f|0)<0|(g|0)<0|(h|0)<0|(j|0)<0){Iq(a,47448);m=0}else{m=1}if((1e5-c|0)<(b|0)){Iq(a,47504);n=0}else{n=m}if((1e5-e|0)<(d|0)){Iq(a,47536);o=0}else{o=n}if((1e5-g|0)<(f|0)){Iq(a,47560);p=0}else{p=o}if((1e5-j|0)<(h|0)){Iq(a,47592);q=0}else{q=p}p=f-d|0;f=j-e|0;j=p>>>16;o=p&65535;p=f>>>16;n=f&65535;f=ea(n,o)|0;m=(ea(n,j)|0)+(ea(p,o)|0)+(f>>>16)|0;o=g-e|0;e=h-d|0;d=o>>>16;h=o&65535;o=e>>>16;g=e&65535;e=ea(g,h)|0;n=(ea(g,d)|0)+(ea(o,h)|0)+(e>>>16)|0;if(!(((m>>>16)+(ea(p,j)|0)|0)==((n>>>16)+(ea(o,d)|0)|0)&(m<<16|f&65535|0)==(n<<16|e&65535|0))){l=q;i=k;return l|0}Iq(a,47616);l=0;i=k;return l|0}function Gq(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;k=i;if((b|0)==0){Iq(a,47680);l=1}else{l=0}if((d|0)==0){Iq(a,47712);m=1}else{m=l}if((c[a+700>>2]|0)>>>0<b>>>0|b>>>0>1e6){Iq(a,47744);n=1}else{n=m}if((c[a+704>>2]|0)>>>0<d>>>0|d>>>0>1e6){Iq(a,47784);o=1}else{o=n}if((b|0)<0){Iq(a,47824);p=1}else{p=o}if((d|0)<0){Iq(a,47856);q=1}else{q=p}if(b>>>0>536870782){Iq(a,47888)}if((e+ -1|0)>>>0>1&(e|0)!=4&(e|0)!=8&(e|0)!=16){Iq(a,47936);r=1}else{r=q}if((f|0)<0|(f|0)==1|(f|0)==5|(f|0)>6){Iq(a,47968);s=1}else{s=r}if((f|0)==3&(e|0)>8){t=22}else{if((f|0)==2|(f|0)==4|(f|0)==6){if((e|0)<8){t=22}else{u=s}}else{u=s}}if((t|0)==22){Iq(a,48e3);u=1}if((g|0)>1){Iq(a,48056);v=1}else{v=u}if((h|0)==0){w=v}else{Iq(a,48096);w=1}v=a+200|0;if((c[v>>2]&4096|0)!=0){if((c[a+656>>2]|0)!=0){Iq(a,48136)}}if((j|0)==0){x=w;t=37}else{if((c[a+656>>2]&4|0)!=0&(j|0)==64){j=c[v>>2]|0;if((j&4096|0)==0){if((f&-5|0)==2){y=j;z=w}else{t=34}}else{t=34}}else{t=34}if((t|0)==34){Iq(a,48192);y=c[v>>2]|0;z=1}if((y&4096|0)==0){x=z;t=37}else{Iq(a,48224)}}if((t|0)==37){if((x|0)!=1){i=k;return}}Hq(a,48256);i=k;return}function Hq(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+16|0;e=d;if((a|0)==0){d=c[r>>2]|0;c[e>>2]=b;Re(d|0,48304,e|0)|0;Sd(10,d|0)|0;ch()}d=c[a+160>>2]|0;if((d|0)!=0){Kh[d&63](a,b)}d=c[r>>2]|0;c[e>>2]=b;Re(d|0,48304,e|0)|0;Sd(10,d|0)|0;d=c[a+156>>2]|0;if((d|0)==0){ch()}Kh[d&63](a,1);ch()}function Iq(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;i=i+16|0;f=e;if((b|0)==0){g=0}else{a:do{if((a[d]|0)==35){h=1;while(1){j=h+1|0;if((a[d+h|0]|0)==32){k=h;break a}if((j|0)<15){h=j}else{k=j;break}}}else{k=0}}while(0);h=c[b+164>>2]|0;if((h|0)==0){g=k}else{Kh[h&63](b,d+k|0);i=e;return}}k=c[r>>2]|0;c[f>>2]=d+g;Re(k|0,48280,f|0)|0;Sd(10,k|0)|0;i=e;return}function Jq(a,b){a=a|0;b=b|0;var c=0,d=0;c=i;i=i+96|0;d=c;if((a|0)==0){Hq(0,b)}else{Kq(a,d,b);Hq(a,d)}}function Kq(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;e=i;f=a[b+380|0]|0;g=f&255;if((f+ -65<<24>>24&255)>57|(f+ -91<<24>>24&255)<6){a[c]=91;a[c+1|0]=a[48328+(g>>>4)|0]|0;a[c+2|0]=a[48328+(g&15)|0]|0;a[c+3|0]=93;h=4}else{a[c]=f;h=1}f=a[b+381|0]|0;g=f&255;j=h+1|0;k=c+h|0;if((f+ -65<<24>>24&255)>57|(f+ -91<<24>>24&255)<6){a[k]=91;a[c+j|0]=a[48328+(g>>>4)|0]|0;a[c+(h|2)|0]=a[48328+(g&15)|0]|0;a[c+(h+3)|0]=93;l=h+4|0}else{a[k]=f;l=j}j=a[b+382|0]|0;f=j&255;k=l+1|0;h=c+l|0;if((j+ -65<<24>>24&255)>57|(j+ -91<<24>>24&255)<6){a[h]=91;a[c+k|0]=a[48328+(f>>>4)|0]|0;a[c+(l+2)|0]=a[48328+(f&15)|0]|0;a[c+(l+3)|0]=93;m=l+4|0}else{a[h]=j;m=k}k=a[b+383|0]|0;b=k&255;j=m+1|0;h=c+m|0;if((k+ -65<<24>>24&255)>57|(k+ -91<<24>>24&255)<6){a[h]=91;a[c+j|0]=a[48328+(b>>>4)|0]|0;a[c+(m+2)|0]=a[48328+(b&15)|0]|0;a[c+(m+3)|0]=93;n=m+4|0}else{a[h]=k;n=j}if((d|0)==0){a[c+n|0]=0;i=e;return}else{a[c+n|0]=58;a[c+(n+1)|0]=32;j=c+(n+2)+0|0;k=d+0|0;d=j+64|0;do{a[j]=a[k]|0;j=j+1|0;k=k+1|0}while((j|0)<(d|0));a[c+(n+65)|0]=0;i=e;return}}function Lq(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+96|0;f=e;g=e+4|0;if((b|0)==0){h=c[r>>2]|0;c[f>>2]=d;Re(h|0,48280,f|0)|0;Sd(10,h|0)|0;i=e;return}Kq(b,g,d);a:do{if((a[g]|0)==35){d=1;while(1){h=d+1|0;if((a[g+d|0]|0)==32){j=d;break a}if((h|0)<15){d=h}else{j=h;break}}}else{j=0}}while(0);d=c[b+164>>2]|0;if((d|0)==0){h=c[r>>2]|0;c[f>>2]=g+j;Re(h|0,48280,f|0)|0;Sd(10,h|0)|0;i=e;return}else{Kh[d&63](b,g+j|0);i=e;return}}function Mq(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if(!((a|0)!=0&(d|0)==156)){f=0;i=e;return f|0}c[a+156>>2]=b;f=a;i=e;return f|0}function Nq(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==0){i=f;return}c[a+168>>2]=b;c[a+160>>2]=d;c[a+164>>2]=e;i=f;return}function Oq(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((a|0)==0|(b|0)==0){f=0;i=e;return f|0}f=c[b+8>>2]&d;i=e;return f|0}function Pq(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;if((a|0)==0|(b|0)==0){e=0;i=d;return e|0}e=c[b+12>>2]|0;i=d;return e|0}function Qq(a,b){a=a|0;b=b|0;var d=0;if((a|0)==0|(b|0)==0){d=0}else{d=c[b>>2]|0}return d|0}function Rq(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;if((a|0)==0|(b|0)==0){e=0;i=d;return e|0}e=c[b+4>>2]|0;i=d;return e|0}function Sq(b,c){b=b|0;c=c|0;var d=0;if((b|0)==0|(c|0)==0){d=0}else{d=a[c+24|0]|0}return d|0}function Tq(b,c){b=b|0;c=c|0;var d=0;if((b|0)==0|(c|0)==0){d=0}else{d=a[c+25|0]|0}return d|0}function Uq(b,c){b=b|0;c=c|0;var d=0;if((b|0)==0|(c|0)==0){d=0}else{d=a[c+29|0]|0}return d|0}function Vq(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+752|0;f=e;if((a|0)==2){g=288;h=3}else if((a|0)==1){g=748;h=3}else{j=0}do{if((h|0)==3){if((b|0)==0){a=Xt(g)|0;if((a|0)==0){j=0;break}vu(a|0,0,g|0)|0;j=a;break}else{c[f+668>>2]=d;a=Yh[b&15](f,g)|0;if((a|0)==0){j=0;break}vu(a|0,0,g|0)|0;j=a;break}}}while(0);i=e;return j|0}function Wq(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+752|0;f=e;if((a|0)==0){i=e;return}if((b|0)==0){Yt(a);i=e;return}else{c[f+668>>2]=d;Kh[b&63](f,a);i=e;return}}function Xq(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;do{if((a|0)==0|(b|0)==0){e=0}else{f=c[a+672>>2]|0;if((f|0)==0){g=Xt(b)|0}else{g=Yh[f&15](a,b)|0}if((g|0)!=0){vu(g|0,0,b|0)|0;e=g;break}if((c[a+204>>2]&1048576|0)==0){Hq(a,48344);e=0}else{e=0}}}while(0);i=d;return e|0}function Yq(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;if((a|0)==0|(b|0)==0){e=0}else{f=c[a+672>>2]|0;if((f|0)==0){g=Xt(b)|0}else{g=Yh[f&15](a,b)|0}if((g|0)==0){if((c[a+204>>2]&1048576|0)==0){Hq(a,48344);e=0}else{e=0}}else{e=g}}i=d;return e|0}function Zq(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;if((a|0)==0|(b|0)==0){i=d;return}e=c[a+676>>2]|0;if((e|0)==0){Yt(b);i=d;return}else{Kh[e&63](a,b);i=d;return}}function _q(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;if((a|0)==0){e=0;i=d;return e|0}f=a+204|0;g=c[f>>2]|0;c[f>>2]=g|1048576;if((b|0)==0){h=0}else{j=c[a+672>>2]|0;if((j|0)==0){k=Xt(b)|0}else{k=Yh[j&15](a,b)|0}if((k|0)==0){if((c[f>>2]&1048576|0)==0){Hq(a,48344);h=0}else{h=0}}else{h=k}}c[f>>2]=g;e=h;i=d;return e|0}function $q(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==0){i=f;return}c[a+668>>2]=b;c[a+672>>2]=d;c[a+676>>2]=e;i=f;return}function ar(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=i;f=br(a,b,c,d,0,0,0)|0;i=e;return f|0}function br(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;k=i;i=i+96|0;l=k;m=i;i=i+168|0;c[m>>2]=0;n=k+8|0;o=k+4|0;p=k+16|0;c[o>>2]=0;t=0;q=ua(4,1,h|0,g|0)|0;r=t;t=0;if((r|0)!=0&(u|0)!=0){s=zu(c[r>>2]|0,m)|0;if((s|0)==0){Qf(r|0,u|0)}I=u}else{s=-1}if((s|0)==1){v=I}else{c[n>>2]=q;if((c[n>>2]|0)==0){w=0;i=k;return w|0}c[(c[n>>2]|0)+700>>2]=1e6;c[(c[n>>2]|0)+704>>2]=1e6;c[(c[n>>2]|0)+708>>2]=0;t=0;q=ua(5,c[n>>2]|0,10,156)|0;s=t;t=0;if((s|0)!=0&(u|0)!=0){x=zu(c[s>>2]|0,m)|0;if((x|0)==0){Qf(s|0,u|0)}I=u}else{x=-1}if((x|0)==1){v=I}else{su(q,1,m|0)|0;t=0;q=t;t=0;if((q|0)!=0&(u|0)!=0){y=zu(c[q>>2]|0,m)|0;if((y|0)==0){Qf(q|0,u|0)}I=u}else{y=-1}if((y|0)==1){v=I}else{v=0}}}a:while(1){if((v|0)!=0){t=0;Ia(4);y=t;t=0;if((y|0)!=0&(u|0)!=0){z=zu(c[y>>2]|0,m)|0;if((z|0)==0){Qf(y|0,u|0)}I=u}else{z=-1}if((z|0)==1){v=I;continue}else{A=8;break}}t=0;Ka(20,c[n>>2]|0,g|0,h|0,j|0);y=t;t=0;if((y|0)!=0&(u|0)!=0){B=zu(c[y>>2]|0,m)|0;if((B|0)==0){Qf(y|0,u|0)}I=u}else{B=-1}if((B|0)==1){v=I;continue}t=0;Ka(21,c[n>>2]|0,d|0,e|0,f|0);y=t;t=0;if((y|0)!=0&(u|0)!=0){C=zu(c[y>>2]|0,m)|0;if((C|0)==0){Qf(y|0,u|0)}I=u}else{C=-1}if((C|0)==1){v=I;continue}y=(b|0)!=0;if(y){q=0;while(1){x=a[b+q|0]|0;t=0;s=qa(8,0)|0;r=t;t=0;if((r|0)!=0&(u|0)!=0){D=zu(c[r>>2]|0,m)|0;if((D|0)==0){Qf(r|0,u|0)}I=u}else{D=-1}if((D|0)==1){v=I;continue a}if(!(x<<24>>24==(a[s+q|0]|0))){s=(c[n>>2]|0)+204|0;c[s>>2]=c[s>>2]|131072}s=q+1|0;t=0;x=qa(8,0)|0;r=t;t=0;if((r|0)!=0&(u|0)!=0){E=zu(c[r>>2]|0,m)|0;if((E|0)==0){Qf(r|0,u|0)}I=u}else{E=-1}if((E|0)==1){v=I;continue a}if((a[x+q|0]|0)==0){break}else{q=s}}}else{q=(c[n>>2]|0)+204|0;c[q>>2]=c[q>>2]|131072}b:do{if((c[(c[n>>2]|0)+204>>2]&131072|0)!=0){do{if((b|0)!=0){q=a[b]|0;t=0;s=qa(8,0)|0;x=t;t=0;if((x|0)!=0&(u|0)!=0){F=zu(c[x>>2]|0,m)|0;if((F|0)==0){Qf(x|0,u|0)}I=u}else{F=-1}if((F|0)==1){v=I;continue a}if(q<<24>>24==(a[s]|0)){s=a[b]|0;if(s<<24>>24==49){q=a[b+2|0]|0;t=0;x=qa(8,0)|0;r=t;t=0;if((r|0)!=0&(u|0)!=0){G=zu(c[r>>2]|0,m)|0;if((G|0)==0){Qf(r|0,u|0)}I=u}else{G=-1}if((G|0)==1){v=I;continue a}if(!(q<<24>>24==(a[x+2|0]|0))){break}H=a[b]|0}else{H=s}if(!(H<<24>>24==48)){break b}if((a[b+2|0]|0)>=57){break b}}}}while(0);if(y){t=0;c[l>>2]=b;Ea(3,p|0,80,48360,l|0)|0;s=t;t=0;if((s|0)!=0&(u|0)!=0){J=zu(c[s>>2]|0,m)|0;if((J|0)==0){Qf(s|0,u|0)}I=u}else{J=-1}if((J|0)==1){v=I;continue a}t=0;oa(11,c[n>>2]|0,p|0);s=t;t=0;if((s|0)!=0&(u|0)!=0){K=zu(c[s>>2]|0,m)|0;if((K|0)==0){Qf(s|0,u|0)}I=u}else{K=-1}if((K|0)==1){v=I;continue a}}t=0;s=qa(8,0)|0;x=t;t=0;if((x|0)!=0&(u|0)!=0){L=zu(c[x>>2]|0,m)|0;if((L|0)==0){Qf(x|0,u|0)}I=u}else{L=-1}if((L|0)==1){v=I;continue a}t=0;c[l>>2]=s;Ea(3,p|0,80,48416,l|0)|0;s=t;t=0;if((s|0)!=0&(u|0)!=0){M=zu(c[s>>2]|0,m)|0;if((M|0)==0){Qf(s|0,u|0)}I=u}else{M=-1}if((M|0)==1){v=I;continue a}t=0;oa(11,c[n>>2]|0,p|0);s=t;t=0;if((s|0)!=0&(u|0)!=0){N=zu(c[s>>2]|0,m)|0;if((N|0)==0){Qf(s|0,u|0)}I=u}else{N=-1}if((N|0)==1){v=I;continue a}t=0;oa(11,c[n>>2]|0,48472);s=t;t=0;if((s|0)!=0&(u|0)!=0){O=zu(c[s>>2]|0,m)|0;if((O|0)==0){Qf(s|0,u|0)}I=u}else{O=-1}if((O|0)==1){v=I;continue a}c[o>>2]=1}}while(0);if((c[o>>2]|0)==0){c[(c[n>>2]|0)+272>>2]=8192;t=0;y=Ca(6,c[n>>2]|0,c[(c[n>>2]|0)+272>>2]|0)|0;s=t;t=0;if((s|0)!=0&(u|0)!=0){P=zu(c[s>>2]|0,m)|0;if((P|0)==0){Qf(s|0,u|0)}I=u}else{P=-1}if((P|0)==1){v=I;continue}c[(c[n>>2]|0)+268>>2]=y;if((c[(c[n>>2]|0)+268>>2]|0)==0){c[o>>2]=1}}c[(c[n>>2]|0)+244>>2]=6;c[(c[n>>2]|0)+248>>2]=12;c[(c[n>>2]|0)+252>>2]=c[n>>2];do{if((c[o>>2]|0)==0){t=0;y=ua(7,(c[n>>2]|0)+212|0,48528,56)|0;s=t;t=0;if((s|0)!=0&(u|0)!=0){Q=zu(c[s>>2]|0,m)|0;if((Q|0)==0){Qf(s|0,u|0)}I=u}else{Q=-1}if((Q|0)==1){v=I;continue a}if((y|0)==-6){t=0;oa(11,c[n>>2]|0,48560);s=t;t=0;if((s|0)!=0&(u|0)!=0){R=zu(c[s>>2]|0,m)|0;if((R|0)==0){Qf(s|0,u|0)}I=u}else{R=-1}if((R|0)==1){v=I;continue a}c[o>>2]=1;break}else if((y|0)==-2|(y|0)==-4){t=0;oa(11,c[n>>2]|0,48536);s=t;t=0;if((s|0)!=0&(u|0)!=0){S=zu(c[s>>2]|0,m)|0;if((S|0)==0){Qf(s|0,u|0)}I=u}else{S=-1}if((S|0)==1){v=I;continue a}c[o>>2]=1;break}else if((y|0)==0){break}else{t=0;oa(11,c[n>>2]|0,48584);y=t;t=0;if((y|0)!=0&(u|0)!=0){T=zu(c[y>>2]|0,m)|0;if((T|0)==0){Qf(y|0,u|0)}I=u}else{T=-1}if((T|0)==1){v=I;continue a}c[o>>2]=1;break}}}while(0);y=c[n>>2]|0;if((c[o>>2]|0)==0){c[(c[n>>2]|0)+224>>2]=c[y+268>>2];c[(c[n>>2]|0)+228>>2]=c[(c[n>>2]|0)+272>>2];t=0;xa(3,c[n>>2]|0,0,0);s=t;t=0;if((s|0)!=0&(u|0)!=0){U=zu(c[s>>2]|0,m)|0;if((U|0)==0){Qf(s|0,u|0)}I=u}else{U=-1}if((U|0)==1){v=I;continue}else{A=55;break}}t=0;oa(13,y|0,c[(c[n>>2]|0)+268>>2]|0);y=t;t=0;if((y|0)!=0&(u|0)!=0){V=zu(c[y>>2]|0,m)|0;if((V|0)==0){Qf(y|0,u|0)}I=u}else{V=-1}if((V|0)==1){v=I;continue}c[(c[n>>2]|0)+268>>2]=0;t=0;xa(2,c[n>>2]|0,j|0,g|0);y=t;t=0;if((y|0)!=0&(u|0)!=0){W=zu(c[y>>2]|0,m)|0;if((W|0)==0){Qf(y|0,u|0)}I=u}else{W=-1}if((W|0)==1){v=I}else{A=53;break}}if((A|0)!=8)if((A|0)==53){w=0;i=k;return w|0}else if((A|0)==55){w=c[n>>2]|0;i=k;return w|0}return 0}function cr(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;if((b|0)==0|(d|0)==0){i=e;return}f=b+396|0;g=a[f]|0;h=g&255;if((g&255)<8){j=8-h|0;c[b+744>>2]=17;jr(b,d+h+32|0,j);a[f]=8;f=d+32|0;do{if((uq(f,h,j)|0)!=0){if((g&255)<4){if((uq(f,h,j+ -4|0)|0)!=0){Hq(b,48608);break}}Hq(b,48624)}}while(0);if((g&255)<3){g=b+200|0;c[g>>2]=c[g>>2]|4096}}g=b+380|0;j=b+200|0;while(1){k=Fr(b)|0;if((nu(g,48672,4)|0)==0){h=c[j>>2]|0;if((h&8|0)!=0){c[j>>2]=h|8192}}if((nu(g,48664,4)|0)==0){Kr(b,d,k);continue}if((nu(g,48680,4)|0)==0){Mr(b,d,k);continue}if((Eq(b,g)|0)!=0){if((nu(g,48672,4)|0)==0){c[j>>2]=c[j>>2]|4}cs(b,d,k);if((nu(g,48688,4)|0)==0){c[j>>2]=c[j>>2]|2;continue}else{if((nu(g,48672,4)|0)==0){break}else{continue}}}if((nu(g,48688,4)|0)==0){Lr(b,d,k);continue}if((nu(g,48672,4)|0)==0){l=32;break}if((nu(g,48696,4)|0)==0){Ur(b,d,k);continue}if((nu(g,48704,4)|0)==0){Pr(b,d,k);continue}if((nu(g,48712,4)|0)==0){Nr(b,d,k);continue}if((nu(g,48720,4)|0)==0){Vr(b,d,k);continue}if((nu(g,48744,4)|0)==0){Xr(b,d,k);continue}if((nu(g,48752,4)|0)==0){Yr(b,d,k);continue}if((nu(g,48776,4)|0)==0){Zr(b,d,k);continue}if((nu(g,48760,4)|0)==0){Wr(b,d,k);continue}if((nu(g,48768,4)|0)==0){Or(b,d,k);continue}if((nu(g,48792,4)|0)==0){Qr(b,d,k);continue}if((nu(g,48728,4)|0)==0){Rr(b,d,k);continue}if((nu(g,48784,4)|0)==0){Sr(b,d,k);continue}if((nu(g,48800,4)|0)==0){$r(b,d,k);continue}if((nu(g,48808,4)|0)==0){_r(b,d,k);continue}if((nu(g,48816,4)|0)==0){Tr(b,d,k);continue}if((nu(g,48824,4)|0)==0){as(b,d,k);continue}if((nu(g,48736,4)|0)==0){bs(b,d,k);continue}else{cs(b,d,k);continue}}if((l|0)==32){l=c[j>>2]|0;if((l&1|0)==0){Hq(b,48832)}else{if((a[b+390|0]|0)==3){if((l&2|0)==0){Hq(b,48864)}}}c[b+364>>2]=k;c[j>>2]=c[j>>2]|4;i=e;return}k=c[j>>2]|0;if((k&1|0)==0){Hq(b,48832);i=e;return}if((a[b+390|0]|0)!=3){i=e;return}if((k&2|0)!=0){i=e;return}Hq(b,48864);i=e;return}function dr(a,b){a=a|0;b=b|0;var d=0;d=i;if((a|0)==0){i=d;return}if((c[a+204>>2]&64|0)==0){hs(a)}else{Iq(a,48896)}qr(a,b);i=d;return}function er(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;g=i;if((b|0)==0){i=g;return}h=b+204|0;if((c[h>>2]&64|0)==0){hs(b)}j=b+324|0;k=c[j>>2]|0;l=b+387|0;a:do{if((a[l]|0)!=0){if((c[b+208>>2]&2|0)!=0){switch(d[b+388|0]|0){case 6:{if((k&1|0)!=0){break a}gs(b);i=g;return};case 1:{if((k&7|0)==0){if(!((c[b+296>>2]|0)>>>0<5)){break a}}if((f|0)!=0){ds(b,f,15)}gs(b);i=g;return};case 2:{if((k&7|0)==4){break a}if((f|0)!=0){if((k&4|0)!=0){ds(b,f,255)}}gs(b);i=g;return};case 5:{if((k&1|0)==0){if(!((c[b+296>>2]|0)>>>0<2)){break a}}if((f|0)!=0){ds(b,f,85)}gs(b);i=g;return};case 3:{if((k&3|0)==0){if(!((c[b+296>>2]|0)>>>0<3)){break a}}if((f|0)!=0){ds(b,f,51)}gs(b);i=g;return};case 4:{if((k&3|0)==2){break a}if((f|0)!=0){if((k&2|0)!=0){ds(b,f,255)}}gs(b);i=g;return};case 0:{if((k&7|0)==0){break a}if((f|0)!=0){ds(b,f,255)}gs(b);i=g;return};default:{break a}}}}}while(0);k=b+200|0;if((c[k>>2]&4|0)==0){Hq(b,49040)}m=b+332|0;n=b+212|0;c[b+224>>2]=c[m>>2];o=b+393|0;p=a[o]|0;q=p&255;r=b+320|0;s=c[r>>2]|0;if((p&255)>7){t=ea(q>>>3,s)|0}else{t=((ea(s,q)|0)+7|0)>>>3}q=b+228|0;c[q>>2]=t+1;t=b+216|0;s=b+236|0;p=b+364|0;u=b+272|0;v=b+268|0;w=b+380|0;do{if((c[t>>2]|0)==0){x=c[p>>2]|0;if((x|0)==0){while(1){Hr(b,0)|0;y=Fr(b)|0;c[p>>2]=y;if((nu(w,48968,4)|0)==0){z=y}else{Hq(b,49080);z=c[p>>2]|0}if((z|0)!=0){A=z;break}}}else{A=x}y=c[u>>2]|0;c[t>>2]=y;B=c[v>>2]|0;c[n>>2]=B;if(y>>>0>A>>>0){c[t>>2]=A;C=A}else{C=y}Gr(b,B,C);c[p>>2]=(c[p>>2]|0)-(c[t>>2]|0)}B=Ns(n,1)|0;if((B|0)==1){D=53;break}else if((B|0)!=0){B=c[s>>2]|0;Hq(b,(B|0)==0?49128:B)}}while((c[q>>2]|0)!=0);if((D|0)==53){if((c[q>>2]|0)==0){if((c[t>>2]|0)==0){if((c[p>>2]|0)!=0){D=56}}else{D=56}}else{D=56}if((D|0)==56){Hq(b,49104)}c[k>>2]=c[k>>2]|8;c[h>>2]=c[h>>2]|32}k=b+352|0;a[b+360|0]=a[b+390|0]|0;p=c[r>>2]|0;c[k>>2]=p;a[b+362|0]=a[b+394|0]|0;a[b+361|0]=a[b+391|0]|0;r=a[o]|0;a[b+363|0]=r;o=r&255;if((r&255)>7){E=ea(o>>>3,p)|0}else{E=((ea(p,o)|0)+7|0)>>>3}c[b+356>>2]=E;E=c[m>>2]|0;o=a[E]|0;if(o<<24>>24==0){F=b+328|0;G=E}else{p=b+328|0;fs(b,k,E+1|0,(c[p>>2]|0)+1|0,o&255);F=p;G=c[m>>2]|0}tu(c[F>>2]|0,G|0,(c[b+312>>2]|0)+1|0)|0;if((c[b+656>>2]&4|0)!=0){if((a[b+664|0]|0)==64){Er(k,(c[m>>2]|0)+1|0)}}m=b+208|0;if((c[m>>2]|0)==0){if((c[h>>2]&4194304|0)!=0){D=71}}else{D=71}if((D|0)==71){rr(b)}if((a[l]|0)==0){D=80}else{if((c[m>>2]&2|0)==0){D=80}else{m=b+388|0;if((d[m]|0)<6){es(b)}if((f|0)!=0){ds(b,f,c[48976+(d[m]<<2)>>2]|0)}if((e|0)!=0){ds(b,e,c[49008+(d[m]<<2)>>2]|0)}}}if((D|0)==80){if((e|0)!=0){ds(b,e,255)}if((f|0)!=0){ds(b,f,255)}}gs(b);f=c[b+504>>2]|0;if((f|0)==0){i=g;return}Th[f&63](b,c[j>>2]|0,d[b+388|0]|0);i=g;return}function fr(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;if((a|0)==0){i=d;return}e=Ds(a)|0;f=c[a+300>>2]|0;c[a+304>>2]=f;if((e|0)<1|(f|0)==0){i=d;return}else{g=0}do{h=0;j=b;while(1){er(a,c[j>>2]|0,0);h=h+1|0;if((h|0)==(f|0)){break}else{j=j+4|0}}g=g+1|0}while((g|0)!=(e|0));i=d;return}function gr(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;if((a|0)==0){i=d;return}Hr(a,0)|0;e=a+380|0;f=a+200|0;do{g=Fr(a)|0;do{if((nu(e,49152,4)|0)==0){Kr(a,b,g)}else{if((nu(e,49168,4)|0)==0){Mr(a,b,g);break}h=(Eq(a,e)|0)==0;j=(nu(e,49160,4)|0)!=0;if(!h){do{if(!j){if((g|0)==0){if((c[f>>2]&8192|0)==0){break}}Hq(a,49320)}}while(0);cs(a,b,g);if((nu(e,49176,4)|0)!=0){break}c[f>>2]=c[f>>2]|2;break}if(!j){if((g|0)==0){if((c[f>>2]&8192|0)!=0){k=17}}else{k=17}if((k|0)==17){k=0;Hq(a,49320)}Hr(a,g)|0;break}if((nu(e,49176,4)|0)==0){Lr(a,b,g);break}if((nu(e,49184,4)|0)==0){Ur(a,b,g);break}if((nu(e,49192,4)|0)==0){Pr(a,b,g);break}if((nu(e,49200,4)|0)==0){Nr(a,b,g);break}if((nu(e,49208,4)|0)==0){Vr(a,b,g);break}if((nu(e,49232,4)|0)==0){Xr(a,b,g);break}if((nu(e,49240,4)|0)==0){Yr(a,b,g);break}if((nu(e,49264,4)|0)==0){Zr(a,b,g);break}if((nu(e,49248,4)|0)==0){Wr(a,b,g);break}if((nu(e,49256,4)|0)==0){Or(a,b,g);break}if((nu(e,49280,4)|0)==0){Qr(a,b,g);break}if((nu(e,49216,4)|0)==0){Rr(a,b,g);break}if((nu(e,49272,4)|0)==0){Sr(a,b,g);break}if((nu(e,49288,4)|0)==0){$r(a,b,g);break}if((nu(e,49296,4)|0)==0){_r(a,b,g);break}if((nu(e,49304,4)|0)==0){Tr(a,b,g);break}if((nu(e,49312,4)|0)==0){as(a,b,g);break}if((nu(e,49224,4)|0)==0){bs(a,b,g);break}else{cs(a,b,g);break}}}while(0)}while((c[f>>2]&16|0)==0);i=d;return}function hr(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;e=i;if((a|0)==0){i=e;return}f=c[a>>2]|0;if((f|0)==0){i=e;return}g=c[f+676>>2]|0;h=c[f+668>>2]|0;if((b|0)==0){j=0}else{j=c[b>>2]|0}if((d|0)==0){k=0}else{k=c[d>>2]|0}ir(f,j,k);if((j|0)!=0){Bq(f,j,16384,-1);Wq(j,g,h);c[b>>2]=0}if((k|0)!=0){Bq(f,k,16384,-1);Wq(k,g,h);c[d>>2]=0}Wq(f,g,h);c[a>>2]=0;i=e;return}function ir(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;i=i+160|0;f=e;if((b|0)!=0){Aq(a,b)}if((d|0)!=0){Aq(a,d)}Zq(a,c[a+268>>2]|0);Zq(a,c[a+680>>2]|0);Zq(a,c[a+328>>2]|0);Zq(a,c[a+740>>2]|0);Zq(a,c[a+588>>2]|0);Zq(a,c[a+592>>2]|0);Zq(a,c[a+452>>2]|0);Zq(a,c[a+456>>2]|0);Zq(a,c[a+460>>2]|0);d=a+628|0;b=c[d>>2]|0;if((b&4096|0)==0){g=b}else{wq(a,c[a+372>>2]|0);g=c[d>>2]|0}b=g&-4097;c[d>>2]=b;if((g&8192|0)==0){h=b}else{Zq(a,c[a+488>>2]|0);h=c[d>>2]|0}b=h&-8193;c[d>>2]=b;if((h&8|0)==0){j=b}else{Zq(a,c[a+596>>2]|0);j=c[d>>2]|0}c[d>>2]=j&-9;j=a+464|0;d=c[j>>2]|0;if((d|0)!=0){b=1<<8-(c[a+440>>2]|0);if((b|0)>0){h=d;g=0;while(1){Zq(a,c[h+(g<<2)>>2]|0);k=g+1|0;l=c[j>>2]|0;if((k|0)==(b|0)){m=l;break}else{h=l;g=k}}}else{m=d}Zq(a,m)}m=a+468|0;d=c[m>>2]|0;if((d|0)!=0){g=1<<8-(c[a+440>>2]|0);if((g|0)>0){h=d;b=0;while(1){Zq(a,c[h+(b<<2)>>2]|0);j=b+1|0;k=c[m>>2]|0;if((j|0)==(g|0)){n=k;break}else{h=k;b=j}}}else{n=d}Zq(a,n)}n=a+472|0;d=c[n>>2]|0;if((d|0)!=0){b=1<<8-(c[a+440>>2]|0);if((b|0)>0){h=d;g=0;while(1){Zq(a,c[h+(g<<2)>>2]|0);m=g+1|0;j=c[n>>2]|0;if((m|0)==(b|0)){o=j;break}else{h=j;g=m}}}else{o=d}Zq(a,o)}Zq(a,c[a+624>>2]|0);Ps(a+212|0)|0;Zq(a,c[a+528>>2]|0);Zq(a,c[a+580>>2]|0);tu(f|0,a|0,156)|0;o=a+160|0;d=c[o>>2]|0;g=a+164|0;h=c[g>>2]|0;b=a+168|0;n=c[b>>2]|0;m=a+676|0;j=c[m>>2]|0;vu(a|0,0,748)|0;c[o>>2]=d;c[g>>2]=h;c[b>>2]=n;c[m>>2]=j;tu(a|0,f|0,156)|0;i=e;return}function jr(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=c[a+176>>2]|0;if((f|0)==0){Hq(a,49344);i=e;return}else{Th[f&63](a,b,d);i=e;return}}function kr(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;if((a|0)!=0){if((lc(b|0,1,d|0,c[a+180>>2]|0)|0)!=(d|0)){Hq(a,49376)}}i=e;return}function lr(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;if((a|0)==0){i=e;return}c[a+180>>2]=b;if((d|0)==0){f=4}else{f=d}c[a+176>>2]=f;f=a+172|0;if((c[f>>2]|0)!=0){c[f>>2]=0;Iq(a,49392);Iq(a,49464)}c[a+428>>2]=0;i=e;return}function mr(a){a=a|0;var b=0,d=0;b=i;if((a|0)==0){i=b;return}d=a+208|0;c[d>>2]=c[d>>2]|1024;i=b;return}function nr(a){a=a|0;var b=0,d=0;b=i;if((a|0)==0){i=b;return}d=a+208|0;c[d>>2]=c[d>>2]|33558528;d=a+204|0;c[d>>2]=c[d>>2]&-65;i=b;return}function or(f){f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0,C=0,D=0,E=0.0,F=0.0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0.0,O=0.0,P=0.0,Q=0,R=0,S=0,U=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0;h=i;j=a[f+390|0]|0;k=j&255;l=f+208|0;m=c[l>>2]|0;if((m&256|0)==0){n=4}else{if((k&2|0)==0){o=f+200|0;c[o>>2]=c[o>>2]|2048}else{n=4}}if((n|0)==4){if((m&16768|0)==16512){o=b[f+410>>1]|0;if(o<<16>>16==(b[f+412>>1]|0)){if(o<<16>>16==(b[f+414>>1]|0)){p=f+200|0;c[p>>2]=c[p>>2]|2048;b[f+416>>1]=o}}}}a:do{if((m&4352|0)==4352){if((k&2|0)!=0){if(!(j<<24>>24==3)){o=f+418|0;p=f+408|0;b[o+0>>1]=b[p+0>>1]|0;b[o+2>>1]=b[p+2>>1]|0;b[o+4>>1]=b[p+4>>1]|0;b[o+6>>1]=b[p+6>>1]|0;b[o+8>>1]=b[p+8>>1]|0;q=0;break}p=f+408|0;o=d[p]|0;r=c[f+372>>2]|0;b[f+410>>1]=d[r+(o*3|0)|0]|0;b[f+412>>1]=d[r+(o*3|0)+1|0]|0;b[f+414>>1]=d[r+(o*3|0)+2|0]|0;if((m&34078720|0)!=524288){o=f+418|0;b[o+0>>1]=b[p+0>>1]|0;b[o+2>>1]=b[p+2>>1]|0;b[o+4>>1]=b[p+4>>1]|0;b[o+6>>1]=b[p+6>>1]|0;b[o+8>>1]=b[p+8>>1]|0;n=26;break}p=b[f+378>>1]|0;o=p&65535;if(p<<16>>16==0){n=25;break}p=f+488|0;r=0;while(1){s=(c[p>>2]|0)+r|0;a[s]=d[s]^255;s=r+1|0;if((s|0)<(o|0)){r=s}else{n=25;break a}}}switch(d[f+391|0]|0){case 4:{r=f+416|0;o=(e[r>>1]|0)*17&65535;b[r>>1]=o;b[f+414>>1]=o;b[f+412>>1]=o;b[f+410>>1]=o;if((m&33554432|0)!=0){n=25;break a}o=f+500|0;r=(e[o>>1]|0)*17&65535;b[o>>1]=r;b[f+498>>1]=r;b[f+496>>1]=r;b[f+494>>1]=r;n=25;break a;break};case 2:{r=f+416|0;o=(e[r>>1]|0)*85&65535;b[r>>1]=o;b[f+414>>1]=o;b[f+412>>1]=o;b[f+410>>1]=o;if((m&33554432|0)!=0){n=25;break a}o=f+500|0;r=(e[o>>1]|0)*85&65535;b[o>>1]=r;b[f+498>>1]=r;b[f+496>>1]=r;b[f+494>>1]=r;n=25;break a;break};case 16:case 8:{r=b[f+416>>1]|0;b[f+414>>1]=r;b[f+412>>1]=r;b[f+410>>1]=r;n=25;break a;break};case 1:{r=f+416|0;o=(e[r>>1]|0)*255&65535;b[r>>1]=o;b[f+414>>1]=o;b[f+412>>1]=o;b[f+410>>1]=o;if((m&33554432|0)!=0){n=25;break a}o=f+500|0;r=(e[o>>1]|0)*255&65535;b[o>>1]=r;b[f+498>>1]=r;b[f+496>>1]=r;b[f+494>>1]=r;n=25;break a;break};default:{n=25;break a}}}else{n=25}}while(0);if((n|0)==25){m=f+418|0;k=f+408|0;b[m+0>>1]=b[k+0>>1]|0;b[m+2>>1]=b[k+2>>1]|0;b[m+4>>1]=b[k+4>>1]|0;b[m+6>>1]=b[k+6>>1]|0;b[m+8>>1]=b[k+8>>1]|0;if(j<<24>>24==3){n=26}else{q=0}}if((n|0)==26){j=b[f+378>>1]|0;if(j<<16>>16==0){q=1}else{if(+T(+(+g[f+448>>2]*+g[f+444>>2]+-1.0))<.05){k=c[f+488>>2]|0;m=j&65535;j=0;r=0;while(1){o=a[k+j|0]|0;if(o<<24>>24==-1|o<<24>>24==0){t=r}else{t=1}j=j+1|0;if((j|0)>=(m|0)){break}else{r=t}}if((t|0)==0){c[l>>2]=c[l>>2]&-8193;q=1}else{q=1}}else{q=1}}}t=c[l>>2]|0;do{if((t&6299648|0)==0){n=73}else{r=f+444|0;if(+g[r>>2]!=0.0){m=f+391|0;pr(f,a[m]|0);j=c[l>>2]|0;if((j&128|0)==0){if(!q){i=h;return}k=c[f+372>>2]|0;o=b[f+376>>1]|0;p=o&65535;if(o<<16>>16==0){u=j}else{o=f+452|0;s=0;do{v=k+(s*3|0)|0;a[v]=a[(c[o>>2]|0)+(d[v]|0)|0]|0;v=k+(s*3|0)+1|0;a[v]=a[(c[o>>2]|0)+(d[v]|0)|0]|0;v=k+(s*3|0)+2|0;a[v]=a[(c[o>>2]|0)+(d[v]|0)|0]|0;s=s+1|0}while((s|0)<(p|0));u=c[l>>2]|0}p=u&-8193;c[l>>2]=p;w=p;break}if(!q){x=+(((1<<d[m])+ -1|0)>>>0);p=d[f+400|0]|0;if((p|0)==1){y=+g[f+448>>2];z=1.0}else if((p|0)==3){A=+g[f+404>>2];y=1.0/A;z=1.0/(A*+g[f+448>>2])}else if((p|0)==2){A=+g[r>>2];y=1.0/A;z=1.0/(A*+g[f+448>>2])}else{y=1.0;z=1.0}p=f+416|0;A=+(e[p>>1]|0)/x;s=~~(x*+V(+A,+y)+.5)&65535;b[f+426>>1]=s;o=~~(x*+V(+A,+z)+.5)&65535;b[p>>1]=o;p=f+410|0;k=b[p>>1]|0;v=f+412|0;B=b[v>>1]|0;C=f+414|0;D=b[C>>1]|0;if(k<<16>>16==B<<16>>16){if(k<<16>>16==D<<16>>16&k<<16>>16==o<<16>>16){b[f+424>>1]=s;b[f+422>>1]=s;b[f+420>>1]=s;b[C>>1]=o;b[v>>1]=o;b[p>>1]=o;w=j;break}}A=+(k&65535)/x;b[f+420>>1]=~~(x*+V(+A,+y)+.5);E=+(B&65535)/x;b[f+422>>1]=~~(x*+V(+E,+y)+.5);F=+(D&65535)/x;b[f+424>>1]=~~(x*+V(+F,+y)+.5);b[p>>1]=~~(x*+V(+A,+z)+.5);b[v>>1]=~~(x*+V(+E,+z)+.5);b[f+414>>1]=~~(x*+V(+F,+z)+.5);w=j;break}v=c[f+372>>2]|0;p=b[f+376>>1]|0;D=p&65535;B=a[f+400|0]|0;if(B<<24>>24==2){k=e[f+410>>1]|0;o=c[f+452>>2]|0;C=e[f+412>>1]|0;s=e[f+414>>1]|0;G=c[f+460>>2]|0;H=a[o+k|0]|0;I=a[o+C|0]|0;J=a[o+s|0]|0;K=a[G+k|0]|0;L=a[G+C|0]|0;M=a[G+s|0]|0}else{s=B&255;if((s|0)==3){F=+g[f+404>>2];N=1.0/F;O=1.0/(F*+g[f+448>>2])}else if((s|0)==1){N=+g[f+448>>2];O=1.0}else if((s|0)==2){F=+g[r>>2];N=1.0/F;O=1.0/(F*+g[f+448>>2])}else{N=1.0;O=1.0}s=+T(+(O+-1.0))<.05;B=b[f+410>>1]|0;if(s){s=b[f+412>>1]|0;G=b[f+414>>1]|0;P=+(B&65535)/255.0;Q=s;R=G;S=B&255;U=s&255;W=G&255}else{F=+(B&65535)/255.0;B=~~(+V(+F,+O)*255.0+.5)&255;G=b[f+412>>1]|0;s=~~(+V(+(+(G&65535)/255.0),+O)*255.0+.5)&255;C=b[f+414>>1]|0;P=F;Q=G;R=C;S=B;U=s;W=~~(+V(+(+(C&65535)/255.0),+O)*255.0+.5)&255}H=S;I=U;J=W;K=~~(+V(+P,+N)*255.0+.5)&255;L=~~(+V(+(+(Q&65535)/255.0),+N)*255.0+.5)&255;M=~~(+V(+(+(R&65535)/255.0),+N)*255.0+.5)&255}if(p<<16>>16==0){X=j}else{p=f+378|0;C=f+488|0;s=f+460|0;B=K&255;G=f+456|0;k=L&255;o=M&255;Y=f+452|0;Z=0;do{do{if((Z|0)<(e[p>>1]|0)){_=a[(c[C>>2]|0)+Z|0]|0;if(_<<24>>24==-1){n=55}else{$=v+(Z*3|0)|0;if(_<<24>>24==0){a[$]=H;a[v+(Z*3|0)+1|0]=I;a[v+(Z*3|0)+2|0]=J;break}else{aa=_&255;_=(ea(aa^255,B)|0)+128+(ea(d[(c[s>>2]|0)+(d[$]|0)|0]|0,aa)|0)|0;a[$]=a[(c[G>>2]|0)+(((_>>>8&255)+_|0)>>>8&255)|0]|0;_=v+(Z*3|0)+1|0;$=d[(c[C>>2]|0)+Z|0]|0;aa=(ea($,d[(c[s>>2]|0)+(d[_]|0)|0]|0)|0)+128+(ea($^255,k)|0)|0;a[_]=a[(c[G>>2]|0)+(((aa>>>8&255)+aa|0)>>>8&255)|0]|0;aa=v+(Z*3|0)+2|0;_=d[(c[C>>2]|0)+Z|0]|0;$=(ea(_,d[(c[s>>2]|0)+(d[aa]|0)|0]|0)|0)+128+(ea(_^255,o)|0)|0;a[aa]=a[(c[G>>2]|0)+((($>>>8&255)+$|0)>>>8&255)|0]|0;break}}}else{n=55}}while(0);if((n|0)==55){n=0;$=v+(Z*3|0)|0;a[$]=a[(c[Y>>2]|0)+(d[$]|0)|0]|0;$=v+(Z*3|0)+1|0;a[$]=a[(c[Y>>2]|0)+(d[$]|0)|0]|0;$=v+(Z*3|0)+2|0;a[$]=a[(c[Y>>2]|0)+(d[$]|0)|0]|0}Z=Z+1|0}while((Z|0)<(D|0));X=c[l>>2]|0}D=X&-270465|262144;c[l>>2]=D;w=D}else{n=73}}}while(0);if((n|0)==73){if((t&128|0)==0|q^1){w=t}else{n=b[f+378>>1]|0;X=n&65535;J=c[f+372>>2]|0;I=b[f+410>>1]|0;H=I&255;M=b[f+412>>1]|0;L=M&255;K=b[f+414>>1]|0;R=K&255;if(n<<16>>16==0){ba=t}else{t=f+488|0;n=I&255;I=M&255;M=K&255;K=0;do{Q=a[(c[t>>2]|0)+K|0]|0;if(Q<<24>>24==0){a[J+(K*3|0)|0]=H;a[J+(K*3|0)+1|0]=L;a[J+(K*3|0)+2|0]=R}else if(!(Q<<24>>24==-1)){W=J+(K*3|0)|0;U=Q&255;Q=(ea(U^255,n)|0)+128+(ea(d[W]|0,U)|0)|0;a[W]=((Q>>>8&255)+Q|0)>>>8;Q=J+(K*3|0)+1|0;W=d[(c[t>>2]|0)+K|0]|0;U=(ea(W,d[Q]|0)|0)+128+(ea(W^255,I)|0)|0;a[Q]=((U>>>8&255)+U|0)>>>8;U=J+(K*3|0)+2|0;Q=d[(c[t>>2]|0)+K|0]|0;W=(ea(Q,d[U]|0)|0)+128+(ea(Q^255,M)|0)|0;a[U]=((W>>>8&255)+W|0)>>>8}K=K+1|0}while((K|0)<(X|0));ba=c[l>>2]|0}X=ba&-262273|262144;c[l>>2]=X;w=X}}if((w&8|0)==0|q^1){i=h;return}q=b[f+376>>1]|0;w=8-(d[f+476|0]|0)|0;X=8-(d[f+477|0]|0)|0;l=8-(d[f+478|0]|0)|0;ba=(w|0)<0?0:w;w=(X|0)<0?0:X;X=(l|0)<0?0:l;if(q<<16>>16==0){i=h;return}l=f+372|0;f=0;do{K=(c[l>>2]|0)+(f*3|0)|0;a[K]=(d[K]|0)>>>ba;K=(c[l>>2]|0)+(f*3|0)+1|0;a[K]=(d[K]|0)>>>w;K=(c[l>>2]|0)+(f*3|0)+2|0;a[K]=(d[K]|0)>>>X;f=f+1|0}while(!((f&65535)<<16>>16==q<<16>>16));i=h;return}function pr(e,f){e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0;h=i;if((f&255)<9){f=e+448|0;j=+g[f>>2];if(j>1.0e-6){k=1.0/(j*+g[e+444>>2])}else{k=1.0}l=Yq(e,256)|0;m=e+452|0;c[m>>2]=l;n=l;l=0;while(1){a[n+l|0]=~~(+V(+(+(l|0)/255.0),+k)*255.0+.5);o=l+1|0;if((o|0)==256){break}n=c[m>>2]|0;l=o}if((c[e+208>>2]&6291584|0)==0){i=h;return}l=e+444|0;k=1.0/+g[l>>2];m=Yq(e,256)|0;n=e+460|0;c[n>>2]=m;o=m;m=0;while(1){a[o+m|0]=~~(+V(+(+(m|0)/255.0),+k)*255.0+.5);p=m+1|0;if((p|0)==256){break}o=c[n>>2]|0;m=p}m=Yq(e,256)|0;n=e+456|0;c[n>>2]=m;k=+g[f>>2];if(k>1.0e-6){q=1.0/k}else{q=+g[l>>2]}l=m;m=0;while(1){a[l+m|0]=~~(+V(+(+(m|0)/255.0),+q)*255.0+.5);f=m+1|0;if((f|0)==256){break}l=c[n>>2]|0;m=f}i=h;return}if((a[e+390|0]&2)==0){r=d[e+479|0]|0}else{m=a[e+476|0]|0;n=a[e+477|0]|0;l=((n&255)>(m&255)?n:m)&255;m=d[e+478|0]|0;r=m>>>0>l>>>0?m:l}l=(r|0)>0?16-r|0:0;r=e+208|0;m=(c[r>>2]&1024|0)!=0&(l|0)<5?5:l;l=(m|0)>8?8:m;m=(l|0)<0?0:l;c[e+440>>2]=m&255;l=8-m|0;n=1<<l;f=e+448|0;q=+g[f>>2];if(q>1.0e-6){s=1.0/(q*+g[e+444>>2])}else{s=1.0}o=n<<2;p=e+464|0;c[p>>2]=Xq(e,o)|0;t=(n|0)>0;if((c[r>>2]&1152|0)==0){if(t){u=c[49640+(m<<2)>>2]|0;v=0;do{w=Yq(e,512)|0;c[(c[p>>2]|0)+(v<<2)>>2]=w;w=(ea(u,v)|0)>>>4;x=c[(c[p>>2]|0)+(v<<2)>>2]|0;y=0;do{b[x+(y<<1)>>1]=~~(+V(+(+(((y<<8)+w|0)>>>0)/65535.0),+s)*65535.0+.5);y=y+1|0}while((y|0)!=256);v=v+1|0}while((v|0)!=(n|0))}}else{if(t){t=0;do{v=Yq(e,512)|0;c[(c[p>>2]|0)+(t<<2)>>2]=v;t=t+1|0}while((t|0)!=(n|0))}q=1.0/s;t=n<<8;s=+(t>>>0);v=255>>>m;u=0;y=0;while(1){w=~~(s*+V(+((+(u|0)+.5)*.00390625),+q))>>>0;if(y>>>0>w>>>0){z=y}else{x=(u<<8|u)&65535;A=c[p>>2]|0;B=y;while(1){b[(c[A+((B&v)<<2)>>2]|0)+(B>>>l<<1)>>1]=x;C=B+1|0;if(C>>>0>w>>>0){z=C;break}else{B=C}}}u=u+1|0;if((u|0)==256){break}else{y=z}}if(z>>>0<t>>>0){t=c[p>>2]|0;p=n<<8;y=z;do{b[(c[t+((y&v)<<2)>>2]|0)+(y>>>l<<1)>>1]=-1;y=y+1|0}while((y|0)!=(p|0))}}if((c[r>>2]&6291584|0)==0){i=h;return}r=e+444|0;q=1.0/+g[r>>2];p=e+472|0;c[p>>2]=Xq(e,o)|0;y=(n|0)>0;if(y){l=c[49640+(m<<2)>>2]|0;v=0;do{t=Yq(e,512)|0;c[(c[p>>2]|0)+(v<<2)>>2]=t;t=(ea(l,v)|0)>>>4;z=c[(c[p>>2]|0)+(v<<2)>>2]|0;u=0;do{b[z+(u<<1)>>1]=~~(+V(+(+(((u<<8)+t|0)>>>0)/65535.0),+q)*65535.0+.5);u=u+1|0}while((u|0)!=256);v=v+1|0}while((v|0)!=(n|0))}q=+g[f>>2];if(q>1.0e-6){D=1.0/q}else{D=+g[r>>2]}r=e+468|0;c[r>>2]=Xq(e,o)|0;if(!y){i=h;return}y=c[49640+(m<<2)>>2]|0;m=0;do{o=Yq(e,512)|0;c[(c[r>>2]|0)+(m<<2)>>2]=o;o=(ea(y,m)|0)>>>4;f=c[(c[r>>2]|0)+(m<<2)>>2]|0;v=0;do{b[f+(v<<1)>>1]=~~(+V(+(+(((v<<8)+o|0)>>>0)/65535.0),+D)*65535.0+.5);v=v+1|0}while((v|0)!=256);m=m+1|0}while((m|0)!=(n|0));i=h;return}function qr(e,f){e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;h=i;j=e+208|0;k=c[j>>2]|0;do{if((k&4096|0)!=0){l=f+25|0;m=a[l]|0;n=m&255;o=(b[e+378>>1]|0)==0;if(m<<24>>24==3){if(o){p=5}else{if((k&33554432|0)==0){p=5}else{q=6}}if((p|0)==5){q=2}a[l]=q;a[f+24|0]=8;b[f+22>>1]=0;break}if(!o){if((k&33554432|0)!=0){a[l]=n|4}}n=f+24|0;if((d[n]|0)<8){a[n]=8}b[f+22>>1]=0}}while(0);k=c[j>>2]|0;if((k&128|0)==0){r=k}else{k=f+25|0;a[k]=a[k]&251;b[f+22>>1]=0;k=f+90|0;q=e+408|0;b[k+0>>1]=b[q+0>>1]|0;b[k+2>>1]=b[q+2>>1]|0;b[k+4>>1]=b[q+4>>1]|0;b[k+6>>1]=b[q+6>>1]|0;b[k+8>>1]=b[q+8>>1]|0;r=c[j>>2]|0}if((r&8192|0)==0){s=r}else{g[f+40>>2]=+g[e+444>>2];c[f+252>>2]=c[e+660>>2];s=c[j>>2]|0}if((s&1024|0)==0){t=s}else{r=f+24|0;if((a[r]|0)==16){a[r]=8;t=c[j>>2]|0}else{t=s}}if((t&16384|0)==0){u=t}else{t=f+25|0;a[t]=d[t]|2;u=c[j>>2]|0}if((u&6291456|0)==0){v=u}else{u=f+25|0;a[u]=a[u]&253;v=c[j>>2]|0}if((v&64|0)==0){w=v}else{u=f+25|0;t=a[u]|0;if(t<<24>>24==6|t<<24>>24==2){if((c[e+588>>2]|0)==0){w=v}else{if((a[f+24|0]|0)==8){a[u]=3;w=c[j>>2]|0}else{w=v}}}else{w=v}}if((w&4|0)!=0){w=f+24|0;if((d[w]|0)<8){a[w]=8}}w=f+25|0;v=a[w]|0;do{if(v<<24>>24==3){a[f+29|0]=1;x=1}else{u=f+29|0;if((v&2)==0){a[u]=1;x=1;break}else{a[u]=3;x=3;break}}}while(0);if((c[e+204>>2]&4194304|0)==0){y=v}else{u=v&255&251;a[w]=u;y=u}if((y&4)==0){z=x}else{u=x+1<<24>>24;a[f+29|0]=u;z=u}u=c[j>>2]|0;if((u&32768|0)==0){A=u;B=z}else{if(y<<24>>24==0|y<<24>>24==2){x=z+1<<24>>24;a[f+29|0]=x;v=c[j>>2]|0;if((v&16777216|0)==0){A=v;B=x}else{a[w]=y&255|4;A=c[j>>2]|0;B=x}}else{A=u;B=z}}z=f+24|0;u=a[z]|0;if((A&1048576|0)==0){C=B;D=u}else{A=a[e+196|0]|0;if((u&255)<(A&255)){a[z]=A;E=A}else{E=u}u=a[e+197|0]|0;if((B&255)<(u&255)){a[f+29|0]=u;C=u;D=E}else{C=B;D=E}}E=ea(D&255,C&255)|0;a[f+30|0]=E;C=E&255;E=c[f>>2]|0;if(C>>>0>7){F=ea(C>>>3,E)|0;G=f+12|0;c[G>>2]=F;i=h;return}else{F=((ea(C,E)|0)+7|0)>>>3;G=f+12|0;c[G>>2]=F;i=h;return}}function rr(f){f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;g=i;i=i+64|0;h=g;j=g+8|0;k=f+332|0;if((c[k>>2]|0)==0){l=d[f+388|0]|0;c[h>>2]=c[f+324>>2];c[h+4>>2]=l;id(j|0,50,49520,h|0)|0;Hq(f,j)}j=f+208|0;h=c[j>>2]|0;do{if((h&4096|0)!=0){l=f+352|0;if((a[f+360|0]|0)==3){sr(l,(c[k>>2]|0)+1|0,c[f+372>>2]|0,c[f+488>>2]|0,e[f+378>>1]|0);break}if((b[f+378>>1]|0)!=0){if((h&33554432|0)!=0){tr(l,(c[k>>2]|0)+1|0,f+492|0);break}}tr(l,(c[k>>2]|0)+1|0,0)}}while(0);h=f+204|0;l=c[h>>2]&4194304;if((l|0)!=0){Hs(f+352|0,(c[k>>2]|0)+1|0,l|128)}if((c[j>>2]&6291456|0)!=0){if((ur(f,f+352|0,(c[k>>2]|0)+1|0)|0)!=0){a[f+648|0]=1;l=c[j>>2]|0;if((l&6291456|0)==4194304){Iq(f,49560);m=c[j>>2]|0}else{m=l}if((m&6291456|0)==2097152){Hq(f,49560)}}}m=c[j>>2]|0;if((m&16384|0)==0){n=m}else{if((c[f+200>>2]&2048|0)==0){vr(f+352|0,(c[k>>2]|0)+1|0);n=c[j>>2]|0}else{n=m}}do{if((n&128|0)==0){o=n}else{if((b[f+378>>1]|0)==0){if((a[f+390|0]&4)==0){o=n;break}}wr(f+352|0,(c[k>>2]|0)+1|0,f+492|0,f+408|0,f+418|0,c[f+452>>2]|0,c[f+456>>2]|0,c[f+460>>2]|0,c[f+464>>2]|0,c[f+468>>2]|0,c[f+472>>2]|0,c[f+440>>2]|0);o=c[j>>2]|0}}while(0);do{if((o&8192|0)==0){p=o}else{if((o&128|0)==0){q=a[f+390|0]|0}else{if((b[f+378>>1]|0)!=0){p=o;break}n=a[f+390|0]|0;if((n&4)==0){q=n}else{p=o;break}}if(q<<24>>24==3){p=o}else{xr(f+352|0,(c[k>>2]|0)+1|0,c[f+452>>2]|0,c[f+464>>2]|0,c[f+440>>2]|0);p=c[j>>2]|0}}}while(0);if((p&1024|0)==0){r=p}else{o=(c[k>>2]|0)+1|0;q=f+361|0;if((a[q]|0)==16){n=f+352|0;m=c[n>>2]|0;l=f+362|0;s=a[l]|0;t=ea(s&255,m)|0;if((t|0)==0){u=p;v=s;w=m}else{m=o;s=0;x=o;while(1){a[m]=a[x]|0;s=s+1|0;if((s|0)==(t|0)){break}else{m=m+1|0;x=x+2|0}}u=c[j>>2]|0;v=a[l]|0;w=c[n>>2]|0}a[q]=8;q=v&255;a[f+363|0]=q<<3;c[f+356>>2]=ea(q,w)|0;r=u}else{r=p}}if((r&64|0)!=0){yr(f+352|0,(c[k>>2]|0)+1|0,c[f+588>>2]|0,c[f+592>>2]|0);if((c[f+356>>2]|0)==0){Hq(f,49600)}}r=c[j>>2]|0;if((r&32|0)==0){y=r}else{Es(f+352|0,(c[k>>2]|0)+1|0);y=c[j>>2]|0}if((y&8|0)==0){z=y}else{zr(f+352|0,(c[k>>2]|0)+1|0,f+481|0);z=c[j>>2]|0}if((z&4|0)==0){A=z}else{Ar(f+352|0,(c[k>>2]|0)+1|0);A=c[j>>2]|0}if((A&1|0)==0){B=A}else{Is(f+352|0,(c[k>>2]|0)+1|0);B=c[j>>2]|0}if((B&65536|0)==0){C=B}else{Gs(f+352|0,(c[k>>2]|0)+1|0);C=c[j>>2]|0}if((C&16384|0)==0){D=C}else{if((c[f+200>>2]&2048|0)==0){D=C}else{vr(f+352|0,(c[k>>2]|0)+1|0);D=c[j>>2]|0}}if((D&32768|0)==0){E=D}else{Br(f+352|0,(c[k>>2]|0)+1|0,e[f+398>>1]|0,c[h>>2]|0);E=c[j>>2]|0}if((E&524288|0)==0){F=E}else{Cr(f+352|0,(c[k>>2]|0)+1|0);F=c[j>>2]|0}if((F&131072|0)==0){G=F}else{Dr(f+352|0,(c[k>>2]|0)+1|0);G=c[j>>2]|0}if((G&16|0)==0){H=G}else{Fs(f+352|0,(c[k>>2]|0)+1|0);H=c[j>>2]|0}if((H&1048576|0)==0){i=g;return}H=c[f+184>>2]|0;if((H|0)!=0){Th[H&63](f,f+352|0,(c[k>>2]|0)+1|0)}k=a[f+196|0]|0;if(!(k<<24>>24==0)){a[f+361|0]=k}k=a[f+197|0]|0;H=f+362|0;if(k<<24>>24==0){I=a[H]|0}else{a[H]=k;I=k}k=ea(I&255,d[f+361|0]|0)|0;a[f+363|0]=k;I=k&255;k=c[f+352>>2]|0;if(I>>>0>7){J=ea(I>>>3,k)|0}else{J=((ea(I,k)|0)+7|0)>>>3}c[f+356>>2]=J;i=g;return}function sr(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;j=i;k=c[b>>2]|0;l=b+8|0;if((a[l]|0)!=3){i=j;return}m=b+9|0;n=a[m]|0;if((n&255)<8){o=n&255;if((o|0)==4){p=k+ -1|0;if((k|0)!=0){q=e+p|0;r=0;s=k<<2&4;t=e+(p>>>1)|0;while(1){a[q]=(d[t]|0)>>>s&15;p=(s|0)==4;r=r+1|0;if((r|0)==(k|0)){break}else{q=q+ -1|0;s=p?0:s+4|0;t=p?t+ -1|0:t}}}}else if((o|0)==1){t=k+ -1|0;if((k|0)!=0){s=e+t|0;q=0;r=k+7&7^7;p=e+(t>>>3)|0;while(1){a[s]=(d[p]&1<<r|0)!=0|0;t=(r|0)==7;q=q+1|0;if((q|0)==(k|0)){break}else{s=s+ -1|0;r=t?0:r+1|0;p=t?p+ -1|0:p}}}}else if((o|0)==2){o=k+ -1|0;if((k|0)!=0){p=e+o|0;r=0;s=(k<<1)+6&6^6;q=e+(o>>>2)|0;while(1){a[p]=(d[q]|0)>>>s&3;o=(s|0)==6;r=r+1|0;if((r|0)==(k|0)){break}else{p=p+ -1|0;s=o?0:s+2|0;q=o?q+ -1|0:q}}}}a[m]=8;a[b+11|0]=8;c[b+4>>2]=k}else{if(!(n<<24>>24==8)){i=j;return}}n=e+(k+ -1)|0;if((g|0)==0){q=k*3|0;if((k|0)!=0){s=e+(q+ -1)|0;p=0;r=n;while(1){a[s]=a[f+((d[r]|0)*3|0)+2|0]|0;a[s+ -1|0]=a[f+((d[r]|0)*3|0)+1|0]|0;a[s+ -2|0]=a[f+((d[r]|0)*3|0)|0]|0;p=p+1|0;if((p|0)==(k|0)){break}else{s=s+ -3|0;r=r+ -1|0}}}a[m]=8;a[b+11|0]=24;c[b+4>>2]=q;a[l]=2;a[b+10|0]=3;i=j;return}q=k<<2;if((k|0)!=0){r=e+(q+ -1)|0;e=0;s=n;while(1){n=d[s]|0;if((n|0)<(h|0)){u=a[g+n|0]|0}else{u=-1}a[r]=u;a[r+ -1|0]=a[f+((d[s]|0)*3|0)+2|0]|0;a[r+ -2|0]=a[f+((d[s]|0)*3|0)+1|0]|0;a[r+ -3|0]=a[f+((d[s]|0)*3|0)|0]|0;e=e+1|0;if((e|0)==(k|0)){break}else{r=r+ -4|0;s=s+ -1|0}}}a[m]=8;a[b+11|0]=32;c[b+4>>2]=q;a[l]=6;a[b+10|0]=4;i=j;return}function tr(e,f,g){e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;h=i;j=c[e>>2]|0;k=e+8|0;l=a[k]|0;if(l<<24>>24==2){if((g|0)==0){i=h;return}m=e+9|0;n=a[m]|0;if(n<<24>>24==8){if((j|0)!=0){o=b[g+2>>1]&255;p=b[g+4>>1]&255;q=b[g+6>>1]&255;r=f+((j<<2)+ -1)|0;s=0;t=f+((c[e+4>>2]|0)+ -1)|0;while(1){u=t+ -2|0;v=t+ -1|0;if((a[u]|0)==o<<24>>24){if((a[v]|0)==p<<24>>24){if((a[t]|0)==q<<24>>24){w=0}else{x=39}}else{x=39}}else{x=39}if((x|0)==39){x=0;w=-1}a[r]=w;a[r+ -1|0]=a[t]|0;a[r+ -2|0]=a[v]|0;a[r+ -3|0]=a[u]|0;s=s+1|0;if((s|0)==(j|0)){break}else{r=r+ -4|0;t=t+ -3|0}}}}else if(n<<24>>24==16){n=b[g+2>>1]|0;t=(n&65535)>>>8&65535;r=b[g+4>>1]|0;s=(r&65535)>>>8&65535;w=b[g+6>>1]|0;q=(w&65535)>>>8&65535;if((j|0)!=0){p=n&255;n=r&255;r=w&255;w=f+((j<<3)+ -1)|0;o=0;u=f+((c[e+4>>2]|0)+ -1)|0;while(1){v=u+ -5|0;y=u+ -4|0;if((d[v]|0)==(t|0)){if((a[y]|0)==p<<24>>24){z=u+ -3|0;if((d[z]|0)==(s|0)){A=u+ -2|0;if((a[A]|0)==n<<24>>24){B=u+ -1|0;if((d[B]|0)==(q|0)){if((a[u]|0)==r<<24>>24){a[w]=0;a[w+ -1|0]=0;C=B;D=A;E=z}else{x=50}}else{x=50}}else{x=50}}else{x=50}}else{x=50}}else{x=50}if((x|0)==50){x=0;a[w]=-1;a[w+ -1|0]=-1;C=u+ -1|0;D=u+ -2|0;E=u+ -3|0}a[w+ -2|0]=a[u]|0;a[w+ -3|0]=a[C]|0;a[w+ -4|0]=a[D]|0;a[w+ -5|0]=a[E]|0;a[w+ -6|0]=a[y]|0;a[w+ -7|0]=a[v]|0;o=o+1|0;if((o|0)==(j|0)){break}else{w=w+ -8|0;u=u+ -6|0}}}}a[k]=6;a[e+10|0]=4;u=d[m]<<2;a[e+11|0]=u;m=u&252;if(m>>>0>7){F=ea(m>>>3,j)|0}else{F=((ea(m,j)|0)+7|0)>>>3}c[e+4>>2]=F;i=h;return}else if(l<<24>>24==0){l=(g|0)!=0;if(l){G=b[g+8>>1]|0}else{G=0}g=e+9|0;F=a[g]|0;if((F&255)<8){m=F&255;if((m|0)==4){u=(G&15)*17&65535;w=j+ -1|0;if((j|0)==0){H=u}else{o=f+w|0;E=0;D=j<<2&4;C=f+(w>>>1)|0;while(1){w=(d[C]|0)>>>D&15;a[o]=w<<4|w;w=(D|0)==4;r=E+1|0;if((r|0)==(j|0)){H=u;break}else{o=o+ -1|0;E=r;D=w?0:4;C=w?C+ -1|0:C}}}}else if((m|0)==2){C=(G&3)*85&65535;D=j+ -1|0;if((j|0)==0){H=C}else{E=f+D|0;o=0;u=(j<<1)+6&6^6;w=f+(D>>>2)|0;while(1){D=(d[w]|0)>>>u&3;a[E]=D<<2|D|D<<4|D<<6;D=(u|0)==6;r=o+1|0;if((r|0)==(j|0)){H=C;break}else{E=E+ -1|0;o=r;u=D?0:u+2|0;w=D?w+ -1|0:w}}}}else if((m|0)==1){m=0-(G&1)&255;w=j+ -1|0;if((j|0)==0){H=m}else{u=f+w|0;o=0;E=j+7&7^7;C=f+(w>>>3)|0;while(1){a[u]=((d[C]&1<<E|0)!=0)<<31>>31;w=(E|0)==7;D=o+1|0;if((D|0)==(j|0)){H=m;break}else{u=u+ -1|0;o=D;E=w?0:E+1|0;C=w?C+ -1|0:C}}}}else{H=G}a[g]=8;a[e+11|0]=8;c[e+4>>2]=j;I=8;J=H}else{I=F;J=G}if(!l){i=h;return}if(I<<24>>24==8){if((j|0)!=0){l=J&255;G=f+((j<<1)+ -1)|0;F=0;H=f+(j+ -1)|0;while(1){a[G]=((a[H]|0)!=l<<24>>24)<<31>>31;a[G+ -1|0]=a[H]|0;F=F+1|0;if((F|0)==(j|0)){break}else{G=G+ -2|0;H=H+ -1|0}}}}else if(I<<24>>24==16){I=(J&65535)>>>8&65535;H=c[e+4>>2]|0;if((j|0)!=0){G=J&255;J=f+((H<<1)+ -1)|0;F=0;l=f+(H+ -1)|0;while(1){H=l+ -1|0;if((d[H]|0)==(I|0)){if((a[l]|0)==G<<24>>24){a[J]=0;a[J+ -1|0]=0}else{x=26}}else{x=26}if((x|0)==26){x=0;a[J]=-1;a[J+ -1|0]=-1}a[J+ -2|0]=a[l]|0;a[J+ -3|0]=a[H]|0;F=F+1|0;if((F|0)==(j|0)){break}else{J=J+ -4|0;l=l+ -2|0}}}}a[k]=4;a[e+10|0]=2;k=d[g]<<1;a[e+11|0]=k;g=k&254;if(g>>>0>7){K=ea(g>>>3,j)|0}else{K=((ea(g,j)|0)+7|0)>>>3}c[e+4>>2]=K;i=h;return}else{i=h;return}}



function et(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0;b=i;d=a+4|0;e=Qh[c[c[d>>2]>>2]&15](a,1,84)|0;c[a+412>>2]=e;c[e>>2]=63;f=a+36|0;if((c[f>>2]|0)<=0){i=b;return}g=e+44|0;e=0;h=c[a+196>>2]|0;while(1){j=Qh[c[c[d>>2]>>2]&15](a,1,256)|0;c[h+80>>2]=j;vu(j|0,0,256)|0;c[g+(e<<2)>>2]=-1;e=e+1|0;if((e|0)>=(c[f>>2]|0)){break}else{h=h+84|0}}i=b;return}function ft(d){d=d|0;var f=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0,z=0;f=i;j=c[d+412>>2]|0;k=d+36|0;if((c[k>>2]|0)<=0){i=f;return}l=j+44|0;m=d+68|0;n=0;o=c[d+196>>2]|0;p=0;q=0;while(1){r=o+36|0;s=c[r>>2]|0;do{if((s|0)==2){t=0;u=9}else if((s|0)==4){t=0;u=10}else if((s|0)==8){v=c[m>>2]|0;if((v|0)==0){t=0;u=11;break}else if((v|0)==2){t=v;u=13;break}else if((v|0)==1){t=v;u=12;break}else{v=c[d>>2]|0;c[v+20>>2]=48;Jh[c[v>>2]&127](d);t=p;u=q;break}}else if((s|0)==1){t=0;u=8}else{v=c[d>>2]|0;c[v+20>>2]=7;c[v+24>>2]=c[r>>2];Jh[c[v>>2]&127](d);t=p;u=q}}while(0);c[j+(n<<2)+4>>2]=u;do{if((a[o+48|0]|0)!=0){r=l+(n<<2)|0;if((c[r>>2]|0)!=(t|0)){s=c[o+76>>2]|0;if((s|0)!=0){c[r>>2]=t;if((t|0)==1){r=c[o+80>>2]|0;v=0;do{c[r+(v<<2)>>2]=(ea(b[66832+(v<<1)>>1]|0,e[s+(v<<1)>>1]|0)|0)+2048>>12;v=v+1|0}while((v|0)!=64)}else if((t|0)==2){v=c[o+80>>2]|0;r=0;w=0;while(1){x=+h[66960+(w<<3)>>3];g[v+(r<<2)>>2]=+(e[s+(r<<1)>>1]|0)*x;y=r|1;g[v+(y<<2)>>2]=+(e[s+(y<<1)>>1]|0)*x*1.387039845;z=y+1|0;g[v+(z<<2)>>2]=+(e[s+(z<<1)>>1]|0)*x*1.306562965;z=r|3;g[v+(z<<2)>>2]=+(e[s+(z<<1)>>1]|0)*x*1.175875602;y=z+1|0;g[v+(y<<2)>>2]=+(e[s+(y<<1)>>1]|0)*x;y=z+2|0;g[v+(y<<2)>>2]=+(e[s+(y<<1)>>1]|0)*x*.785694958;y=z+3|0;g[v+(y<<2)>>2]=+(e[s+(y<<1)>>1]|0)*x*.5411961;y=r|7;g[v+(y<<2)>>2]=+(e[s+(y<<1)>>1]|0)*x*.275899379;w=w+1|0;if((w|0)==8){break}else{r=r+8|0}}}else if((t|0)==0){r=c[o+80>>2]|0;w=0;do{c[r+(w<<2)>>2]=e[s+(w<<1)>>1]|0;w=w+1|0}while((w|0)!=64)}else{w=c[d>>2]|0;c[w+20>>2]=48;Jh[c[w>>2]&127](d);break}}}}}while(0);n=n+1|0;if((n|0)>=(c[k>>2]|0)){break}else{o=o+84|0;p=t;q=u}}i=f;return}function gt(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;h=i;i=i+1296|0;j=h+1028|0;k=h;if(f>>>0>3){l=c[b>>2]|0;c[l+20>>2]=50;c[l+24>>2]=f;Jh[c[l>>2]&127](b)}l=e<<24>>24==0;if(l){m=b+(f<<2)+176|0}else{m=b+(f<<2)+160|0}e=c[m>>2]|0;if((e|0)==0){m=c[b>>2]|0;c[m+20>>2]=50;c[m+24>>2]=f;Jh[c[m>>2]&127](b)}m=c[g>>2]|0;if((m|0)==0){f=Qh[c[c[b+4>>2]>>2]&15](b,1,1424)|0;c[g>>2]=f;n=b;o=f}else{n=b;o=m}c[o+140>>2]=e;m=1;f=0;while(1){g=a[e+m|0]|0;p=g&255;q=p+f|0;if((q|0)>256){r=c[b>>2]|0;c[r+20>>2]=8;Jh[c[r>>2]&127](n)}if(g<<24>>24==0){s=f}else{vu(j+f|0,m&255|0,p|0)|0;s=q}m=m+1|0;if((m|0)==17){break}else{f=s}}a[j+s|0]=0;f=a[j]|0;if(f<<24>>24==0){t=1;u=0}else{m=f;q=0;p=0;g=f<<24>>24;while(1){if((m<<24>>24|0)==(g|0)){f=q;r=p;while(1){v=r+1|0;c[k+(r<<2)>>2]=f;w=f+1|0;x=a[j+v|0]|0;if((x<<24>>24|0)==(g|0)){f=w;r=v}else{y=x;z=w;A=v;break}}}else{y=m;z=q;A=p}if((z|0)>=(1<<g|0)){r=c[b>>2]|0;c[r+20>>2]=8;Jh[c[r>>2]&127](n)}if(y<<24>>24==0){t=1;u=0;break}else{m=y;q=z<<1;p=A;g=g+1|0}}}while(1){g=e+t|0;if((a[g]|0)==0){c[o+(t<<2)>>2]=-1;B=u}else{c[o+(t<<2)+72>>2]=u-(c[k+(u<<2)>>2]|0);A=(d[g]|0)+u|0;c[o+(t<<2)>>2]=c[k+(A+ -1<<2)>>2];B=A}t=t+1|0;if((t|0)==17){break}else{u=B}}c[o+68>>2]=1048575;vu(o+144|0,0,1024)|0;B=1;u=0;while(1){t=e+B|0;A=a[t]|0;a:do{if(A<<24>>24==0){C=u}else{g=8-B|0;p=1<<g;if((p|0)>0){D=1;E=u}else{z=1;q=u;while(1){y=q+1|0;if((z|0)<(A&255|0)){z=z+1|0;q=y}else{C=y;break a}}}while(1){q=e+E+17|0;z=p;y=c[k+(E<<2)>>2]<<g;while(1){c[o+(y<<2)+144>>2]=B;a[o+y+1168|0]=a[q]|0;z=z+ -1|0;if((z|0)<=0){break}else{y=y+1|0}}y=E+1|0;if((D|0)<(d[t]|0)){D=D+1|0;E=y}else{C=y;break}}}}while(0);B=B+1|0;if((B|0)==9){break}else{u=C}}if((s|0)>0&(l^1)){F=0}else{i=h;return}do{if((d[e+F+17|0]|0)>15){l=c[b>>2]|0;c[l+20>>2]=8;Jh[c[l>>2]&127](n)}F=F+1|0}while((F|0)!=(s|0));i=h;return}function ht(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;g=i;h=c[b>>2]|0;j=b+4|0;k=c[j>>2]|0;l=c[b+16>>2]|0;m=l+380|0;a:do{if((c[m>>2]|0)==0){if((e|0)<25){n=l+24|0;o=d;p=e;q=k;r=h;b:while(1){if((q|0)==0){if((Mh[c[(c[n>>2]|0)+12>>2]&31](l)|0)<<24>>24==0){s=0;t=19;break}u=c[n>>2]|0;v=c[u+4>>2]|0;w=c[u>>2]|0}else{v=q;w=r}u=v+ -1|0;x=w+1|0;y=a[w]|0;z=y&255;if(y<<24>>24==-1){y=u;A=x;while(1){if((y|0)==0){if((Mh[c[(c[n>>2]|0)+12>>2]&31](l)|0)<<24>>24==0){s=0;t=19;break b}B=c[n>>2]|0;C=c[B+4>>2]|0;D=c[B>>2]|0}else{C=y;D=A}E=C+ -1|0;F=D+1|0;G=a[D]|0;if(G<<24>>24==0){H=E;I=255;J=F;break}else if(G<<24>>24==-1){y=E;A=F}else{t=12;break b}}}else{H=u;I=z;J=x}A=I|o<<8;y=p+8|0;if((y|0)<25){o=A;p=y;q=H;r=J}else{K=A;L=y;M=H;N=J;break a}}if((t|0)==12){c[m>>2]=G&255;O=o;P=p;Q=E;R=F;t=14;break}else if((t|0)==19){i=g;return s|0}}else{K=d;L=e;M=k;N=h}}else{O=d;P=e;Q=k;R=h;t=14}}while(0);if((t|0)==14){if((P|0)<(f|0)){f=l+408|0;if((a[(c[f>>2]|0)+8|0]|0)==0){t=c[l>>2]|0;c[t+20>>2]=117;Kh[c[t+4>>2]&63](l,-1);a[(c[f>>2]|0)+8|0]=1}K=O<<25-P;L=25;M=Q;N=R}else{K=O;L=P;M=Q;N=R}}c[b>>2]=N;c[j>>2]=M;c[b+8>>2]=K;c[b+12>>2]=L;s=1;i=g;return s|0}function it(a,b,e,f,g){a=a|0;b=b|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;h=i;do{if((e|0)<(g|0)){if((ht(a,b,e,g)|0)<<24>>24==0){j=-1;i=h;return j|0}else{k=c[a+8>>2]|0;l=c[a+12>>2]|0;break}}else{k=b;l=e}}while(0);e=l-g|0;l=k>>e&(1<<g)+ -1;b=a+8|0;m=a+12|0;a:do{if((l|0)>(c[f+(g<<2)>>2]|0)){n=k;o=e;p=l;q=g;while(1){r=p<<1;if((o|0)<1){if((ht(a,n,o,1)|0)<<24>>24==0){j=-1;break}s=c[b>>2]|0;t=c[m>>2]|0}else{s=n;t=o}u=t+ -1|0;v=s>>>u&1|r;r=q+1|0;if((v|0)>(c[f+(r<<2)>>2]|0)){n=s;o=u;p=v;q=r}else{w=s;x=u;y=v;z=r;break a}}i=h;return j|0}else{w=k;x=e;y=l;z=g}}while(0);c[b>>2]=w;c[m>>2]=x;if((z|0)>16){x=c[a+16>>2]|0;a=c[x>>2]|0;c[a+20>>2]=118;Kh[c[a+4>>2]&63](x,-1);j=0;i=h;return j|0}else{j=d[(c[f+140>>2]|0)+((c[f+(z<<2)+72>>2]|0)+y)+17|0]|0;i=h;return j|0}return 0}function jt(a){a=a|0;var b=0,d=0;b=i;d=Qh[c[c[a+4>>2]>>2]&15](a,1,172)|0;c[a+408>>2]=d;c[d>>2]=64;c[d+4>>2]=10;c[d+56>>2]=0;c[d+40>>2]=0;c[d+60>>2]=0;c[d+44>>2]=0;c[d+64>>2]=0;c[d+48>>2]=0;c[d+68>>2]=0;c[d+52>>2]=0;i=b;return}function kt(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;d=i;e=c[b+408>>2]|0;if((c[b+364>>2]|0)==0){if((c[b+368>>2]|0)==63){if((c[b+372>>2]|0)==0){if((c[b+376>>2]|0)!=0){f=5}}else{f=5}}else{f=5}}else{f=5}if((f|0)==5){f=c[b>>2]|0;c[f+20>>2]=122;Kh[c[f+4>>2]&63](b,-1)}f=b+292|0;if((c[f>>2]|0)>0){g=e+40|0;h=e+56|0;j=e+20|0;k=0;do{l=c[b+(k<<2)+296>>2]|0;m=c[l+20>>2]|0;n=c[l+24>>2]|0;gt(b,1,m,g+(m<<2)|0);gt(b,0,n,h+(n<<2)|0);c[j+(k<<2)>>2]=0;k=k+1|0}while((k|0)<(c[f>>2]|0))}f=b+320|0;if((c[f>>2]|0)<=0){o=e+16|0;c[o>>2]=0;p=e+12|0;c[p>>2]=0;q=e+8|0;a[q]=0;r=b+252|0;s=c[r>>2]|0;t=e+36|0;u=s;c[t>>2]=u;i=d;return}k=e+40|0;j=e+72|0;h=e+56|0;g=e+112|0;n=e+152|0;m=0;do{l=c[b+(c[b+(m<<2)+324>>2]<<2)+296>>2]|0;c[j+(m<<2)>>2]=c[k+(c[l+20>>2]<<2)>>2];c[g+(m<<2)>>2]=c[h+(c[l+24>>2]<<2)>>2];if((a[l+48|0]|0)==0){a[e+m+162|0]=0;a[n+m|0]=0}else{a[n+m|0]=1;a[e+m+162|0]=(c[l+36>>2]|0)>1|0}m=m+1|0}while((m|0)<(c[f>>2]|0));o=e+16|0;c[o>>2]=0;p=e+12|0;c[p>>2]=0;q=e+8|0;a[q]=0;r=b+252|0;s=c[r>>2]|0;t=e+36|0;u=s;c[t>>2]=u;i=d;return}function lt(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0;g=i;i=i+48|0;h=g+16|0;j=g;k=c[e+408>>2]|0;l=e+252|0;if((c[l>>2]|0)!=0){if((c[k+36>>2]|0)==0){m=k+16|0;n=c[e+404>>2]|0;o=n+20|0;c[o>>2]=(c[o>>2]|0)+((c[m>>2]|0)/8|0);c[m>>2]=0;if((Mh[c[n+8>>2]&31](e)|0)<<24>>24==0){p=0;i=g;return p|0}n=e+292|0;if((c[n>>2]|0)>0){m=k+20|0;o=0;do{c[m+(o<<2)>>2]=0;o=o+1|0}while((o|0)<(c[n>>2]|0))}c[k+36>>2]=c[l>>2];if((c[e+380>>2]|0)==0){a[k+8|0]=0}}}if((a[k+8|0]|0)==0){c[h+16>>2]=e;l=e+24|0;n=c[l>>2]|0;o=c[n>>2]|0;c[h>>2]=o;m=c[n+4>>2]|0;q=h+4|0;c[q>>2]=m;r=k+12|0;s=c[r>>2]|0;t=k+16|0;u=c[t>>2]|0;v=k+20|0;c[j+0>>2]=c[v+0>>2];c[j+4>>2]=c[v+4>>2];c[j+8>>2]=c[v+8>>2];c[j+12>>2]=c[v+12>>2];w=e+320|0;do{if((c[w>>2]|0)>0){x=k+72|0;y=k+112|0;z=h+8|0;A=h+12|0;B=k+152|0;C=u;D=0;E=s;a:while(1){F=c[f+(D<<2)>>2]|0;G=c[x+(D<<2)>>2]|0;H=c[y+(D<<2)>>2]|0;if((C|0)<8){if((ht(h,E,C,0)|0)<<24>>24==0){p=0;I=63;break}J=c[z>>2]|0;K=c[A>>2]|0;if((K|0)<8){L=K;M=J;N=1;I=17}else{O=K;P=J;I=15}}else{O=C;P=E;I=15}if((I|0)==15){I=0;J=P>>O+ -8&255;K=c[G+(J<<2)+144>>2]|0;if((K|0)==0){L=O;M=P;N=9;I=17}else{Q=O-K|0;R=P;S=d[G+J+1168|0]|0}}if((I|0)==17){I=0;J=it(h,M,L,G,N)|0;if((J|0)<0){p=0;I=63;break}Q=c[A>>2]|0;R=c[z>>2]|0;S=J}if((S|0)==0){T=Q;U=R;V=0}else{if((Q|0)<(S|0)){if((ht(h,R,Q,S)|0)<<24>>24==0){p=0;I=63;break}W=c[A>>2]|0;X=c[z>>2]|0}else{W=Q;X=R}J=W-S|0;G=X>>J&(1<<S)+ -1;if((G|0)<(c[67024+(S<<2)>>2]|0)){T=J;U=X;V=(c[67088+(S<<2)>>2]|0)+G|0}else{T=J;U=X;V=G}}if((a[B+D|0]|0)!=0){G=j+(c[e+(D<<2)+324>>2]<<2)|0;J=(c[G>>2]|0)+V|0;c[G>>2]=J;b[F>>1]=J}b:do{if((a[k+D+162|0]|0)==0){J=T;G=U;K=1;while(1){if((J|0)<8){if((ht(h,G,J,0)|0)<<24>>24==0){p=0;I=63;break a}Y=c[z>>2]|0;Z=c[A>>2]|0;if((Z|0)<8){_=Z;$=Y;aa=1;I=50}else{ba=Z;ca=Y;I=48}}else{ba=J;ca=G;I=48}if((I|0)==48){I=0;Y=ca>>ba+ -8&255;Z=c[H+(Y<<2)+144>>2]|0;if((Z|0)==0){_=ba;$=ca;aa=9;I=50}else{da=ba-Z|0;ea=ca;fa=d[H+Y+1168|0]|0}}if((I|0)==50){I=0;Y=it(h,$,_,H,aa)|0;if((Y|0)<0){p=0;I=63;break a}da=c[A>>2]|0;ea=c[z>>2]|0;fa=Y}Y=fa>>4;Z=fa&15;if((Z|0)==0){if((Y|0)==15){ga=15;ha=da;ia=ea}else{ja=da;ka=ea;break b}}else{if((da|0)<(Z|0)){if((ht(h,ea,da,Z)|0)<<24>>24==0){p=0;I=63;break a}la=c[A>>2]|0;ma=c[z>>2]|0}else{la=da;ma=ea}ga=Y;ha=la-Z|0;ia=ma}Z=K+1+ga|0;if((Z|0)<64){J=ha;G=ia;K=Z}else{ja=ha;ka=ia;break}}}else{K=T;G=U;J=1;while(1){if((K|0)<8){if((ht(h,G,K,0)|0)<<24>>24==0){p=0;I=63;break a}Z=c[z>>2]|0;Y=c[A>>2]|0;if((Y|0)<8){na=Y;oa=Z;pa=1;I=33}else{qa=Y;ra=Z;I=31}}else{qa=K;ra=G;I=31}if((I|0)==31){I=0;Z=ra>>qa+ -8&255;Y=c[H+(Z<<2)+144>>2]|0;if((Y|0)==0){na=qa;oa=ra;pa=9;I=33}else{sa=qa-Y|0;ta=ra;ua=d[H+Z+1168|0]|0}}if((I|0)==33){I=0;Z=it(h,oa,na,H,pa)|0;if((Z|0)<0){p=0;I=63;break a}sa=c[A>>2]|0;ta=c[z>>2]|0;ua=Z}Z=ua>>4;Y=ua&15;if((Y|0)==0){if((Z|0)!=15){ja=sa;ka=ta;break b}va=sa;wa=ta;xa=J+15|0}else{ya=Z+J|0;if((sa|0)<(Y|0)){if((ht(h,ta,sa,Y)|0)<<24>>24==0){p=0;I=63;break a}za=c[A>>2]|0;Aa=c[z>>2]|0}else{za=sa;Aa=ta}Z=za-Y|0;Ba=Aa>>Z&(1<<Y)+ -1;if((Ba|0)<(c[67024+(Y<<2)>>2]|0)){Ca=(c[67088+(Y<<2)>>2]|0)+Ba|0}else{Ca=Ba}b[F+(c[47080+(ya<<2)>>2]<<1)>>1]=Ca;va=Z;wa=Aa;xa=ya}ya=xa+1|0;if((ya|0)<64){K=va;G=wa;J=ya}else{ja=va;ka=wa;break}}}}while(0);F=D+1|0;if((F|0)<(c[w>>2]|0)){C=ja;D=F;E=ka}else{I=60;break}}if((I|0)==60){Da=c[h>>2]|0;Ea=c[l>>2]|0;Fa=c[q>>2]|0;Ga=ja;Ha=ka;break}else if((I|0)==63){i=g;return p|0}}else{Da=o;Ea=n;Fa=m;Ga=u;Ha=s}}while(0);c[Ea>>2]=Da;c[(c[l>>2]|0)+4>>2]=Fa;c[r>>2]=Ha;c[t>>2]=Ga;c[v+0>>2]=c[j+0>>2];c[v+4>>2]=c[j+4>>2];c[v+8>>2]=c[j+8>>2];c[v+12>>2]=c[j+12>>2]}j=k+36|0;c[j>>2]=(c[j>>2]|0)+ -1;p=1;i=g;return p|0}function mt(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;f=b+4|0;g=Qh[c[c[f>>2]>>2]&15](b,1,80)|0;h=b+388|0;c[h>>2]=g;c[g>>2]=15;if(!(d<<24>>24==0)){d=c[b>>2]|0;c[d+20>>2]=4;Jh[c[d>>2]&127](b)}d=b+280|0;j=c[d>>2]|0;if((a[(c[b+416>>2]|0)+8|0]|0)==0){k=c[b+36>>2]|0;l=j;m=j}else{if((j|0)<2){n=c[b>>2]|0;c[n+20>>2]=47;Jh[c[n>>2]&127](b);o=c[d>>2]|0}else{o=j}j=c[h>>2]|0;h=b+36|0;n=Qh[c[c[f>>2]>>2]&15](b,1,c[h>>2]<<3)|0;p=j+56|0;c[p>>2]=n;q=c[h>>2]|0;r=j+60|0;c[r>>2]=n+(q<<2);if((q|0)>0){n=o+4|0;o=0;j=c[b+196>>2]|0;while(1){s=ea(c[j+36>>2]|0,c[j+12>>2]|0)|0;t=(s|0)/(c[d>>2]|0)|0;s=ea(t,n)|0;u=Qh[c[c[f>>2]>>2]&15](b,1,s<<3)|0;c[(c[p>>2]|0)+(o<<2)>>2]=u+(t<<2);c[(c[r>>2]|0)+(o<<2)>>2]=u+(s+t<<2);t=o+1|0;s=c[h>>2]|0;if((t|0)<(s|0)){o=t;j=j+84|0}else{v=s;break}}}else{v=q}q=c[d>>2]|0;k=v;l=q;m=q+2|0}q=b+36|0;if((k|0)<=0){i=e;return}k=g+8|0;g=l;l=0;v=c[b+196>>2]|0;while(1){j=c[v+36>>2]|0;o=(ea(j,c[v+12>>2]|0)|0)/(g|0)|0;h=ea(c[v+28>>2]|0,j)|0;j=ea(o,m)|0;c[k+(l<<2)>>2]=_h[c[(c[f>>2]|0)+8>>2]&3](b,1,h,j)|0;j=l+1|0;if((j|0)>=(c[q>>2]|0)){break}g=c[d>>2]|0;l=j;v=v+84|0}i=e;return}function nt(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;e=i;f=b+388|0;g=c[f>>2]|0;if((d|0)==0){h=g+4|0;if((a[(c[b+416>>2]|0)+8|0]|0)==0){c[h>>2]=23}else{c[h>>2]=22;h=c[f>>2]|0;f=c[b+280>>2]|0;j=c[b+36>>2]|0;a:do{if((j|0)>0){k=h+56|0;l=h+60|0;m=h+8|0;n=f+2|0;o=f+ -2|0;p=0;q=c[b+196>>2]|0;while(1){r=(ea(c[q+36>>2]|0,c[q+12>>2]|0)|0)/(f|0)|0;s=c[(c[k>>2]|0)+(p<<2)>>2]|0;t=c[(c[l>>2]|0)+(p<<2)>>2]|0;u=c[m+(p<<2)>>2]|0;v=ea(r,n)|0;if((v|0)>0){w=0;do{x=c[u+(w<<2)>>2]|0;c[t+(w<<2)>>2]=x;c[s+(w<<2)>>2]=x;w=w+1|0}while((w|0)!=(v|0))}v=r<<1;if((r|0)>0){w=ea(r,f)|0;x=ea(r,o)|0;y=0;while(1){z=y+w|0;A=y+x|0;c[t+(A<<2)>>2]=c[u+(z<<2)>>2];c[t+(z<<2)>>2]=c[u+(A<<2)>>2];A=y+1|0;if((A|0)<(v|0)){y=A}else{B=0;break}}do{c[s+(B-r<<2)>>2]=c[s>>2];B=B+1|0}while((B|0)!=(r|0))}r=p+1|0;if((r|0)==(j|0)){break a}p=r;q=q+84|0}}}while(0);c[g+64>>2]=0;c[g+68>>2]=0;c[g+76>>2]=0}a[g+48|0]=0;c[g+52>>2]=0;i=e;return}else if((d|0)==2){c[g+4>>2]=24;i=e;return}else{g=c[b>>2]|0;c[g+20>>2]=4;Jh[c[g>>2]&127](b);i=e;return}}function ot(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;g=i;h=b+388|0;j=c[h>>2]|0;k=j+48|0;do{if((a[k]|0)==0){if((Yh[c[(c[b+392>>2]|0)+12>>2]&15](b,c[j+56+(c[j+64>>2]<<2)>>2]|0)|0)==0){i=g;return}else{a[k]=1;l=j+76|0;c[l>>2]=(c[l>>2]|0)+1;break}}}while(0);l=j+68|0;m=c[l>>2]|0;if((m|0)==0){n=j+52|0;o=9}else if((m|0)==2){p=j+52|0;q=j+72|0;Wh[c[(c[b+396>>2]|0)+4>>2]&15](b,c[j+56+(c[j+64>>2]<<2)>>2]|0,p,c[q>>2]|0,d,e,f);if((c[p>>2]|0)>>>0<(c[q>>2]|0)>>>0){i=g;return}c[l>>2]=0;if((c[e>>2]|0)>>>0<f>>>0){n=p;o=9}else{i=g;return}}else if((m|0)==1){r=j+52|0}else{i=g;return}if((o|0)==9){c[n>>2]=0;o=b+280|0;c[j+72>>2]=(c[o>>2]|0)+ -1;a:do{if((c[j+76>>2]|0)==(c[b+284>>2]|0)){m=c[h>>2]|0;p=b+36|0;if((c[p>>2]|0)>0){q=m+72|0;s=m+64|0;t=m+56|0;m=0;u=c[b+196>>2]|0;while(1){v=ea(c[u+36>>2]|0,c[u+12>>2]|0)|0;w=(v|0)/(c[o>>2]|0)|0;x=((c[u+44>>2]|0)>>>0)%(v>>>0)|0;y=(x|0)==0?v:x;if((m|0)==0){c[q>>2]=((y+ -1|0)/(w|0)|0)+1}x=c[(c[t+(c[s>>2]<<2)>>2]|0)+(m<<2)>>2]|0;v=w<<1;if((w|0)>0){w=x+(y+ -1<<2)|0;z=0;do{c[x+(z+y<<2)>>2]=c[w>>2];z=z+1|0}while((z|0)<(v|0))}v=m+1|0;if((v|0)>=(c[p>>2]|0)){break a}m=v;u=u+84|0}}}}while(0);c[l>>2]=1;r=n}n=j+64|0;o=j+72|0;Wh[c[(c[b+396>>2]|0)+4>>2]&15](b,c[j+56+(c[n>>2]<<2)>>2]|0,r,c[o>>2]|0,d,e,f);if((c[r>>2]|0)>>>0<(c[o>>2]|0)>>>0){i=g;return}b:do{if((c[j+76>>2]|0)==1){f=c[h>>2]|0;e=b+280|0;d=c[e>>2]|0;u=c[b+36>>2]|0;if((u|0)>0){m=f+56|0;p=f+60|0;f=d+1|0;s=d+2|0;t=0;q=c[b+196>>2]|0;while(1){v=(ea(c[q+36>>2]|0,c[q+12>>2]|0)|0)/(d|0)|0;z=c[(c[m>>2]|0)+(t<<2)>>2]|0;w=c[(c[p>>2]|0)+(t<<2)>>2]|0;if((v|0)>0){y=ea(v,f)|0;x=ea(v,s)|0;A=0;do{B=A+y|0;C=A-v|0;c[z+(C<<2)>>2]=c[z+(B<<2)>>2];c[w+(C<<2)>>2]=c[w+(B<<2)>>2];B=A+x|0;c[z+(B<<2)>>2]=c[z+(A<<2)>>2];c[w+(B<<2)>>2]=c[w+(A<<2)>>2];A=A+1|0}while((A|0)!=(v|0))}v=t+1|0;if((v|0)==(u|0)){D=e;break b}t=v;q=q+84|0}}else{D=e}}else{D=b+280|0}}while(0);c[n>>2]=c[n>>2]^1;a[k]=0;c[r>>2]=(c[D>>2]|0)+1;c[o>>2]=(c[D>>2]|0)+2;c[l>>2]=2;i=g;return}function pt(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;h=c[b+388>>2]|0;j=h+48|0;do{if((a[j]|0)==0){k=h+8|0;if((Yh[c[(c[b+392>>2]|0)+12>>2]&15](b,k)|0)==0){i=g;return}else{a[j]=1;l=k;break}}else{l=h+8|0}}while(0);k=c[b+280>>2]|0;m=h+52|0;Wh[c[(c[b+396>>2]|0)+4>>2]&15](b,l,m,k,d,e,f);if((c[m>>2]|0)>>>0<k>>>0){i=g;return}a[j]=0;c[m>>2]=0;i=g;return}function qt(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;Wh[c[(c[a+396>>2]|0)+4>>2]&15](a,0,0,0,b,d,e);i=f;return}function rt(d,e,f,h,j){d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0;k=i;i=i+256|0;l=k;m=c[d+288>>2]|0;d=8;n=f;f=c[e+80>>2]|0;e=l;while(1){o=b[n+16>>1]|0;p=b[n+32>>1]|0;if((o|p)<<16>>16==0){if((b[n+48>>1]|0)==0){if((b[n+64>>1]|0)==0){if((b[n+80>>1]|0)==0){if((b[n+96>>1]|0)==0){if((b[n+112>>1]|0)==0){q=+(b[n>>1]|0)*+g[f>>2];g[e>>2]=q;g[e+32>>2]=q;g[e+64>>2]=q;g[e+96>>2]=q;g[e+128>>2]=q;g[e+160>>2]=q;g[e+192>>2]=q;g[e+224>>2]=q}else{r=0;s=10}}else{r=0;s=10}}else{r=0;s=10}}else{r=0;s=10}}else{r=0;s=10}}else{r=p;s=10}if((s|0)==10){s=0;q=+(b[n>>1]|0)*+g[f>>2];t=+(r<<16>>16)*+g[f+64>>2];u=+(b[n+64>>1]|0)*+g[f+128>>2];v=+(b[n+96>>1]|0)*+g[f+192>>2];w=q+u;x=q-u;u=t+v;q=(t-v)*1.4142135381698608-u;v=w+u;t=w-u;u=x+q;w=x-q;q=+(o<<16>>16)*+g[f+32>>2];x=+(b[n+48>>1]|0)*+g[f+96>>2];y=+(b[n+80>>1]|0)*+g[f+160>>2];z=+(b[n+112>>1]|0)*+g[f+224>>2];A=x+y;B=y-x;x=q+z;y=q-z;z=A+x;q=(B+y)*1.8477590084075928;C=B*-2.613126039505005+q-z;B=(x-A)*1.4142135381698608-C;A=y*1.0823922157287598-q+B;g[e>>2]=v+z;g[e+224>>2]=v-z;g[e+32>>2]=u+C;g[e+192>>2]=u-C;g[e+64>>2]=w+B;g[e+160>>2]=w-B;g[e+128>>2]=t+A;g[e+96>>2]=t-A}d=d+ -1|0;if((d|0)<=0){break}else{n=n+2|0;f=f+4|0;e=e+4|0}}e=j+7|0;f=j+1|0;n=j+6|0;d=j+2|0;r=j+5|0;s=j+4|0;o=j+3|0;p=0;D=l;while(1){l=c[h+(p<<2)>>2]|0;A=+g[D>>2];t=+g[D+16>>2];B=A+t;w=A-t;t=+g[D+8>>2];A=+g[D+24>>2];C=t+A;u=(t-A)*1.4142135381698608-C;A=B+C;t=B-C;C=w+u;B=w-u;u=+g[D+20>>2];w=+g[D+12>>2];z=u+w;v=u-w;w=+g[D+4>>2];u=+g[D+28>>2];q=w+u;y=w-u;u=z+q;w=(v+y)*1.8477590084075928;x=v*-2.613126039505005+w-u;v=(q-z)*1.4142135381698608-x;z=y*1.0823922157287598-w+v;a[l+j|0]=a[m+(((~~(A+u)+4|0)>>>3&1023)+128)|0]|0;a[l+e|0]=a[m+(((~~(A-u)+4|0)>>>3&1023)+128)|0]|0;a[l+f|0]=a[m+(((~~(C+x)+4|0)>>>3&1023)+128)|0]|0;a[l+n|0]=a[m+(((~~(C-x)+4|0)>>>3&1023)+128)|0]|0;a[l+d|0]=a[m+(((~~(B+v)+4|0)>>>3&1023)+128)|0]|0;a[l+r|0]=a[m+(((~~(B-v)+4|0)>>>3&1023)+128)|0]|0;a[l+s|0]=a[m+(((~~(t+z)+4|0)>>>3&1023)+128)|0]|0;a[l+o|0]=a[m+(((~~(t-z)+4|0)>>>3&1023)+128)|0]|0;p=p+1|0;if((p|0)==8){break}else{D=D+32|0}}i=k;return}function st(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;j=i;i=i+256|0;k=j;l=c[d+288>>2]|0;d=8;m=f;f=c[e+80>>2]|0;e=k;while(1){n=b[m+16>>1]|0;o=b[m+32>>1]|0;if((n|o)<<16>>16==0){if((b[m+48>>1]|0)==0){if((b[m+64>>1]|0)==0){if((b[m+80>>1]|0)==0){if((b[m+96>>1]|0)==0){if((b[m+112>>1]|0)==0){p=ea(b[m>>1]|0,c[f>>2]|0)|0;c[e>>2]=p;c[e+32>>2]=p;c[e+64>>2]=p;c[e+96>>2]=p;c[e+128>>2]=p;c[e+160>>2]=p;c[e+192>>2]=p;c[e+224>>2]=p}else{q=0;r=10}}else{q=0;r=10}}else{q=0;r=10}}else{q=0;r=10}}else{q=0;r=10}}else{q=o;r=10}if((r|0)==10){r=0;o=ea(b[m>>1]|0,c[f>>2]|0)|0;p=ea(q<<16>>16,c[f+64>>2]|0)|0;s=ea(b[m+64>>1]|0,c[f+128>>2]|0)|0;t=ea(b[m+96>>1]|0,c[f+192>>2]|0)|0;u=s+o|0;v=o-s|0;s=t+p|0;o=((p-t|0)*362>>8)-s|0;t=s+u|0;p=u-s|0;s=o+v|0;u=v-o|0;o=ea(n<<16>>16,c[f+32>>2]|0)|0;n=ea(b[m+48>>1]|0,c[f+96>>2]|0)|0;v=ea(b[m+80>>1]|0,c[f+160>>2]|0)|0;w=ea(b[m+112>>1]|0,c[f+224>>2]|0)|0;x=v+n|0;y=v-n|0;n=w+o|0;v=o-w|0;w=n+x|0;o=(v+y|0)*473>>8;z=((ea(y,-669)|0)>>8)-w+o|0;y=((n-x|0)*362>>8)-z|0;x=y+((v*277>>8)-o)|0;c[e>>2]=w+t;c[e+224>>2]=t-w;c[e+32>>2]=z+s;c[e+192>>2]=s-z;c[e+64>>2]=y+u;c[e+160>>2]=u-y;c[e+128>>2]=x+p;c[e+96>>2]=p-x}d=d+ -1|0;if((d|0)<=0){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+1|0;f=h+2|0;m=h+3|0;d=h+4|0;q=h+5|0;x=h+6|0;p=h+7|0;y=0;u=k;while(1){k=c[g+(y<<2)>>2]|0;z=k+h|0;s=c[u+4>>2]|0;w=c[u+8>>2]|0;if((s|w|0)==0){if((c[u+12>>2]|0)==0){if((c[u+16>>2]|0)==0){if((c[u+20>>2]|0)==0){if((c[u+24>>2]|0)==0){if((c[u+28>>2]|0)==0){t=a[l+(((c[u>>2]|0)>>>5&1023)+128)|0]|0;a[z]=t;a[k+e|0]=t;a[k+f|0]=t;a[k+m|0]=t;a[k+d|0]=t;a[k+q|0]=t;a[k+x|0]=t;a[k+p|0]=t}else{A=0;r=19}}else{A=0;r=19}}else{A=0;r=19}}else{A=0;r=19}}else{A=0;r=19}}else{A=w;r=19}if((r|0)==19){r=0;w=c[u>>2]|0;t=c[u+16>>2]|0;o=t+w|0;v=w-t|0;t=c[u+24>>2]|0;w=t+A|0;n=((A-t|0)*362>>8)-w|0;t=w+o|0;B=o-w|0;w=n+v|0;o=v-n|0;n=c[u+20>>2]|0;v=c[u+12>>2]|0;C=v+n|0;D=n-v|0;v=c[u+28>>2]|0;n=v+s|0;E=s-v|0;v=n+C|0;s=(E+D|0)*473>>8;F=((ea(D,-669)|0)>>8)-v+s|0;D=((n-C|0)*362>>8)-F|0;C=D+((E*277>>8)-s)|0;a[z]=a[l+(((v+t|0)>>>5&1023)+128)|0]|0;a[k+p|0]=a[l+(((t-v|0)>>>5&1023)+128)|0]|0;a[k+e|0]=a[l+(((F+w|0)>>>5&1023)+128)|0]|0;a[k+x|0]=a[l+(((w-F|0)>>>5&1023)+128)|0]|0;a[k+f|0]=a[l+(((D+o|0)>>>5&1023)+128)|0]|0;a[k+q|0]=a[l+(((o-D|0)>>>5&1023)+128)|0]|0;a[k+d|0]=a[l+(((C+B|0)>>>5&1023)+128)|0]|0;a[k+m|0]=a[l+(((B-C|0)>>>5&1023)+128)|0]|0}y=y+1|0;if((y|0)==8){break}else{u=u+32|0}}i=j;return}function tt(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;j=i;i=i+256|0;k=j;l=c[d+288>>2]|0;d=8;m=f;f=c[e+80>>2]|0;e=k;while(1){n=b[m+16>>1]|0;o=b[m+32>>1]|0;if((n|o)<<16>>16==0){if((b[m+48>>1]|0)==0){if((b[m+64>>1]|0)==0){if((b[m+80>>1]|0)==0){if((b[m+96>>1]|0)==0){if((b[m+112>>1]|0)==0){p=ea(c[f>>2]<<2,b[m>>1]|0)|0;c[e>>2]=p;c[e+32>>2]=p;c[e+64>>2]=p;c[e+96>>2]=p;c[e+128>>2]=p;c[e+160>>2]=p;c[e+192>>2]=p;c[e+224>>2]=p}else{q=0;r=10}}else{q=0;r=10}}else{q=0;r=10}}else{q=0;r=10}}else{q=0;r=10}}else{q=o;r=10}if((r|0)==10){r=0;o=ea(q<<16>>16,c[f+64>>2]|0)|0;p=ea(b[m+96>>1]|0,c[f+192>>2]|0)|0;s=(p+o|0)*4433|0;t=s+(ea(p,-15137)|0)|0;p=s+(o*6270|0)|0;o=ea(b[m>>1]|0,c[f>>2]|0)|0;s=ea(b[m+64>>1]|0,c[f+128>>2]|0)|0;u=s+o<<13;v=o-s<<13;s=ea(b[m+112>>1]|0,c[f+224>>2]|0)|0;o=ea(b[m+80>>1]|0,c[f+160>>2]|0)|0;w=ea(b[m+48>>1]|0,c[f+96>>2]|0)|0;x=ea(n<<16>>16,c[f+32>>2]|0)|0;n=w+s|0;y=x+o|0;z=(y+n|0)*9633|0;A=ea(x+s|0,-7373)|0;B=ea(w+o|0,-20995)|0;C=z+(ea(n,-16069)|0)|0;n=z+(ea(y,-3196)|0)|0;y=A+(s*2446|0)+C|0;s=B+(o*16819|0)+n|0;o=B+(w*25172|0)+C|0;C=A+(x*12299|0)+n|0;n=u+p+1024|0;c[e>>2]=n+C>>11;c[e+224>>2]=n-C>>11;C=v+t+1024|0;c[e+32>>2]=C+o>>11;c[e+192>>2]=C-o>>11;o=v-t+1024|0;c[e+64>>2]=o+s>>11;c[e+160>>2]=o-s>>11;s=u-p+1024|0;c[e+96>>2]=s+y>>11;c[e+128>>2]=s-y>>11}d=d+ -1|0;if((d|0)<=0){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+1|0;f=h+2|0;m=h+3|0;d=h+4|0;q=h+5|0;y=h+6|0;s=h+7|0;p=0;u=k;while(1){k=c[g+(p<<2)>>2]|0;o=k+h|0;t=c[u+4>>2]|0;v=c[u+8>>2]|0;if((t|v|0)==0){if((c[u+12>>2]|0)==0){if((c[u+16>>2]|0)==0){if((c[u+20>>2]|0)==0){if((c[u+24>>2]|0)==0){if((c[u+28>>2]|0)==0){C=a[l+((((c[u>>2]|0)+16|0)>>>5&1023)+128)|0]|0;a[o]=C;a[k+e|0]=C;a[k+f|0]=C;a[k+m|0]=C;a[k+d|0]=C;a[k+q|0]=C;a[k+y|0]=C;a[k+s|0]=C}else{D=0;r=19}}else{D=0;r=19}}else{D=0;r=19}}else{D=0;r=19}}else{D=0;r=19}}else{D=v;r=19}if((r|0)==19){r=0;v=c[u+24>>2]|0;C=(v+D|0)*4433|0;n=C+(ea(v,-15137)|0)|0;v=C+(D*6270|0)|0;C=c[u>>2]|0;x=c[u+16>>2]|0;A=x+C<<13;w=C-x<<13;x=c[u+28>>2]|0;C=c[u+20>>2]|0;B=c[u+12>>2]|0;z=B+x|0;E=t+C|0;F=(E+z|0)*9633|0;G=ea(t+x|0,-7373)|0;H=ea(B+C|0,-20995)|0;I=F+(ea(z,-16069)|0)|0;z=F+(ea(E,-3196)|0)|0;E=G+(x*2446|0)+I|0;x=H+(C*16819|0)+z|0;C=H+(B*25172|0)+I|0;I=G+(t*12299|0)+z|0;z=A+v+131072|0;a[o]=a[l+(((z+I|0)>>>18&1023)+128)|0]|0;a[k+s|0]=a[l+(((z-I|0)>>>18&1023)+128)|0]|0;I=w+n+131072|0;a[k+e|0]=a[l+(((I+C|0)>>>18&1023)+128)|0]|0;a[k+y|0]=a[l+(((I-C|0)>>>18&1023)+128)|0]|0;C=w-n+131072|0;a[k+f|0]=a[l+(((C+x|0)>>>18&1023)+128)|0]|0;a[k+q|0]=a[l+(((C-x|0)>>>18&1023)+128)|0]|0;x=A-v+131072|0;a[k+m|0]=a[l+(((x+E|0)>>>18&1023)+128)|0]|0;a[k+d|0]=a[l+(((x-E|0)>>>18&1023)+128)|0]|0}p=p+1|0;if((p|0)==8){break}else{u=u+32|0}}i=j;return}function ut(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;j=i;i=i+128|0;k=j;l=c[d+288>>2]|0;d=8;m=f;f=c[e+80>>2]|0;e=k;while(1){if((d|0)==4){d=d+ -1|0;m=m+2|0;f=f+4|0;e=e+4|0;continue}n=b[m+16>>1]|0;o=b[m+32>>1]|0;if((n|o)<<16>>16==0){if((b[m+48>>1]|0)==0){if((b[m+80>>1]|0)==0){if((b[m+96>>1]|0)==0){if((b[m+112>>1]|0)==0){p=ea(c[f>>2]<<2,b[m>>1]|0)|0;c[e>>2]=p;c[e+32>>2]=p;c[e+64>>2]=p;c[e+96>>2]=p}else{q=0;r=11}}else{q=0;r=11}}else{q=0;r=11}}else{q=0;r=11}}else{q=o;r=11}if((r|0)==11){r=0;o=ea(c[f>>2]<<14,b[m>>1]|0)|0;p=(ea(ea(c[f+192>>2]|0,-6270)|0,b[m+96>>1]|0)|0)+(ea((c[f+64>>2]|0)*15137|0,q<<16>>16)|0)|0;s=ea(b[m+112>>1]|0,c[f+224>>2]|0)|0;t=ea(b[m+80>>1]|0,c[f+160>>2]|0)|0;u=ea(b[m+48>>1]|0,c[f+96>>2]|0)|0;v=ea(n<<16>>16,c[f+32>>2]|0)|0;n=(t*11893|0)+(ea(s,-1730)|0)+(ea(u,-17799)|0)+(v*8697|0)|0;w=(ea(t,-4926)|0)+(ea(s,-4176)|0)+(u*7373|0)+(v*20995|0)|0;v=p+o+2048|0;c[e>>2]=v+w>>12;c[e+96>>2]=v-w>>12;w=o-p+2048|0;c[e+32>>2]=w+n>>12;c[e+64>>2]=w-n>>12}d=d+ -1|0;if((d|0)<=0){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+1|0;f=h+2|0;m=h+3|0;d=0;q=k;while(1){k=c[g+(d<<2)>>2]|0;n=k+h|0;w=c[q+4>>2]|0;p=c[q+8>>2]|0;if((w|p|0)==0){if((c[q+12>>2]|0)==0){if((c[q+20>>2]|0)==0){if((c[q+24>>2]|0)==0){if((c[q+28>>2]|0)==0){o=a[l+((((c[q>>2]|0)+16|0)>>>5&1023)+128)|0]|0;a[n]=o;a[k+e|0]=o;a[k+f|0]=o;a[k+m|0]=o}else{x=0;r=19}}else{x=0;r=19}}else{x=0;r=19}}else{x=0;r=19}}else{x=p;r=19}if((r|0)==19){r=0;p=c[q>>2]<<14;o=(ea(c[q+24>>2]|0,-6270)|0)+(x*15137|0)|0;v=c[q+28>>2]|0;u=c[q+20>>2]|0;s=c[q+12>>2]|0;t=(u*11893|0)+(ea(v,-1730)|0)+(ea(s,-17799)|0)+(w*8697|0)|0;y=(ea(u,-4926)|0)+(ea(v,-4176)|0)+(s*7373|0)+(w*20995|0)|0;w=o+p+262144|0;a[n]=a[l+(((w+y|0)>>>19&1023)+128)|0]|0;a[k+m|0]=a[l+(((w-y|0)>>>19&1023)+128)|0]|0;y=p-o+262144|0;a[k+e|0]=a[l+(((y+t|0)>>>19&1023)+128)|0]|0;a[k+f|0]=a[l+(((y-t|0)>>>19&1023)+128)|0]|0}d=d+1|0;if((d|0)==4){break}else{q=q+32|0}}i=j;return}function vt(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;j=i;i=i+64|0;k=j;l=c[d+288>>2]|0;d=8;m=f;f=c[e+80>>2]|0;e=k;while(1){do{if(!((d&-3|0)==4|(d|0)==2)){n=b[m+16>>1]|0;o=b[m+48>>1]|0;if((n|o)<<16>>16==0){if((b[m+80>>1]|0)==0){if((b[m+112>>1]|0)==0){p=ea(c[f>>2]<<2,b[m>>1]|0)|0;c[e>>2]=p;c[e+32>>2]=p;break}else{q=0}}else{q=0}}else{q=o}o=ea(c[f>>2]<<15,b[m>>1]|0)|0;p=ea(ea(c[f+224>>2]|0,-5906)|0,b[m+112>>1]|0)|0;r=(ea((c[f+160>>2]|0)*6967|0,b[m+80>>1]|0)|0)+p|0;p=r+(ea(ea(c[f+96>>2]|0,-10426)|0,q<<16>>16)|0)|0;r=p+(ea((c[f+32>>2]|0)*29692|0,n<<16>>16)|0)|0;n=o|4096;c[e>>2]=n+r>>13;c[e+32>>2]=n-r>>13}}while(0);d=d+ -1|0;if((d|0)<=0){break}else{m=m+2|0;f=f+4|0;e=e+4|0}}e=h+1|0;f=c[g>>2]|0;m=f+h|0;d=c[k+4>>2]|0;q=c[k+12>>2]|0;if((d|q|0)==0){if((c[k+20>>2]|0)==0){if((c[k+28>>2]|0)==0){r=a[l+((((c[k>>2]|0)+16|0)>>>5&1023)+128)|0]|0;a[m]=r;a[f+e|0]=r}else{s=0;t=13}}else{s=0;t=13}}else{s=q;t=13}if((t|0)==13){t=ea(c[k+28>>2]|0,-5906)|0;q=((c[k+20>>2]|0)*6967|0)+t+(ea(s,-10426)|0)+(d*29692|0)|0;d=(c[k>>2]<<15)+524288|0;a[m]=a[l+(((d+q|0)>>>20&1023)+128)|0]|0;a[f+e|0]=a[l+(((d-q|0)>>>20&1023)+128)|0]|0}q=k+32|0;d=c[g+4>>2]|0;g=d+h|0;h=c[k+36>>2]|0;f=c[k+44>>2]|0;if((h|f|0)==0){if((c[k+52>>2]|0)==0){if((c[k+60>>2]|0)==0){m=a[l+((((c[q>>2]|0)+16|0)>>>5&1023)+128)|0]|0;a[g]=m;a[d+e|0]=m;i=j;return}else{u=0}}else{u=0}}else{u=f}f=ea(c[k+60>>2]|0,-5906)|0;m=((c[k+52>>2]|0)*6967|0)+f+(ea(u,-10426)|0)+(h*29692|0)|0;h=(c[q>>2]<<15)+524288|0;a[g]=a[l+(((h+m|0)>>>20&1023)+128)|0]|0;a[d+e|0]=a[l+(((h-m|0)>>>20&1023)+128)|0]|0;i=j;return}function wt(d,e,f,g,h){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0;i=a[(c[d+288>>2]|0)+((((ea(b[f>>1]|0,c[c[e+80>>2]>>2]|0)|0)+4|0)>>>3&1023)+128)|0]|0;a[(c[g>>2]|0)+h|0]=i;return}function xt(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;a=i;d=Xt(ea(c,b)|0)|0;i=a;return d|0}function yt(a,b){a=a|0;b=b|0;a=i;Yt(b);i=a;return}function zt(a,b,c){a=a|0;b=b|0;c=c|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;e=i;f=a&65535;g=a>>>16;if((b|0)==0){h=1;i=e;return h|0}if((c|0)==0){j=f;k=g}else{a=b;b=c;c=f;f=g;while(1){g=b>>>0<5552?b:5552;l=b-g|0;if((g|0)>15){m=b>>>0<5552?b+ -16|0:5536;n=m&-16;o=a;p=g;q=c;r=f;while(1){s=(d[o]|0)+q|0;t=s+(d[o+1|0]|0)|0;u=t+(d[o+2|0]|0)|0;v=u+(d[o+3|0]|0)|0;w=v+(d[o+4|0]|0)|0;x=w+(d[o+5|0]|0)|0;y=x+(d[o+6|0]|0)|0;z=y+(d[o+7|0]|0)|0;A=z+(d[o+8|0]|0)|0;B=A+(d[o+9|0]|0)|0;C=B+(d[o+10|0]|0)|0;D=C+(d[o+11|0]|0)|0;E=D+(d[o+12|0]|0)|0;F=E+(d[o+13|0]|0)|0;G=F+(d[o+14|0]|0)|0;q=G+(d[o+15|0]|0)|0;r=s+r+t+u+v+w+x+y+z+A+B+C+D+E+F+G+q|0;p=p+ -16|0;if((p|0)<=15){break}else{o=o+16|0}}H=a+(n+16)|0;I=m-n|0;J=q;K=r}else{H=a;I=b;J=c;K=f}if((I|0)==0){L=H;M=J;N=K}else{o=H;p=I;G=J;F=K;while(1){G=(d[o]|0)+G|0;F=G+F|0;p=p+ -1|0;if((p|0)==0){break}else{o=o+1|0}}L=H+I|0;M=G;N=F}o=(M>>>0)%65521|0;p=(N>>>0)%65521|0;if((b|0)==(g|0)){j=o;k=p;break}else{a=L;b=l;c=o;f=p}}}h=k<<16|j;i=e;return h|0}function At(e,f){e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0;g=i;h=c[e+28>>2]|0;j=c[e>>2]|0;k=e+4|0;l=j+((c[k>>2]|0)+ -6)|0;m=e+12|0;n=c[m>>2]|0;o=e+16|0;p=c[o>>2]|0;q=n+(p+ -258)|0;r=c[h+36>>2]|0;s=c[h+40>>2]|0;t=c[h+44>>2]|0;u=h+48|0;v=h+52|0;w=c[h+68>>2]|0;x=c[h+72>>2]|0;y=(1<<c[h+76>>2])+ -1|0;z=(1<<c[h+80>>2])+ -1|0;A=n+(p+~f)|0;f=t+ -1|0;p=(s|0)==0;B=(c[h+32>>2]|0)+ -1|0;C=B+s|0;D=s+ -1|0;E=A+ -1|0;F=A-s|0;G=c[v>>2]|0;H=c[u>>2]|0;I=j+ -1|0;j=n+ -1|0;a:while(1){if(G>>>0<15){n=I+2|0;J=G+16|0;K=((d[I+1|0]|0)<<G)+H+((d[n]|0)<<G+8)|0;L=n}else{J=G;K=H;L=I}n=K&y;M=a[w+(n<<2)|0]|0;N=b[w+(n<<2)+2>>1]|0;O=d[w+(n<<2)+1|0]|0;n=K>>>O;P=J-O|0;do{if(M<<24>>24==0){Q=n;R=P;S=N&255;T=7}else{U=M&255;V=P;W=n;O=N;while(1){if((U&16|0)!=0){break}if((U&64|0)!=0){T=54;break a}X=(W&(1<<U)+ -1)+(O&65535)|0;Y=a[w+(X<<2)|0]|0;Z=b[w+(X<<2)+2>>1]|0;_=d[w+(X<<2)+1|0]|0;$=W>>>_;aa=V-_|0;if(Y<<24>>24==0){T=6;break}else{U=Y&255;V=aa;W=$;O=Z}}if((T|0)==6){T=0;Q=$;R=aa;S=Z&255;T=7;break}Y=O&65535;_=U&15;if((_|0)==0){ba=V;ca=W;da=L;ea=Y}else{if(V>>>0<_>>>0){X=L+1|0;fa=V+8|0;ga=((d[X]|0)<<V)+W|0;ha=X}else{fa=V;ga=W;ha=L}ba=fa-_|0;ca=ga>>>_;da=ha;ea=(ga&(1<<_)+ -1)+Y|0}if(ba>>>0<15){Y=da+2|0;ia=ba+16|0;ja=((d[da+1|0]|0)<<ba)+ca+((d[Y]|0)<<ba+8)|0;ka=Y}else{ia=ba;ja=ca;ka=da}Y=ja&z;_=b[x+(Y<<2)+2>>1]|0;X=d[x+(Y<<2)+1|0]|0;la=ja>>>X;ma=ia-X|0;X=d[x+(Y<<2)|0]|0;if((X&16|0)==0){Y=X;na=la;oa=ma;pa=_;while(1){if((Y&64|0)!=0){T=51;break a}qa=(na&(1<<Y)+ -1)+(pa&65535)|0;ra=b[x+(qa<<2)+2>>1]|0;sa=d[x+(qa<<2)+1|0]|0;ta=na>>>sa;ua=oa-sa|0;sa=d[x+(qa<<2)|0]|0;if((sa&16|0)==0){Y=sa;na=ta;oa=ua;pa=ra}else{va=ta;wa=ua;xa=sa;ya=ra;break}}}else{va=la;wa=ma;xa=X;ya=_}pa=ya&65535;Y=xa&15;if(wa>>>0<Y>>>0){O=ka+1|0;ra=((d[O]|0)<<wa)+va|0;sa=wa+8|0;if(sa>>>0<Y>>>0){ua=ka+2|0;za=wa+16|0;Aa=((d[ua]|0)<<sa)+ra|0;Ba=ua}else{za=sa;Aa=ra;Ba=O}}else{za=wa;Aa=va;Ba=ka}O=(Aa&(1<<Y)+ -1)+pa|0;Ca=Aa>>>Y;Da=za-Y|0;Y=j;pa=Y-A|0;if(!(O>>>0>pa>>>0)){ra=j+(0-O)|0;sa=ea;ua=j;while(1){a[ua+1|0]=a[ra+1|0]|0;a[ua+2|0]=a[ra+2|0]|0;ta=ra+3|0;Ea=ua+3|0;a[Ea]=a[ta]|0;sa=sa+ -3|0;if(!(sa>>>0>2)){break}else{ra=ta;ua=Ea}}if((sa|0)==0){Fa=Da;Ga=Ca;Ha=Ba;Ia=Ea;break}_=ua+4|0;a[_]=a[ra+4|0]|0;if(!(sa>>>0>1)){Fa=Da;Ga=Ca;Ha=Ba;Ia=_;break}_=ua+5|0;a[_]=a[ra+5|0]|0;Fa=Da;Ga=Ca;Ha=Ba;Ia=_;break}_=O-pa|0;if(_>>>0>r>>>0){T=21;break a}do{if(p){X=t+(B-_)|0;if(_>>>0<ea>>>0){ma=ea-_|0;la=O-Y|0;ta=X;qa=_;Ja=j;do{ta=ta+1|0;Ja=Ja+1|0;a[Ja]=a[ta]|0;qa=qa+ -1|0}while((qa|0)!=0);Ka=j+(E+la+(1-O))|0;La=ma;Ma=j+(A+la)|0}else{Ka=X;La=ea;Ma=j}}else{if(!(s>>>0<_>>>0)){qa=t+(D-_)|0;if(!(_>>>0<ea>>>0)){Ka=qa;La=ea;Ma=j;break}ta=ea-_|0;Ja=O-Y|0;Na=qa;qa=_;Oa=j;do{Na=Na+1|0;Oa=Oa+1|0;a[Oa]=a[Na]|0;qa=qa+ -1|0}while((qa|0)!=0);Ka=j+(E+Ja+(1-O))|0;La=ta;Ma=j+(A+Ja)|0;break}qa=t+(C-_)|0;Na=_-s|0;if(Na>>>0<ea>>>0){Oa=ea-Na|0;X=O-Y|0;la=qa;ma=Na;Na=j;do{la=la+1|0;Na=Na+1|0;a[Na]=a[la]|0;ma=ma+ -1|0}while((ma|0)!=0);ma=j+(F+X)|0;if(s>>>0<Oa>>>0){la=Oa-s|0;Na=f;Ja=s;ta=ma;do{Na=Na+1|0;ta=ta+1|0;a[ta]=a[Na]|0;Ja=Ja+ -1|0}while((Ja|0)!=0);Ka=j+(E+X+(1-O))|0;La=la;Ma=j+(A+X)|0}else{Ka=f;La=Oa;Ma=ma}}else{Ka=qa;La=ea;Ma=j}}}while(0);if(La>>>0>2){O=Ka;Y=La;_=Ma;while(1){a[_+1|0]=a[O+1|0]|0;a[_+2|0]=a[O+2|0]|0;pa=O+3|0;ra=_+3|0;a[ra]=a[pa]|0;ua=Y+ -3|0;if(ua>>>0>2){O=pa;Y=ua;_=ra}else{Pa=pa;Qa=ua;Ra=ra;break}}}else{Pa=Ka;Qa=La;Ra=Ma}if((Qa|0)==0){Fa=Da;Ga=Ca;Ha=Ba;Ia=Ra}else{_=Ra+1|0;a[_]=a[Pa+1|0]|0;if(Qa>>>0>1){Y=Ra+2|0;a[Y]=a[Pa+2|0]|0;Fa=Da;Ga=Ca;Ha=Ba;Ia=Y}else{Fa=Da;Ga=Ca;Ha=Ba;Ia=_}}}}while(0);if((T|0)==7){T=0;N=j+1|0;a[N]=S;Fa=R;Ga=Q;Ha=L;Ia=N}if(Ha>>>0<l>>>0&Ia>>>0<q>>>0){G=Fa;H=Ga;I=Ha;j=Ia}else{Sa=Fa;Ta=Ga;Ua=Ha;Va=Ia;break}}do{if((T|0)==21){c[e+24>>2]=67152;c[h>>2]=27;Sa=Da;Ta=Ca;Ua=Ba;Va=j}else if((T|0)==51){c[e+24>>2]=67184;c[h>>2]=27;Sa=oa;Ta=na;Ua=ka;Va=j}else if((T|0)==54){if((U&32|0)==0){c[e+24>>2]=67208;c[h>>2]=27;Sa=V;Ta=W;Ua=L;Va=j;break}else{c[h>>2]=11;Sa=V;Ta=W;Ua=L;Va=j;break}}}while(0);j=Sa>>>3;L=Ua+(0-j)|0;W=Sa-(j<<3)|0;Sa=(1<<W)+ -1&Ta;c[e>>2]=Ua+(1-j);c[m>>2]=Va+1;if(L>>>0<l>>>0){Wa=l-L|0}else{Wa=l-L|0}c[k>>2]=Wa+5;if(Va>>>0<q>>>0){Xa=q-Va|0;Ya=Xa+257|0;c[o>>2]=Ya;c[u>>2]=Sa;c[v>>2]=W;i=g;return}else{Xa=q-Va|0;Ya=Xa+257|0;c[o>>2]=Ya;c[u>>2]=Sa;c[v>>2]=W;i=g;return}}function Bt(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;f=i;g=d&255;h=(e|0)==0;a:do{if((b&3|0)==0|h){j=e;k=h;l=b;m=5}else{n=d&255;o=e;p=b;while(1){if((a[p]|0)==n<<24>>24){q=o;r=p;m=6;break a}s=p+1|0;t=o+ -1|0;u=(t|0)==0;if((s&3|0)==0|u){j=t;k=u;l=s;m=5;break}else{o=t;p=s}}}}while(0);if((m|0)==5){if(k){v=0;w=l}else{q=j;r=l;m=6}}b:do{if((m|0)==6){l=d&255;if((a[r]|0)==l<<24>>24){v=q;w=r}else{j=ea(g,16843009)|0;c:do{if(q>>>0>3){k=q;b=r;while(1){e=c[b>>2]^j;if(((e&-2139062144^-2139062144)&e+ -16843009|0)!=0){x=k;y=b;break c}e=b+4|0;h=k+ -4|0;if(h>>>0>3){k=h;b=e}else{x=h;y=e;break}}}else{x=q;y=r}}while(0);if((x|0)==0){v=0;w=y}else{j=x;b=y;while(1){if((a[b]|0)==l<<24>>24){v=j;w=b;break b}k=b+1|0;e=j+ -1|0;if((e|0)==0){v=0;w=k;break}else{j=e;b=k}}}}}}while(0);i=f;return((v|0)!=0?w:0)|0}function Ct(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=c&255;c=d;while(1){d=c+ -1|0;if((c|0)==0){g=0;h=4;break}j=b+d|0;if((a[j]|0)==f<<24>>24){g=j;h=4;break}else{c=d}}if((h|0)==4){i=e;return g|0}return 0}function Dt(b,c){b=b|0;c=c|0;var d=0,e=0;d=i;e=Et(b,c)|0;i=d;return((a[e]|0)==(c&255)<<24>>24?e:0)|0}function Et(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;f=d&255;if((f|0)==0){g=b+(uu(b|0)|0)|0;i=e;return g|0}a:do{if((b&3|0)==0){h=b}else{j=d&255;k=b;while(1){l=a[k]|0;if(l<<24>>24==0){g=k;m=13;break}n=k+1|0;if(l<<24>>24==j<<24>>24){g=k;m=13;break}if((n&3|0)==0){h=n;break a}else{k=n}}if((m|0)==13){i=e;return g|0}}}while(0);m=ea(f,16843009)|0;f=c[h>>2]|0;b:do{if(((f&-2139062144^-2139062144)&f+ -16843009|0)==0){b=f;k=h;while(1){j=b^m;n=k+4|0;if(((j&-2139062144^-2139062144)&j+ -16843009|0)!=0){o=k;break b}j=c[n>>2]|0;if(((j&-2139062144^-2139062144)&j+ -16843009|0)==0){b=j;k=n}else{o=n;break}}}else{o=h}}while(0);h=d&255;d=o;while(1){o=a[d]|0;if(o<<24>>24==0|o<<24>>24==h<<24>>24){g=d;break}else{d=d+1|0}}i=e;return g|0}function Ft(a){a=a|0;var b=0,c=0,d=0,e=0;b=i;c=(uu(a|0)|0)+1|0;d=Xt(c)|0;if((d|0)==0){e=0;i=b;return e|0}tu(d|0,a|0,c|0)|0;e=d;i=b;return e|0}function Gt(a,b){a=a|0;b=b|0;var c=0,d=0;c=i;d=Ct(a,b,(uu(a|0)|0)+1|0)|0;i=c;return d|0}function Ht(b,e){b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0;f=i;i=i+1056|0;g=f+1024|0;h=f;j=a[e]|0;if(j<<24>>24==0){k=b;i=f;return k|0}l=Dt(b,j<<24>>24)|0;if((l|0)==0){k=0;i=f;return k|0}b=a[e+1|0]|0;if(b<<24>>24==0){k=l;i=f;return k|0}m=l+1|0;n=a[m]|0;if(n<<24>>24==0){k=0;i=f;return k|0}o=a[e+2|0]|0;if(o<<24>>24==0){p=b&255|(j&255)<<8;q=m;m=n;r=d[l]<<8|n&255;while(1){s=r&65535;if((s|0)==(p|0)){t=q;u=m;break}v=q+1|0;w=a[v]|0;if(w<<24>>24==0){t=v;u=0;break}else{q=v;m=w;r=w&255|s<<8}}k=u<<24>>24==0?0:t+ -1|0;i=f;return k|0}t=l+2|0;u=a[t]|0;if(u<<24>>24==0){k=0;i=f;return k|0}r=a[e+3|0]|0;if(r<<24>>24==0){m=(b&255)<<16|(j&255)<<24|(o&255)<<8;q=(u&255)<<8|(n&255)<<16|d[l]<<24;if((q|0)==(m|0)){x=t;y=0}else{p=t;t=q;while(1){q=p+1|0;s=a[q]|0;w=(s&255|t)<<8;v=s<<24>>24==0;if(v|(w|0)==(m|0)){x=q;y=v;break}else{p=q;t=w}}}k=y?0:x+ -2|0;i=f;return k|0}x=l+3|0;y=a[x]|0;if(y<<24>>24==0){k=0;i=f;return k|0}if((a[e+4|0]|0)==0){t=(b&255)<<16|(j&255)<<24|(o&255)<<8|r&255;r=(u&255)<<8|(n&255)<<16|y&255|d[l]<<24;if((r|0)==(t|0)){z=x;A=0}else{y=x;x=r;while(1){r=y+1|0;n=a[r]|0;u=n&255|x<<8;o=n<<24>>24==0;if(o|(u|0)==(t|0)){z=r;A=o;break}else{y=r;x=u}}}k=A?0:z+ -3|0;i=f;return k|0}c[g+0>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[g+24>>2]=0;c[g+28>>2]=0;z=j;j=0;while(1){if((a[l+j|0]|0)==0){k=0;B=80;break}A=z&255;x=g+(A>>>5<<2)|0;c[x>>2]=c[x>>2]|1<<(A&31);C=j+1|0;c[h+(A<<2)>>2]=C;z=a[e+C|0]|0;if(z<<24>>24==0){break}else{j=C}}if((B|0)==80){i=f;return k|0}a:do{if(C>>>0>1){z=1;A=-1;x=0;b:while(1){y=z;t=x;u=1;while(1){r=y;D=t;c:while(1){E=r;o=1;while(1){F=a[e+(o+A)|0]|0;G=a[e+E|0]|0;if(!(F<<24>>24==G<<24>>24)){break c}n=o+1|0;if((o|0)==(u|0)){break}b=n+D|0;if(b>>>0<C>>>0){E=b;o=n}else{H=A;I=u;break b}}o=D+u|0;n=o+1|0;if(n>>>0<C>>>0){r=n;D=o}else{H=A;I=u;break b}}r=E-A|0;if(!((F&255)>(G&255))){break}o=E+1|0;if(o>>>0<C>>>0){y=o;t=E;u=r}else{H=A;I=r;break b}}u=D+2|0;if(u>>>0<C>>>0){z=u;A=D;x=D+1|0}else{H=D;I=1;break}}x=1;A=-1;z=0;while(1){u=x;t=z;y=1;while(1){r=u;J=t;d:while(1){K=r;o=1;while(1){L=a[e+(o+A)|0]|0;M=a[e+K|0]|0;if(!(L<<24>>24==M<<24>>24)){break d}n=o+1|0;if((o|0)==(y|0)){break}b=n+J|0;if(b>>>0<C>>>0){K=b;o=n}else{N=H;O=A;P=I;Q=y;break a}}o=J+y|0;n=o+1|0;if(n>>>0<C>>>0){r=n;J=o}else{N=H;O=A;P=I;Q=y;break a}}r=K-A|0;if(!((L&255)<(M&255))){break}o=K+1|0;if(o>>>0<C>>>0){u=o;t=K;y=r}else{N=H;O=A;P=I;Q=r;break a}}y=J+2|0;if(y>>>0<C>>>0){x=y;A=J;z=J+1|0}else{N=H;O=J;P=I;Q=1;break}}}else{N=-1;O=-1;P=1;Q=1}}while(0);I=(O+1|0)>>>0>(N+1|0)>>>0;J=I?Q:P;P=I?O:N;N=P+1|0;if((nu(e,e+J|0,N)|0)==0){O=C-J|0;I=C|63;if((C|0)==(J|0)){R=I;S=C}else{Q=l;H=0;K=l;e:while(1){M=Q;do{if((K-M|0)>>>0<C>>>0){L=Bt(K,0,I)|0;if((L|0)==0){T=K+I|0;break}else{if((L-M|0)>>>0<C>>>0){k=0;B=80;break e}else{T=L;break}}}else{T=K}}while(0);M=d[Q+j|0]|0;if((1<<(M&31)&c[g+(M>>>5<<2)>>2]|0)==0){Q=Q+C|0;H=0;K=T;continue}L=c[h+(M<<2)>>2]|0;M=C-L|0;if((C|0)!=(L|0)){Q=Q+((H|0)!=0&M>>>0<J>>>0?O:M)|0;H=0;K=T;continue}M=N>>>0>H>>>0?N:H;L=a[e+M|0]|0;f:do{if(L<<24>>24==0){U=N}else{D=L;E=M;while(1){G=E+1|0;if(!(D<<24>>24==(a[Q+E|0]|0))){break}F=a[e+G|0]|0;if(F<<24>>24==0){U=N;break f}else{D=F;E=G}}Q=Q+(E-P)|0;H=0;K=T;continue e}}while(0);while(1){if(!(U>>>0>H>>>0)){break}M=U+ -1|0;if((a[e+M|0]|0)==(a[Q+M|0]|0)){U=M}else{break}}if((U|0)==(H|0)){k=Q;B=80;break}Q=Q+J|0;H=O;K=T}if((B|0)==80){i=f;return k|0}}}else{T=C-P+ -1|0;R=C|63;S=(P>>>0>T>>>0?P:T)+1|0}T=e+N|0;K=l;O=l;g:while(1){l=K;do{if((O-l|0)>>>0<C>>>0){H=Bt(O,0,R)|0;if((H|0)==0){V=O+R|0;break}else{if((H-l|0)>>>0<C>>>0){k=0;B=80;break g}else{V=H;break}}}else{V=O}}while(0);l=d[K+j|0]|0;if((1<<(l&31)&c[g+(l>>>5<<2)>>2]|0)==0){K=K+C|0;O=V;continue}H=c[h+(l<<2)>>2]|0;if((C|0)!=(H|0)){K=K+(C-H)|0;O=V;continue}H=a[T]|0;h:do{if(H<<24>>24==0){W=N}else{l=H;J=N;while(1){Q=J+1|0;if(!(l<<24>>24==(a[K+J|0]|0))){break}U=a[e+Q|0]|0;if(U<<24>>24==0){W=N;break h}else{l=U;J=Q}}K=K+(J-P)|0;O=V;continue g}}while(0);do{if((W|0)==0){k=K;B=80;break g}W=W+ -1|0}while((a[e+W|0]|0)==(a[K+W|0]|0));K=K+S|0;O=V}if((B|0)==80){i=f;return k|0}return 0}function It(a){a=a|0;return}function Jt(a){a=a|0;return}function Kt(a){a=a|0;return}function Lt(a){a=a|0;return}function Mt(a){a=a|0;var b=0;b=i;$t(a);i=b;return}function Nt(a){a=a|0;var b=0;b=i;$t(a);i=b;return}function Ot(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+64|0;f=e;if((a|0)==(b|0)){g=1;i=e;return g|0}if((b|0)==0){g=0;i=e;return g|0}h=Rt(b,67304,67360,0)|0;if((h|0)==0){g=0;i=e;return g|0}b=f+0|0;j=b+56|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(j|0));c[f>>2]=h;c[f+8>>2]=a;c[f+12>>2]=-1;c[f+48>>2]=1;ei[c[(c[h>>2]|0)+28>>2]&63](h,f,c[d>>2]|0,1);if((c[f+24>>2]|0)!=1){g=0;i=e;return g|0}c[d>>2]=c[f+16>>2];g=1;i=e;return g|0}function Pt(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;if((c[d+8>>2]|0)!=(b|0)){i=g;return}b=d+16|0;h=c[b>>2]|0;if((h|0)==0){c[b>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1;i=g;return}if((h|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;c[d+24>>2]=2;a[d+54|0]=1;i=g;return}e=d+24|0;if((c[e>>2]|0)!=2){i=g;return}c[e>>2]=f;i=g;return}function Qt(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;if((b|0)!=(c[d+8>>2]|0)){h=c[b+8>>2]|0;ei[c[(c[h>>2]|0)+28>>2]&63](h,d,e,f);i=g;return}h=d+16|0;b=c[h>>2]|0;if((b|0)==0){c[h>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1;i=g;return}if((b|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;c[d+24>>2]=2;a[d+54|0]=1;i=g;return}e=d+24|0;if((c[e>>2]|0)!=2){i=g;return}c[e>>2]=f;i=g;return}function Rt(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;h=i;i=i+64|0;j=h;k=c[d>>2]|0;l=d+(c[k+ -8>>2]|0)|0;m=c[k+ -4>>2]|0;c[j>>2]=f;c[j+4>>2]=d;c[j+8>>2]=e;c[j+12>>2]=g;g=j+16|0;e=j+20|0;d=j+24|0;k=j+28|0;n=j+32|0;o=j+40|0;p=(m|0)==(f|0);f=g+0|0;q=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(q|0));b[g+36>>1]=0;a[g+38|0]=0;if(p){c[j+48>>2]=1;Sh[c[(c[m>>2]|0)+20>>2]&7](m,j,l,l,1,0);r=(c[d>>2]|0)==1?l:0;i=h;return r|0}Gh[c[(c[m>>2]|0)+24>>2]&31](m,j,l,1,0);l=c[j+36>>2]|0;if((l|0)==0){if((c[o>>2]|0)!=1){r=0;i=h;return r|0}if((c[k>>2]|0)!=1){r=0;i=h;return r|0}r=(c[n>>2]|0)==1?c[e>>2]|0:0;i=h;return r|0}else if((l|0)==1){if((c[d>>2]|0)!=1){if((c[o>>2]|0)!=0){r=0;i=h;return r|0}if((c[k>>2]|0)!=1){r=0;i=h;return r|0}if((c[n>>2]|0)!=1){r=0;i=h;return r|0}}r=c[g>>2]|0;i=h;return r|0}else{r=0;i=h;return r|0}return 0}function St(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}j=d+28|0;if((c[j>>2]|0)==1){i=h;return}c[j>>2]=f;i=h;return}if((b|0)!=(c[d>>2]|0)){j=c[b+8>>2]|0;Gh[c[(c[j>>2]|0)+24>>2]&31](j,d,e,f,g);i=h;return}if((c[d+16>>2]|0)!=(e|0)){j=d+20|0;if((c[j>>2]|0)!=(e|0)){c[d+32>>2]=f;k=d+44|0;if((c[k>>2]|0)==4){i=h;return}l=d+52|0;a[l]=0;m=d+53|0;a[m]=0;n=c[b+8>>2]|0;Sh[c[(c[n>>2]|0)+20>>2]&7](n,d,e,e,1,g);if((a[m]|0)==0){o=0;p=13}else{if((a[l]|0)==0){o=1;p=13}}do{if((p|0)==13){c[j>>2]=e;l=d+40|0;c[l>>2]=(c[l>>2]|0)+1;if((c[d+36>>2]|0)==1){if((c[d+24>>2]|0)==2){a[d+54|0]=1;if(o){break}}else{p=16}}else{p=16}if((p|0)==16){if(o){break}}c[k>>2]=4;i=h;return}}while(0);c[k>>2]=3;i=h;return}}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}function Tt(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;g=i;if((c[d+8>>2]|0)==(b|0)){if((c[d+4>>2]|0)!=(e|0)){i=g;return}h=d+28|0;if((c[h>>2]|0)==1){i=g;return}c[h>>2]=f;i=g;return}if((c[d>>2]|0)!=(b|0)){i=g;return}if((c[d+16>>2]|0)!=(e|0)){b=d+20|0;if((c[b>>2]|0)!=(e|0)){c[d+32>>2]=f;c[b>>2]=e;e=d+40|0;c[e>>2]=(c[e>>2]|0)+1;if((c[d+36>>2]|0)==1){if((c[d+24>>2]|0)==2){a[d+54|0]=1}}c[d+44>>2]=4;i=g;return}}if((f|0)!=1){i=g;return}c[d+32>>2]=1;i=g;return}function Ut(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;if((b|0)!=(c[d+8>>2]|0)){k=c[b+8>>2]|0;Sh[c[(c[k>>2]|0)+20>>2]&7](k,d,e,f,g,h);i=j;return}a[d+53|0]=1;if((c[d+4>>2]|0)!=(f|0)){i=j;return}a[d+52|0]=1;f=d+16|0;h=c[f>>2]|0;if((h|0)==0){c[f>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((c[d+48>>2]|0)==1&(g|0)==1)){i=j;return}a[d+54|0]=1;i=j;return}if((h|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;a[d+54|0]=1;i=j;return}e=d+24|0;h=c[e>>2]|0;if((h|0)==2){c[e>>2]=g;l=g}else{l=h}if(!((c[d+48>>2]|0)==1&(l|0)==1)){i=j;return}a[d+54|0]=1;i=j;return}function Vt(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0;h=i;if((c[d+8>>2]|0)!=(b|0)){i=h;return}a[d+53|0]=1;if((c[d+4>>2]|0)!=(f|0)){i=h;return}a[d+52|0]=1;f=d+16|0;b=c[f>>2]|0;if((b|0)==0){c[f>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((c[d+48>>2]|0)==1&(g|0)==1)){i=h;return}a[d+54|0]=1;i=h;return}if((b|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;a[d+54|0]=1;i=h;return}e=d+24|0;b=c[e>>2]|0;if((b|0)==2){c[e>>2]=g;j=g}else{j=b}if(!((c[d+48>>2]|0)==1&(j|0)==1)){i=h;return}a[d+54|0]=1;i=h;return}function Wt(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;i=i+32|0;e=d;f=d+20|0;g=d+8|0;h=d+12|0;j=d+16|0;c[g>>2]=b;c[h>>2]=Xt((uu(c[g>>2]|0)|0)+1|0)|0;Cu(c[h>>2]|0,c[g>>2]|0)|0;c[j>>2]=Ht(c[h>>2]|0,67512)|0;if((c[j>>2]|0)!=0){a[c[j>>2]|0]=0}c[j>>2]=Ht(c[h>>2]|0,67520)|0;if((c[j>>2]|0)!=0){a[c[j>>2]|0]=0}c[j>>2]=Ht(c[h>>2]|0,67528)|0;if((c[j>>2]|0)!=0){a[c[j>>2]|0]=0}do{if((pu(c[h>>2]|0,67536)|0)!=0){if((pu(c[h>>2]|0,67576)|0)==0){c[h>>2]=67600;break}if((pu(c[h>>2]|0,67616)|0)==0){c[h>>2]=67640;break}if((pu(c[h>>2]|0,67656)|0)==0){c[h>>2]=67672;break}if((pu(c[h>>2]|0,67688)|0)==0){c[h>>2]=67704}}else{c[h>>2]=67560}}while(0);do{if((pu(c[h>>2]|0,67720)|0)!=0){if((pu(c[h>>2]|0,67736)|0)==0){c[f>>2]=11;break}if((pu(c[h>>2]|0,67752)|0)==0){c[f>>2]=17;break}if((pu(c[h>>2]|0,67768)|0)==0){c[f>>2]=18;break}if((pu(c[h>>2]|0,67784)|0)==0){c[f>>2]=19;break}if((pu(c[h>>2]|0,67800)|0)==0){c[f>>2]=20;break}if((pu(c[h>>2]|0,67816)|0)==0){c[f>>2]=21;break}if((pu(c[h>>2]|0,67840)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,67864)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,67896)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,67912)|0)==0){c[f>>2]=3;break}if((pu(c[h>>2]|0,67928)|0)==0){c[f>>2]=7;break}if((pu(c[h>>2]|0,67944)|0)==0){c[f>>2]=22;break}if((pu(c[h>>2]|0,67960)|0)==0){c[f>>2]=5;break}if((pu(c[h>>2]|0,67984)|0)==0){c[f>>2]=6;break}if((pu(c[h>>2]|0,68008)|0)==0){c[f>>2]=7;break}if((pu(c[h>>2]|0,68032)|0)==0){c[f>>2]=8;break}if((pu(c[h>>2]|0,68056)|0)==0){c[f>>2]=12;break}if((pu(c[h>>2]|0,68072)|0)==0){c[f>>2]=23;break}if((pu(c[h>>2]|0,68088)|0)==0){c[f>>2]=24;break}if((pu(c[h>>2]|0,68104)|0)==0){c[f>>2]=9;break}if((pu(c[h>>2]|0,68128)|0)==0){c[f>>2]=25;break}if((pu(c[h>>2]|0,68144)|0)==0){c[f>>2]=26;break}if((pu(c[h>>2]|0,68160)|0)==0){c[f>>2]=13;break}if((pu(c[h>>2]|0,68176)|0)==0){c[f>>2]=25;break}if((pu(c[h>>2]|0,68200)|0)==0){c[f>>2]=26;break}if((pu(c[h>>2]|0,68224)|0)==0){c[f>>2]=27;break}if((pu(c[h>>2]|0,68248)|0)==0){c[f>>2]=10;break}if((pu(c[h>>2]|0,68280)|0)==0){c[f>>2]=14;break}if((pu(c[h>>2]|0,68304)|0)==0){c[f>>2]=11;break}if((pu(c[h>>2]|0,68320)|0)==0){c[f>>2]=12;break}if((pu(c[h>>2]|0,68336)|0)==0){c[f>>2]=11;break}if((pu(c[h>>2]|0,68360)|0)==0){c[f>>2]=13;break}if((pu(c[h>>2]|0,68384)|0)==0){c[f>>2]=14;break}if((pu(c[h>>2]|0,68408)|0)==0){c[f>>2]=15;break}if((pu(c[h>>2]|0,68440)|0)==0){c[f>>2]=8;break}if((pu(c[h>>2]|0,68464)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,68480)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,68496)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,68512)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,68528)|0)==0){c[f>>2]=28;break}if((pu(c[h>>2]|0,68544)|0)==0){c[f>>2]=16;break}if((pu(c[h>>2]|0,68560)|0)==0){c[f>>2]=27;break}if((pu(c[h>>2]|0,68576)|0)==0){c[f>>2]=14;break}if((pu(c[h>>2]|0,68592)|0)==0){c[f>>2]=17;break}if((pu(c[h>>2]|0,68608)|0)==0){c[f>>2]=18;break}if((pu(c[h>>2]|0,68624)|0)==0){c[f>>2]=19;break}if((pu(c[h>>2]|0,68640)|0)==0){c[f>>2]=20;break}if((pu(c[h>>2]|0,68656)|0)==0){c[f>>2]=21;break}if((pu(c[h>>2]|0,68672)|0)==0){c[f>>2]=22;break}if((pu(c[h>>2]|0,68688)|0)==0){c[f>>2]=23;break}if((pu(c[h>>2]|0,68704)|0)==0){c[f>>2]=24;break}if((pu(c[h>>2]|0,68720)|0)==0){c[f>>2]=28;break}if((pu(c[h>>2]|0,68744)|0)==0){c[f>>2]=29;break}if((pu(c[h>>2]|0,68768)|0)==0){c[f>>2]=30;break}if((pu(c[h>>2]|0,68792)|0)==0){c[f>>2]=29;break}if((pu(c[h>>2]|0,68808)|0)==0){c[f>>2]=30;break}if((pu(c[h>>2]|0,68832)|0)==0){c[f>>2]=31;break}if((pu(c[h>>2]|0,68856)|0)==0){c[f>>2]=32;break}if((pu(c[h>>2]|0,68880)|0)==0){c[f>>2]=33;break}if((pu(c[h>>2]|0,68904)|0)==0){c[f>>2]=12;break}if((pu(c[h>>2]|0,68928)|0)==0){c[f>>2]=9;break}if((pu(c[h>>2]|0,67640)|0)==0){c[f>>2]=15;break}if((pu(c[h>>2]|0,68952)|0)==0){c[f>>2]=65;break}if((pu(c[h>>2]|0,68968)|0)==0){c[f>>2]=31;break}if((pu(c[h>>2]|0,68992)|0)==0){c[f>>2]=32;break}if((pu(c[h>>2]|0,69008)|0)==0){c[f>>2]=33;break}if((pu(c[h>>2]|0,69032)|0)==0){c[f>>2]=66;break}if((pu(c[h>>2]|0,69048)|0)==0){c[f>>2]=34;break}if((pu(c[h>>2]|0,69072)|0)==0){c[f>>2]=25;break}if((pu(c[h>>2]|0,69088)|0)==0){c[f>>2]=26;break}if((pu(c[h>>2]|0,69104)|0)==0){c[f>>2]=16;break}if((pu(c[h>>2]|0,67560)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,69120)|0)==0){c[f>>2]=67;break}if((pu(c[h>>2]|0,67672)|0)==0){c[f>>2]=34;break}if((pu(c[h>>2]|0,67704)|0)==0){c[f>>2]=35;break}if((pu(c[h>>2]|0,69136)|0)==0){c[f>>2]=35;break}if((pu(c[h>>2]|0,69168)|0)==0){c[f>>2]=68;break}if((pu(c[h>>2]|0,69184)|0)==0){c[f>>2]=36;break}if((pu(c[h>>2]|0,67600)|0)==0){c[f>>2]=69;break}if((pu(c[h>>2]|0,69208)|0)==0){c[f>>2]=70;break}if((pu(c[h>>2]|0,69232)|0)==0){c[f>>2]=17;break}if((pu(c[h>>2]|0,69248)|0)==0){c[f>>2]=27;break}if((pu(c[h>>2]|0,69272)|0)==0){c[f>>2]=36;break}if((pu(c[h>>2]|0,69296)|0)==0){c[f>>2]=37;break}if((pu(c[h>>2]|0,69320)|0)==0){c[f>>2]=38;break}if((pu(c[h>>2]|0,69344)|0)==0){c[f>>2]=37;break}if((pu(c[h>>2]|0,69376)|0)==0){c[f>>2]=15;break}if((pu(c[h>>2]|0,69400)|0)==0){c[f>>2]=38;break}if((pu(c[h>>2]|0,69440)|0)==0){c[f>>2]=18;break}if((pu(c[h>>2]|0,69456)|0)==0){c[f>>2]=71;break}if((pu(c[h>>2]|0,69472)|0)==0){c[f>>2]=28;break}if((pu(c[h>>2]|0,69496)|0)==0){c[f>>2]=39;break}if((pu(c[h>>2]|0,69512)|0)==0){c[f>>2]=39;break}if((pu(c[h>>2]|0,69528)|0)==0){c[f>>2]=40;break}if((pu(c[h>>2]|0,69544)|0)==0){c[f>>2]=3;break}if((pu(c[h>>2]|0,69568)|0)==0){c[f>>2]=72;break}if((pu(c[h>>2]|0,69592)|0)==0){c[f>>2]=40;break}if((pu(c[h>>2]|0,69608)|0)==0){c[f>>2]=41;break}if((pu(c[h>>2]|0,69632)|0)==0){c[f>>2]=29;break}if((pu(c[h>>2]|0,69648)|0)==0){c[f>>2]=42;break}if((pu(c[h>>2]|0,69664)|0)==0){c[f>>2]=73;break}if((pu(c[h>>2]|0,69688)|0)==0){c[f>>2]=41;break}if((pu(c[h>>2]|0,69712)|0)==0){c[f>>2]=42;break}if((pu(c[h>>2]|0,69736)|0)==0){c[f>>2]=74;break}if((pu(c[h>>2]|0,69760)|0)==0){c[f>>2]=75;break}if((pu(c[h>>2]|0,69776)|0)==0){c[f>>2]=5;break}if((pu(c[h>>2]|0,69792)|0)==0){c[f>>2]=76;break}if((pu(c[h>>2]|0,69808)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,69824)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,69840)|0)==0){c[f>>2]=4;break}if((pu(c[h>>2]|0,69864)|0)==0){c[f>>2]=77;break}if((pu(c[h>>2]|0,69896)|0)==0){c[f>>2]=78;break}if((pu(c[h>>2]|0,69928)|0)==0){c[f>>2]=30;break}if((pu(c[h>>2]|0,69944)|0)==0){c[f>>2]=43;break}if((pu(c[h>>2]|0,69960)|0)==0){c[f>>2]=16;break}if((pu(c[h>>2]|0,69976)|0)==0){c[f>>2]=6;break}if((pu(c[h>>2]|0,7e4)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,70016)|0)==0){c[f>>2]=43;break}if((pu(c[h>>2]|0,70040)|0)==0){c[f>>2]=44;break}if((pu(c[h>>2]|0,70064)|0)==0){c[f>>2]=17;break}if((pu(c[h>>2]|0,70088)|0)==0){c[f>>2]=7;break}if((pu(c[h>>2]|0,70104)|0)==0){c[f>>2]=8;break}if((pu(c[h>>2]|0,70112)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,70128)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,70144)|0)==0){c[f>>2]=79;break}if((pu(c[h>>2]|0,70160)|0)==0){c[f>>2]=80;break}if((pu(c[h>>2]|0,70176)|0)==0){c[f>>2]=81;break}if((pu(c[h>>2]|0,70192)|0)==0){c[f>>2]=82;break}if((pu(c[h>>2]|0,70208)|0)==0){c[f>>2]=83;break}if((pu(c[h>>2]|0,70224)|0)==0){c[f>>2]=84;break}if((pu(c[h>>2]|0,70232)|0)==0){c[f>>2]=3;break}if((pu(c[h>>2]|0,70248)|0)==0){c[f>>2]=85;break}if((pu(c[h>>2]|0,70264)|0)==0){c[f>>2]=86;break}if((pu(c[h>>2]|0,70280)|0)==0){c[f>>2]=87;break}if((pu(c[h>>2]|0,70296)|0)==0){c[f>>2]=19;break}if((pu(c[h>>2]|0,70328)|0)==0){c[f>>2]=88;break}if((pu(c[h>>2]|0,70352)|0)==0){c[f>>2]=89;break}if((pu(c[h>>2]|0,70368)|0)==0){c[f>>2]=90;break}if((pu(c[h>>2]|0,70384)|0)==0){c[f>>2]=20;break}if((pu(c[h>>2]|0,70400)|0)==0){c[f>>2]=44;break}if((pu(c[h>>2]|0,70416)|0)==0){c[f>>2]=45;break}if((pu(c[h>>2]|0,70440)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,70456)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,70472)|0)==0){c[f>>2]=46;break}if((pu(c[h>>2]|0,70496)|0)==0){c[f>>2]=47;break}if((pu(c[h>>2]|0,70504)|0)==0){c[f>>2]=3;break}if((pu(c[h>>2]|0,70520)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,70544)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,70568)|0)==0){c[f>>2]=31;break}if((pu(c[h>>2]|0,70584)|0)==0){c[f>>2]=1;break}if((pu(c[h>>2]|0,70600)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,70624)|0)==0){c[f>>2]=32;break}if((pu(c[h>>2]|0,70640)|0)==0){c[f>>2]=33;break}if((pu(c[h>>2]|0,70656)|0)==0){c[f>>2]=45;break}if((pu(c[h>>2]|0,70672)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,70688)|0)==0){c[f>>2]=46;break}if((pu(c[h>>2]|0,70704)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,70728)|0)==0){c[f>>2]=47;break}if((pu(c[h>>2]|0,70744)|0)==0){c[f>>2]=48;break}if((pu(c[h>>2]|0,70768)|0)==0){c[f>>2]=49;break}if((pu(c[h>>2]|0,70792)|0)==0){c[f>>2]=3;break}if((pu(c[h>>2]|0,70808)|0)==0){c[f>>2]=50;break}if((pu(c[h>>2]|0,70832)|0)==0){c[f>>2]=51;break}if((pu(c[h>>2]|0,70856)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,70880)|0)==0){c[f>>2]=2;break}if((pu(c[h>>2]|0,70904)|0)!=0){j=c[r>>2]|0;b=c[h>>2]|0;c[e>>2]=c[g>>2];c[e+4>>2]=b;Re(j|0,70928,e|0)|0;c[f>>2]=0;break}else{c[f>>2]=3;break}}else{c[f>>2]=16}}while(0);i=d;return c[f>>2]|0}function Xt(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0;b=i;do{if(a>>>0<245){if(a>>>0<11){d=16}else{d=a+11&-8}e=d>>>3;f=c[17742]|0;g=f>>>e;if((g&3|0)!=0){h=(g&1^1)+e|0;j=h<<1;k=71008+(j<<2)|0;l=71008+(j+2<<2)|0;j=c[l>>2]|0;m=j+8|0;n=c[m>>2]|0;do{if((k|0)==(n|0)){c[17742]=f&~(1<<h)}else{if(n>>>0<(c[70984>>2]|0)>>>0){ch()}o=n+12|0;if((c[o>>2]|0)==(j|0)){c[o>>2]=k;c[l>>2]=n;break}else{ch()}}}while(0);n=h<<3;c[j+4>>2]=n|3;l=j+(n|4)|0;c[l>>2]=c[l>>2]|1;p=m;i=b;return p|0}if(d>>>0>(c[70976>>2]|0)>>>0){if((g|0)!=0){l=2<<e;n=g<<e&(l|0-l);l=(n&0-n)+ -1|0;n=l>>>12&16;k=l>>>n;l=k>>>5&8;o=k>>>l;k=o>>>2&4;q=o>>>k;o=q>>>1&2;r=q>>>o;q=r>>>1&1;s=(l|n|k|o|q)+(r>>>q)|0;q=s<<1;r=71008+(q<<2)|0;o=71008+(q+2<<2)|0;q=c[o>>2]|0;k=q+8|0;n=c[k>>2]|0;do{if((r|0)==(n|0)){c[17742]=f&~(1<<s)}else{if(n>>>0<(c[70984>>2]|0)>>>0){ch()}l=n+12|0;if((c[l>>2]|0)==(q|0)){c[l>>2]=r;c[o>>2]=n;break}else{ch()}}}while(0);n=s<<3;o=n-d|0;c[q+4>>2]=d|3;r=q+d|0;c[q+(d|4)>>2]=o|1;c[q+n>>2]=o;n=c[70976>>2]|0;if((n|0)!=0){f=c[70988>>2]|0;e=n>>>3;n=e<<1;g=71008+(n<<2)|0;m=c[17742]|0;j=1<<e;if((m&j|0)==0){c[17742]=m|j;t=71008+(n+2<<2)|0;u=g}else{j=71008+(n+2<<2)|0;n=c[j>>2]|0;if(n>>>0<(c[70984>>2]|0)>>>0){ch()}else{t=j;u=n}}c[t>>2]=f;c[u+12>>2]=f;c[f+8>>2]=u;c[f+12>>2]=g}c[70976>>2]=o;c[70988>>2]=r;p=k;i=b;return p|0}r=c[70972>>2]|0;if((r|0)==0){v=d}else{o=(r&0-r)+ -1|0;r=o>>>12&16;g=o>>>r;o=g>>>5&8;f=g>>>o;g=f>>>2&4;n=f>>>g;f=n>>>1&2;j=n>>>f;n=j>>>1&1;m=c[71272+((o|r|g|f|n)+(j>>>n)<<2)>>2]|0;n=(c[m+4>>2]&-8)-d|0;j=m;f=m;while(1){m=c[j+16>>2]|0;if((m|0)==0){g=c[j+20>>2]|0;if((g|0)==0){break}else{w=g}}else{w=m}m=(c[w+4>>2]&-8)-d|0;g=m>>>0<n>>>0;n=g?m:n;j=w;f=g?w:f}j=c[70984>>2]|0;if(f>>>0<j>>>0){ch()}k=f+d|0;if(!(f>>>0<k>>>0)){ch()}q=c[f+24>>2]|0;s=c[f+12>>2]|0;do{if((s|0)==(f|0)){g=f+20|0;m=c[g>>2]|0;if((m|0)==0){r=f+16|0;o=c[r>>2]|0;if((o|0)==0){x=0;break}else{y=o;z=r}}else{y=m;z=g}while(1){g=y+20|0;m=c[g>>2]|0;if((m|0)!=0){y=m;z=g;continue}g=y+16|0;m=c[g>>2]|0;if((m|0)==0){break}else{y=m;z=g}}if(z>>>0<j>>>0){ch()}else{c[z>>2]=0;x=y;break}}else{g=c[f+8>>2]|0;if(g>>>0<j>>>0){ch()}m=g+12|0;if((c[m>>2]|0)!=(f|0)){ch()}r=s+8|0;if((c[r>>2]|0)==(f|0)){c[m>>2]=s;c[r>>2]=g;x=s;break}else{ch()}}}while(0);do{if((q|0)!=0){s=c[f+28>>2]|0;j=71272+(s<<2)|0;if((f|0)==(c[j>>2]|0)){c[j>>2]=x;if((x|0)==0){c[70972>>2]=c[70972>>2]&~(1<<s);break}}else{if(q>>>0<(c[70984>>2]|0)>>>0){ch()}s=q+16|0;if((c[s>>2]|0)==(f|0)){c[s>>2]=x}else{c[q+20>>2]=x}if((x|0)==0){break}}if(x>>>0<(c[70984>>2]|0)>>>0){ch()}c[x+24>>2]=q;s=c[f+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[x+16>>2]=s;c[s+24>>2]=x;break}}}while(0);s=c[f+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[x+20>>2]=s;c[s+24>>2]=x;break}}}}while(0);if(n>>>0<16){q=n+d|0;c[f+4>>2]=q|3;s=f+(q+4)|0;c[s>>2]=c[s>>2]|1}else{c[f+4>>2]=d|3;c[f+(d|4)>>2]=n|1;c[f+(n+d)>>2]=n;s=c[70976>>2]|0;if((s|0)!=0){q=c[70988>>2]|0;j=s>>>3;s=j<<1;g=71008+(s<<2)|0;r=c[17742]|0;m=1<<j;if((r&m|0)==0){c[17742]=r|m;A=71008+(s+2<<2)|0;B=g}else{m=71008+(s+2<<2)|0;s=c[m>>2]|0;if(s>>>0<(c[70984>>2]|0)>>>0){ch()}else{A=m;B=s}}c[A>>2]=q;c[B+12>>2]=q;c[q+8>>2]=B;c[q+12>>2]=g}c[70976>>2]=n;c[70988>>2]=k}p=f+8|0;i=b;return p|0}}else{v=d}}else{if(a>>>0>4294967231){v=-1}else{g=a+11|0;q=g&-8;s=c[70972>>2]|0;if((s|0)==0){v=q}else{m=0-q|0;r=g>>>8;if((r|0)==0){C=0}else{if(q>>>0>16777215){C=31}else{g=(r+1048320|0)>>>16&8;j=r<<g;r=(j+520192|0)>>>16&4;o=j<<r;j=(o+245760|0)>>>16&2;e=14-(r|g|j)+(o<<j>>>15)|0;C=q>>>(e+7|0)&1|e<<1}}e=c[71272+(C<<2)>>2]|0;a:do{if((e|0)==0){D=m;E=0;F=0}else{if((C|0)==31){G=0}else{G=25-(C>>>1)|0}j=m;o=0;g=q<<G;r=e;h=0;while(1){l=c[r+4>>2]&-8;H=l-q|0;if(H>>>0<j>>>0){if((l|0)==(q|0)){D=H;E=r;F=r;break a}else{I=H;J=r}}else{I=j;J=h}H=c[r+20>>2]|0;l=c[r+(g>>>31<<2)+16>>2]|0;K=(H|0)==0|(H|0)==(l|0)?o:H;if((l|0)==0){D=I;E=K;F=J;break}else{j=I;o=K;g=g<<1;r=l;h=J}}}}while(0);if((E|0)==0&(F|0)==0){e=2<<C;m=s&(e|0-e);if((m|0)==0){v=q;break}e=(m&0-m)+ -1|0;m=e>>>12&16;f=e>>>m;e=f>>>5&8;k=f>>>e;f=k>>>2&4;n=k>>>f;k=n>>>1&2;h=n>>>k;n=h>>>1&1;L=c[71272+((e|m|f|k|n)+(h>>>n)<<2)>>2]|0}else{L=E}if((L|0)==0){M=D;N=F}else{n=D;h=L;k=F;while(1){f=(c[h+4>>2]&-8)-q|0;m=f>>>0<n>>>0;e=m?f:n;f=m?h:k;m=c[h+16>>2]|0;if((m|0)!=0){n=e;h=m;k=f;continue}m=c[h+20>>2]|0;if((m|0)==0){M=e;N=f;break}else{n=e;h=m;k=f}}}if((N|0)==0){v=q}else{if(M>>>0<((c[70976>>2]|0)-q|0)>>>0){k=c[70984>>2]|0;if(N>>>0<k>>>0){ch()}h=N+q|0;if(!(N>>>0<h>>>0)){ch()}n=c[N+24>>2]|0;s=c[N+12>>2]|0;do{if((s|0)==(N|0)){f=N+20|0;m=c[f>>2]|0;if((m|0)==0){e=N+16|0;r=c[e>>2]|0;if((r|0)==0){O=0;break}else{P=r;Q=e}}else{P=m;Q=f}while(1){f=P+20|0;m=c[f>>2]|0;if((m|0)!=0){P=m;Q=f;continue}f=P+16|0;m=c[f>>2]|0;if((m|0)==0){break}else{P=m;Q=f}}if(Q>>>0<k>>>0){ch()}else{c[Q>>2]=0;O=P;break}}else{f=c[N+8>>2]|0;if(f>>>0<k>>>0){ch()}m=f+12|0;if((c[m>>2]|0)!=(N|0)){ch()}e=s+8|0;if((c[e>>2]|0)==(N|0)){c[m>>2]=s;c[e>>2]=f;O=s;break}else{ch()}}}while(0);do{if((n|0)!=0){s=c[N+28>>2]|0;k=71272+(s<<2)|0;if((N|0)==(c[k>>2]|0)){c[k>>2]=O;if((O|0)==0){c[70972>>2]=c[70972>>2]&~(1<<s);break}}else{if(n>>>0<(c[70984>>2]|0)>>>0){ch()}s=n+16|0;if((c[s>>2]|0)==(N|0)){c[s>>2]=O}else{c[n+20>>2]=O}if((O|0)==0){break}}if(O>>>0<(c[70984>>2]|0)>>>0){ch()}c[O+24>>2]=n;s=c[N+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[O+16>>2]=s;c[s+24>>2]=O;break}}}while(0);s=c[N+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[O+20>>2]=s;c[s+24>>2]=O;break}}}}while(0);b:do{if(M>>>0<16){n=M+q|0;c[N+4>>2]=n|3;s=N+(n+4)|0;c[s>>2]=c[s>>2]|1}else{c[N+4>>2]=q|3;c[N+(q|4)>>2]=M|1;c[N+(M+q)>>2]=M;s=M>>>3;if(M>>>0<256){n=s<<1;k=71008+(n<<2)|0;f=c[17742]|0;e=1<<s;if((f&e|0)==0){c[17742]=f|e;R=71008+(n+2<<2)|0;S=k}else{e=71008+(n+2<<2)|0;n=c[e>>2]|0;if(n>>>0<(c[70984>>2]|0)>>>0){ch()}else{R=e;S=n}}c[R>>2]=h;c[S+12>>2]=h;c[N+(q+8)>>2]=S;c[N+(q+12)>>2]=k;break}k=M>>>8;if((k|0)==0){T=0}else{if(M>>>0>16777215){T=31}else{n=(k+1048320|0)>>>16&8;e=k<<n;k=(e+520192|0)>>>16&4;f=e<<k;e=(f+245760|0)>>>16&2;s=14-(k|n|e)+(f<<e>>>15)|0;T=M>>>(s+7|0)&1|s<<1}}s=71272+(T<<2)|0;c[N+(q+28)>>2]=T;c[N+(q+20)>>2]=0;c[N+(q+16)>>2]=0;e=c[70972>>2]|0;f=1<<T;if((e&f|0)==0){c[70972>>2]=e|f;c[s>>2]=h;c[N+(q+24)>>2]=s;c[N+(q+12)>>2]=h;c[N+(q+8)>>2]=h;break}f=c[s>>2]|0;if((T|0)==31){U=0}else{U=25-(T>>>1)|0}c:do{if((c[f+4>>2]&-8|0)==(M|0)){V=f}else{s=M<<U;e=f;while(1){W=e+(s>>>31<<2)+16|0;n=c[W>>2]|0;if((n|0)==0){break}if((c[n+4>>2]&-8|0)==(M|0)){V=n;break c}else{s=s<<1;e=n}}if(W>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[W>>2]=h;c[N+(q+24)>>2]=e;c[N+(q+12)>>2]=h;c[N+(q+8)>>2]=h;break b}}}while(0);f=V+8|0;s=c[f>>2]|0;n=c[70984>>2]|0;if(V>>>0<n>>>0){ch()}if(s>>>0<n>>>0){ch()}else{c[s+12>>2]=h;c[f>>2]=h;c[N+(q+8)>>2]=s;c[N+(q+12)>>2]=V;c[N+(q+24)>>2]=0;break}}}while(0);p=N+8|0;i=b;return p|0}else{v=q}}}}}}while(0);N=c[70976>>2]|0;if(!(v>>>0>N>>>0)){V=N-v|0;W=c[70988>>2]|0;if(V>>>0>15){c[70988>>2]=W+v;c[70976>>2]=V;c[W+(v+4)>>2]=V|1;c[W+N>>2]=V;c[W+4>>2]=v|3}else{c[70976>>2]=0;c[70988>>2]=0;c[W+4>>2]=N|3;V=W+(N+4)|0;c[V>>2]=c[V>>2]|1}p=W+8|0;i=b;return p|0}W=c[70980>>2]|0;if(v>>>0<W>>>0){V=W-v|0;c[70980>>2]=V;W=c[70992>>2]|0;c[70992>>2]=W+v;c[W+(v+4)>>2]=V|1;c[W+4>>2]=v|3;p=W+8|0;i=b;return p|0}do{if((c[17860]|0)==0){W=oe(30)|0;if((W+ -1&W|0)==0){c[71448>>2]=W;c[71444>>2]=W;c[71452>>2]=-1;c[71456>>2]=-1;c[71460>>2]=0;c[71412>>2]=0;c[17860]=(Eg(0)|0)&-16^1431655768;break}else{ch()}}}while(0);W=v+48|0;V=c[71448>>2]|0;N=v+47|0;M=V+N|0;U=0-V|0;V=M&U;if(!(V>>>0>v>>>0)){p=0;i=b;return p|0}T=c[71408>>2]|0;if((T|0)!=0){S=c[71400>>2]|0;R=S+V|0;if(R>>>0<=S>>>0|R>>>0>T>>>0){p=0;i=b;return p|0}}d:do{if((c[71412>>2]&4|0)==0){T=c[70992>>2]|0;e:do{if((T|0)==0){X=182}else{R=71416|0;while(1){S=c[R>>2]|0;if(!(S>>>0>T>>>0)){Y=R+4|0;if((S+(c[Y>>2]|0)|0)>>>0>T>>>0){break}}S=c[R+8>>2]|0;if((S|0)==0){X=182;break e}else{R=S}}if((R|0)==0){X=182}else{S=M-(c[70980>>2]|0)&U;if(S>>>0<2147483647){O=Xe(S|0)|0;P=(O|0)==((c[R>>2]|0)+(c[Y>>2]|0)|0);Z=O;_=S;$=P?O:-1;aa=P?S:0;X=191}else{ba=0}}}}while(0);do{if((X|0)==182){T=Xe(0)|0;if((T|0)==(-1|0)){ba=0}else{q=T;S=c[71444>>2]|0;P=S+ -1|0;if((P&q|0)==0){ca=V}else{ca=V-q+(P+q&0-S)|0}S=c[71400>>2]|0;q=S+ca|0;if(ca>>>0>v>>>0&ca>>>0<2147483647){P=c[71408>>2]|0;if((P|0)!=0){if(q>>>0<=S>>>0|q>>>0>P>>>0){ba=0;break}}P=Xe(ca|0)|0;q=(P|0)==(T|0);Z=P;_=ca;$=q?T:-1;aa=q?ca:0;X=191}else{ba=0}}}}while(0);f:do{if((X|0)==191){q=0-_|0;if(($|0)!=(-1|0)){da=$;ea=aa;X=202;break d}do{if((Z|0)!=(-1|0)&_>>>0<2147483647&_>>>0<W>>>0){T=c[71448>>2]|0;P=N-_+T&0-T;if(P>>>0<2147483647){if((Xe(P|0)|0)==(-1|0)){Xe(q|0)|0;ba=aa;break f}else{fa=P+_|0;break}}else{fa=_}}else{fa=_}}while(0);if((Z|0)==(-1|0)){ba=aa}else{da=Z;ea=fa;X=202;break d}}}while(0);c[71412>>2]=c[71412>>2]|4;ga=ba;X=199}else{ga=0;X=199}}while(0);if((X|0)==199){if(V>>>0<2147483647){ba=Xe(V|0)|0;V=Xe(0)|0;if((V|0)!=(-1|0)&(ba|0)!=(-1|0)&ba>>>0<V>>>0){fa=V-ba|0;V=fa>>>0>(v+40|0)>>>0;if(V){da=ba;ea=V?fa:ga;X=202}}}}if((X|0)==202){ga=(c[71400>>2]|0)+ea|0;c[71400>>2]=ga;if(ga>>>0>(c[71404>>2]|0)>>>0){c[71404>>2]=ga}ga=c[70992>>2]|0;g:do{if((ga|0)==0){fa=c[70984>>2]|0;if((fa|0)==0|da>>>0<fa>>>0){c[70984>>2]=da}c[71416>>2]=da;c[71420>>2]=ea;c[71428>>2]=0;c[71004>>2]=c[17860];c[71e3>>2]=-1;fa=0;do{V=fa<<1;ba=71008+(V<<2)|0;c[71008+(V+3<<2)>>2]=ba;c[71008+(V+2<<2)>>2]=ba;fa=fa+1|0}while((fa|0)!=32);fa=da+8|0;if((fa&7|0)==0){ha=0}else{ha=0-fa&7}fa=ea+ -40-ha|0;c[70992>>2]=da+ha;c[70980>>2]=fa;c[da+(ha+4)>>2]=fa|1;c[da+(ea+ -36)>>2]=40;c[70996>>2]=c[71456>>2]}else{fa=71416|0;while(1){ia=c[fa>>2]|0;ja=fa+4|0;ka=c[ja>>2]|0;if((da|0)==(ia+ka|0)){X=214;break}ba=c[fa+8>>2]|0;if((ba|0)==0){break}else{fa=ba}}if((X|0)==214){if((c[fa+12>>2]&8|0)==0){if(ga>>>0>=ia>>>0&ga>>>0<da>>>0){c[ja>>2]=ka+ea;ba=(c[70980>>2]|0)+ea|0;V=ga+8|0;if((V&7|0)==0){la=0}else{la=0-V&7}V=ba-la|0;c[70992>>2]=ga+la;c[70980>>2]=V;c[ga+(la+4)>>2]=V|1;c[ga+(ba+4)>>2]=40;c[70996>>2]=c[71456>>2];break}}}if(da>>>0<(c[70984>>2]|0)>>>0){c[70984>>2]=da}ba=da+ea|0;V=71416|0;while(1){if((c[V>>2]|0)==(ba|0)){X=224;break}Z=c[V+8>>2]|0;if((Z|0)==0){break}else{V=Z}}if((X|0)==224){if((c[V+12>>2]&8|0)==0){c[V>>2]=da;ba=V+4|0;c[ba>>2]=(c[ba>>2]|0)+ea;ba=da+8|0;if((ba&7|0)==0){ma=0}else{ma=0-ba&7}ba=da+(ea+8)|0;if((ba&7|0)==0){na=0}else{na=0-ba&7}ba=da+(na+ea)|0;fa=ma+v|0;Z=da+fa|0;aa=ba-(da+ma)-v|0;c[da+(ma+4)>>2]=v|3;h:do{if((ba|0)==(c[70992>>2]|0)){_=(c[70980>>2]|0)+aa|0;c[70980>>2]=_;c[70992>>2]=Z;c[da+(fa+4)>>2]=_|1}else{if((ba|0)==(c[70988>>2]|0)){_=(c[70976>>2]|0)+aa|0;c[70976>>2]=_;c[70988>>2]=Z;c[da+(fa+4)>>2]=_|1;c[da+(_+fa)>>2]=_;break}_=ea+4|0;N=c[da+(_+na)>>2]|0;if((N&3|0)==1){W=N&-8;$=N>>>3;do{if(N>>>0<256){ca=c[da+((na|8)+ea)>>2]|0;Y=c[da+(ea+12+na)>>2]|0;U=71008+($<<1<<2)|0;if((ca|0)!=(U|0)){if(ca>>>0<(c[70984>>2]|0)>>>0){ch()}if((c[ca+12>>2]|0)!=(ba|0)){ch()}}if((Y|0)==(ca|0)){c[17742]=c[17742]&~(1<<$);break}if((Y|0)==(U|0)){oa=Y+8|0}else{if(Y>>>0<(c[70984>>2]|0)>>>0){ch()}U=Y+8|0;if((c[U>>2]|0)==(ba|0)){oa=U}else{ch()}}c[ca+12>>2]=Y;c[oa>>2]=ca}else{ca=c[da+((na|24)+ea)>>2]|0;Y=c[da+(ea+12+na)>>2]|0;do{if((Y|0)==(ba|0)){U=na|16;M=da+(_+U)|0;q=c[M>>2]|0;if((q|0)==0){R=da+(U+ea)|0;U=c[R>>2]|0;if((U|0)==0){pa=0;break}else{qa=U;ra=R}}else{qa=q;ra=M}while(1){M=qa+20|0;q=c[M>>2]|0;if((q|0)!=0){qa=q;ra=M;continue}M=qa+16|0;q=c[M>>2]|0;if((q|0)==0){break}else{qa=q;ra=M}}if(ra>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[ra>>2]=0;pa=qa;break}}else{M=c[da+((na|8)+ea)>>2]|0;if(M>>>0<(c[70984>>2]|0)>>>0){ch()}q=M+12|0;if((c[q>>2]|0)!=(ba|0)){ch()}R=Y+8|0;if((c[R>>2]|0)==(ba|0)){c[q>>2]=Y;c[R>>2]=M;pa=Y;break}else{ch()}}}while(0);if((ca|0)!=0){Y=c[da+(ea+28+na)>>2]|0;e=71272+(Y<<2)|0;if((ba|0)==(c[e>>2]|0)){c[e>>2]=pa;if((pa|0)==0){c[70972>>2]=c[70972>>2]&~(1<<Y);break}}else{if(ca>>>0<(c[70984>>2]|0)>>>0){ch()}Y=ca+16|0;if((c[Y>>2]|0)==(ba|0)){c[Y>>2]=pa}else{c[ca+20>>2]=pa}if((pa|0)==0){break}}if(pa>>>0<(c[70984>>2]|0)>>>0){ch()}c[pa+24>>2]=ca;Y=na|16;e=c[da+(Y+ea)>>2]|0;do{if((e|0)!=0){if(e>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[pa+16>>2]=e;c[e+24>>2]=pa;break}}}while(0);e=c[da+(_+Y)>>2]|0;if((e|0)!=0){if(e>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[pa+20>>2]=e;c[e+24>>2]=pa;break}}}}}while(0);sa=da+((W|na)+ea)|0;ta=W+aa|0}else{sa=ba;ta=aa}_=sa+4|0;c[_>>2]=c[_>>2]&-2;c[da+(fa+4)>>2]=ta|1;c[da+(ta+fa)>>2]=ta;_=ta>>>3;if(ta>>>0<256){$=_<<1;N=71008+($<<2)|0;e=c[17742]|0;ca=1<<_;if((e&ca|0)==0){c[17742]=e|ca;ua=71008+($+2<<2)|0;va=N}else{ca=71008+($+2<<2)|0;$=c[ca>>2]|0;if($>>>0<(c[70984>>2]|0)>>>0){ch()}else{ua=ca;va=$}}c[ua>>2]=Z;c[va+12>>2]=Z;c[da+(fa+8)>>2]=va;c[da+(fa+12)>>2]=N;break}N=ta>>>8;if((N|0)==0){wa=0}else{if(ta>>>0>16777215){wa=31}else{$=(N+1048320|0)>>>16&8;ca=N<<$;N=(ca+520192|0)>>>16&4;e=ca<<N;ca=(e+245760|0)>>>16&2;_=14-(N|$|ca)+(e<<ca>>>15)|0;wa=ta>>>(_+7|0)&1|_<<1}}_=71272+(wa<<2)|0;c[da+(fa+28)>>2]=wa;c[da+(fa+20)>>2]=0;c[da+(fa+16)>>2]=0;ca=c[70972>>2]|0;e=1<<wa;if((ca&e|0)==0){c[70972>>2]=ca|e;c[_>>2]=Z;c[da+(fa+24)>>2]=_;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break}e=c[_>>2]|0;if((wa|0)==31){xa=0}else{xa=25-(wa>>>1)|0}i:do{if((c[e+4>>2]&-8|0)==(ta|0)){ya=e}else{_=ta<<xa;ca=e;while(1){za=ca+(_>>>31<<2)+16|0;$=c[za>>2]|0;if(($|0)==0){break}if((c[$+4>>2]&-8|0)==(ta|0)){ya=$;break i}else{_=_<<1;ca=$}}if(za>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[za>>2]=Z;c[da+(fa+24)>>2]=ca;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break h}}}while(0);e=ya+8|0;W=c[e>>2]|0;_=c[70984>>2]|0;if(ya>>>0<_>>>0){ch()}if(W>>>0<_>>>0){ch()}else{c[W+12>>2]=Z;c[e>>2]=Z;c[da+(fa+8)>>2]=W;c[da+(fa+12)>>2]=ya;c[da+(fa+24)>>2]=0;break}}}while(0);p=da+(ma|8)|0;i=b;return p|0}}fa=71416|0;while(1){Aa=c[fa>>2]|0;if(!(Aa>>>0>ga>>>0)){Ba=c[fa+4>>2]|0;Ca=Aa+Ba|0;if(Ca>>>0>ga>>>0){break}}fa=c[fa+8>>2]|0}fa=Aa+(Ba+ -39)|0;if((fa&7|0)==0){Da=0}else{Da=0-fa&7}fa=Aa+(Ba+ -47+Da)|0;Z=fa>>>0<(ga+16|0)>>>0?ga:fa;fa=Z+8|0;aa=da+8|0;if((aa&7|0)==0){Ea=0}else{Ea=0-aa&7}aa=ea+ -40-Ea|0;c[70992>>2]=da+Ea;c[70980>>2]=aa;c[da+(Ea+4)>>2]=aa|1;c[da+(ea+ -36)>>2]=40;c[70996>>2]=c[71456>>2];c[Z+4>>2]=27;c[fa+0>>2]=c[71416>>2];c[fa+4>>2]=c[71420>>2];c[fa+8>>2]=c[71424>>2];c[fa+12>>2]=c[71428>>2];c[71416>>2]=da;c[71420>>2]=ea;c[71428>>2]=0;c[71424>>2]=fa;fa=Z+28|0;c[fa>>2]=7;if((Z+32|0)>>>0<Ca>>>0){aa=fa;while(1){fa=aa+4|0;c[fa>>2]=7;if((aa+8|0)>>>0<Ca>>>0){aa=fa}else{break}}}if((Z|0)!=(ga|0)){aa=Z-ga|0;fa=ga+(aa+4)|0;c[fa>>2]=c[fa>>2]&-2;c[ga+4>>2]=aa|1;c[ga+aa>>2]=aa;fa=aa>>>3;if(aa>>>0<256){ba=fa<<1;V=71008+(ba<<2)|0;W=c[17742]|0;e=1<<fa;if((W&e|0)==0){c[17742]=W|e;Fa=71008+(ba+2<<2)|0;Ga=V}else{e=71008+(ba+2<<2)|0;ba=c[e>>2]|0;if(ba>>>0<(c[70984>>2]|0)>>>0){ch()}else{Fa=e;Ga=ba}}c[Fa>>2]=ga;c[Ga+12>>2]=ga;c[ga+8>>2]=Ga;c[ga+12>>2]=V;break}V=aa>>>8;if((V|0)==0){Ha=0}else{if(aa>>>0>16777215){Ha=31}else{ba=(V+1048320|0)>>>16&8;e=V<<ba;V=(e+520192|0)>>>16&4;W=e<<V;e=(W+245760|0)>>>16&2;fa=14-(V|ba|e)+(W<<e>>>15)|0;Ha=aa>>>(fa+7|0)&1|fa<<1}}fa=71272+(Ha<<2)|0;c[ga+28>>2]=Ha;c[ga+20>>2]=0;c[ga+16>>2]=0;e=c[70972>>2]|0;W=1<<Ha;if((e&W|0)==0){c[70972>>2]=e|W;c[fa>>2]=ga;c[ga+24>>2]=fa;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break}W=c[fa>>2]|0;if((Ha|0)==31){Ia=0}else{Ia=25-(Ha>>>1)|0}j:do{if((c[W+4>>2]&-8|0)==(aa|0)){Ja=W}else{fa=aa<<Ia;e=W;while(1){Ka=e+(fa>>>31<<2)+16|0;ba=c[Ka>>2]|0;if((ba|0)==0){break}if((c[ba+4>>2]&-8|0)==(aa|0)){Ja=ba;break j}else{fa=fa<<1;e=ba}}if(Ka>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[Ka>>2]=ga;c[ga+24>>2]=e;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break g}}}while(0);aa=Ja+8|0;W=c[aa>>2]|0;Z=c[70984>>2]|0;if(Ja>>>0<Z>>>0){ch()}if(W>>>0<Z>>>0){ch()}else{c[W+12>>2]=ga;c[aa>>2]=ga;c[ga+8>>2]=W;c[ga+12>>2]=Ja;c[ga+24>>2]=0;break}}}}while(0);ga=c[70980>>2]|0;if(ga>>>0>v>>>0){Ja=ga-v|0;c[70980>>2]=Ja;ga=c[70992>>2]|0;c[70992>>2]=ga+v;c[ga+(v+4)>>2]=Ja|1;c[ga+4>>2]=v|3;p=ga+8|0;i=b;return p|0}}c[(Pd()|0)>>2]=12;p=0;i=b;return p|0}function Yt(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;b=i;if((a|0)==0){i=b;return}d=a+ -8|0;e=c[70984>>2]|0;if(d>>>0<e>>>0){ch()}f=c[a+ -4>>2]|0;g=f&3;if((g|0)==1){ch()}h=f&-8;j=a+(h+ -8)|0;do{if((f&1|0)==0){k=c[d>>2]|0;if((g|0)==0){i=b;return}l=-8-k|0;m=a+l|0;n=k+h|0;if(m>>>0<e>>>0){ch()}if((m|0)==(c[70988>>2]|0)){o=a+(h+ -4)|0;if((c[o>>2]&3|0)!=3){p=m;q=n;break}c[70976>>2]=n;c[o>>2]=c[o>>2]&-2;c[a+(l+4)>>2]=n|1;c[j>>2]=n;i=b;return}o=k>>>3;if(k>>>0<256){k=c[a+(l+8)>>2]|0;r=c[a+(l+12)>>2]|0;s=71008+(o<<1<<2)|0;if((k|0)!=(s|0)){if(k>>>0<e>>>0){ch()}if((c[k+12>>2]|0)!=(m|0)){ch()}}if((r|0)==(k|0)){c[17742]=c[17742]&~(1<<o);p=m;q=n;break}if((r|0)==(s|0)){t=r+8|0}else{if(r>>>0<e>>>0){ch()}s=r+8|0;if((c[s>>2]|0)==(m|0)){t=s}else{ch()}}c[k+12>>2]=r;c[t>>2]=k;p=m;q=n;break}k=c[a+(l+24)>>2]|0;r=c[a+(l+12)>>2]|0;do{if((r|0)==(m|0)){s=a+(l+20)|0;o=c[s>>2]|0;if((o|0)==0){u=a+(l+16)|0;v=c[u>>2]|0;if((v|0)==0){w=0;break}else{x=v;y=u}}else{x=o;y=s}while(1){s=x+20|0;o=c[s>>2]|0;if((o|0)!=0){x=o;y=s;continue}s=x+16|0;o=c[s>>2]|0;if((o|0)==0){break}else{x=o;y=s}}if(y>>>0<e>>>0){ch()}else{c[y>>2]=0;w=x;break}}else{s=c[a+(l+8)>>2]|0;if(s>>>0<e>>>0){ch()}o=s+12|0;if((c[o>>2]|0)!=(m|0)){ch()}u=r+8|0;if((c[u>>2]|0)==(m|0)){c[o>>2]=r;c[u>>2]=s;w=r;break}else{ch()}}}while(0);if((k|0)==0){p=m;q=n}else{r=c[a+(l+28)>>2]|0;s=71272+(r<<2)|0;if((m|0)==(c[s>>2]|0)){c[s>>2]=w;if((w|0)==0){c[70972>>2]=c[70972>>2]&~(1<<r);p=m;q=n;break}}else{if(k>>>0<(c[70984>>2]|0)>>>0){ch()}r=k+16|0;if((c[r>>2]|0)==(m|0)){c[r>>2]=w}else{c[k+20>>2]=w}if((w|0)==0){p=m;q=n;break}}if(w>>>0<(c[70984>>2]|0)>>>0){ch()}c[w+24>>2]=k;r=c[a+(l+16)>>2]|0;do{if((r|0)!=0){if(r>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[w+16>>2]=r;c[r+24>>2]=w;break}}}while(0);r=c[a+(l+20)>>2]|0;if((r|0)==0){p=m;q=n}else{if(r>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[w+20>>2]=r;c[r+24>>2]=w;p=m;q=n;break}}}}else{p=d;q=h}}while(0);if(!(p>>>0<j>>>0)){ch()}d=a+(h+ -4)|0;w=c[d>>2]|0;if((w&1|0)==0){ch()}if((w&2|0)==0){if((j|0)==(c[70992>>2]|0)){e=(c[70980>>2]|0)+q|0;c[70980>>2]=e;c[70992>>2]=p;c[p+4>>2]=e|1;if((p|0)!=(c[70988>>2]|0)){i=b;return}c[70988>>2]=0;c[70976>>2]=0;i=b;return}if((j|0)==(c[70988>>2]|0)){e=(c[70976>>2]|0)+q|0;c[70976>>2]=e;c[70988>>2]=p;c[p+4>>2]=e|1;c[p+e>>2]=e;i=b;return}e=(w&-8)+q|0;x=w>>>3;do{if(w>>>0<256){y=c[a+h>>2]|0;t=c[a+(h|4)>>2]|0;g=71008+(x<<1<<2)|0;if((y|0)!=(g|0)){if(y>>>0<(c[70984>>2]|0)>>>0){ch()}if((c[y+12>>2]|0)!=(j|0)){ch()}}if((t|0)==(y|0)){c[17742]=c[17742]&~(1<<x);break}if((t|0)==(g|0)){z=t+8|0}else{if(t>>>0<(c[70984>>2]|0)>>>0){ch()}g=t+8|0;if((c[g>>2]|0)==(j|0)){z=g}else{ch()}}c[y+12>>2]=t;c[z>>2]=y}else{y=c[a+(h+16)>>2]|0;t=c[a+(h|4)>>2]|0;do{if((t|0)==(j|0)){g=a+(h+12)|0;f=c[g>>2]|0;if((f|0)==0){r=a+(h+8)|0;k=c[r>>2]|0;if((k|0)==0){A=0;break}else{B=k;C=r}}else{B=f;C=g}while(1){g=B+20|0;f=c[g>>2]|0;if((f|0)!=0){B=f;C=g;continue}g=B+16|0;f=c[g>>2]|0;if((f|0)==0){break}else{B=f;C=g}}if(C>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[C>>2]=0;A=B;break}}else{g=c[a+h>>2]|0;if(g>>>0<(c[70984>>2]|0)>>>0){ch()}f=g+12|0;if((c[f>>2]|0)!=(j|0)){ch()}r=t+8|0;if((c[r>>2]|0)==(j|0)){c[f>>2]=t;c[r>>2]=g;A=t;break}else{ch()}}}while(0);if((y|0)!=0){t=c[a+(h+20)>>2]|0;n=71272+(t<<2)|0;if((j|0)==(c[n>>2]|0)){c[n>>2]=A;if((A|0)==0){c[70972>>2]=c[70972>>2]&~(1<<t);break}}else{if(y>>>0<(c[70984>>2]|0)>>>0){ch()}t=y+16|0;if((c[t>>2]|0)==(j|0)){c[t>>2]=A}else{c[y+20>>2]=A}if((A|0)==0){break}}if(A>>>0<(c[70984>>2]|0)>>>0){ch()}c[A+24>>2]=y;t=c[a+(h+8)>>2]|0;do{if((t|0)!=0){if(t>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[A+16>>2]=t;c[t+24>>2]=A;break}}}while(0);t=c[a+(h+12)>>2]|0;if((t|0)!=0){if(t>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[A+20>>2]=t;c[t+24>>2]=A;break}}}}}while(0);c[p+4>>2]=e|1;c[p+e>>2]=e;if((p|0)==(c[70988>>2]|0)){c[70976>>2]=e;i=b;return}else{D=e}}else{c[d>>2]=w&-2;c[p+4>>2]=q|1;c[p+q>>2]=q;D=q}q=D>>>3;if(D>>>0<256){w=q<<1;d=71008+(w<<2)|0;e=c[17742]|0;A=1<<q;if((e&A|0)==0){c[17742]=e|A;E=71008+(w+2<<2)|0;F=d}else{A=71008+(w+2<<2)|0;w=c[A>>2]|0;if(w>>>0<(c[70984>>2]|0)>>>0){ch()}else{E=A;F=w}}c[E>>2]=p;c[F+12>>2]=p;c[p+8>>2]=F;c[p+12>>2]=d;i=b;return}d=D>>>8;if((d|0)==0){G=0}else{if(D>>>0>16777215){G=31}else{F=(d+1048320|0)>>>16&8;E=d<<F;d=(E+520192|0)>>>16&4;w=E<<d;E=(w+245760|0)>>>16&2;A=14-(d|F|E)+(w<<E>>>15)|0;G=D>>>(A+7|0)&1|A<<1}}A=71272+(G<<2)|0;c[p+28>>2]=G;c[p+20>>2]=0;c[p+16>>2]=0;E=c[70972>>2]|0;w=1<<G;a:do{if((E&w|0)==0){c[70972>>2]=E|w;c[A>>2]=p;c[p+24>>2]=A;c[p+12>>2]=p;c[p+8>>2]=p}else{F=c[A>>2]|0;if((G|0)==31){H=0}else{H=25-(G>>>1)|0}b:do{if((c[F+4>>2]&-8|0)==(D|0)){I=F}else{d=D<<H;e=F;while(1){J=e+(d>>>31<<2)+16|0;q=c[J>>2]|0;if((q|0)==0){break}if((c[q+4>>2]&-8|0)==(D|0)){I=q;break b}else{d=d<<1;e=q}}if(J>>>0<(c[70984>>2]|0)>>>0){ch()}else{c[J>>2]=p;c[p+24>>2]=e;c[p+12>>2]=p;c[p+8>>2]=p;break a}}}while(0);F=I+8|0;d=c[F>>2]|0;q=c[70984>>2]|0;if(I>>>0<q>>>0){ch()}if(d>>>0<q>>>0){ch()}else{c[d+12>>2]=p;c[F>>2]=p;c[p+8>>2]=d;c[p+12>>2]=I;c[p+24>>2]=0;break}}}while(0);p=(c[71e3>>2]|0)+ -1|0;c[71e3>>2]=p;if((p|0)==0){K=71424|0}else{i=b;return}while(1){p=c[K>>2]|0;if((p|0)==0){break}else{K=p+8|0}}c[71e3>>2]=-1;i=b;return}function Zt(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=(a|0)==0?1:a;while(1){e=Xt(d)|0;if((e|0)!=0){f=6;break}a=c[17866]|0;c[17866]=a+0;if((a|0)==0){f=5;break}ci[a&15]()}if((f|0)==5){d=pg(4)|0;c[d>>2]=71480;ec(d|0,71528,21)}else if((f|0)==6){i=b;return e|0}return 0}function _t(a){a=a|0;var b=0,c=0;b=i;c=Zt(a)|0;i=b;return c|0}function $t(a){a=a|0;var b=0;b=i;if((a|0)!=0){Yt(a)}i=b;return}function au(a){a=a|0;var b=0;b=i;$t(a);i=b;return}function bu(a){a=a|0;var b=0;b=i;se(a|0);$t(a);i=b;return}function cu(a){a=a|0;var b=0;b=i;se(a|0);i=b;return}function du(a){a=a|0;return 71496}function eu(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0,N=0,O=0.0,P=0,Q=0.0,R=0,S=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0.0,ca=0,da=0.0,fa=0,ga=0.0,ha=0,ia=0.0,ja=0.0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0.0,sa=0,ta=0.0,ua=0,va=0,wa=0,xa=0,ya=0.0,za=0,Aa=0.0,Ba=0.0,Ca=0,Da=0.0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0.0,oc=0,pc=0,qc=0.0,rc=0.0,sc=0.0,tc=0.0,uc=0.0,vc=0.0,wc=0,xc=0,yc=0.0,zc=0,Ac=0.0,Bc=0,Cc=0,Dc=0,Ec=0;g=i;i=i+512|0;h=g;if((e|0)==1){j=53;k=-1074}else if((e|0)==0){j=24;k=-149}else if((e|0)==2){j=53;k=-1074}else{l=0.0;i=g;return+l}e=b+4|0;m=b+100|0;do{n=c[e>>2]|0;if(n>>>0<(c[m>>2]|0)>>>0){c[e>>2]=n+1;o=d[n]|0}else{o=hu(b)|0}}while((xd(o|0)|0)!=0);do{if((o|0)==43|(o|0)==45){n=1-(((o|0)==45)<<1)|0;p=c[e>>2]|0;if(p>>>0<(c[m>>2]|0)>>>0){c[e>>2]=p+1;q=d[p]|0;r=n;break}else{q=hu(b)|0;r=n;break}}else{q=o;r=1}}while(0);o=q;q=0;while(1){if((o|32|0)!=(a[71544+q|0]|0)){s=o;t=q;break}do{if(q>>>0<7){n=c[e>>2]|0;if(n>>>0<(c[m>>2]|0)>>>0){c[e>>2]=n+1;u=d[n]|0;break}else{u=hu(b)|0;break}}else{u=o}}while(0);n=q+1|0;if(n>>>0<8){o=u;q=n}else{s=u;t=n;break}}do{if((t|0)==3){v=23}else if((t|0)!=8){u=(f|0)==0;if(!(t>>>0<4|u)){if((t|0)==8){break}else{v=23;break}}a:do{if((t|0)==0){q=s;o=0;while(1){if((q|32|0)!=(a[71560+o|0]|0)){w=q;z=o;break a}do{if(o>>>0<2){n=c[e>>2]|0;if(n>>>0<(c[m>>2]|0)>>>0){c[e>>2]=n+1;A=d[n]|0;break}else{A=hu(b)|0;break}}else{A=q}}while(0);n=o+1|0;if(n>>>0<3){q=A;o=n}else{w=A;z=n;break}}}else{w=s;z=t}}while(0);if((z|0)==0){do{if((w|0)==48){o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;B=d[o]|0}else{B=hu(b)|0}if((B|32|0)!=120){if((c[m>>2]|0)==0){C=48;break}c[e>>2]=(c[e>>2]|0)+ -1;C=48;break}o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;D=d[o]|0;E=0}else{D=hu(b)|0;E=0}while(1){if((D|0)==46){v=70;break}else if((D|0)!=48){F=0;G=0;H=0;J=0;K=D;L=E;M=0;N=0;O=1.0;P=0;Q=0.0;break}o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;D=d[o]|0;E=1;continue}else{D=hu(b)|0;E=1;continue}}b:do{if((v|0)==70){o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;R=d[o]|0}else{R=hu(b)|0}if((R|0)==48){o=-1;q=-1;while(1){n=c[e>>2]|0;if(n>>>0<(c[m>>2]|0)>>>0){c[e>>2]=n+1;S=d[n]|0}else{S=hu(b)|0}if((S|0)!=48){F=0;G=0;H=o;J=q;K=S;L=1;M=1;N=0;O=1.0;P=0;Q=0.0;break b}n=yu(o|0,q|0,-1,-1)|0;o=n;q=I}}else{F=0;G=0;H=0;J=0;K=R;L=E;M=1;N=0;O=1.0;P=0;Q=0.0}}}while(0);c:while(1){q=K+ -48|0;do{if(q>>>0<10){U=q;v=84}else{o=K|32;n=(K|0)==46;if(!((o+ -97|0)>>>0<6|n)){V=K;break c}if(n){if((M|0)==0){W=G;X=F;Y=G;Z=F;_=L;$=1;aa=N;ba=O;ca=P;da=Q;break}else{V=46;break c}}else{U=(K|0)>57?o+ -87|0:q;v=84;break}}}while(0);if((v|0)==84){v=0;do{if((F|0)<0|(F|0)==0&G>>>0<8){fa=N;ga=O;ha=U+(P<<4)|0;ia=Q}else{if((F|0)<0|(F|0)==0&G>>>0<14){ja=O*.0625;fa=N;ga=ja;ha=P;ia=Q+ja*+(U|0);break}if((U|0)!=0&(N|0)==0){fa=1;ga=O;ha=P;ia=Q+O*.5}else{fa=N;ga=O;ha=P;ia=Q}}}while(0);q=yu(G|0,F|0,1,0)|0;W=H;X=J;Y=q;Z=I;_=1;$=M;aa=fa;ba=ga;ca=ha;da=ia}q=c[e>>2]|0;if(q>>>0<(c[m>>2]|0)>>>0){c[e>>2]=q+1;F=Z;G=Y;H=W;J=X;K=d[q]|0;L=_;M=$;N=aa;O=ba;P=ca;Q=da;continue}else{F=Z;G=Y;H=W;J=X;K=hu(b)|0;L=_;M=$;N=aa;O=ba;P=ca;Q=da;continue}}if((L|0)==0){q=(c[m>>2]|0)==0;if(!q){c[e>>2]=(c[e>>2]|0)+ -1}if(u){gu(b,0)}else{if(!q){q=c[e>>2]|0;c[e>>2]=q+ -1;if((M|0)!=0){c[e>>2]=q+ -2}}}l=+(r|0)*0.0;i=g;return+l}q=(M|0)==0;o=q?G:H;n=q?F:J;if((F|0)<0|(F|0)==0&G>>>0<8){q=G;p=F;ka=P;while(1){la=ka<<4;ma=yu(q|0,p|0,1,0)|0;na=I;if((na|0)<0|(na|0)==0&ma>>>0<8){q=ma;p=na;ka=la}else{oa=la;break}}}else{oa=P}do{if((V|32|0)==112){ka=fu(b,f)|0;p=I;if((ka|0)==0&(p|0)==-2147483648){if(u){gu(b,0);l=0.0;i=g;return+l}else{if((c[m>>2]|0)==0){pa=0;qa=0;break}c[e>>2]=(c[e>>2]|0)+ -1;pa=0;qa=0;break}}else{pa=ka;qa=p}}else{if((c[m>>2]|0)==0){pa=0;qa=0}else{c[e>>2]=(c[e>>2]|0)+ -1;pa=0;qa=0}}}while(0);p=Bu(o|0,n|0,2)|0;ka=yu(p|0,I|0,-32,-1)|0;p=yu(ka|0,I|0,pa|0,qa|0)|0;ka=I;if((oa|0)==0){l=+(r|0)*0.0;i=g;return+l}if((ka|0)>0|(ka|0)==0&p>>>0>(0-k|0)>>>0){c[(Pd()|0)>>2]=34;l=+(r|0)*1.7976931348623157e+308*1.7976931348623157e+308;i=g;return+l}q=k+ -106|0;la=((q|0)<0)<<31>>31;if((ka|0)<(la|0)|(ka|0)==(la|0)&p>>>0<q>>>0){c[(Pd()|0)>>2]=34;l=+(r|0)*2.2250738585072014e-308*2.2250738585072014e-308;i=g;return+l}if((oa|0)>-1){q=p;la=ka;na=oa;ja=Q;while(1){ma=na<<1;if(!(ja>=.5)){ra=ja;sa=ma}else{ra=ja+-1.0;sa=ma|1}ta=ja+ra;ma=yu(q|0,la|0,-1,-1)|0;ua=I;if((sa|0)>-1){q=ma;la=ua;na=sa;ja=ta}else{va=ma;wa=ua;xa=sa;ya=ta;break}}}else{va=p;wa=ka;xa=oa;ya=Q}na=xu(32,0,k|0,((k|0)<0)<<31>>31|0)|0;la=yu(va|0,wa|0,na|0,I|0)|0;na=I;if(0>(na|0)|0==(na|0)&j>>>0>la>>>0){za=(la|0)<0?0:la}else{za=j}if((za|0)<53){ja=+(r|0);ta=+Rd(+(+iu(1.0,84-za|0)),+ja);if((za|0)<32&ya!=0.0){la=xa&1;Aa=ja;Ba=ta;Ca=(la^1)+xa|0;Da=(la|0)==0?0.0:ya}else{Aa=ja;Ba=ta;Ca=xa;Da=ya}}else{Aa=+(r|0);Ba=0.0;Ca=xa;Da=ya}ta=Aa*Da+(Ba+Aa*+(Ca>>>0))-Ba;if(!(ta!=0.0)){c[(Pd()|0)>>2]=34}l=+ju(ta,va);i=g;return+l}else{C=w}}while(0);la=k+j|0;na=0-la|0;q=C;n=0;while(1){if((q|0)==46){v=139;break}else if((q|0)!=48){Ea=q;Fa=0;Ga=0;Ha=n;Ia=0;break}o=c[e>>2]|0;if(o>>>0<(c[m>>2]|0)>>>0){c[e>>2]=o+1;q=d[o]|0;n=1;continue}else{q=hu(b)|0;n=1;continue}}d:do{if((v|0)==139){q=c[e>>2]|0;if(q>>>0<(c[m>>2]|0)>>>0){c[e>>2]=q+1;Ja=d[q]|0}else{Ja=hu(b)|0}if((Ja|0)==48){q=-1;o=-1;while(1){ua=c[e>>2]|0;if(ua>>>0<(c[m>>2]|0)>>>0){c[e>>2]=ua+1;Ka=d[ua]|0}else{Ka=hu(b)|0}if((Ka|0)!=48){Ea=Ka;Fa=q;Ga=o;Ha=1;Ia=1;break d}ua=yu(q|0,o|0,-1,-1)|0;q=ua;o=I}}else{Ea=Ja;Fa=0;Ga=0;Ha=n;Ia=1}}}while(0);c[h>>2]=0;n=Ea+ -48|0;o=(Ea|0)==46;e:do{if(n>>>0<10|o){q=h+496|0;ka=Ea;p=0;ua=0;ma=o;La=n;Ma=Fa;Na=Ga;Oa=Ha;Pa=Ia;Qa=0;Ra=0;Sa=0;while(1){do{if(ma){if((Pa|0)==0){Ta=p;Ua=ua;Va=p;Wa=ua;Xa=Oa;Ya=1;Za=Qa;_a=Ra;$a=Sa}else{ab=ka;bb=Ma;cb=Na;db=p;eb=ua;fb=Oa;gb=Qa;hb=Ra;ib=Sa;break e}}else{jb=yu(p|0,ua|0,1,0)|0;kb=I;lb=(ka|0)!=48;if((Ra|0)>=125){if(!lb){Ta=Ma;Ua=Na;Va=jb;Wa=kb;Xa=Oa;Ya=Pa;Za=Qa;_a=Ra;$a=Sa;break}c[q>>2]=c[q>>2]|1;Ta=Ma;Ua=Na;Va=jb;Wa=kb;Xa=Oa;Ya=Pa;Za=Qa;_a=Ra;$a=Sa;break}mb=h+(Ra<<2)|0;if((Qa|0)==0){nb=La}else{nb=ka+ -48+((c[mb>>2]|0)*10|0)|0}c[mb>>2]=nb;mb=Qa+1|0;ob=(mb|0)==9;Ta=Ma;Ua=Na;Va=jb;Wa=kb;Xa=1;Ya=Pa;Za=ob?0:mb;_a=(ob&1)+Ra|0;$a=lb?jb:Sa}}while(0);jb=c[e>>2]|0;if(jb>>>0<(c[m>>2]|0)>>>0){c[e>>2]=jb+1;pb=d[jb]|0}else{pb=hu(b)|0}jb=pb+ -48|0;lb=(pb|0)==46;if(jb>>>0<10|lb){ka=pb;p=Va;ua=Wa;ma=lb;La=jb;Ma=Ta;Na=Ua;Oa=Xa;Pa=Ya;Qa=Za;Ra=_a;Sa=$a}else{qb=pb;rb=Va;sb=Ta;tb=Wa;ub=Ua;vb=Xa;wb=Ya;xb=Za;yb=_a;zb=$a;v=162;break}}}else{qb=Ea;rb=0;sb=Fa;tb=0;ub=Ga;vb=Ha;wb=Ia;xb=0;yb=0;zb=0;v=162}}while(0);if((v|0)==162){n=(wb|0)==0;ab=qb;bb=n?rb:sb;cb=n?tb:ub;db=rb;eb=tb;fb=vb;gb=xb;hb=yb;ib=zb}n=(fb|0)!=0;if(n){if((ab|32|0)==101){o=fu(b,f)|0;Sa=I;do{if((o|0)==0&(Sa|0)==-2147483648){if(u){gu(b,0);l=0.0;i=g;return+l}else{if((c[m>>2]|0)==0){Ab=0;Bb=0;break}c[e>>2]=(c[e>>2]|0)+ -1;Ab=0;Bb=0;break}}else{Ab=o;Bb=Sa}}while(0);Sa=yu(Ab|0,Bb|0,bb|0,cb|0)|0;Cb=Sa;Db=I}else{v=171}}else{v=171}if((v|0)==171){if((ab|0)>-1){if((c[m>>2]|0)==0){Cb=bb;Db=cb}else{c[e>>2]=(c[e>>2]|0)+ -1;Cb=bb;Db=cb}}else{Cb=bb;Db=cb}}if(!n){c[(Pd()|0)>>2]=22;gu(b,0);l=0.0;i=g;return+l}Sa=c[h>>2]|0;if((Sa|0)==0){l=+(r|0)*0.0;i=g;return+l}do{if((Cb|0)==(db|0)&(Db|0)==(eb|0)&((eb|0)<0|(eb|0)==0&db>>>0<10)){if(!(j>>>0>30)){if((Sa>>>j|0)!=0){break}}l=+(r|0)*+(Sa>>>0);i=g;return+l}}while(0);Sa=(k|0)/-2|0;n=((Sa|0)<0)<<31>>31;if((Db|0)>(n|0)|(Db|0)==(n|0)&Cb>>>0>Sa>>>0){c[(Pd()|0)>>2]=34;l=+(r|0)*1.7976931348623157e+308*1.7976931348623157e+308;i=g;return+l}Sa=k+ -106|0;n=((Sa|0)<0)<<31>>31;if((Db|0)<(n|0)|(Db|0)==(n|0)&Cb>>>0<Sa>>>0){c[(Pd()|0)>>2]=34;l=+(r|0)*2.2250738585072014e-308*2.2250738585072014e-308;i=g;return+l}if((gb|0)==0){Eb=hb}else{if((gb|0)<9){Sa=h+(hb<<2)|0;n=c[Sa>>2]|0;o=gb;do{n=n*10|0;o=o+1|0}while((o|0)!=9);c[Sa>>2]=n}Eb=hb+1|0}do{if((ib|0)<9){if((ib|0)<=(Cb|0)&(Cb|0)<18){if((Cb|0)==9){l=+(r|0)*+((c[h>>2]|0)>>>0);i=g;return+l}if((Cb|0)<9){l=+(r|0)*+((c[h>>2]|0)>>>0)/+(c[71576+(8-Cb<<2)>>2]|0);i=g;return+l}o=j+27+(ea(Cb,-3)|0)|0;Ra=c[h>>2]|0;if((o|0)<=30){if((Ra>>>o|0)!=0){break}}l=+(r|0)*+(Ra>>>0)*+(c[71576+(Cb+ -10<<2)>>2]|0);i=g;return+l}}}while(0);n=(Cb|0)%9|0;if((n|0)==0){Fb=0;Gb=0;Hb=Cb;Ib=Eb}else{Sa=(Cb|0)>-1?n:n+9|0;n=c[71576+(8-Sa<<2)>>2]|0;if((Eb|0)==0){Jb=0;Kb=Cb;Lb=0}else{Ra=1e9/(n|0)|0;o=0;Qa=0;Pa=0;Oa=Cb;while(1){Na=h+(Pa<<2)|0;Ma=c[Na>>2]|0;La=((Ma>>>0)/(n>>>0)|0)+Qa|0;c[Na>>2]=La;Mb=ea((Ma>>>0)%(n>>>0)|0,Ra)|0;Ma=Pa+1|0;if((Pa|0)==(o|0)&(La|0)==0){Nb=Ma&127;Ob=Oa+ -9|0}else{Nb=o;Ob=Oa}if((Ma|0)==(Eb|0)){break}else{o=Nb;Qa=Mb;Pa=Ma;Oa=Ob}}if((Mb|0)==0){Jb=Nb;Kb=Ob;Lb=Eb}else{c[h+(Eb<<2)>>2]=Mb;Jb=Nb;Kb=Ob;Lb=Eb+1|0}}Fb=Jb;Gb=0;Hb=9-Sa+Kb|0;Ib=Lb}f:while(1){Oa=h+(Fb<<2)|0;if((Hb|0)<18){Pa=Gb;Qa=Ib;while(1){o=0;Ra=Qa+127|0;n=Qa;while(1){Ma=Ra&127;La=h+(Ma<<2)|0;Na=Bu(c[La>>2]|0,0,29)|0;ma=yu(Na|0,I|0,o|0,0)|0;Na=I;if(Na>>>0>0|(Na|0)==0&ma>>>0>1e9){ua=Ou(ma|0,Na|0,1e9,0)|0;p=Pu(ma|0,Na|0,1e9,0)|0;Pb=p;Qb=ua}else{Pb=ma;Qb=0}c[La>>2]=Pb;La=(Ma|0)==(Fb|0);if((Ma|0)!=(n+127&127|0)|La){Rb=n}else{Rb=(Pb|0)==0?Ma:n}if(La){break}else{o=Qb;Ra=Ma+ -1|0;n=Rb}}n=Pa+ -29|0;if((Qb|0)==0){Pa=n;Qa=Rb}else{Sb=n;Tb=Qb;Ub=Rb;break}}}else{if((Hb|0)==18){Vb=Gb;Wb=Ib}else{Xb=Fb;Yb=Gb;Zb=Hb;_b=Ib;break}while(1){if(!((c[Oa>>2]|0)>>>0<9007199)){Xb=Fb;Yb=Vb;Zb=18;_b=Wb;break f}Qa=0;Pa=Wb+127|0;n=Wb;while(1){Ra=Pa&127;o=h+(Ra<<2)|0;Ma=Bu(c[o>>2]|0,0,29)|0;La=yu(Ma|0,I|0,Qa|0,0)|0;Ma=I;if(Ma>>>0>0|(Ma|0)==0&La>>>0>1e9){ma=Ou(La|0,Ma|0,1e9,0)|0;ua=Pu(La|0,Ma|0,1e9,0)|0;$b=ua;ac=ma}else{$b=La;ac=0}c[o>>2]=$b;o=(Ra|0)==(Fb|0);if((Ra|0)!=(n+127&127|0)|o){bc=n}else{bc=($b|0)==0?Ra:n}if(o){break}else{Qa=ac;Pa=Ra+ -1|0;n=bc}}n=Vb+ -29|0;if((ac|0)==0){Vb=n;Wb=bc}else{Sb=n;Tb=ac;Ub=bc;break}}}Oa=Fb+127&127;if((Oa|0)==(Ub|0)){n=Ub+127&127;Pa=h+((Ub+126&127)<<2)|0;c[Pa>>2]=c[Pa>>2]|c[h+(n<<2)>>2];cc=n}else{cc=Ub}c[h+(Oa<<2)>>2]=Tb;Fb=Oa;Gb=Sb;Hb=Hb+9|0;Ib=cc}g:while(1){dc=_b+1&127;Sa=h+((_b+127&127)<<2)|0;Oa=Xb;n=Yb;Pa=Zb;while(1){Qa=(Pa|0)==18;Ra=(Pa|0)>27?9:1;ec=Oa;fc=n;while(1){o=0;while(1){La=o+ec&127;if((La|0)==(_b|0)){gc=2;break}ma=c[h+(La<<2)>>2]|0;La=c[71568+(o<<2)>>2]|0;if(ma>>>0<La>>>0){gc=2;break}ua=o+1|0;if(ma>>>0>La>>>0){gc=o;break}if((ua|0)<2){o=ua}else{gc=ua;break}}if((gc|0)==2&Qa){break g}hc=Ra+fc|0;if((ec|0)==(_b|0)){ec=_b;fc=hc}else{break}}Qa=(1<<Ra)+ -1|0;o=1e9>>>Ra;ic=ec;jc=0;ua=ec;kc=Pa;do{La=h+(ua<<2)|0;ma=c[La>>2]|0;Ma=(ma>>>Ra)+jc|0;c[La>>2]=Ma;jc=ea(ma&Qa,o)|0;ma=(ua|0)==(ic|0)&(Ma|0)==0;ua=ua+1&127;kc=ma?kc+ -9|0:kc;ic=ma?ua:ic}while((ua|0)!=(_b|0));if((jc|0)==0){Oa=ic;n=hc;Pa=kc;continue}if((dc|0)!=(ic|0)){break}c[Sa>>2]=c[Sa>>2]|1;Oa=ic;n=hc;Pa=kc}c[h+(_b<<2)>>2]=jc;Xb=ic;Yb=hc;Zb=kc;_b=dc}Pa=ec&127;if((Pa|0)==(_b|0)){c[h+(dc+ -1<<2)>>2]=0;lc=dc}else{lc=_b}ta=+((c[h+(Pa<<2)>>2]|0)>>>0);Pa=ec+1&127;if((Pa|0)==(lc|0)){n=lc+1&127;c[h+(n+ -1<<2)>>2]=0;mc=n}else{mc=lc}ja=+(r|0);nc=ja*(ta*1.0e9+ +((c[h+(Pa<<2)>>2]|0)>>>0));Pa=fc+53|0;n=Pa-k|0;if((n|0)<(j|0)){oc=(n|0)<0?0:n;pc=1}else{oc=j;pc=0}if((oc|0)<53){ta=+Rd(+(+iu(1.0,105-oc|0)),+nc);qc=+Ve(+nc,+(+iu(1.0,53-oc|0)));rc=ta;sc=qc;tc=ta+(nc-qc)}else{rc=0.0;sc=0.0;tc=nc}Oa=ec+2&127;if((Oa|0)==(mc|0)){uc=sc}else{Sa=c[h+(Oa<<2)>>2]|0;do{if(Sa>>>0<5e8){if((Sa|0)==0){if((ec+3&127|0)==(mc|0)){vc=sc;break}}vc=ja*.25+sc}else{if(Sa>>>0>5e8){vc=ja*.75+sc;break}if((ec+3&127|0)==(mc|0)){vc=ja*.5+sc;break}else{vc=ja*.75+sc;break}}}while(0);if((53-oc|0)>1){if(+Ve(+vc,1.0)!=0.0){uc=vc}else{uc=vc+1.0}}else{uc=vc}}ja=tc+uc-rc;do{if((Pa&2147483647|0)>(-2-la|0)){if(!(+T(+ja)>=9007199254740992.0)){wc=pc;xc=fc;yc=ja}else{wc=(pc|0)!=0&(oc|0)==(n|0)?0:pc;xc=fc+1|0;yc=ja*.5}if((xc+50|0)<=(na|0)){if(!((wc|0)!=0&uc!=0.0)){zc=xc;Ac=yc;break}}c[(Pd()|0)>>2]=34;zc=xc;Ac=yc}else{zc=fc;Ac=ja}}while(0);l=+ju(Ac,zc);i=g;return+l}else if((z|0)==3){na=c[e>>2]|0;if(na>>>0<(c[m>>2]|0)>>>0){c[e>>2]=na+1;Bc=d[na]|0}else{Bc=hu(b)|0}if((Bc|0)==40){Cc=1}else{if((c[m>>2]|0)==0){l=x;i=g;return+l}c[e>>2]=(c[e>>2]|0)+ -1;l=x;i=g;return+l}while(1){na=c[e>>2]|0;if(na>>>0<(c[m>>2]|0)>>>0){c[e>>2]=na+1;Dc=d[na]|0}else{Dc=hu(b)|0}if(!((Dc+ -48|0)>>>0<10|(Dc+ -65|0)>>>0<26)){if(!((Dc+ -97|0)>>>0<26|(Dc|0)==95)){break}}Cc=Cc+1|0}if((Dc|0)==41){l=x;i=g;return+l}na=(c[m>>2]|0)==0;if(!na){c[e>>2]=(c[e>>2]|0)+ -1}if(u){c[(Pd()|0)>>2]=22;gu(b,0);l=0.0;i=g;return+l}if((Cc|0)==0|na){l=x;i=g;return+l}else{Ec=Cc}while(1){na=Ec+ -1|0;c[e>>2]=(c[e>>2]|0)+ -1;if((na|0)==0){l=x;break}else{Ec=na}}i=g;return+l}else{if((c[m>>2]|0)!=0){c[e>>2]=(c[e>>2]|0)+ -1}c[(Pd()|0)>>2]=22;gu(b,0);l=0.0;i=g;return+l}}}while(0);if((v|0)==23){v=(c[m>>2]|0)==0;if(!v){c[e>>2]=(c[e>>2]|0)+ -1}if(!(t>>>0<4|(f|0)==0|v)){v=t;do{c[e>>2]=(c[e>>2]|0)+ -1;v=v+ -1|0}while(v>>>0>3)}}l=+(r|0)*y;i=g;return+l}function fu(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;e=i;f=a+4|0;g=c[f>>2]|0;h=a+100|0;if(g>>>0<(c[h>>2]|0)>>>0){c[f>>2]=g+1;j=d[g]|0}else{j=hu(a)|0}if((j|0)==43|(j|0)==45){g=(j|0)==45|0;k=c[f>>2]|0;if(k>>>0<(c[h>>2]|0)>>>0){c[f>>2]=k+1;l=d[k]|0}else{l=hu(a)|0}if((l+ -48|0)>>>0<10|(b|0)==0){m=l;n=g}else{if((c[h>>2]|0)==0){m=l;n=g}else{c[f>>2]=(c[f>>2]|0)+ -1;m=l;n=g}}}else{m=j;n=0}if((m+ -48|0)>>>0>9){if((c[h>>2]|0)==0){o=-2147483648;p=0;I=o;i=e;return p|0}c[f>>2]=(c[f>>2]|0)+ -1;o=-2147483648;p=0;I=o;i=e;return p|0}else{q=m;r=0}while(1){s=q+ -48+r|0;m=c[f>>2]|0;if(m>>>0<(c[h>>2]|0)>>>0){c[f>>2]=m+1;t=d[m]|0}else{t=hu(a)|0}if(!((t+ -48|0)>>>0<10&(s|0)<214748364)){break}q=t;r=s*10|0}r=((s|0)<0)<<31>>31;if((t+ -48|0)>>>0<10){q=s;m=r;j=t;while(1){g=Nu(q|0,m|0,10,0)|0;l=I;b=yu(j|0,((j|0)<0)<<31>>31|0,-48,-1)|0;k=yu(b|0,I|0,g|0,l|0)|0;l=I;g=c[f>>2]|0;if(g>>>0<(c[h>>2]|0)>>>0){c[f>>2]=g+1;u=d[g]|0}else{u=hu(a)|0}if((u+ -48|0)>>>0<10&((l|0)<21474836|(l|0)==21474836&k>>>0<2061584302)){q=k;m=l;j=u}else{v=k;w=l;x=u;break}}}else{v=s;w=r;x=t}if((x+ -48|0)>>>0<10){do{x=c[f>>2]|0;if(x>>>0<(c[h>>2]|0)>>>0){c[f>>2]=x+1;y=d[x]|0}else{y=hu(a)|0}}while((y+ -48|0)>>>0<10)}if((c[h>>2]|0)!=0){c[f>>2]=(c[f>>2]|0)+ -1}f=(n|0)!=0;n=xu(0,0,v|0,w|0)|0;o=f?I:w;p=f?n:v;I=o;i=e;return p|0}function gu(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;c[a+104>>2]=b;e=c[a+8>>2]|0;f=c[a+4>>2]|0;g=e-f|0;c[a+108>>2]=g;if((b|0)!=0&(g|0)>(b|0)){c[a+100>>2]=f+b;i=d;return}else{c[a+100>>2]=e;i=d;return}}function hu(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;f=b+104|0;g=c[f>>2]|0;if((g|0)==0){h=3}else{if((c[b+108>>2]|0)<(g|0)){h=3}}if((h|0)==3){g=lu(b)|0;if((g|0)>=0){j=c[f>>2]|0;f=c[b+8>>2]|0;if((j|0)==0){h=8}else{k=c[b+4>>2]|0;l=j-(c[b+108>>2]|0)+ -1|0;if((f-k|0)>(l|0)){c[b+100>>2]=k+l}else{h=8}}if((h|0)==8){c[b+100>>2]=f}h=c[b+4>>2]|0;if((f|0)!=0){l=b+108|0;c[l>>2]=f+1-h+(c[l>>2]|0)}l=h+ -1|0;if((d[l]|0|0)==(g|0)){m=g;i=e;return m|0}a[l]=g;m=g;i=e;return m|0}}c[b+100>>2]=0;m=-1;i=e;return m|0}function iu(a,b){a=+a;b=b|0;var d=0,e=0.0,f=0,g=0,j=0,l=0.0;d=i;if((b|0)>1023){e=a*8.98846567431158e+307;f=b+ -1023|0;if((f|0)>1023){g=b+ -2046|0;j=(g|0)>1023?1023:g;l=e*8.98846567431158e+307}else{j=f;l=e}}else{if((b|0)<-1022){e=a*2.2250738585072014e-308;f=b+1022|0;if((f|0)<-1022){g=b+2044|0;j=(g|0)<-1022?-1022:g;l=e*2.2250738585072014e-308}else{j=f;l=e}}else{j=b;l=a}}b=Bu(j+1023|0,0,52)|0;j=I;c[k>>2]=b;c[k+4>>2]=j;a=l*+h[k>>3];i=d;return+a}function ju(a,b){a=+a;b=b|0;var c=0,d=0.0;c=i;d=+iu(a,b);i=c;return+d}function ku(b){b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=b+74|0;f=a[e]|0;a[e]=f+255|f;f=b+20|0;e=b+44|0;if((c[f>>2]|0)>>>0>(c[e>>2]|0)>>>0){Qh[c[b+36>>2]&15](b,0,0)|0}c[b+16>>2]=0;c[b+28>>2]=0;c[f>>2]=0;f=c[b>>2]|0;if((f&20|0)==0){g=c[e>>2]|0;c[b+8>>2]=g;c[b+4>>2]=g;h=0;i=d;return h|0}if((f&4|0)==0){h=-1;i=d;return h|0}c[b>>2]=f|32;h=-1;i=d;return h|0}function lu(a){a=a|0;var b=0,e=0,f=0,g=0;b=i;i=i+16|0;e=b;if((c[a+8>>2]|0)==0){if((ku(a)|0)==0){f=3}else{g=-1}}else{f=3}if((f|0)==3){if((Qh[c[a+32>>2]&15](a,e,1)|0)==1){g=d[e]|0}else{g=-1}}i=b;return g|0}function mu(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0.0,j=0,k=0;d=i;i=i+112|0;e=d;f=e+0|0;g=f+112|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));f=e+4|0;c[f>>2]=a;g=e+8|0;c[g>>2]=-1;c[e+44>>2]=a;c[e+76>>2]=-1;gu(e,0);h=+eu(e,1,1);j=(c[f>>2]|0)-(c[g>>2]|0)+(c[e+108>>2]|0)|0;if((b|0)==0){i=d;return+h}if((j|0)==0){k=a}else{k=a+j|0}c[b>>2]=k;i=d;return+h}function nu(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;a:do{if((d|0)==0){f=0}else{g=d;h=b;j=c;while(1){k=a[h]|0;l=a[j]|0;if(!(k<<24>>24==l<<24>>24)){break}m=g+ -1|0;if((m|0)==0){f=0;break a}else{g=m;h=h+1|0;j=j+1|0}}f=(k&255)-(l&255)|0}}while(0);i=e;return f|0}function ou(b,c){b=b|0;c=c|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;f=a[b]|0;a:do{if(f<<24>>24==0){g=0;h=c}else{j=f;k=f&255;l=b;m=c;while(1){n=a[m]|0;if(n<<24>>24==0){g=j;h=m;break a}if(!(j<<24>>24==n<<24>>24)){n=Fu(k|0)|0;if((n|0)!=(Fu(d[m]|0|0)|0)){break}}n=l+1|0;o=m+1|0;p=a[n]|0;if(p<<24>>24==0){g=0;h=o;break a}else{j=p;k=p&255;l=n;m=o}}g=a[l]|0;h=m}}while(0);c=Fu(g&255|0)|0;g=c-(Fu(d[h]|0|0)|0)|0;i=e;return g|0}function pu(b,c){b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;e=a[b]|0;f=a[c]|0;if(e<<24>>24!=f<<24>>24|e<<24>>24==0|f<<24>>24==0){g=e;h=f;j=g&255;k=h&255;l=j-k|0;i=d;return l|0}else{m=b;n=c}while(1){c=m+1|0;b=n+1|0;f=a[c]|0;e=a[b]|0;if(f<<24>>24!=e<<24>>24|f<<24>>24==0|e<<24>>24==0){g=f;h=e;break}else{m=c;n=b}}j=g&255;k=h&255;l=j-k|0;i=d;return l|0}function qu(b,c,e){b=b|0;c=c|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;if((e|0)==0){g=0;i=f;return g|0}h=a[b]|0;a:do{if(h<<24>>24==0){j=0;k=c}else{l=e;m=h;n=b;o=c;while(1){p=l+ -1|0;q=a[o]|0;if(!((p|0)!=0&q<<24>>24!=0&m<<24>>24==q<<24>>24)){j=m;k=o;break a}q=n+1|0;r=o+1|0;s=a[q]|0;if(s<<24>>24==0){j=0;k=r;break}else{l=p;m=s;n=q;o=r}}}}while(0);g=(j&255)-(d[k]|0)|0;i=f;return g|0}function ru(){c[17884]=p}function su(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;v=v+1|0;c[a>>2]=v;while((e|0)<40){if((c[d+(e<<2)>>2]|0)==0){c[d+(e<<2)>>2]=v;c[d+((e<<2)+4)>>2]=b;c[d+((e<<2)+8)>>2]=0;return 0}e=e+2|0}Sc(116);Sc(111);Sc(111);Sc(32);Sc(109);Sc(97);Sc(110);Sc(121);Sc(32);Sc(115);Sc(101);Sc(116);Sc(106);Sc(109);Sc(112);Sc(115);Sc(32);Sc(105);Sc(110);Sc(32);Sc(97);Sc(32);Sc(102);Sc(117);Sc(110);Sc(99);Sc(116);Sc(105);Sc(111);Sc(110);Sc(32);Sc(99);Sc(97);Sc(108);Sc(108);Sc(44);Sc(32);Sc(98);Sc(117);Sc(105);Sc(108);Sc(100);Sc(32);Sc(119);Sc(105);Sc(116);Sc(104);Sc(32);Sc(97);Sc(32);Sc(104);Sc(105);Sc(103);Sc(104);Sc(101);Sc(114);Sc(32);Sc(118);Sc(97);Sc(108);Sc(117);Sc(101);Sc(32);Sc(102);Sc(111);Sc(114);Sc(32);Sc(77);Sc(65);Sc(88);Sc(95);Sc(83);Sc(69);Sc(84);Sc(74);Sc(77);Sc(80);Sc(83);Sc(10);fa(0);return 0}function tu(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return Ta(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if((e|0)==0)return f|0;a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function uu(b){b=b|0;var c=0;c=b;while(a[c]|0){c=c+1|0}return c-b|0}function vu(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;g=b&3;h=d|d<<8|d<<16|d<<24;i=f&~3;if(g){g=b+4-g|0;while((b|0)<(g|0)){a[b]=d;b=b+1|0}}while((b|0)<(i|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b]=d;b=b+1|0}return b-e|0}function wu(b,c){b=b|0;c=c|0;var d=0,e=0;d=b+(uu(b)|0)|0;do{a[d+e|0]=a[c+e|0];e=e+1|0}while(a[c+(e-1)|0]|0);return b|0}function xu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=b-d>>>0;e=b-d-(c>>>0>a>>>0|0)>>>0;return(I=e,a-c>>>0|0)|0}function yu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=a+c>>>0;return(I=b+d+(e>>>0<a>>>0|0)>>>0,e|0)|0}function zu(a,b){a=a|0;b=b|0;var d=0,e=0;while((d|0)<20){e=c[b+(d<<2)>>2]|0;if((e|0)==0)break;if((e|0)==(a|0)){return c[b+((d<<2)+4)>>2]|0}d=d+2|0}return 0}function Au(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b]=a[c]|0}b=e}else{tu(b,c,d)|0}return b|0}function Bu(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}I=a<<c-32;return 0}function Cu(b,c){b=b|0;c=c|0;var d=0;do{a[b+d|0]=a[c+d|0];d=d+1|0}while(a[c+(d-1)|0]|0);return b|0}function Du(a){a=a|0;var b=0;b=(ea(c[a>>2]|0,31010991)|0)+1735287159&2147483647;c[a>>2]=b;return b|0}function Eu(){return Du(o)|0}function Fu(a){a=a|0;if((a|0)<65)return a|0;if((a|0)>90)return a|0;return a-65+97|0}function Gu(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}I=0;return b>>>c-32|0}function Hu(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){I=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}I=(b|0)<0?-1:0;return b>>c-32|0}function Iu(b){b=b|0;var c=0;c=a[n+(b>>>24)|0]|0;if((c|0)<8)return c|0;c=a[n+(b>>16&255)|0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>8&255)|0]|0;if((c|0)<8)return c+16|0;return(a[n+(b&255)|0]|0)+24|0}function Ju(b){b=b|0;var c=0;c=a[m+(b&255)|0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)|0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)|0]|0;if((c|0)<8)return c+16|0;return(a[m+(b>>>24)|0]|0)+24|0}function Ku(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=a&65535;d=b&65535;e=ea(d,c)|0;f=a>>>16;a=(e>>>16)+(ea(d,f)|0)|0;d=b>>>16;b=ea(d,c)|0;return(I=(a>>>16)+(ea(d,f)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|e&65535|0)|0}function Lu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;g=d>>31|((d|0)<0?-1:0)<<1;h=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;i=xu(e^a,f^b,e,f)|0;b=I;a=g^e;e=h^f;f=xu((Qu(i,b,xu(g^c,h^d,g,h)|0,I,0)|0)^a,I^e,a,e)|0;return f|0}function Mu(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+8|0;g=f|0;h=b>>31|((b|0)<0?-1:0)<<1;j=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;k=e>>31|((e|0)<0?-1:0)<<1;l=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;m=xu(h^a,j^b,h,j)|0;b=I;Qu(m,b,xu(k^d,l^e,k,l)|0,I,g)|0;l=xu(c[g>>2]^h,c[g+4>>2]^j,h,j)|0;j=I;i=f;return(I=j,l)|0}function Nu(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;a=c;c=Ku(e,a)|0;f=I;return(I=(ea(b,a)|0)+(ea(d,e)|0)+f|f&0,c|0|0)|0}function Ou(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Qu(a,b,c,d,0)|0;return e|0}function Pu(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+8|0;g=f|0;Qu(a,b,d,e,g)|0;i=f;return(I=c[g+4>>2]|0,c[g>>2]|0)|0}function Qu(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,J=0,K=0,L=0,M=0;g=a;h=b;i=h;j=d;k=e;l=k;if((i|0)==0){m=(f|0)!=0;if((l|0)==0){if(m){c[f>>2]=(g>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(g>>>0)/(j>>>0)>>>0;return(I=n,o)|0}else{if(!m){n=0;o=0;return(I=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;n=0;o=0;return(I=n,o)|0}}m=(l|0)==0;do{if((j|0)==0){if(m){if((f|0)!=0){c[f>>2]=(i>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(i>>>0)/(j>>>0)>>>0;return(I=n,o)|0}if((g|0)==0){if((f|0)!=0){c[f>>2]=0;c[f+4>>2]=(i>>>0)%(l>>>0)}n=0;o=(i>>>0)/(l>>>0)>>>0;return(I=n,o)|0}p=l-1|0;if((p&l|0)==0){if((f|0)!=0){c[f>>2]=a|0;c[f+4>>2]=p&i|b&0}n=0;o=i>>>((Ju(l|0)|0)>>>0);return(I=n,o)|0}p=(Iu(l|0)|0)-(Iu(i|0)|0)|0;if(p>>>0<=30){q=p+1|0;r=31-p|0;s=q;t=i<<r|g>>>(q>>>0);u=i>>>(q>>>0);v=0;w=g<<r;break}if((f|0)==0){n=0;o=0;return(I=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(I=n,o)|0}else{if(!m){r=(Iu(l|0)|0)-(Iu(i|0)|0)|0;if(r>>>0<=31){q=r+1|0;p=31-r|0;x=r-31>>31;s=q;t=g>>>(q>>>0)&x|i<<p;u=i>>>(q>>>0)&x;v=0;w=g<<p;break}if((f|0)==0){n=0;o=0;return(I=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(I=n,o)|0}p=j-1|0;if((p&j|0)!=0){x=(Iu(j|0)|0)+33-(Iu(i|0)|0)|0;q=64-x|0;r=32-x|0;y=r>>31;z=x-32|0;A=z>>31;s=x;t=r-1>>31&i>>>(z>>>0)|(i<<r|g>>>(x>>>0))&A;u=A&i>>>(x>>>0);v=g<<q&y;w=(i<<q|g>>>(z>>>0))&y|g<<r&x-33>>31;break}if((f|0)!=0){c[f>>2]=p&g;c[f+4>>2]=0}if((j|0)==1){n=h|b&0;o=a|0|0;return(I=n,o)|0}else{p=Ju(j|0)|0;n=i>>>(p>>>0)|0;o=i<<32-p|g>>>(p>>>0)|0;return(I=n,o)|0}}}while(0);if((s|0)==0){B=w;C=v;D=u;E=t;F=0;G=0}else{g=d|0|0;d=k|e&0;e=yu(g,d,-1,-1)|0;k=I;i=w;w=v;v=u;u=t;t=s;s=0;while(1){H=w>>>31|i<<1;J=s|w<<1;j=u<<1|i>>>31|0;a=u>>>31|v<<1|0;xu(e,k,j,a)|0;b=I;h=b>>31|((b|0)<0?-1:0)<<1;K=h&1;L=xu(j,a,h&g,(((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1)&d)|0;M=I;b=t-1|0;if((b|0)==0){break}else{i=H;w=J;v=M;u=L;t=b;s=K}}B=H;C=J;D=M;E=L;F=0;G=K}K=C;C=0;if((f|0)!=0){c[f>>2]=E;c[f+4>>2]=D}n=(K|0)>>>31|(B|C)<<1|(C<<1|K>>>31)&0|F;o=(K<<1|0>>>31)&-2|G;return(I=n,o)|0}function Ru(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Gh[a&31](b|0,c|0,d|0,e|0,f|0)}function Su(a,b){a=a|0;b=+b;Hh[a&3](+b)}function Tu(a,b,c){a=a|0;b=b|0;c=+c;Ih[a&3](b|0,+c)}function Uu(a,b){a=a|0;b=b|0;Jh[a&127](b|0)}function Vu(a,b,c){a=a|0;b=b|0;c=c|0;Kh[a&63](b|0,c|0)}function Wu(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return Lh[a&3](b|0,c|0,d|0,e|0,f|0,g|0)|0}function Xu(a,b){a=a|0;b=b|0;return Mh[a&31](b|0)|0}function Yu(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=+d;e=+e;Nh[a&3](b|0,+c,+d,+e)}function Zu(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return Oh[a&3](b|0,c|0,d|0,e|0,f|0)|0}function _u(a,b,c,d){a=a|0;b=b|0;c=+c;d=+d;Ph[a&3](b|0,+c,+d)}function $u(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Qh[a&15](b|0,c|0,d|0)|0}function av(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;Rh[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function bv(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Sh[a&7](b|0,c|0,d|0,e|0,f|0,g|0)}function cv(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Th[a&63](b|0,c|0,d|0)}function dv(a,b,c,d,e,f){a=a|0;b=b|0;c=+c;d=+d;e=+e;f=+f;Uh[a&3](b|0,+c,+d,+e,+f)}function ev(a,b,c){a=a|0;b=+b;c=c|0;Vh[a&1](+b,c|0)}function fv(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;Wh[a&15](b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function gv(a,b,c,d,e,f,g,h,i,j){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;Xh[a&3](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0,j|0)}function hv(a,b,c){a=a|0;b=b|0;c=c|0;return Yh[a&15](b|0,c|0)|0}function iv(a){a=a|0;return Zh[a&3]()|0}function jv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return _h[a&3](b|0,c|0,d|0,e|0)|0}function kv(a,b,c,d,e,f,g){a=a|0;b=+b;c=+c;d=+d;e=+e;f=+f;g=+g;$h[a&1](+b,+c,+d,+e,+f,+g)}function lv(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;ai[a&3](+b,+c,+d,+e)}function mv(a,b,c){a=a|0;b=+b;c=+c;bi[a&3](+b,+c)}function nv(a){a=a|0;ci[a&15]()}function ov(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;di[a&1](b|0,c|0,+d)}function pv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ei[a&63](b|0,c|0,d|0,e|0)}function qv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;fa(0)}function rv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ad(a|0,b|0,c|0,d|0,e|0)}function sv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Ib(a|0,b|0,c|0,d|0,e|0)}function tv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Jg(a|0,b|0,c|0,d|0,e|0)}function uv(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;bf(a|0,b|0,c|0,d|0,e|0)}function vv(a){a=+a;fa(1)}function wv(a){a=+a;Yc(+a)}function xv(a){a=+a;rg(+a)}function yv(a){a=+a;_g(+a)}function zv(a,b){a=a|0;b=+b;fa(2)}function Av(a,b){a=a|0;b=+b;Va(a|0,+b)}function Bv(a,b){a=a|0;b=+b;Ae(a|0,+b)}function Cv(a){a=a|0;fa(3)}function Dv(a){a=a|0;Le(a|0)}function Ev(a){a=a|0;vf(a|0)}function Fv(a){a=a|0;Sg(a|0)}function Gv(a){a=a|0;zf(a|0)}function Hv(a){a=a|0;he(a|0)}function Iv(a){a=a|0;Mc(a|0)}function Jv(a){a=a|0;xh(a|0)}function Kv(a){a=a|0;Te(a|0)}function Lv(a){a=a|0;He(a|0)}function Mv(a){a=a|0;zg(a|0)}function Nv(a){a=a|0;ug(a|0)}function Ov(a){a=a|0;pf(a|0)}function Pv(a){a=a|0;Qe(a|0)}function Qv(a){a=a|0;rc(a|0)}function Rv(a){a=a|0;Qa(a|0)}function Sv(a){a=a|0;Ag(a|0)}function Tv(a){a=a|0;$e(a|0)}function Uv(a){a=a|0;ee(a|0)}function Vv(a){a=a|0;mc(a|0)}function Wv(a){a=a|0;Kc(a|0)}function Xv(a){a=a|0;Wc(a|0)}function Yv(a){a=a|0;Zg(a|0)}function Zv(a){a=a|0;ed(a|0)}function _v(a){a=a|0;sh(a|0)}function $v(a){a=a|0;yh(a|0)}function aw(a){a=a|0;_b(a|0)}function bw(a,b){a=a|0;b=b|0;fa(4)}function cw(a,b){a=a|0;b=b|0;Xd(a|0,b|0)}function dw(a,b){a=a|0;b=b|0;df(a|0,b|0)}function ew(a,b){a=a|0;b=b|0;Pa(a|0,b|0)}function fw(a,b){a=a|0;b=b|0;ic(a|0,b|0)}function gw(a,b){a=a|0;b=b|0;tc(a|0,b|0)}function hw(a,b){a=a|0;b=b|0;Ee(a|0,b|0)}function iw(a,b){a=a|0;b=b|0;Ad(a|0,b|0)}function jw(a,b){a=a|0;b=b|0;Ld(a|0,b|0)}function kw(a,b){a=a|0;b=b|0;wc(a|0,b|0)}function lw(a,b){a=a|0;b=b|0;zh(a|0,b|0)}function mw(a,b){a=a|0;b=b|0;Md(a|0,b|0)}function nw(a,b){a=a|0;b=b|0;af(a|0,b|0)}function ow(a,b){a=a|0;b=b|0;Dg(a|0,b|0)}function pw(a,b){a=a|0;b=b|0;Wa(a|0,b|0)}function qw(a,b){a=a|0;b=b|0;hc(a|0,b|0)}function rw(a,b){a=a|0;b=b|0;ac(a|0,b|0)}function sw(a,b){a=a|0;b=b|0;ib(a|0,b|0)}function tw(a,b){a=a|0;b=b|0;uf(a|0,b|0)}function uw(a,b){a=a|0;b=b|0;Ab(a|0,b|0)}function vw(a,b){a=a|0;b=b|0;ab(a|0,b|0)}function ww(a,b){a=a|0;b=b|0;Kf(a|0,b|0)}function xw(a,b){a=a|0;b=b|0;Cg(a|0,b|0)}function yw(a,b){a=a|0;b=b|0;eh(a|0,b|0)}function zw(a,b){a=a|0;b=b|0;Df(a|0,b|0)}function Aw(a,b){a=a|0;b=b|0;cg(a|0,b|0)}function Bw(a,b){a=a|0;b=b|0;nf(a|0,b|0)}function Cw(a,b){a=a|0;b=b|0;jg(a|0,b|0)}function Dw(a,b){a=a|0;b=b|0;_d(a|0,b|0)}function Ew(a,b){a=a|0;b=b|0;uc(a|0,b|0)}function Fw(a,b){a=a|0;b=b|0;dd(a|0,b|0)}function Gw(a,b){a=a|0;b=b|0;$f(a|0,b|0)}function Hw(a,b){a=a|0;b=b|0;nc(a|0,b|0)}function Iw(a,b){a=a|0;b=b|0;vh(a|0,b|0)}function Jw(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;fa(5);return 0}function Kw(a){a=a|0;fa(6);return 0}function Lw(a){a=a|0;return ag(a|0)|0}function Mw(a){a=a|0;return th(a|0)|0}function Nw(a){a=a|0;return ze(a|0)|0}function Ow(a){a=a|0;return of(a|0)|0}function Pw(a){a=a|0;return yd(a|0)|0}function Qw(a){a=a|0;return Qd(a|0)|0}function Rw(a){a=a|0;return Ya(a|0)|0}function Sw(a){a=a|0;return bg(a|0)|0}function Tw(a){a=a|0;return Ie(a|0)|0}function Uw(a){a=a|0;return Bc(a|0)|0}function Vw(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;fa(7)}function Ww(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;Je(a|0,+b,+c,+d)}function Xw(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;sb(a|0,+b,+c,+d)}function Yw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;fa(8);return 0}function Zw(a,b,c){a=a|0;b=+b;c=+c;fa(9)}function _w(a,b,c){a=a|0;b=+b;c=+c;eg(a|0,+b,+c)}function $w(a,b,c){a=a|0;b=+b;c=+c;Pc(a|0,+b,+c)}function ax(a,b,c){a=a|0;b=b|0;c=c|0;fa(10);return 0}function bx(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;fa(11)}function cx(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;Td(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function dx(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;Hb(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function ex(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;Eh(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0)}function fx(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;fa(12)}function gx(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Cf(a|0,b|0,c|0,d|0,e|0,f|0)}function hx(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Mf(a|0,b|0,c|0,d|0,e|0,f|0)}function ix(a,b,c){a=a|0;b=b|0;c=c|0;fa(13)}function jx(a,b,c){a=a|0;b=b|0;c=c|0;La(a|0,b|0,c|0)}function kx(a,b,c){a=a|0;b=b|0;c=c|0;Fe(a|0,b|0,c|0)}function lx(a,b,c){a=a|0;b=b|0;c=c|0;bb(a|0,b|0,c|0)}function mx(a,b,c){a=a|0;b=b|0;c=c|0;$a(a|0,b|0,c|0)}function nx(a,b,c){a=a|0;b=b|0;c=c|0;Xg(a|0,b|0,c|0)}function ox(a,b,c){a=a|0;b=b|0;c=c|0;mh(a|0,b|0,c|0)}function px(a,b,c){a=a|0;b=b|0;c=c|0;Vb(a|0,b|0,c|0)}function qx(a,b,c){a=a|0;b=b|0;c=c|0;vd(a|0,b|0,c|0)}function rx(a,b,c){a=a|0;b=b|0;c=c|0;sf(a|0,b|0,c|0)}function sx(a,b,c){a=a|0;b=b|0;c=c|0;kd(a|0,b|0,c|0)}function tx(a,b,c){a=a|0;b=b|0;c=c|0;Lg(a|0,b|0,c|0)}function ux(a,b,c){a=a|0;b=b|0;c=c|0;dg(a|0,b|0,c|0)}function vx(a,b,c){a=a|0;b=b|0;c=c|0;xb(a|0,b|0,c|0)}function wx(a,b,c){a=a|0;b=b|0;c=c|0;Bh(a|0,b|0,c|0)}function xx(a,b,c){a=a|0;b=b|0;c=c|0;le(a|0,b|0,c|0)}function yx(a,b,c){a=a|0;b=b|0;c=c|0;Nc(a|0,b|0,c|0)}function zx(a,b,c){a=a|0;b=b|0;c=c|0;Zc(a|0,b|0,c|0)}function Ax(a,b,c){a=a|0;b=b|0;c=c|0;gc(a|0,b|0,c|0)}function Bx(a,b,c){a=a|0;b=b|0;c=c|0;pc(a|0,b|0,c|0)}function Cx(a,b,c){a=a|0;b=b|0;c=c|0;dc(a|0,b|0,c|0)}function Dx(a,b,c){a=a|0;b=b|0;c=c|0;lf(a|0,b|0,c|0)}function Ex(a,b,c){a=a|0;b=b|0;c=c|0;Uf(a|0,b|0,c|0)}function Fx(a,b,c){a=a|0;b=b|0;c=c|0;ng(a|0,b|0,c|0)}function Gx(a,b,c){a=a|0;b=b|0;c=c|0;td(a|0,b|0,c|0)}function Hx(a,b,c){a=a|0;b=b|0;c=c|0;yg(a|0,b|0,c|0)}function Ix(a,b,c){a=a|0;b=b|0;c=c|0;Of(a|0,b|0,c|0)}function Jx(a,b,c){a=a|0;b=b|0;c=c|0;ig(a|0,b|0,c|0)}function Kx(a,b,c){a=a|0;b=b|0;c=c|0;Kb(a|0,b|0,c|0)}function Lx(a,b,c){a=a|0;b=b|0;c=c|0;Zb(a|0,b|0,c|0)}function Mx(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;fa(14)}function Nx(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;cd(a|0,+b,+c,+d,+e)}function Ox(a,b,c,d,e){a=a|0;b=+b;c=+c;d=+d;e=+e;cf(a|0,+b,+c,+d,+e)}function Px(a,b){a=+a;b=b|0;fa(15)}function Qx(a,b){a=+a;b=b|0;oh(+a,b|0)}function Rx(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;fa(16)}function Sx(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Uc(a|0,b|0,c|0,d|0,e|0,f|0,g|0)}function Tx(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Pg(a|0,b|0,c|0,d|0,e|0,f|0,g|0)}function Ux(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Gc(a|0,b|0,c|0,d|0,e|0,f|0,g|0)}function Vx(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;fa(17)}function Wx(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;Ce(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function Xx(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;_f(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function Yx(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;Tg(a|0,b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)}function Zx(a,b){a=a|0;b=b|0;fa(18);return 0}function _x(a,b){a=a|0;b=b|0;return Oe(a|0,b|0)|0}function $x(a,b){a=a|0;b=b|0;return nb(a|0,b|0)|0}function ay(){fa(19);return 0}function by(){return If()|0}function cy(){return Rc()|0}function dy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;fa(20);return 0}function ey(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return id(a|0,b|0,c|0,d|0)|0}function fy(a,b,c,d,e,f){a=+a;b=+b;c=+c;d=+d;e=+e;f=+f;fa(21)}function gy(a,b,c,d,e,f){a=+a;b=+b;c=+c;d=+d;e=+e;f=+f;ph(+a,+b,+c,+d,+e,+f)}function hy(a,b,c,d){a=+a;b=+b;c=+c;d=+d;fa(22)}function iy(a,b,c,d){a=+a;b=+b;c=+c;d=+d;kf(+a,+b,+c,+d)}function jy(a,b,c,d){a=+a;b=+b;c=+c;d=+d;Gf(+a,+b,+c,+d)}function ky(a,b,c,d){a=+a;b=+b;c=+c;d=+d;Rf(+a,+b,+c,+d)}function ly(a,b){a=+a;b=+b;fa(23)}function my(a,b){a=+a;b=+b;Db(+a,+b)}function ny(a,b){a=+a;b=+b;rh(+a,+b)}function oy(a,b){a=+a;b=+b;Pf(+a,+b)}function py(){fa(24)}function qy(){ch()}function ry(){gh()}function sy(){$d()}function ty(){Xc()}function uy(){kb()}function vy(a,b,c){a=a|0;b=b|0;c=+c;fa(25)}function wy(a,b,c){a=a|0;b=b|0;c=+c;hg(a|0,b|0,+c)}function xy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;fa(26)}function yy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Tc(a|0,b|0,c|0,d|0)}function zy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Jd(a|0,b|0,c|0,d|0)}function Ay(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Ke(a|0,b|0,c|0,d|0)}function By(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;db(a|0,b|0,c|0,d|0)}function Cy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;nd(a|0,b|0,c|0,d|0)}function Dy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;mf(a|0,b|0,c|0,d|0)}function Ey(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;De(a|0,b|0,c|0,d|0)}function Fy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ih(a|0,b|0,c|0,d|0)}function Gy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Yf(a|0,b|0,c|0,d|0)}function Hy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Kg(a|0,b|0,c|0,d|0)}function Iy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;yc(a|0,b|0,c|0,d|0)}function Jy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;cc(a|0,b|0,c|0,d|0)}function Ky(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;hf(a|0,b|0,c|0,d|0)}function Ly(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Fg(a|0,b|0,c|0,d|0)}function My(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Wd(a|0,b|0,c|0,d|0)}function Ny(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Sb(a|0,b|0,c|0,d|0)}function Oy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;pb(a|0,b|0,c|0,d|0)}function Py(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Vg(a|0,b|0,c|0,d|0)}function Qy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;We(a|0,b|0,c|0,d|0)}function Ry(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;fb(a|0,b|0,c|0,d|0)}function Sy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Yg(a|0,b|0,c|0,d|0)}function Ty(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;te(a|0,b|0,c|0,d|0)}function Uy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Id(a|0,b|0,c|0,d|0)}function Vy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Rb(a|0,b|0,c|0,d|0)}function Wy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Oa(a|0,b|0,c|0,d|0)}function Xy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;rb(a|0,b|0,c|0,d|0)}function Yy(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;Ec(a|0,b|0,c|0,d|0)}




// EMSCRIPTEN_END_FUNCS
var Gh=[qv,Tt,St,$s,at,bt,ct,dt,wt,vt,ut,tt,st,rt,rv,sv,tv,uv,qv,qv,qv,qv,qv,qv,qv,qv,qv,qv,qv,qv,qv,qv];var Hh=[vv,wv,xv,yv];var Ih=[zv,Av,Bv,zv];var Jh=[Cv,_i,$i,cj,dj,ej,vj,wj,zj,Aj,vm,ym,xm,Hn,Gn,Bn,Jt,Mt,Kt,Lt,Nt,cu,bu,Qi,Ri,Si,Ti,Ui,Vi,Wi,Xi,Yi,Yj,Rj,vk,Zl,Dm,Om,Dn,Ao,Do,Go,Ho,Io,Mo,Vo,Wo,Yo,cp,np,xp,zp,Bp,Jp,Np,Yp,Zp,gq,jq,mq,Ss,Ts,_s,ft,kt,Dv,Ev,Fv,Gv,Hv,Iv,Jv,Kv,Lv,Mv,Nv,Ov,Pv,Qv,Rv,Sv,Tv,Uv,Vv,Wv,Xv,Yv,Zv,_v,$v,aw,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv,Cv];var Kh=[bw,lo,mo,Co,ip,yp,Ap,Mp,Xp,fq,cw,Iq,wq,Zq,yt,nt,dw,ew,fw,gw,hw,iw,jw,kw,lw,mw,nw,ow,pw,qw,rw,sw,tw,uw,vw,ww,xw,yw,zw,Aw,Bw,Cw,Dw,Ew,Fw,Gw,Hw,Iw,bw,bw,bw,bw,bw,bw,bw,bw,bw,bw,bw,bw,bw,bw,bw,bw];var Lh=[Jw,Hp,Ip,Jw];var Mh=[Kw,du,Bo,Fo,No,Oo,Po,Qo,Dq,Us,Ws,Lw,Mw,Nw,Ow,Pw,Qw,Rw,Sw,Tw,Uw,Kw,Kw,Kw,Kw,Kw,Kw,Kw,Kw,Kw,Kw,Kw];var Nh=[Vw,Ww,Xw,Vw];var Oh=[Yw,Kp,Lp,Yw];var Ph=[Zw,_w,$w,Zw];var Qh=[ax,Ot,Dp,Ep,Vq,Mq,vq,Ms,xt,ax,ax,ax,ax,ax,ax,ax];var Rh=[bx,cx,dx,ex];var Sh=[fx,Vt,Ut,gx,hx,fx,fx,fx];var Th=[ix,io,Wq,lr,kr,jx,kx,lx,mx,nx,ox,px,qx,rx,sx,tx,ux,vx,wx,xx,yx,zx,Ax,Bx,Cx,Dx,Ex,Fx,Gx,Hx,Ix,Jx,Kx,Lx,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix,ix];var Uh=[Mx,Nx,Ox,Mx];var Vh=[Px,Qx];var Wh=[Rx,Zo,$o,jp,kp,lp,op,Sx,Tx,Ux,Rx,Rx,Rx,Rx,Rx,Rx];var Xh=[Vx,Wx,Xx,Yx];var Yh=[Zx,Jo,dp,ep,fp,gp,_q,Vs,Xs,Ys,lt,_x,$x,Zx,Zx,Zx];var Zh=[ay,by,cy,ay];var _h=[dy,Fp,Gp,ey];var $h=[fy,gy];var ai=[hy,iy,jy,ky];var bi=[ly,my,ny,oy];var ci=[py,oj,Fk,Fl,qy,ry,sy,ty,uy,py,py,py,py,py,py,py];var di=[vy,wy];var ei=[xy,Pt,Qt,_o,ap,vp,up,sp,qp,pp,rp,tp,$p,aq,bq,cq,dq,iq,kq,lq,$q,Nq,ot,pt,qt,yy,zy,Ay,By,Cy,Dy,Ey,Fy,Gy,Hy,Iy,Jy,Ky,Ly,My,Ny,Oy,Py,Qy,Ry,Sy,Ty,Uy,Vy,Wy,Xy,Yy,xy,xy,xy,xy,xy,xy,xy,xy,xy,xy,xy,xy];return{_testSetjmp:zu,_saveSetjmp:su,_strcat:wu,_free:Yt,_main:nl,_rand_r:Du,_i64Add:yu,_memmove:Au,_strstr:Ht,_tolower:Fu,_i64Subtract:xu,_memset:vu,_malloc:Xt,_memcpy:tu,_strlen:uu,_emscripten_GetProcAddress:Wt,_bitshift64Shl:Bu,_strcpy:Cu,_rand:Eu,__GLOBAL__I_a:gj,__GLOBAL__I_a206:tl,__GLOBAL__I_a373:hm,__GLOBAL__I_a639:An,__GLOBAL__I_a751:Pn,__GLOBAL__I_a855:go,runPostSets:ru,stackAlloc:fi,stackSave:gi,stackRestore:hi,setThrew:ii,setTempRet0:li,setTempRet1:mi,setTempRet2:ni,setTempRet3:oi,setTempRet4:pi,setTempRet5:qi,setTempRet6:ri,setTempRet7:si,setTempRet8:ti,setTempRet9:ui,dynCall_viiiii:Ru,dynCall_vd:Su,dynCall_vid:Tu,dynCall_vi:Uu,dynCall_vii:Vu,dynCall_iiiiiii:Wu,dynCall_ii:Xu,dynCall_viddd:Yu,dynCall_iiiiii:Zu,dynCall_vidd:_u,dynCall_iiii:$u,dynCall_viiiiiiii:av,dynCall_viiiiii:bv,dynCall_viii:cv,dynCall_vidddd:dv,dynCall_vdi:ev,dynCall_viiiiiii:fv,dynCall_viiiiiiiii:gv,dynCall_iii:hv,dynCall_i:iv,dynCall_iiiii:jv,dynCall_vdddddd:kv,dynCall_vdddd:lv,dynCall_vdd:mv,dynCall_v:nv,dynCall_viid:ov,dynCall_viiii:pv}})


// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_viiiii": invoke_viiiii, "invoke_vd": invoke_vd, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viddd": invoke_viddd, "invoke_iiiiii": invoke_iiiiii, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viii": invoke_viii, "invoke_vidddd": invoke_vidddd, "invoke_vdi": invoke_vdi, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iii": invoke_iii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_vdddddd": invoke_vdddddd, "invoke_vdddd": invoke_vdddd, "invoke_vdd": invoke_vdd, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiii": invoke_viiii, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_fabs": _fabs, "__inet_ntop6_raw": __inet_ntop6_raw, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_glTranslatef": _glTranslatef, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_glStencilFunc": _glStencilFunc, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_puts": _puts, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_ftell": _ftell, "_glOrtho": _glOrtho, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "__inet_ntop4_raw": __inet_ntop4_raw, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_SDL_GetTicks": _SDL_GetTicks, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_SDL_GetKeyboardState": _SDL_GetKeyboardState, "_glDepthMask": _glDepthMask, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_glViewport": _glViewport, "_emscripten_glFlush": _emscripten_glFlush, "_sprintf": _sprintf, "_dlopen": _dlopen, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_glAttachShader": _glAttachShader, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_glGenTextures": _glGenTextures, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_pthread_mutex_lock": _pthread_mutex_lock, "_readdir_r": _readdir_r, "_glCullFace": _glCullFace, "_lseek": _lseek, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_glClearColor": _glClearColor, "_SDL_Quit": _SDL_Quit, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_glDrawArrays": _glDrawArrays, "_glGetError": _glGetError, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_sqrtf": _sqrtf, "_glActiveTexture": _glActiveTexture, "_SDL_NumJoysticks": _SDL_NumJoysticks, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_Mix_VolumeMusic": _Mix_VolumeMusic, "_fopen": _fopen, "_getgid": _getgid, "_sin": _sin, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_SDL_JoystickOpened": _SDL_JoystickOpened, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "__read_sockaddr": __read_sockaddr, "_glLinkProgram": _glLinkProgram, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_sscanf": _sscanf, "_fileno": _fileno, "_glMatrixMode": _glMatrixMode, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_glVertex3f": _glVertex3f, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_dlclose": _dlclose, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "___cxa_throw": ___cxa_throw, "_SDL_GetKeyState": _SDL_GetKeyState, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_pthread_mutex_init": _pthread_mutex_init, "_glUseProgram": _glUseProgram, "_fread": _fread, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_atexit": _atexit, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_glPushMatrix": _glPushMatrix, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_glColor4f": _glColor4f, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_readdir": _readdir, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_glLoadIdentity": _glLoadIdentity, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_write": _write, "_fsync": _fsync, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "___cxa_does_inherit": ___cxa_does_inherit, "_SDL_JoystickOpen": _SDL_JoystickOpen, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emulGlDeleteVertexArrays": _emulGlDeleteVertexArrays, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_glHint": _glHint, "_SDL_GL_SetAttribute": _SDL_GL_SetAttribute, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_emscripten_glClear": _emscripten_glClear, "___cxa_guard_release": ___cxa_guard_release, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "___setErrNo": ___setErrNo, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "___resumeException": ___resumeException, "_emscripten_glGetError": _emscripten_glGetError, "_putchar": _putchar, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_glGetIntegerv": _glGetIntegerv, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_fwrite": _fwrite, "_chdir": _chdir, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_llvm_pow_f64": _llvm_pow_f64, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_SDL_PumpEvents": _SDL_PumpEvents, "_readlink": _readlink, "_glBindTexture": _glBindTexture, "_snprintf": _snprintf, "_glGetFloatv": _glGetFloatv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_glReadPixels": _glReadPixels, "_emulGlGenVertexArrays": _emulGlGenVertexArrays, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_SDL_GetVideoSurface": _SDL_GetVideoSurface, "_SDL_PauseAudio": _SDL_PauseAudio, "_SDL_GL_GetProcAddress": _SDL_GL_GetProcAddress, "_recv": _recv, "_glFrontFace": _glFrontFace, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_send": _send, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_abs": _abs, "_isspace": _isspace, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_realpath": _realpath, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_fflush": _fflush, "_SDL_GetVideoInfo": _SDL_GetVideoInfo, "_SDL_PollEvent": _SDL_PollEvent, "_Mix_OpenAudio": _Mix_OpenAudio, "_fseek": _fseek, "__exit": __exit, "_glBindAttribLocation": _glBindAttribLocation, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_glEnd": _glEnd, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_emscripten_glIsShader": _emscripten_glIsShader, "_copysign": _copysign, "_fputc": _fputc, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_glMultMatrixf": _glMultMatrixf, "_glDisable": _glDisable, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_SDL_WM_ToggleFullScreen": _SDL_WM_ToggleFullScreen, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_dlsym": _dlsym, "__ZSt9terminatev": __ZSt9terminatev, "_sendto": _sendto, "___cxa_guard_acquire": ___cxa_guard_acquire, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_glDeleteProgram": _glDeleteProgram, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_Mix_AllocateChannels": _Mix_AllocateChannels, "_SDL_GetError": _SDL_GetError, "_glBlendFunc": _glBlendFunc, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_glb_init_multitouch": _glb_init_multitouch, "_glCreateShader": _glCreateShader, "_sysconf": _sysconf, "_glTexCoord2f": _glTexCoord2f, "_pthread_mutexattr_settype": _pthread_mutexattr_settype, "_glShaderSource": _glShaderSource, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "_emscripten_glScissor": _emscripten_glScissor, "_glVertexPointer": _glVertexPointer, "_glGetBooleanv": _glGetBooleanv, "_closedir": _closedir, "_llvm_trap": _llvm_trap, "_glPixelStorei": _glPixelStorei, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_glVertexAttribPointer": _glVertexAttribPointer, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "_glDeleteTextures": _glDeleteTextures, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_glEnable": _glEnable, "_glGetString": _glGetString, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_glBindBuffer": _glBindBuffer, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_fprintf": _fprintf, "_glDetachShader": _glDetachShader, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_SDL_ShowCursor": _SDL_ShowCursor, "_fmod": _fmod, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_sbrk": _sbrk, "_glEnableClientState": _glEnableClientState, "_glIsEnabled": _glIsEnabled, "_SDL_Init": _SDL_Init, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_getenv": _getenv, "_fclose": _fclose, "_glTexCoordPointer": _glTexCoordPointer, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "__getFloat": __getFloat, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "__inet_pton6_raw": __inet_pton6_raw, "_pthread_mutexattr_destroy": _pthread_mutexattr_destroy, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "__reallyNegative": __reallyNegative, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_glClear": _glClear, "_glPopMatrix": _glPopMatrix, "_SDL_WM_SetCaption": _SDL_WM_SetCaption, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_pread": _pread, "_mkport": _mkport, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_rmdir": _rmdir, "_glColorMask": _glColorMask, "_emscripten_glClearColor": _emscripten_glClearColor, "_glCopyTexSubImage2D": _glCopyTexSubImage2D, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_glTexParameteri": _glTexParameteri, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_glTexParameterf": _glTexParameterf, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_glb_get_gravity": _glb_get_gravity, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_longjmp": _longjmp, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_ceilf": _ceilf, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_SDL_JoystickClose": _SDL_JoystickClose, "_close": _close, "_glStencilOp": _glStencilOp, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_cos": _cos, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_glBegin": _glBegin, "_atan2": _atan2, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_strtol": _strtol, "_opendir": _opendir, "_Mix_HaltMusic": _Mix_HaltMusic, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_glDepthFunc": _glDepthFunc, "___cxa_allocate_exception": ___cxa_allocate_exception, "_unlink": _unlink, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "___buildEnvironment": ___buildEnvironment, "_printf": _printf, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_setsockopt": _setsockopt, "_llvm_bswap_i32": _llvm_bswap_i32, "_emulGlBindVertexArray": _emulGlBindVertexArray, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glEnable": _emscripten_glEnable, "_read": _read, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_time": _time, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_exit": _exit, "__inet_pton4_raw": __inet_pton4_raw, "_glLoadMatrixf": _glLoadMatrixf, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_pwrite": _pwrite, "_open": _open, "_remove": _remove, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_SDL_WM_GrabInput": _SDL_WM_GrabInput, "__scanString": __scanString, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_emscripten_glColorPointer": _emscripten_glColorPointer, "__parseInt": __parseInt, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_glCompileShader": _glCompileShader, "_shutdown": _shutdown, "_glRotatef": _glRotatef, "_abort": _abort, "_glTexImage2D": _glTexImage2D, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_glDisableClientState": _glDisableClientState, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "___cxa_is_number_type": ___cxa_is_number_type, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_SDL_CloseAudio": _SDL_CloseAudio, "_usleep": _usleep, "_glb_get_multitouch_info": _glb_get_multitouch_info, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_glColorPointer": _glColorPointer, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glFrustum": _emscripten_glFrustum, "_Mix_FreeChunk": _Mix_FreeChunk, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_fputs": _fputs, "_emscripten_glHint": _emscripten_glHint, "_glShadeModel": _glShadeModel, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_htons": _htons, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_pthread_mutexattr_init": _pthread_mutexattr_init, "_SDL_GL_SwapBuffers": _SDL_GL_SwapBuffers, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "___rand_seed": ___rand_seed, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdout": _stdout }, buffer);
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _rand = Module["_rand"] = asm["_rand"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a206 = Module["__GLOBAL__I_a206"] = asm["__GLOBAL__I_a206"];
var __GLOBAL__I_a373 = Module["__GLOBAL__I_a373"] = asm["__GLOBAL__I_a373"];
var __GLOBAL__I_a639 = Module["__GLOBAL__I_a639"] = asm["__GLOBAL__I_a639"];
var __GLOBAL__I_a751 = Module["__GLOBAL__I_a751"] = asm["__GLOBAL__I_a751"];
var __GLOBAL__I_a855 = Module["__GLOBAL__I_a855"] = asm["__GLOBAL__I_a855"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






